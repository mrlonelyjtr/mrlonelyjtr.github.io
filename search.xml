[{"title":"[LeetCode] Problem 137 - Single Number II","url":"http://yoursite.com/2017/09/16/LeetCode-Problem-137-Single-Number-II/","content":"<p>Given an array of integers, every element appears three times except for one, which appears exactly once. Find that single one.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<h2 id=\"Improvement\"><a href=\"#Improvement\" class=\"headerlink\" title=\"Improvement\"></a>Improvement</h2>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 136 - Single Number","url":"http://yoursite.com/2017/09/16/LeetCode-Problem-136-Single-Number/","content":"<p>Given an array of integers, every element appears twice except for one. Find that single one.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> n : nums)</div><div class=\"line\">        num ^= n;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> num;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 124 - Binary Tree Maximum Path Sum","url":"http://yoursite.com/2017/09/16/LeetCode-Problem-124-Binary-Tree-Maximum-Path-Sum/","content":"<p>Given a binary tree, find the maximum path sum.</p>\n<p>For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Given the binary tree [2, 1, 3]<br>Return 6.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    TreeNode left;</div><div class=\"line\">    TreeNode right;</div><div class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> max = Integer.MIN_VALUE;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxPathSum</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</div><div class=\"line\">    maxPathSumHelper(root);</div><div class=\"line\">    <span class=\"keyword\">return</span> max;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">maxPathSumHelper</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> left = Math.max(maxPathSumHelper(root.left), <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span> right = Math.max(maxPathSumHelper(root.right), <span class=\"number\">0</span>);</div><div class=\"line\">    max = Math.max(max, root.val + left + right);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> Math.max(left, right) + root.val;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 109 - Convert Sorted List to Binary Search Tree","url":"http://yoursite.com/2017/09/15/LeetCode-Problem-109-Convert-Sorted-List-to-Binary-Search-Tree/","content":"<p>Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</div><div class=\"line\">    ListNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    TreeNode left;</div><div class=\"line\">    TreeNode right;</div><div class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// O(n) runtime, O(logn) stack space – Bottom-up recursion</span></div><div class=\"line\"><span class=\"keyword\">private</span> ListNode current;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">sortedListToBST</span><span class=\"params\">(ListNode head)</span> </span>&#123;</div><div class=\"line\">    ListNode node = head;</div><div class=\"line\">    current = head;</div><div class=\"line\">    <span class=\"keyword\">int</span> length = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (node != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        length++;</div><div class=\"line\">        node = node.next;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> sortedListToBSTHelper(<span class=\"number\">0</span>, length - <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">sortedListToBSTHelper</span><span class=\"params\">(<span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (start &gt; end)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> mid = (start + end) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    TreeNode left = sortedListToBSTHelper(start, mid - <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    TreeNode parent = <span class=\"keyword\">new</span> TreeNode(current.val);</div><div class=\"line\">    parent.left = left;</div><div class=\"line\">    current = current.next;</div><div class=\"line\"></div><div class=\"line\">    TreeNode right = sortedListToBSTHelper(mid + <span class=\"number\">1</span>, end);</div><div class=\"line\">    parent.right = right;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> parent;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 108 - Convert Sorted Array to Binary Search Tree","url":"http://yoursite.com/2017/09/15/LeetCode-Problem-108-Convert-Sorted-Array-to-Binary-Search-Tree/","content":"<p>Given an array where elements are sorted in ascending order, convert it to a height balanced BST.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    TreeNode left;</div><div class=\"line\">    TreeNode right;</div><div class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// O(n) runtime, O(log n) stack space</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">sortedArrayToBST</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || nums.length &lt; <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> sortedArrayToBSTHelper(nums, <span class=\"number\">0</span>, nums.length - <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">sortedArrayToBSTHelper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (start &gt; end)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (start == end)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TreeNode(nums[start]);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> mid = (start + end) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    TreeNode root = <span class=\"keyword\">new</span> TreeNode(nums[mid]);</div><div class=\"line\"></div><div class=\"line\">    root.left = sortedArrayToBSTHelper(nums, start, mid - <span class=\"number\">1</span>);</div><div class=\"line\">    root.right = sortedArrayToBSTHelper(nums, mid + <span class=\"number\">1</span>, end);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> root;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 110 - Balanced Binary Tree","url":"http://yoursite.com/2017/09/15/LeetCode-Problem-110-Balanced-Binary-Tree/","content":"<p>Given a binary tree, determine if it is height-balanced.</p>\n<p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    TreeNode left;</div><div class=\"line\">    TreeNode right;</div><div class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// O(n) runtime, O(n) stack space – Bottom-up recursion</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBalanced</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> maxDepth(root) ==  -<span class=\"number\">1</span> ? <span class=\"keyword\">false</span> : <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> leftDepth = maxDepth(root.left);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (leftDepth == -<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> rightDepth = maxDepth(root.right);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (rightDepth == -<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> (Math.abs(leftDepth - rightDepth) &gt; <span class=\"number\">1</span>) ? -<span class=\"number\">1</span> : Math.max(leftDepth, rightDepth) + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 111 - Minimum Depth of Binary Tree","url":"http://yoursite.com/2017/09/15/LeetCode-Problem-111-Minimum-Depth-of-Binary-Tree/","content":"<p>Given a binary tree, find its minimum depth.</p>\n<p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p>\n<h2 id=\"O-n-runtime-O-log-n-space-–-Depth-first-traversal\"><a href=\"#O-n-runtime-O-log-n-space-–-Depth-first-traversal\" class=\"headerlink\" title=\"O(n) runtime, O(log n) space – Depth-first traversal\"></a>O(n) runtime, O(log n) space – Depth-first traversal</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    TreeNode left;</div><div class=\"line\">    TreeNode right;</div><div class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (root.left == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> minDepth(root.right) + <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (root.right == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> minDepth(root.left) + <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> Math.min(minDepth(root.right), minDepth(root.left)) + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"O-n-runtime-O-n-space-–-Breadth-first-traversal\"><a href=\"#O-n-runtime-O-n-space-–-Breadth-first-traversal\" class=\"headerlink\" title=\"O(n) runtime, O(n) space – Breadth-first traversal\"></a>O(n) runtime, O(n) space – Breadth-first traversal</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    TreeNode left;</div><div class=\"line\">    TreeNode right;</div><div class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</div><div class=\"line\">    queue.offer(root);</div><div class=\"line\">    TreeNode levelEnd = root;</div><div class=\"line\">    <span class=\"keyword\">int</span> depth = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</div><div class=\"line\">        TreeNode current = queue.poll();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (current.left == <span class=\"keyword\">null</span> &amp;&amp; current.right == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (current.left != <span class=\"keyword\">null</span>)</div><div class=\"line\">            queue.offer(current.left);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (current.right != <span class=\"keyword\">null</span>)</div><div class=\"line\">            queue.offer(current.right);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (current == levelEnd) &#123;</div><div class=\"line\">            levelEnd = current.right == <span class=\"keyword\">null</span> ? current.left : current.right;</div><div class=\"line\">            depth++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> depth;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 104 - Maximum Depth of Binary Tree","url":"http://yoursite.com/2017/09/15/LeetCode-Problem-104-Maximum-Depth-of-Binary-Tree/","content":"<p>Given a binary tree, find its maximum depth.</p>\n<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    TreeNode left;</div><div class=\"line\">    TreeNode right;</div><div class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// O(n) runtime, O(log n) space – Recursion</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> leftDepth = maxDepth(root.left);</div><div class=\"line\">    <span class=\"keyword\">int</span> rightDepth = maxDepth(root.right);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> Math.max(leftDepth, rightDepth) + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 98 - Validate Binary Search Tree","url":"http://yoursite.com/2017/09/14/LeetCode-Problem-98-Validate-Binary-Search-Tree/","content":"<p>Given a binary tree, determine if it is a valid binary search tree (BST).</p>\n<p>Assume a BST is defined as follows:</p>\n<p>The left subtree of a node contains only nodes with keys less than the node’s key.<br>The right subtree of a node contains only nodes with keys greater than the node’s key.<br>Both the left and right subtrees must also be binary search trees.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Binary tree [2,1,3], return true.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Binary tree [1,2,3], return false.</p>\n<h2 id=\"O-n-runtime-O-n-stack-space-–-Top-down-recursion\"><a href=\"#O-n-runtime-O-n-stack-space-–-Top-down-recursion\" class=\"headerlink\" title=\"O(n) runtime, O(n) stack space – Top-down recursion\"></a>O(n) runtime, O(n) stack space – Top-down recursion</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    TreeNode left;</div><div class=\"line\">    TreeNode right;</div><div class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidBST</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> isValidBSTHelper(root, Long.MIN_VALUE, Long.MAX_VALUE);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidBSTHelper</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">long</span> low, <span class=\"keyword\">long</span> high)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (root.val &lt;= low || root.val &gt;= high)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> isValidBSTHelper(root.left, low, root.val) &amp;&amp; isValidBSTHelper(root.right, root.val, high);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"O-n-runtime-O-n-stack-space-–-In-order-traversal\"><a href=\"#O-n-runtime-O-n-stack-space-–-In-order-traversal\" class=\"headerlink\" title=\"O(n) runtime, O(n) stack space – In-order traversal\"></a>O(n) runtime, O(n) stack space – In-order traversal</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    TreeNode left;</div><div class=\"line\">    TreeNode right;</div><div class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> TreeNode prev = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidBST</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (isValidBST(root.left)) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (prev == <span class=\"keyword\">null</span> || root.val &gt; prev.val) &#123;</div><div class=\"line\">            prev = root;</div><div class=\"line\">            <span class=\"keyword\">return</span> isValidBST(root.right);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 138 - Copy List with Random Pointer","url":"http://yoursite.com/2017/09/14/LeetCode-Problem-138-Copy-List-with-Random-Pointer/","content":"<p>A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.</p>\n<p>Return a deep copy of the list.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomListNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> label;</div><div class=\"line\">    RandomListNode next, random;</div><div class=\"line\">    RandomListNode(<span class=\"keyword\">int</span> x) &#123; <span class=\"keyword\">this</span>.label = x; &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// O(n) runtime, O(1) space – Modify original structure</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RandomListNode <span class=\"title\">copyRandomList</span><span class=\"params\">(RandomListNode head)</span> </span>&#123;</div><div class=\"line\">    RandomListNode current = head;</div><div class=\"line\">    RandomListNode copyHead = <span class=\"keyword\">null</span>, copyCurrent = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (current != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        RandomListNode copy = <span class=\"keyword\">new</span> RandomListNode(current.label);</div><div class=\"line\">        copy.next = current.next;</div><div class=\"line\">        current.next = copy;</div><div class=\"line\">        current = copy.next;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    current = head;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (current != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (current.random != <span class=\"keyword\">null</span>)</div><div class=\"line\">            current.next.random = current.random.next;</div><div class=\"line\"></div><div class=\"line\">        current = current.next.next;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    current = head;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (current != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        copyHead = copyCurrent = current.next;</div><div class=\"line\">        current.next = current.next.next;</div><div class=\"line\">        current = copyCurrent.next;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (current != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        copyCurrent.next = current.next;</div><div class=\"line\">        current.next = current.next.next;</div><div class=\"line\">        copyCurrent = copyCurrent.next;</div><div class=\"line\">        current = current.next;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> copyHead;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 23 - Merge K Sorted Linked Lists","url":"http://yoursite.com/2017/09/14/LeetCode-Problem-23-Merge-K-Sorted-Linked-Lists/","content":"<p>Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p>\n<h2 id=\"O-nklogk-runtime-O-k-space-–-Heap\"><a href=\"#O-nklogk-runtime-O-k-space-–-Heap\" class=\"headerlink\" title=\"O(nklogk) runtime, O(k) space – Heap\"></a>O(nklogk) runtime, O(k) space – Heap</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    ListNode next;</div><div class=\"line\">    ListNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeKLists</span><span class=\"params\">(ListNode[] lists)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (lists == <span class=\"keyword\">null</span> || lists.length &lt; <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    PriorityQueue&lt;ListNode&gt; minHeap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;(lists.length, (o1, o2) -&gt; o1.val - o2.val);</div><div class=\"line\"></div><div class=\"line\">    ListNode head = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</div><div class=\"line\">    ListNode current = head;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (ListNode node : lists) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (node != <span class=\"keyword\">null</span>)</div><div class=\"line\">            minHeap.add(node);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (!minHeap.isEmpty()) &#123;</div><div class=\"line\">        current.next = minHeap.poll();;</div><div class=\"line\">        current = current.next;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (current.next != <span class=\"keyword\">null</span>)</div><div class=\"line\">            minHeap.offer(current.next);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> head.next;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"O-nklogk-runtime-O-1-space-–-Divide-and-conquer-using-two-way-merge\"><a href=\"#O-nklogk-runtime-O-1-space-–-Divide-and-conquer-using-two-way-merge\" class=\"headerlink\" title=\"O(nklogk) runtime, O(1) space – Divide and conquer using two way merge\"></a>O(nklogk) runtime, O(1) space – Divide and conquer using two way merge</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    ListNode next;</div><div class=\"line\">    ListNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeKLists</span><span class=\"params\">(ListNode[] lists)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (lists == <span class=\"keyword\">null</span> || lists.length &lt; <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> partition(lists, <span class=\"number\">0</span>, lists.length - <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ListNode <span class=\"title\">partition</span><span class=\"params\">(ListNode[] lists, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (start == end)</div><div class=\"line\">        <span class=\"keyword\">return</span> lists[start];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> mid = (start + end) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    ListNode left = partition(lists, start, mid);</div><div class=\"line\">    ListNode right = partition(lists, mid + <span class=\"number\">1</span>, end);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> mergeTwoLists(left, right);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ListNode <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (l1 == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> l2;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (l2 == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> l1;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (l1.val &lt; l2.val) &#123;</div><div class=\"line\">        l1.next = mergeTwoLists(l1.next, l2);</div><div class=\"line\">        <span class=\"keyword\">return</span> l1;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        l2.next = mergeTwoLists(l1, l2.next);</div><div class=\"line\">        <span class=\"keyword\">return</span> l2;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 24 - Swap Nodes in Pairs","url":"http://yoursite.com/2017/09/13/LeetCode-Problem-24-Swap-Nodes-in-Pairs/","content":"<p>Given a linked list, swap every two adjacent nodes and return its head.</p>\n<p>Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    ListNode next;</div><div class=\"line\">    ListNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">swapPairs</span><span class=\"params\">(ListNode head)</span> </span>&#123;</div><div class=\"line\">    ListNode node = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</div><div class=\"line\">    node.next = head;</div><div class=\"line\">    ListNode prev = node;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (prev.next != <span class=\"keyword\">null</span> &amp;&amp; prev.next.next != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ListNode current = prev.next;</div><div class=\"line\">        ListNode next = prev.next.next;</div><div class=\"line\">        current.next = next.next;</div><div class=\"line\">        next.next = current;</div><div class=\"line\">        prev.next = next;</div><div class=\"line\">        prev = current;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> node.next;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 2 - Add Two Numbers","url":"http://yoursite.com/2017/09/13/LeetCode-Problem-2-Add-Two-Numbers/","content":"<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>Output: 7 -&gt; 0 -&gt; 8</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    ListNode next;</div><div class=\"line\">    ListNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">addTwoNumbers</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</div><div class=\"line\">    ListNode head = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</div><div class=\"line\">    ListNode current1 = l1;</div><div class=\"line\">    ListNode current2 = l2;</div><div class=\"line\">    ListNode current = head;</div><div class=\"line\">    <span class=\"keyword\">int</span> carry = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (current1 != <span class=\"keyword\">null</span> || current2 != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> val1 = current1 == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : current1.val;</div><div class=\"line\">        <span class=\"keyword\">int</span> val2 = current2 == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : current2.val;</div><div class=\"line\">        <span class=\"keyword\">int</span> sum = val1 + val2 + carry;</div><div class=\"line\"></div><div class=\"line\">        current.next = <span class=\"keyword\">new</span> ListNode(sum % <span class=\"number\">10</span>);</div><div class=\"line\">        carry = sum / <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">        current = current.next;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (current1 != <span class=\"keyword\">null</span>)</div><div class=\"line\">            current1 = current1.next;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (current2 != <span class=\"keyword\">null</span>)</div><div class=\"line\">            current2 = current2.next;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (carry &gt; <span class=\"number\">0</span>)</div><div class=\"line\">        current.next = <span class=\"keyword\">new</span> ListNode(carry);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> head.next;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 21 - Merge Two Sorted Lists","url":"http://yoursite.com/2017/09/13/LeetCode-Problem-21-Merge-Two-Sorted-Lists/","content":"<p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    ListNode next;</div><div class=\"line\">    ListNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (l1 == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> l2;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (l2 == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> l1;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (l1.val &lt;= l2.val) &#123;</div><div class=\"line\">        l1.next = mergeTwoLists(l1.next, l2);</div><div class=\"line\">        <span class=\"keyword\">return</span> l1;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        l2.next = mergeTwoLists(l1, l2.next);</div><div class=\"line\">        <span class=\"keyword\">return</span> l2;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 9 - Palindrome Number","url":"http://yoursite.com/2017/09/13/LeetCode-Problem-9-Palindrome-Number/","content":"<p>Determine whether an integer is a palindrome. Do this without extra space.</p>\n<h2 id=\"Some-hints\"><a href=\"#Some-hints\" class=\"headerlink\" title=\"Some hints\"></a>Some hints</h2><p>Could negative integers be palindromes? (ie, -1)</p>\n<p>If you are thinking of converting the integer to string, note the restriction of using extra space.</p>\n<p>You could also try reversing an integer. However, if you have solved the problem “Reverse Integer”, you know that the reversed integer might overflow. How would you handle such case?</p>\n<p>There is a more generic way of solving this problem.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span> || (x != <span class=\"number\">0</span> &amp;&amp; x % <span class=\"number\">10</span> == <span class=\"number\">0</span>))</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> reverseX = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (x &gt; reverseX) &#123;</div><div class=\"line\">        reverseX = reverseX * <span class=\"number\">10</span> + x % <span class=\"number\">10</span>;</div><div class=\"line\">        x /= <span class=\"number\">10</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> x == reverseX || reverseX / <span class=\"number\">10</span> == x;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 66 - Plus One","url":"http://yoursite.com/2017/09/13/LeetCode-Problem-66-Plus-One/","content":"<p>Given a non-negative integer represented as a non-empty array of digits, plus one to the integer.</p>\n<p>You may assume the integer do not contain any leading zero, except the number 0 itself.</p>\n<p>The digits are stored such that the most significant digit is at the head of the list.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] plusOne(<span class=\"keyword\">int</span>[] digits) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = digits.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (digits[i] != <span class=\"number\">9</span>) &#123;</div><div class=\"line\">            digits[i]++;</div><div class=\"line\">            <span class=\"keyword\">return</span> digits;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            digits[i] = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span>[] newDigit = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[digits.length+<span class=\"number\">1</span>];</div><div class=\"line\">    newDigit[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> newDigit;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 7 - Reverse Integer","url":"http://yoursite.com/2017/09/13/LeetCode-Problem-7-Reverse-Integer/","content":"<p>Reverse digits of an integer.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Example1: x = 123, return 321<br>Example2: x = -123, return -321</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>The input is assumed to be a 32-bit signed integer. Your function should return 0 when the reversed integer overflows.</p>\n<h2 id=\"Have-you-thought-about-this\"><a href=\"#Have-you-thought-about-this\" class=\"headerlink\" title=\"Have you thought about this?\"></a>Have you thought about this?</h2><p>Here are some good questions to ask before coding. Bonus points for you if you have already thought through this!</p>\n<p>If the integer’s last digit is 0, what should the output be? ie, cases such as 10, 100.</p>\n<p>Did you notice that the reversed integer might overflow? Assume the input is a 32-bit integer, then the reverse of 1000000003 overflows. How should you handle such cases?</p>\n<p>For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> reverseX = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (x != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Math.abs(reverseX) &gt; Integer.MAX_VALUE / <span class=\"number\">10</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        reverseX = reverseX * <span class=\"number\">10</span> + x % <span class=\"number\">10</span>;</div><div class=\"line\">        x /= <span class=\"number\">10</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> reverseX;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 5 - Longest Palindromic Substring","url":"http://yoursite.com/2017/09/12/LeetCode-Problem-5-Longest-Palindromic-Substring/","content":"<p>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: “babad”</p>\n<p>Output: “bab”</p>\n<p>Note: “aba” is also a valid answer.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: “cbbd”</p>\n<p>Output: “bb”</p>\n<h2 id=\"O-n-2-runtime-O-n-space-–-Dynamic-programming\"><a href=\"#O-n-2-runtime-O-n-space-–-Dynamic-programming\" class=\"headerlink\" title=\"O(n^2) runtime, O(n) space – Dynamic programming\"></a>O(n^2) runtime, O(n) space – Dynamic programming</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">longestPalindrome</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">    String str = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = s.length();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">1000</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> str;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">boolean</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[n][n];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// P[i, i] ← true</span></div><div class=\"line\">    <span class=\"comment\">// P[i, i+1] ← (Si = Si+1)</span></div><div class=\"line\">    <span class=\"comment\">// P[i, j] ← (P[i+1, j-1] and Si = Sj)</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; n; j++) &#123;</div><div class=\"line\">            dp[i][j] = (s.charAt(i) == s.charAt(j)) &amp;&amp; (j - i + <span class=\"number\">1</span> &lt; <span class=\"number\">3</span> || dp[i+<span class=\"number\">1</span>][j-<span class=\"number\">1</span>]);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (dp[i][j] &amp;&amp; (j - i + <span class=\"number\">1</span>) &gt; str.length())</div><div class=\"line\">                str = s.substring(i, j + <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> str;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"O-n-2-runtime-O-1-space-–-Simpler-solution\"><a href=\"#O-n-2-runtime-O-1-space-–-Simpler-solution\" class=\"headerlink\" title=\"O(n^2) runtime, O(1) space – Simpler solution\"></a>O(n^2) runtime, O(1) space – Simpler solution</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">longestPalindrome</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">    String str = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = s.length();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">1000</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> str;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> len1 = expandAroundCenter(s, i, i);</div><div class=\"line\">        <span class=\"keyword\">int</span> len2 = expandAroundCenter(s, i, i + <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">int</span> max = Math.max(len1, len2);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (max &gt; str.length())</div><div class=\"line\">            str = s.substring(i - (max - <span class=\"number\">1</span>) / <span class=\"number\">2</span>, i + <span class=\"number\">1</span> + max / <span class=\"number\">2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> str;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">expandAroundCenter</span><span class=\"params\">(String s, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; j &lt; s.length() &amp;&amp; s.charAt(i) == s.charAt(j)) &#123;</div><div class=\"line\">        i--;</div><div class=\"line\">        j++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> j - i - <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 3 - Longest Substring Without Repeating Characters","url":"http://yoursite.com/2017/09/12/LeetCode-Problem-3-Longest-Substring-Without-Repeating-Characters/","content":"<p>Given a string, find the length of the longest substring without repeating characters.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Given “abcabcbb”, the answer is “abc”, which the length is 3.</p>\n<p>Given “bbbbb”, the answer is “b”, with the length of 1.</p>\n<p>Given “pwwkew”, the answer is “wke”, with the length of 3. Note that the answer must be a substring, “pwke” is a subsequence and not a substring.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// O(n) runtime, O(1) space</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span>[] ascii = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">256</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    Arrays.fill(ascii, -<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ascii[s.charAt(i)] &gt;= idx)</div><div class=\"line\">            idx = ascii[s.charAt(i)] + <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">        ascii[s.charAt(i)] = i;</div><div class=\"line\">        max = Math.max(max, i - idx + <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> max;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 65 - Valid Number","url":"http://yoursite.com/2017/09/12/LeetCode-Problem-65-Valid-Number/","content":"<p>Validate if a given string is numeric.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>“0” =&gt; true<br>“ 0.1 “ =&gt; true<br>“abc” =&gt; false<br>“1 a” =&gt; false<br>“2e10” =&gt; true</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNumber</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> isNum = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (i &lt; s.length() &amp;&amp; Character.isWhitespace(s.charAt(i)))</div><div class=\"line\">        i++;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (i &lt; s.length() &amp;&amp; (s.charAt(i) == <span class=\"string\">'+'</span> || s.charAt(i) == <span class=\"string\">'-'</span>))</div><div class=\"line\">        i++;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (i &lt; s.length() &amp;&amp; Character.isDigit(s.charAt(i))) &#123;</div><div class=\"line\">        isNum = <span class=\"keyword\">true</span>;</div><div class=\"line\">        i++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (i &lt; s.length() &amp;&amp; s.charAt(i) == <span class=\"string\">'.'</span>) &#123;</div><div class=\"line\">        i++;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">while</span> (i &lt; s.length() &amp;&amp; Character.isDigit(s.charAt(i))) &#123;</div><div class=\"line\">            isNum = <span class=\"keyword\">true</span>;</div><div class=\"line\">            i++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (isNum &amp;&amp; i &lt; s.length() &amp;&amp; s.charAt(i) == <span class=\"string\">'e'</span>) &#123;</div><div class=\"line\">        isNum = <span class=\"keyword\">false</span>;</div><div class=\"line\">        i++;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (i &lt; s.length() &amp;&amp; (s.charAt(i) == <span class=\"string\">'+'</span> || s.charAt(i) == <span class=\"string\">'-'</span>))</div><div class=\"line\">            i++;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">while</span> (i &lt; s.length() &amp;&amp; Character.isDigit(s.charAt(i))) &#123;</div><div class=\"line\">            isNum = <span class=\"keyword\">true</span>;</div><div class=\"line\">            i++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (i &lt; s.length() &amp;&amp; Character.isWhitespace(s.charAt(i)))</div><div class=\"line\">        i++;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> isNum &amp;&amp; i == s.length();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 8 - String to Integer (atoi)","url":"http://yoursite.com/2017/09/12/LeetCode-Problem-8-String-to-Integer-atoi/","content":"<p>Implement atoi to convert a string to an integer.</p>\n<h2 id=\"Hint\"><a href=\"#Hint\" class=\"headerlink\" title=\"Hint\"></a>Hint</h2><p>Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.</p>\n<h2 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h2><p>It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front.</p>\n<h2 id=\"Requirements-for-atoi\"><a href=\"#Requirements-for-atoi\" class=\"headerlink\" title=\"Requirements for atoi\"></a>Requirements for atoi</h2><p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>\n<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>\n<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>\n<p>If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">myAtoi</span><span class=\"params\">(String str)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (i &lt; str.length() &amp;&amp; Character.isWhitespace(str.charAt(i)))</div><div class=\"line\">        i++;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (i &lt; str.length() &amp;&amp; str.charAt(i) == <span class=\"string\">'-'</span>) &#123;</div><div class=\"line\">        flag = -<span class=\"number\">1</span>;</div><div class=\"line\">        i++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i &lt; str.length() &amp;&amp; str.charAt(i) == <span class=\"string\">'+'</span>)</div><div class=\"line\">        i++;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (i &lt; str.length() &amp;&amp; Character.isDigit(str.charAt(i))) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> digit = Character.getNumericValue(str.charAt(i));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (num &gt; Integer.MAX_VALUE / <span class=\"number\">10</span> || (num == <span class=\"number\">214748364</span> &amp;&amp; digit &gt; <span class=\"number\">7</span>))</div><div class=\"line\">            <span class=\"keyword\">return</span> flag == <span class=\"number\">1</span> ? Integer.MAX_VALUE : Integer.MIN_VALUE;</div><div class=\"line\"></div><div class=\"line\">        num = <span class=\"number\">10</span> * num + digit;</div><div class=\"line\">        i++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> flag * num;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 151 - Reverse Words in a String","url":"http://yoursite.com/2017/09/12/LeetCode-Problem-151-Reverse-Words-in-a-String/","content":"<p>Given an input string, reverse the string word by word.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Given s = “the sky is blue”,<br>return “blue is sky the”.</p>\n<h2 id=\"Clarification\"><a href=\"#Clarification\" class=\"headerlink\" title=\"Clarification\"></a>Clarification</h2><ol>\n<li>What constitutes a word?<br>A sequence of non-space characters constitutes a word.</li>\n<li>Could the input string contain leading or trailing spaces?<br>Yes. However, your reversed string should not contain leading or trailing spaces.</li>\n<li>How about multiple spaces between two words?<br>Reduce them to a single space in the reversed string.</li>\n</ol>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// O(n) runtime, O(n) space</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">reverseWords</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">    <span class=\"keyword\">int</span> end = s.length();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> start = s.length() - <span class=\"number\">1</span>; start &gt;= <span class=\"number\">0</span>; start--) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (s.charAt(start) == <span class=\"string\">' '</span>)</div><div class=\"line\">            end = start;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (start == <span class=\"number\">0</span> || s.charAt(start - <span class=\"number\">1</span>) == <span class=\"string\">' '</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (sb.length() != <span class=\"number\">0</span>)</div><div class=\"line\">                sb.append(<span class=\"string\">\" \"</span>);</div><div class=\"line\">            </div><div class=\"line\">            sb.append(s.substring(start, end));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 28 - Implement strStr()","url":"http://yoursite.com/2017/09/12/LeetCode-Problem-28-Implement-strStr/","content":"<p>Implement strStr().</p>\n<p>Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// O(nm) runtime, O(1) space</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">strStr</span><span class=\"params\">(String haystack, String needle)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= haystack.length() - needle.length(); i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; ; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (j == needle.length())</div><div class=\"line\">                <span class=\"keyword\">return</span> i;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (needle.charAt(j) != haystack.charAt(i+j))</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 125 - Valid Palindrome","url":"http://yoursite.com/2017/09/12/LeetCode-Problem-125-Valid-Palindrome/","content":"<p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>“A man, a plan, a canal: Panama” is a palindrome.<br>“race a car” is not a palindrome.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>Have you consider that the string might be empty? This is a good question to ask during an interview.</p>\n<p>For the purpose of this problem, we define empty string as valid palindrome.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// O(n) runtime, O(1) space</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> end = s.length() - <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end) &#123;</div><div class=\"line\">        <span class=\"keyword\">while</span> (start &lt; end &amp;&amp; !Character.isLetterOrDigit(s.charAt(start)))</div><div class=\"line\">            start++;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">while</span> (start &lt; end &amp;&amp; !Character.isLetterOrDigit(s.charAt(end)))</div><div class=\"line\">            end--;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (Character.toLowerCase(s.charAt(start)) != Character.toLowerCase(s.charAt(end)))</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">        start++;</div><div class=\"line\">        end--;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 167 - Two Sum II - Input array is sorted","url":"http://yoursite.com/2017/09/11/LeetCode-Problem-167-Two-Sum-II-Input-array-is-sorted/","content":"<p>Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.</p>\n<p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.</p>\n<p>You may assume that each input would have exactly one solution and you may not use the same element twice.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: numbers={2, 7, 11, 15}, target=9<br>Output: index1=1, index2=2</p>\n<h2 id=\"O-nlogn-runtime-O-1-space\"><a href=\"#O-nlogn-runtime-O-1-space\" class=\"headerlink\" title=\"O(nlogn) runtime, O(1) space\"></a>O(nlogn) runtime, O(1) space</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length &amp;&amp; nums[i] &lt;= target; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> num = nums[i];</div><div class=\"line\">        <span class=\"keyword\">int</span> j = binarySearch(nums, i + <span class=\"number\">1</span>, nums.length - <span class=\"number\">1</span>, target - num);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (j != -<span class=\"number\">1</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> i &lt; j ? <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;i + <span class=\"number\">1</span>, j + <span class=\"number\">1</span>&#125; : <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;j + <span class=\"number\">1</span>, i + <span class=\"number\">1</span>&#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end, <span class=\"keyword\">int</span> target)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (start &lt;= end) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> mid = (start + end) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (nums[mid] &lt; target)</div><div class=\"line\">            start = mid + <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &gt; target)</div><div class=\"line\">            end = mid - <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"keyword\">return</span> mid;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"O-n-runtime-O-1-space\"><a href=\"#O-n-runtime-O-1-space\" class=\"headerlink\" title=\"O(n) runtime, O(1) space\"></a>O(n) runtime, O(1) space</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> end = nums.length - <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (nums[start] + nums[end] &lt; target)</div><div class=\"line\">            start++;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[start] + nums[end] &gt; target)</div><div class=\"line\">            end--;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;start + <span class=\"number\">1</span>, end + <span class=\"number\">1</span>&#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 1 - Two Sum","url":"http://yoursite.com/2017/09/10/LeetCode-Problem-1-Two-Sum/","content":"<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>\n<p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Given nums = [2, 7, 11, 15], target = 9,</p>\n<p>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// O(n) runtime, O(n) space</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</div><div class=\"line\">    Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> num = nums[i];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (map.containsKey(target - num))</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;i, map.get(target - num)&#125;;</div><div class=\"line\"></div><div class=\"line\">        map.put(num, i);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】机器人的运动范围","url":"http://yoursite.com/2017/09/10/【剑指Offer】机器人的运动范围/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>地上有一个m行n列的方格。一个机器人从坐标(0,0)的格子开始移动，它每一次可以向左、右、上、下移动一格，但不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格(35,37)，因为3+5+3+7=18。但它不能进入方格(35,38)。因为3+5+3+8=19.请问该机器人能够到达多少个格子？</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">movingCount</span><span class=\"params\">(<span class=\"keyword\">int</span> threshold, <span class=\"keyword\">int</span> rows, <span class=\"keyword\">int</span> cols)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">boolean</span>[] visited = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[rows*cols];</div><div class=\"line\">    <span class=\"keyword\">return</span> movingCountHelper(threshold, rows, cols, <span class=\"number\">0</span>, <span class=\"number\">0</span>, visited);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">movingCountHelper</span><span class=\"params\">(<span class=\"keyword\">int</span> threshold, <span class=\"keyword\">int</span> rows, <span class=\"keyword\">int</span> cols, <span class=\"keyword\">int</span> row, <span class=\"keyword\">int</span> col, <span class=\"keyword\">boolean</span>[] visited)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (row &lt; <span class=\"number\">0</span> || col &lt; <span class=\"number\">0</span> || row &gt;= rows || col &gt;= cols || visited[row*cols+col] || getDigitSum(row) + getDigitSum(col) &gt; threshold)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    visited[row*cols+col] = <span class=\"keyword\">true</span>;</div><div class=\"line\">    count += movingCountHelper(threshold, rows, cols, row - <span class=\"number\">1</span>, col, visited)</div><div class=\"line\">            + movingCountHelper(threshold, rows, cols, row + <span class=\"number\">1</span>, col, visited)</div><div class=\"line\">            + movingCountHelper(threshold, rows, cols, row, col - <span class=\"number\">1</span>, visited)</div><div class=\"line\">            + movingCountHelper(threshold, rows, cols, row, col + <span class=\"number\">1</span>, visited);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> count;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getDigitSum</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (num != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        sum += num % <span class=\"number\">10</span>;</div><div class=\"line\">        num /= <span class=\"number\">10</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】矩阵中的路径","url":"http://yoursite.com/2017/09/10/【剑指Offer】矩阵中的路径/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如在下面的3x4的矩阵中包含一条字符串“bcced”的路径。但矩阵中不包含字符串“abcb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。</p>\n<p>a b c e<br>s f c s<br>a d e e</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPath</span><span class=\"params\">(<span class=\"keyword\">char</span>[] matrix, <span class=\"keyword\">int</span> rows, <span class=\"keyword\">int</span> cols, <span class=\"keyword\">char</span>[] str)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (matrix == <span class=\"keyword\">null</span> || rows &lt; <span class=\"number\">1</span> || cols &lt; <span class=\"number\">1</span> || str == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">boolean</span>[] visited = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[matrix.length];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; rows; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; cols; j++)</div><div class=\"line\">            <span class=\"keyword\">if</span> (hasPathHelper(matrix, rows, cols, i, j, str, <span class=\"number\">0</span>, visited))</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathHelper</span><span class=\"params\">(<span class=\"keyword\">char</span>[] matrix, <span class=\"keyword\">int</span> rows, <span class=\"keyword\">int</span> cols, <span class=\"keyword\">int</span> row, <span class=\"keyword\">int</span> col, <span class=\"keyword\">char</span>[] str, <span class=\"keyword\">int</span> strIdx, <span class=\"keyword\">boolean</span>[] visited)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (row &lt; <span class=\"number\">0</span> || col &lt; <span class=\"number\">0</span> || row &gt;= rows || col &gt;= cols)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> matrixIdx = row * cols + col;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (visited[matrixIdx] || str[strIdx] != matrix[matrixIdx])</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (strIdx == str.length - <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    visited[matrixIdx] = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">boolean</span> result = hasPathHelper(matrix, rows, cols, row - <span class=\"number\">1</span>, col, str, strIdx + <span class=\"number\">1</span>, visited)</div><div class=\"line\">                        || hasPathHelper(matrix, rows, cols, row + <span class=\"number\">1</span>, col, str, strIdx + <span class=\"number\">1</span>, visited)</div><div class=\"line\">                        || hasPathHelper(matrix, rows, cols, row, col - <span class=\"number\">1</span>, str, strIdx + <span class=\"number\">1</span>, visited)</div><div class=\"line\">                        || hasPathHelper(matrix, rows, cols, row, col + <span class=\"number\">1</span>, str, strIdx + <span class=\"number\">1</span>, visited);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!result)</div><div class=\"line\">        visited[matrixIdx] = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】滑动窗口的最大值","url":"http://yoursite.com/2017/09/09/【剑指Offer】滑动窗口的最大值/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个数组和滑动窗口的大小，请找出所有滑动窗口里的最大值。例如，如果输入数组{2, 3, 4, 2, 6, 2, 5, 1}及滑动窗口的大小3，那么一共存在6个滑动窗口，它们的最大值分别为{4, 4, 6, 6, 6, 5}。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title\">maxInWindows</span><span class=\"params\">(<span class=\"keyword\">int</span>[] num, <span class=\"keyword\">int</span> size)</span> </span>&#123;</div><div class=\"line\">    ArrayList&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (num == <span class=\"keyword\">null</span> || num.length &lt; <span class=\"number\">1</span> || size &lt; <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\"></div><div class=\"line\">    LinkedList&lt;Integer&gt; deque = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; num.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">while</span> (!deque.isEmpty() &amp;&amp; num[i] &gt; num[deque.peekLast()])</div><div class=\"line\">            deque.pollLast();</div><div class=\"line\"></div><div class=\"line\">        deque.offerLast(i);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (i - deque.peekFirst() &gt; size - <span class=\"number\">1</span>)</div><div class=\"line\">            deque.pollFirst();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= size - <span class=\"number\">1</span>)</div><div class=\"line\">            result.add(num[deque.peekFirst()]);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】数据流中的中位数","url":"http://yoursite.com/2017/09/08/【剑指Offer】数据流中的中位数/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序后中间两个数的平均值。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> PriorityQueue&lt;Integer&gt; maxHeap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;(<span class=\"number\">5</span>, <span class=\"keyword\">new</span> Comparator&lt;Integer&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Integer o1, Integer o2)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> o2.compareTo(o1);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> PriorityQueue&lt;Integer&gt; minHeap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(Integer num)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (maxHeap.size() == minHeap.size())</div><div class=\"line\">        maxHeap.add(num);</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        minHeap.add(num);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!minHeap.isEmpty() &amp;&amp; !maxHeap.isEmpty() &amp;&amp; maxHeap.peek() &gt; minHeap.peek()) &#123;</div><div class=\"line\">        maxHeap.offer(minHeap.poll());</div><div class=\"line\">        minHeap.offer(maxHeap.poll());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Double <span class=\"title\">GetMedian</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (maxHeap.size() &gt; minHeap.size())</div><div class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">double</span>) maxHeap.peek();</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        <span class=\"keyword\">return</span> (maxHeap.peek() + minHeap.peek()) / <span class=\"number\">2.0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】二叉搜索树的第k个结点","url":"http://yoursite.com/2017/09/08/【剑指Offer】二叉搜索树的第k个结点/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一棵二叉搜索树，请找出其中的第k大的结点。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</div><div class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</div><div class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">KthNode</span><span class=\"params\">(TreeNode pRoot, <span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (pRoot == <span class=\"keyword\">null</span> || k &lt; <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> KthNodeHelper(pRoot, k);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">KthNodeHelper</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    TreeNode node = KthNodeHelper(root.left, k);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (node != <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> node;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (++count == k)</div><div class=\"line\">        <span class=\"keyword\">return</span> root;</div><div class=\"line\"></div><div class=\"line\">    node = KthNodeHelper(root.right, k);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (node != <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> node;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】序列化二叉树","url":"http://yoursite.com/2017/09/08/【剑指Offer】序列化二叉树/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>请实现两个函数，分别用来序列化和反序列化二叉树。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</div><div class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</div><div class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> idx = -<span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">Serialize</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</div><div class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        sb.append(<span class=\"string\">\"$,\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    sb.append(root.val).append(<span class=\"string\">\",\"</span>);</div><div class=\"line\">    sb.append(Serialize(root.left));</div><div class=\"line\">    sb.append(Serialize(root.right));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">Deserialize</span><span class=\"params\">(String str)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || str.length() &lt; <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    String[] strs = str.split(<span class=\"string\">\",\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> Deserialize(strs);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">Deserialize</span><span class=\"params\">(String[] strs)</span> </span>&#123;</div><div class=\"line\">    idx++;</div><div class=\"line\">    TreeNode root = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (idx &lt; strs.length &amp;&amp; !strs[idx].equals(<span class=\"string\">\"$\"</span>)) &#123;</div><div class=\"line\">        root = <span class=\"keyword\">new</span> TreeNode(Integer.valueOf(strs[idx]));</div><div class=\"line\">        root.left = Deserialize(strs);</div><div class=\"line\">        root.right = Deserialize(strs);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> root;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】按之字形顺序打印二叉树","url":"http://yoursite.com/2017/09/08/【剑指Offer】按之字形顺序打印二叉树/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>请实现一个函数按照之字形顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</div><div class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</div><div class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; Print(TreeNode pRoot) &#123;</div><div class=\"line\">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (pRoot != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        Stack&lt;TreeNode&gt;[] stack = (Stack&lt;TreeNode&gt;[]) <span class=\"keyword\">new</span> Stack[<span class=\"number\">2</span>];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++)</div><div class=\"line\">            stack[i] = <span class=\"keyword\">new</span> Stack&lt;&gt;();</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>;</div><div class=\"line\">        stack[idx].push(pRoot);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">while</span> (!stack[idx].isEmpty()) &#123;</div><div class=\"line\">            ArrayList&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">            <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">int</span> end = stack[idx].size();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">while</span> (start++ &lt; end)&#123;</div><div class=\"line\">                TreeNode node = stack[idx].pop();</div><div class=\"line\">                result.add(node.val);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (idx == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (node.left != <span class=\"keyword\">null</span>)</div><div class=\"line\">                        stack[<span class=\"number\">1</span>-idx].push(node.left);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (node.right != <span class=\"keyword\">null</span>)</div><div class=\"line\">                        stack[<span class=\"number\">1</span>-idx].push(node.right);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (node.right != <span class=\"keyword\">null</span>)</div><div class=\"line\">                        stack[<span class=\"number\">1</span>-idx].push(node.right);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (node.left != <span class=\"keyword\">null</span>)</div><div class=\"line\">                        stack[<span class=\"number\">1</span>-idx].push(node.left);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            idx = <span class=\"number\">1</span> - idx;</div><div class=\"line\">            results.add(result);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> results;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】把二叉树打印成多行","url":"http://yoursite.com/2017/09/08/【剑指Offer】把二叉树打印成多行/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>从上到下按层打印二叉树，同一层的结点按从左到右的顺序打印，每一层打印到一行。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</div><div class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</div><div class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; Print(TreeNode pRoot) &#123;</div><div class=\"line\">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (pRoot != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</div><div class=\"line\">        queue.offer(pRoot);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</div><div class=\"line\">            ArrayList&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">            <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">int</span> end = queue.size();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">while</span> (start++ &lt; end)&#123;</div><div class=\"line\">                TreeNode node = queue.poll();</div><div class=\"line\">                result.add(node.val);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (node.left != <span class=\"keyword\">null</span>)</div><div class=\"line\">                    queue.offer(node.left);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (node.right != <span class=\"keyword\">null</span>)</div><div class=\"line\">                    queue.offer(node.right);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            results.add(result);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> results;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】对称的二叉树","url":"http://yoursite.com/2017/09/08/【剑指Offer】对称的二叉树/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</div><div class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</div><div class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSymmetrical</span><span class=\"params\">(TreeNode pRoot)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (pRoot == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> isSymmetricalHelper(pRoot.left, pRoot.right);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSymmetricalHelper</span><span class=\"params\">(TreeNode left, TreeNode right)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (left == <span class=\"keyword\">null</span> &amp;&amp; right == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (left == <span class=\"keyword\">null</span> || right == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (left.val != right.val)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> isSymmetricalHelper(left.left, right.right) &amp;&amp; isSymmetricalHelper(left.right, right.left);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】二叉树的下一个结点","url":"http://yoursite.com/2017/09/08/【剑指Offer】二叉树的下一个结点/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一棵二叉树和其中的一个结点，如何找出中序遍历顺序的下一个结点？树中的结点除了有两个分别指向左右子结点的指针以外，还有一个指向父结点的指针。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeLinkNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    TreeLinkNode left = <span class=\"keyword\">null</span>;</div><div class=\"line\">    TreeLinkNode right = <span class=\"keyword\">null</span>;</div><div class=\"line\">    TreeLinkNode next = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    TreeLinkNode(<span class=\"keyword\">int</span> val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeLinkNode <span class=\"title\">GetNext</span><span class=\"params\">(TreeLinkNode pNode)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (pNode == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (pNode.right != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        pNode = pNode.right;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">while</span> (pNode.left != <span class=\"keyword\">null</span>)</div><div class=\"line\">            pNode = pNode.left;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">while</span> (pNode.next != <span class=\"keyword\">null</span> &amp;&amp; pNode.next.right == pNode)</div><div class=\"line\">            pNode = pNode.next;</div><div class=\"line\"></div><div class=\"line\">        pNode = pNode.next;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> pNode;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】删除链表中重复的结点","url":"http://yoursite.com/2017/09/08/【剑指Offer】删除链表中重复的结点/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>在一个排序的链表中，如何删除重复的结点？</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    ListNode(<span class=\"keyword\">int</span> val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">deleteDuplication</span><span class=\"params\">(ListNode pHead)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (pHead == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    ListNode current = pHead;</div><div class=\"line\">    ListNode prev = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (current != <span class=\"keyword\">null</span> &amp;&amp; current.next != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (current.next.val &gt; current.val) &#123;</div><div class=\"line\">            prev = current;</div><div class=\"line\">            current = current.next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">while</span> (current.next != <span class=\"keyword\">null</span> &amp;&amp; current.next.val == current.val)</div><div class=\"line\">                current = current.next;</div><div class=\"line\"></div><div class=\"line\">            current = current.next;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (prev != <span class=\"keyword\">null</span>)</div><div class=\"line\">                prev.next = current;</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">                pHead = current;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> pHead;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】链表中环的入口结点","url":"http://yoursite.com/2017/09/08/【剑指Offer】链表中环的入口结点/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>一个链表中包含环，如何找出环的入口结点？</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    ListNode(<span class=\"keyword\">int</span> val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">EntryNodeOfLoop</span><span class=\"params\">(ListNode pHead)</span> </span>&#123;</div><div class=\"line\">    ListNode node = meetingNode(pHead);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> count = countNodes(node);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> findEntry(pHead, count);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ListNode <span class=\"title\">meetingNode</span><span class=\"params\">(ListNode head)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    ListNode slow = head;</div><div class=\"line\">    ListNode fast = head.next;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (fast != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (fast == slow)</div><div class=\"line\">            <span class=\"keyword\">return</span> slow;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (fast.next == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">        slow = slow.next;</div><div class=\"line\">        fast = fast.next.next;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">countNodes</span><span class=\"params\">(ListNode node)</span> </span>&#123;</div><div class=\"line\">    ListNode current = node.next;</div><div class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (current != node) &#123;</div><div class=\"line\">        count++;</div><div class=\"line\">        current = current.next;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> count;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ListNode <span class=\"title\">findEntry</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> count)</span> </span>&#123;</div><div class=\"line\">    ListNode slow = head;</div><div class=\"line\">    ListNode fast = head;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</div><div class=\"line\">        fast = fast.next;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (fast != slow) &#123;</div><div class=\"line\">        fast = fast.next;</div><div class=\"line\">        slow = slow.next;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> slow;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】字符流中第一个不重复的字符","url":"http://yoursite.com/2017/09/07/【剑指Offer】字符流中第一个不重复的字符/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符“go”时，第一个只出现一次的字符是‘g’。当从该字符流中读出前六个字符“google”时，第一个只出现一次的字符是‘l’。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] occurrence = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">256</span>];</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"keyword\">char</span> ch)</span> </span>&#123;</div><div class=\"line\">    index++;</div><div class=\"line\">    <span class=\"keyword\">int</span> current = (<span class=\"keyword\">int</span>) ch;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (occurrence[current] == <span class=\"number\">0</span>)</div><div class=\"line\">        occurrence[current] = index;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (occurrence[current] &gt; <span class=\"number\">0</span>)</div><div class=\"line\">        occurrence[current] = -<span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">char</span> <span class=\"title\">FirstAppearingOnce</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> result = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> min = Integer.MAX_VALUE;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (occurrence[i] &gt; <span class=\"number\">0</span> &amp;&amp; occurrence[i] &lt; min) &#123;</div><div class=\"line\">            result = (<span class=\"keyword\">char</span>) i;</div><div class=\"line\">            min = occurrence[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (result == <span class=\"string\">'\\0'</span>)</div><div class=\"line\">        result = <span class=\"string\">'#'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】表示数值的字符串","url":"http://yoursite.com/2017/09/07/【剑指Offer】表示数值的字符串/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串“+100”、“5e2”、“-123”、“3.1416”及“-1E-16”都表示数值，但“12e”、“1a3.14”、“1.2.3”、“+-5”及“12e+5.4”都不是。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNumeric</span><span class=\"params\">(<span class=\"keyword\">char</span>[] str)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || str.length &lt; <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> isNum = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (str[idx] == <span class=\"string\">'+'</span> || str[idx] == <span class=\"string\">'-'</span>)</div><div class=\"line\">        idx++;</div><div class=\"line\"></div><div class=\"line\">    idx = scanNumber(str, idx);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (idx &lt; str.length &amp;&amp; str[idx] == <span class=\"string\">'.'</span>) &#123;</div><div class=\"line\">        idx++;</div><div class=\"line\"></div><div class=\"line\">        idx = scanNumber(str, idx);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (idx &lt; str.length &amp;&amp; (str[idx] == <span class=\"string\">'e'</span> || str[idx] == <span class=\"string\">'E'</span>))</div><div class=\"line\">            isNum = isExponential(str, idx + <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (idx &lt; str.length &amp;&amp; str[idx] != <span class=\"string\">'e'</span> &amp;&amp; str[idx] != <span class=\"string\">'E'</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (idx &lt; str.length &amp;&amp; (str[idx] == <span class=\"string\">'e'</span> || str[idx] == <span class=\"string\">'E'</span>))</div><div class=\"line\">        isNum = isExponential(str, idx + <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (idx &lt; str.length &amp;&amp; str[idx] != <span class=\"string\">'.'</span> &amp;&amp; str[idx] != <span class=\"string\">'e'</span> &amp;&amp; str[idx] != <span class=\"string\">'E'</span>)</div><div class=\"line\">        isNum = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> isNum;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">scanNumber</span><span class=\"params\">(<span class=\"keyword\">char</span>[] str, <span class=\"keyword\">int</span> idx)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(; idx &lt; str.length; idx++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (str[idx] &lt; <span class=\"string\">'0'</span> || str[idx] &gt; <span class=\"string\">'9'</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> idx;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> idx;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isExponential</span><span class=\"params\">(<span class=\"keyword\">char</span>[] str, <span class=\"keyword\">int</span> idx)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (idx == str.length)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (str[idx] == <span class=\"string\">'+'</span> || str[idx] == <span class=\"string\">'-'</span>)</div><div class=\"line\">        idx++;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (idx == str.length)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    idx = scanNumber(str, idx);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (idx &lt; str.length)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】正则表达式匹配","url":"http://yoursite.com/2017/09/07/【剑指Offer】正则表达式匹配/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>请实现一个函数用来匹配包含‘.’和‘<em>’的正则表达式。模式中的字符‘.’表示任意一个字符，而‘</em>’表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串“aaa”与模式“a.a”和“ab<em>ac</em>a”匹配，但与“aa.a”及“ab*a”均不匹配。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">match</span><span class=\"params\">(<span class=\"keyword\">char</span>[] str, <span class=\"keyword\">char</span>[] pattern)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || pattern == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> matchHelper(str, <span class=\"number\">0</span>, pattern, <span class=\"number\">0</span> );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matchHelper</span><span class=\"params\">(<span class=\"keyword\">char</span>[] str, <span class=\"keyword\">int</span> strIdx, <span class=\"keyword\">char</span>[] pattern, <span class=\"keyword\">int</span> patternIdx)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (strIdx == str.length &amp;&amp; patternIdx == pattern.length)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (strIdx != str.length &amp;&amp; patternIdx == pattern.length)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (patternIdx + <span class=\"number\">1</span> &lt; pattern.length &amp;&amp; pattern[patternIdx+<span class=\"number\">1</span>] == <span class=\"string\">'*'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (strIdx &lt; str.length &amp;&amp; (str[strIdx] == pattern[patternIdx] || pattern[patternIdx] == <span class=\"string\">'.'</span>))</div><div class=\"line\">            <span class=\"keyword\">return</span> matchHelper(str, strIdx, pattern, patternIdx + <span class=\"number\">2</span>)</div><div class=\"line\">                    || matchHelper(str , strIdx + <span class=\"number\">1</span>, pattern, patternIdx)</div><div class=\"line\">                    || matchHelper(str, strIdx + <span class=\"number\">1</span>, pattern, patternIdx + <span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"keyword\">return</span> matchHelper(str, strIdx, pattern, patternIdx + <span class=\"number\">2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (strIdx &lt; str.length &amp;&amp; (str[strIdx] == pattern[patternIdx] || pattern[patternIdx] == <span class=\"string\">'.'</span>))</div><div class=\"line\">        <span class=\"keyword\">return</span> matchHelper(str, strIdx + <span class=\"number\">1</span>, pattern, patternIdx + <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】构建乘积数组","url":"http://yoursite.com/2017/09/07/【剑指Offer】构建乘积数组/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个数组A[0, 1, … , n-1]，请构建一个数组B[0, 1, … , n-1]，其中B中的元素B[i]=A[0]xA[1]x…xA[i-1]xA[i+1]x…xA[n-1]。不能使用除法。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] multiply(<span class=\"keyword\">int</span>[] A) &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span>[] B = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[A.length];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (A == <span class=\"keyword\">null</span> || A.length &lt; <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> B;</div><div class=\"line\"></div><div class=\"line\">    B[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> temp = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= A.length - <span class=\"number\">1</span>; i++)</div><div class=\"line\">        B[i] = A[i-<span class=\"number\">1</span>] * B[i-<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = A.length - <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">        temp *= A[i+<span class=\"number\">1</span>];</div><div class=\"line\">        B[i] *= temp;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> B;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】数组中重复的数字","url":"http://yoursite.com/2017/09/07/【剑指Offer】数组中重复的数字/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>在一个长度为n的数组里的所有数字都在0到n-1的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。例如，如果输入长度为7的数组{2, 3, 1, 0, 2, 5, 3}，那么对应的输出是重复的数字2或者3.</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">duplicate</span><span class=\"params\">(<span class=\"keyword\">int</span> numbers[], <span class=\"keyword\">int</span> length, <span class=\"keyword\">int</span>[] duplication)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (numbers == <span class=\"keyword\">null</span> || length &lt; <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">while</span> (numbers[i] != i) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (numbers[i] == numbers[numbers[i]]) &#123;</div><div class=\"line\">                duplication[<span class=\"number\">0</span>] = numbers[i];</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">            swap(numbers, i, numbers[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> numbers[], <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</div><div class=\"line\">    numbers[i] = numbers[i] ^ numbers[j];</div><div class=\"line\">    numbers[j] = numbers[i] ^ numbers[j];</div><div class=\"line\">    numbers[i] = numbers[i] ^ numbers[j];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】树中两个结点的最低公共祖先","url":"http://yoursite.com/2017/09/06/【剑指Offer】树中两个结点的最低公共祖先/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入两个树结点，求它们的最低公共祖先。这棵树是普通的树，而且树中的结点没有指向父结点的指针。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</div><div class=\"line\">    List&lt;TreeNode&gt; children = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">getLastCommonParent</span><span class=\"params\">(TreeNode root, TreeNode node1, TreeNode node2)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || node1 == <span class=\"keyword\">null</span> || node2 == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    List&lt;TreeNode&gt; path1 = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    getPath(path1, root, node1);</div><div class=\"line\">    List&lt;TreeNode&gt; path2 = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    getPath(path2, root, node2);</div><div class=\"line\"></div><div class=\"line\">    Iterator&lt;TreeNode&gt; iterator1 = path1.iterator();</div><div class=\"line\">    Iterator&lt;TreeNode&gt; iterator2 = path2.iterator();</div><div class=\"line\">    TreeNode parent = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (iterator1.hasNext() &amp;&amp; iterator2.hasNext()) &#123;</div><div class=\"line\">        TreeNode n1 = iterator1.next();</div><div class=\"line\">        TreeNode n2 = iterator2.next();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(n1 != n2)</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">        parent = n1;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> parent;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">getPath</span><span class=\"params\">(List&lt;TreeNode&gt; path, TreeNode root, TreeNode node)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    path.add(root);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (root == node)</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (TreeNode child : root.children) &#123;</div><div class=\"line\">        getPath(path, child, node);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (path.contains(node))</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!path.contains(node))</div><div class=\"line\">        path.remove(path.size() - <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】把字符串转换成整数","url":"http://yoursite.com/2017/09/06/【剑指Offer】把字符串转换成整数/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>写一个函数StrToInt，实现把字符串转换成整数的功能。不能使用atoi或者其他类似的库函数。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isInvalid = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">StrToInt</span><span class=\"params\">(String str)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || str.length() &lt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        isInvalid = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">char</span>[] array = str.toCharArray();</div><div class=\"line\">    <span class=\"keyword\">long</span> result = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> minus = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (array[index] == <span class=\"string\">'+'</span>)</div><div class=\"line\">        index++;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (array[index] == <span class=\"string\">'-'</span>) &#123;</div><div class=\"line\">        minus = <span class=\"keyword\">true</span>;</div><div class=\"line\">        index++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (; index &lt; array.length; index++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (array[index] &lt; <span class=\"string\">'0'</span> || array[index] &gt; <span class=\"string\">'9'</span>) &#123;</div><div class=\"line\">            isInvalid = <span class=\"keyword\">true</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> flag = minus ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>;</div><div class=\"line\">        result = result * <span class=\"number\">10</span> + flag * (array[index] - <span class=\"string\">'0'</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> ((!minus &amp;&amp; result &gt; Integer.MAX_VALUE) || (minus &amp;&amp; result &lt; Integer.MIN_VALUE)) &#123;</div><div class=\"line\">            isInvalid = <span class=\"keyword\">true</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】不用加减乘除做加法","url":"http://yoursite.com/2017/09/06/【剑指Offer】不用加减乘除做加法/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>写一个函数，求两个整数之和，要求在函数体内不得使用+、-、x、／四则运算符号。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">Add</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (num2 != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> sum = num1 ^ num2;</div><div class=\"line\">        num2 = (num1 &amp; num2) &lt;&lt; <span class=\"number\">1</span>;</div><div class=\"line\">        num1 = sum;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> num1;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"相关问题\"><a href=\"#相关问题\" class=\"headerlink\" title=\"相关问题\"></a>相关问题</h2><p>不使用新的变量，交换两个变量的值。比如有两个变量a、b，希望交换它们的值。有两种不同的办法：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">基于加减法</th>\n<th style=\"text-align:left\">基于异或运算</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">a = a + b</td>\n<td style=\"text-align:left\">a = a ^ b</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">b = a - b</td>\n<td style=\"text-align:left\">b = a ^ b</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">a = a - b</td>\n<td style=\"text-align:left\">a = a ^ b</td>\n</tr>\n</tbody>\n</table>\n","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】求1+2+...+n","url":"http://yoursite.com/2017/09/06/【剑指Offer】求1-2-n/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>求1+2+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">Sum_Solution</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> sum = n;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> end = n &gt; <span class=\"number\">0</span> &amp;&amp; (sum += Sum_Solution(n - <span class=\"number\">1</span>)) &gt; <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】圆圈中最后剩下的数字","url":"http://yoursite.com/2017/09/05/【剑指Offer】圆圈中最后剩下的数字/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>0, 1, …, n-1这n个数字排成一个圆圈，从数字0开始每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。</p>\n<h2 id=\"经典的解法，用环形链表模拟圆圈\"><a href=\"#经典的解法，用环形链表模拟圆圈\" class=\"headerlink\" title=\"经典的解法，用环形链表模拟圆圈\"></a>经典的解法，用环形链表模拟圆圈</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    ListNode(<span class=\"keyword\">int</span> val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">LastRemaining_Solution</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || m &lt; <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    ListNode head = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</div><div class=\"line\">    ListNode tail = head;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</div><div class=\"line\">        ListNode node = <span class=\"keyword\">new</span> ListNode(i);</div><div class=\"line\">        tail.next = node;</div><div class=\"line\">        tail = node;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    tail.next = head;</div><div class=\"line\">    ListNode current = head;</div><div class=\"line\">    ListNode prev = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; m; i++) &#123;</div><div class=\"line\">            prev = current;</div><div class=\"line\">            current = current.next;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        prev.next = current.next;</div><div class=\"line\">        current = prev.next;</div><div class=\"line\">        n--;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> current.val;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"创新的解法，拿到Offer不在话下\"><a href=\"#创新的解法，拿到Offer不在话下\" class=\"headerlink\" title=\"创新的解法，拿到Offer不在话下\"></a>创新的解法，拿到Offer不在话下</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">LastRemaining_Solution</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || m &lt; <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//f(n, m) = f'(n-1,m) = [f(n-1,m) + m] % n</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++)</div><div class=\"line\">        result = (result + m) % i;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】扑克牌的顺子","url":"http://yoursite.com/2017/09/05/【剑指Offer】扑克牌的顺子/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>从扑克牌中随机抽5张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，而大、小王可以看成任意数字。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isContinuous</span><span class=\"params\">(<span class=\"keyword\">int</span>[] numbers)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (numbers == <span class=\"keyword\">null</span> || numbers.length &lt; <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    Arrays.sort(numbers);</div><div class=\"line\">    <span class=\"keyword\">int</span> numOfZero = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> numOfGap = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numbers.length - <span class=\"number\">1</span>; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (numbers[i] == <span class=\"number\">0</span>)</div><div class=\"line\">            numOfZero++;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (numbers[i] == numbers[i+<span class=\"number\">1</span>])</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            numOfGap += numbers[i+<span class=\"number\">1</span>] - numbers[i] - <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> numOfZero &gt;= numOfGap ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】n个骰子的点数","url":"http://yoursite.com/2017/09/04/【剑指Offer】n个骰子的点数/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。</p>\n<h2 id=\"基于递归求骰子点数，时间效率不够高\"><a href=\"#基于递归求骰子点数，时间效率不够高\" class=\"headerlink\" title=\"基于递归求骰子点数，时间效率不够高\"></a>基于递归求骰子点数，时间效率不够高</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">PrintProbability</span><span class=\"params\">(<span class=\"keyword\">int</span> number)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (number &lt; <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span>[] prob = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">6</span>*number-number+<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">6</span>; i++)</div><div class=\"line\">        probability(prob, number, number, i);</div><div class=\"line\"></div><div class=\"line\">    print(prob, number);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">probability</span><span class=\"params\">(<span class=\"keyword\">int</span>[] prob, <span class=\"keyword\">int</span> number, <span class=\"keyword\">int</span> current, <span class=\"keyword\">int</span> sum)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (current == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        prob[sum-number]++;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">6</span>; i++)</div><div class=\"line\">        probability(prob, number, current - <span class=\"number\">1</span>, sum + i);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span>[] prob, <span class=\"keyword\">int</span> number)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">double</span> total = Math.pow(<span class=\"number\">6</span>, number);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; prob.length; i++)</div><div class=\"line\">        System.out.println(i+number + <span class=\"string\">\": \"</span> + prob[i] / total);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"基于循环求骰子点数，时间性能好\"><a href=\"#基于循环求骰子点数，时间性能好\" class=\"headerlink\" title=\"基于循环求骰子点数，时间性能好\"></a>基于循环求骰子点数，时间性能好</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">PrintProbability</span><span class=\"params\">(<span class=\"keyword\">int</span> number)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (number &lt; <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span>[][] prob = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>][<span class=\"number\">6</span>*number+<span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">6</span>; i++)</div><div class=\"line\">        prob[flag][i] = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//f(i,n) = f(i-1,n-1) + f(i-1,n-2) + f(i-1,n-3) + f(i-1,n-4) + f(i-1,n-5) + f(i-1,n-6)</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= number; i++) &#123;</div><div class=\"line\">        flag = <span class=\"number\">1</span> - flag;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt;= <span class=\"number\">6</span> * i; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= <span class=\"number\">6</span> &amp;&amp; k &lt;= j; k++)</div><div class=\"line\">                prob[flag][j] += prob[<span class=\"number\">1</span>-flag][j-k];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    print(prob[flag], number);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span>[] prob, <span class=\"keyword\">int</span> number)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">double</span> total = Math.pow(<span class=\"number\">6</span>, number);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = number; i &lt;= <span class=\"number\">6</span> * number; i++)</div><div class=\"line\">        System.out.println(i + <span class=\"string\">\": \"</span> + prob[i] / total);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】翻转单词顺序VS左旋转字符串","url":"http://yoursite.com/2017/09/03/【剑指Offer】翻转单词顺序VS左旋转字符串/","content":"<h2 id=\"题目一\"><a href=\"#题目一\" class=\"headerlink\" title=\"题目一\"></a>题目一</h2><p>输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串”I am a student.”，则输出”student. a am I”。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">ReverseSentence</span><span class=\"params\">(String str)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || str.length() &lt; <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">char</span>[] result = str.toCharArray();</div><div class=\"line\">    <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> end = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    reverse(result, <span class=\"number\">0</span>, result.length - <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (end &lt; result.length) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (result[end] == <span class=\"string\">' '</span>) &#123;</div><div class=\"line\">            reverse(result, start, end - <span class=\"number\">1</span>);</div><div class=\"line\">            start = ++end;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (end == result.length - <span class=\"number\">1</span>)</div><div class=\"line\">            reverse(result, start, end++);</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            end++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> String.valueOf(result);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">char</span>[] result, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end) &#123;</div><div class=\"line\">        <span class=\"keyword\">char</span> tmp = result[start];</div><div class=\"line\">        result[start] = result[end];</div><div class=\"line\">        result[end] = tmp;</div><div class=\"line\">        start++;</div><div class=\"line\">        end--;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"题目二\"><a href=\"#题目二\" class=\"headerlink\" title=\"题目二\"></a>题目二</h2><p>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如输入字符串”abcdefg”和数字2，该函数将返回左旋转2位得到的结果”cdefgab”。</p>\n<h2 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">LeftRotateString</span><span class=\"params\">(String str, <span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || str.length() &lt; n)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">char</span>[] result = str.toCharArray();</div><div class=\"line\">    reverse(result, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>);</div><div class=\"line\">    reverse(result, n, result.length - <span class=\"number\">1</span>);</div><div class=\"line\">    reverse(result, <span class=\"number\">0</span>, result.length - <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> String.valueOf(result);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">char</span>[] result, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end) &#123;</div><div class=\"line\">        <span class=\"keyword\">char</span> tmp = result[start];</div><div class=\"line\">        result[start] = result[end];</div><div class=\"line\">        result[end] = tmp;</div><div class=\"line\">        start++;</div><div class=\"line\">        end--;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】和为s的两个数字VS和为s的连续正数序列","url":"http://yoursite.com/2017/09/02/【剑指Offer】和为s的两个数字VS和为s的连续正数序列/","content":"<h2 id=\"题目一\"><a href=\"#题目一\" class=\"headerlink\" title=\"题目一\"></a>题目一</h2><p>输入一个递增排序的数组和一个数字s，在数组中查找两个数，使得它们的和正好是s。如果有多对数字的和等于s，输出任意一对即可。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title\">FindNumbersWithSum</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> sum)</span> </span>&#123;</div><div class=\"line\">    ArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"keyword\">null</span> || array.length &lt; <span class=\"number\">2</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> list;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> end = array.length - <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (array[start] + array[end] &lt; sum)</div><div class=\"line\">            start++;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (array[start] + array[end] &gt; sum)</div><div class=\"line\">            end--;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            list.add(array[start]);</div><div class=\"line\">            list.add(array[end]);</div><div class=\"line\">            <span class=\"keyword\">return</span> list;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> list;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"题目二\"><a href=\"#题目二\" class=\"headerlink\" title=\"题目二\"></a>题目二</h2><p>输入一个正数s，打印出所有和为s的连续正数序列（至少含有两个数）。例如输入15，由于1+2+3+4+5=4+5+6=7+8=15，所以结果打印出3个连续序列1～5、4～6和7～8。</p>\n<h2 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; FindContinuousSequence(<span class=\"keyword\">int</span> sum) &#123;</div><div class=\"line\">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (sum &lt; <span class=\"number\">3</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> results;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> start = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> end = <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> middle = (sum + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> current = start + end;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (start &lt; middle) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (current &lt; sum) &#123;</div><div class=\"line\">            end++;</div><div class=\"line\">            current += end;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current &gt; sum) &#123;</div><div class=\"line\">            current -= start;</div><div class=\"line\">            start++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ArrayList&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">            findContinuousSequence(result, start, end);</div><div class=\"line\">            results.add(result);</div><div class=\"line\">            current -= start;</div><div class=\"line\">            start++;</div><div class=\"line\">            end++;</div><div class=\"line\">            current += end;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> results;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">findContinuousSequence</span><span class=\"params\">(ArrayList&lt;Integer&gt; result, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt;= end; i++)</div><div class=\"line\">        result.add(i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】数组中只出现一次的数字","url":"http://yoursite.com/2017/09/02/【剑指Offer】数组中只出现一次的数字/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>一个整形数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">FindNumsAppearOnce</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> num1[], <span class=\"keyword\">int</span> num2[])</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"keyword\">null</span> || array.length &lt; <span class=\"number\">2</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++)</div><div class=\"line\">        result ^= array[i];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> index = findFirstBitIsOne(result);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isBitOne(array[i], index))</div><div class=\"line\">            num1[<span class=\"number\">0</span>] ^= array[i];</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            num2[<span class=\"number\">0</span>] ^= array[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">findFirstBitIsOne</span><span class=\"params\">(<span class=\"keyword\">int</span> result)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (index &lt; <span class=\"number\">32</span> &amp;&amp; (result &amp; <span class=\"number\">1</span>) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        result &gt;&gt;= <span class=\"number\">1</span>;</div><div class=\"line\">        index++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> index;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBitOne</span><span class=\"params\">(<span class=\"keyword\">int</span> num, <span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">    num &gt;&gt;= index;</div><div class=\"line\">    <span class=\"keyword\">return</span> (num &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span> ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】二叉树的深度","url":"http://yoursite.com/2017/09/02/【剑指Offer】二叉树的深度/","content":"<h2 id=\"题目一\"><a href=\"#题目一\" class=\"headerlink\" title=\"题目一\"></a>题目一</h2><p>输入一棵二叉树的根结点，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</div><div class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</div><div class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">TreeDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> leftDepth = TreeDepth(root.left);</div><div class=\"line\">    <span class=\"keyword\">int</span> rightDepth = TreeDepth(root.right);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> leftDepth &gt; rightDepth ? leftDepth + <span class=\"number\">1</span> : rightDepth + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"题目二\"><a href=\"#题目二\" class=\"headerlink\" title=\"题目二\"></a>题目二</h2><p>输入一棵二叉树的根结点，判断该树是不是平衡二叉树。如果某二叉树中任意结点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。</p>\n<h2 id=\"需要重复遍历结点多次的解法，简单但不足以打动面试官\"><a href=\"#需要重复遍历结点多次的解法，简单但不足以打动面试官\" class=\"headerlink\" title=\"需要重复遍历结点多次的解法，简单但不足以打动面试官\"></a>需要重复遍历结点多次的解法，简单但不足以打动面试官</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</div><div class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</div><div class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">IsBalanced_Solution</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> leftDep = TreeDepth(root.left);</div><div class=\"line\">    <span class=\"keyword\">int</span> rightDep = TreeDepth(root.right);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> IsBalanced_Solution(root.left) &amp;&amp; IsBalanced_Solution(root.right) &amp;&amp; Math.abs(leftDep - rightDep) &lt; <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">TreeDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> leftDepth = TreeDepth(root.left);</div><div class=\"line\">    <span class=\"keyword\">int</span> rightDepth = TreeDepth(root.right);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> leftDepth &gt; rightDepth ? leftDepth + <span class=\"number\">1</span> : rightDepth + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"每个结点只遍历一次的解法，正是面试官喜欢的\"><a href=\"#每个结点只遍历一次的解法，正是面试官喜欢的\" class=\"headerlink\" title=\"每个结点只遍历一次的解法，正是面试官喜欢的\"></a>每个结点只遍历一次的解法，正是面试官喜欢的</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</div><div class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</div><div class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isBalanced = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">IsBalanced_Solution</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</div><div class=\"line\">    getDepth(root);</div><div class=\"line\">    <span class=\"keyword\">return</span> isBalanced;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> leftDep = getDepth(root.left);</div><div class=\"line\">    <span class=\"keyword\">int</span> rightDep = getDepth(root.right);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (Math.abs(leftDep - rightDep) &gt; <span class=\"number\">1</span>)</div><div class=\"line\">        isBalanced = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> Math.max(leftDep, rightDep) + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】数字在排序数组中出现的次数","url":"http://yoursite.com/2017/09/02/【剑指Offer】数字在排序数组中出现的次数/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>统计一个数字在排序数组中出现的次数。例如输入排序数组{1, 2, 3, 3, 3, 3, 4, 5}和数字3，由于3在这个数组中出现了4次，因此输出4.</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">GetNumberOfK</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array , <span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (array != <span class=\"keyword\">null</span> || array.length &lt;<span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> firstIdx = getFirstK(array, k, <span class=\"number\">0</span>, array.length - <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">int</span> lastIdx = getLastK(array, k, <span class=\"number\">0</span>, array.length - <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (firstIdx != -<span class=\"number\">1</span> &amp;&amp; lastIdx != -<span class=\"number\">1</span>)</div><div class=\"line\">            count = lastIdx - firstIdx + <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> count;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getFirstK</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (start &gt; end)</div><div class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> middle = (start + end) / <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (array[middle] &lt; k)</div><div class=\"line\">        <span class=\"keyword\">return</span> getFirstK(array, k, middle + <span class=\"number\">1</span>, end);</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (array[middle] &gt; k)</div><div class=\"line\">        <span class=\"keyword\">return</span> getFirstK(array, k, start, middle - <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (middle == <span class=\"number\">0</span> || (middle &gt; <span class=\"number\">0</span> &amp;&amp; array[middle - <span class=\"number\">1</span>] != k))</div><div class=\"line\">            <span class=\"keyword\">return</span> middle;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"keyword\">return</span> getFirstK(array, k, start, middle - <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getLastK</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (start &gt; end)</div><div class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> middle = (start + end) / <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (array[middle] &lt; k)</div><div class=\"line\">        <span class=\"keyword\">return</span> getLastK(array, k, middle + <span class=\"number\">1</span>, end);</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (array[middle] &gt; k)</div><div class=\"line\">        <span class=\"keyword\">return</span> getLastK(array, k, start, middle - <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (middle == array.length - <span class=\"number\">1</span> || (middle &lt; array.length - <span class=\"number\">1</span> &amp;&amp; array[middle + <span class=\"number\">1</span>] != k))</div><div class=\"line\">            <span class=\"keyword\">return</span> middle;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"keyword\">return</span> getLastK(array, k, middle + <span class=\"number\">1</span>, end);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】两个链表的第一个公共结点","url":"http://yoursite.com/2017/09/01/【剑指Offer】两个链表的第一个公共结点/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入两个链表，找出它们的第一个公共结点。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    ListNode(<span class=\"keyword\">int</span> val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">FindFirstCommonNode</span><span class=\"params\">(ListNode pHead1, ListNode pHead2)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> firstLen = getListLength(pHead1);</div><div class=\"line\">    <span class=\"keyword\">int</span> secondLen = getListLength(pHead2);</div><div class=\"line\">    <span class=\"keyword\">int</span> diff = firstLen - secondLen;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (diff &gt; <span class=\"number\">0</span>)</div><div class=\"line\">        pHead1 = findFirstNodeHelper(pHead1, diff);</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diff &lt; <span class=\"number\">0</span>)</div><div class=\"line\">        pHead2 = findFirstNodeHelper(pHead2, -diff);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (pHead1 != <span class=\"keyword\">null</span> &amp;&amp; pHead2 != <span class=\"keyword\">null</span> &amp;&amp; pHead1 != pHead2) &#123;</div><div class=\"line\">        pHead1 = pHead1.next;</div><div class=\"line\">        pHead2 = pHead2.next;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> pHead1;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getListLength</span><span class=\"params\">(ListNode head)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (head != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        count++;</div><div class=\"line\">        head = head.next;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> count;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ListNode <span class=\"title\">findFirstNodeHelper</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> step)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (step != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        step--;</div><div class=\"line\">        head = head.next;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> head;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】数组中的逆序对","url":"http://yoursite.com/2017/09/01/【剑指Offer】数组中的逆序对/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>在数组中的两个数字如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对，输入一个数组，求出这个数组中的逆序对的总数。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">InversePairs</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"keyword\">null</span> || array.length &lt; <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span>[] aux = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[array.length];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++)</div><div class=\"line\">        aux[i] = array[i];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> sortAndCount(array, aux, <span class=\"number\">0</span>, array.length - <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">sortAndCount</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span>[] aux, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (start == end)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> mid = (start + end) / <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> leftCount = sortAndCount(array, aux, start, mid);</div><div class=\"line\">    <span class=\"keyword\">int</span> rightCount = sortAndCount(array, aux, mid + <span class=\"number\">1</span>, end);</div><div class=\"line\">    <span class=\"keyword\">int</span> splitCount = countSplitInv(array, aux, start, mid, end);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> (leftCount + rightCount + splitCount) % <span class=\"number\">1000000007</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">countSplitInv</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span>[] aux, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> end)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> j = start;</div><div class=\"line\">    <span class=\"keyword\">int</span> k = mid + <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt;= end; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (j &gt; mid)</div><div class=\"line\">            array[i] = aux[k++];</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k &gt; end)</div><div class=\"line\">            array[i] = aux[j++];</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (aux[j] &lt; aux[k])</div><div class=\"line\">            array[i] = aux[j++];</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            count += mid - j + <span class=\"number\">1</span>;</div><div class=\"line\">            array[i] = aux[k++];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">1000000007</span>)</div><div class=\"line\">                count %= <span class=\"number\">1000000007</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt;= end; i++)</div><div class=\"line\">        aux[i] = array[i];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> count;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】第一个只出现一次的字符","url":"http://yoursite.com/2017/08/31/【剑指Offer】第一个只出现一次的字符/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>在字符串中找出第一个只出现一次的字符。如输入“abaccdeff”，则输出’b’。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">FirstNotRepeatingChar</span><span class=\"params\">(String str)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || str.length() == <span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    Map&lt;Character, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.length(); i++) &#123;</div><div class=\"line\">        Character ch = str.charAt(i);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (map.containsKey(ch))</div><div class=\"line\">            map.put(ch, map.get(ch) + <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            map.put(ch, <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.length(); i++) &#123;</div><div class=\"line\">        Character ch = str.charAt(i);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (map.get(ch) == <span class=\"number\">1</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> i;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h2><ol>\n<li><p>定义一个函数，输入两个字符串，从第一个字符串中删除在第二个字符串中出现过的所有字符。例如从第一个字符串“We are students. ”中删除在第二个字符串“aeiou”中出现过的字符得到的结果是“W r Stdnts. ”。为了解决这个问题，可以创建一个用数组实现的简单哈希表来存储第二个字符串。这样从头到尾扫描第一个字符串的每一个字符时，用O(1)时间就能判断出该字符是不是在第二个字符中。如果第一个字符串的长度是n，那么总的时间复杂度是O(n)。</p>\n</li>\n<li><p>定义一个函数，删除字符串中所有重复出现的字符。例如输入“google”，删除重复的字符之后的结果是“gole”。可以创建一个用布尔型数组实现的简单的哈希表。数组中的元素的意义是其下标看做ASCII码后对应的字母在字符串中是否已经出现。先把数组中所有的元素都设为false。以“google”为例，当扫描到第一个g时，g的ASCII码是103，那么把数组中下标为103的元素设为true。当扫描到第二个g时，发现数组中下标为103的元素的值是true，就知道g在前面已经出现了。也就是说，用O(1)时间就能判断出每个字符是否在前面已经出现过。如果字符串的长度是n，那么总的时间复杂度是O(n)。</p>\n</li>\n<li><p>在英语中，如果两个单词中出现的字母相同，并且每个字母出现的次数也相同，那么这两个单词互为变位词（Anagram）。例如silent与listen、evil与live等互为变位词。请完成一个函数，判断输入的两个字符串是不是互为变位词。可以创建一个用数组实现的简单哈希表，用来统计字符串中每个字符出现的次数。当扫描到第一个字符串中的每个字符时，为哈希表对应的项的值增加1.接下来扫描第二个字符串，扫描到每个字符时，为哈希表对应的项的值减去1.如果扫描完第二个字符串后，哈希表中所有的值都是0，那么这两个字符串就互为变位词。</p>\n</li>\n</ol>\n","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】丑数","url":"http://yoursite.com/2017/08/31/【剑指Offer】丑数/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>把只包含因子2、3和5的数称作丑数（Ugly Number）。求按从小到大的顺序的第1500个丑数。例如6、8都是丑数，但14不是，因为它包含因子7.习惯上把1当做第一个丑数。</p>\n<h2 id=\"逐个判断每个整数是不是丑数的解法，直观但不够高效\"><a href=\"#逐个判断每个整数是不是丑数的解法，直观但不够高效\" class=\"headerlink\" title=\"逐个判断每个整数是不是丑数的解法，直观但不够高效\"></a>逐个判断每个整数是不是丑数的解法，直观但不够高效</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">GetUglyNumber_Solution</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> number = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> currentIdx = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (currentIdx &lt; index) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isUglyNumber(number))</div><div class=\"line\">            currentIdx++;</div><div class=\"line\"></div><div class=\"line\">        number++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> number;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isUglyNumber</span><span class=\"params\">(<span class=\"keyword\">int</span> number)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (number % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</div><div class=\"line\">        number /= <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (number % <span class=\"number\">3</span> == <span class=\"number\">0</span>)</div><div class=\"line\">        number /= <span class=\"number\">3</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (number % <span class=\"number\">5</span> == <span class=\"number\">0</span>)</div><div class=\"line\">        number /= <span class=\"number\">5</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> number == <span class=\"number\">1</span> ? <span class=\"keyword\">true</span> :<span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"创建数组保存已经找到的丑数，用空间换时间的解法\"><a href=\"#创建数组保存已经找到的丑数，用空间换时间的解法\" class=\"headerlink\" title=\"创建数组保存已经找到的丑数，用空间换时间的解法\"></a>创建数组保存已经找到的丑数，用空间换时间的解法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">GetUglyNumber_Solution</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span>[] array = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[index];</div><div class=\"line\">    <span class=\"keyword\">int</span> t2 = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> t3 = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> t5 = <span class=\"number\">0</span>;</div><div class=\"line\">    array[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; index; i++) &#123;</div><div class=\"line\">        array[i] = Math.min(array[t2] * <span class=\"number\">2</span>, Math.min(array[t3] * <span class=\"number\">3</span>, array[t5] * <span class=\"number\">5</span>));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(array[i] == array[t2] * <span class=\"number\">2</span>)</div><div class=\"line\">            t2++;</div><div class=\"line\">        <span class=\"keyword\">if</span> (array[i] == array[t3] * <span class=\"number\">3</span>)</div><div class=\"line\">            t3++;</div><div class=\"line\">        <span class=\"keyword\">if</span> (array[i] == array[t5] * <span class=\"number\">5</span>)</div><div class=\"line\">            t5++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> array[index - <span class=\"number\">1</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】把数组排成最小的数","url":"http://yoursite.com/2017/08/31/【剑指Offer】把数组排成最小的数/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3, 32, 321}，则打印出这3个数字能排成的最小数字321323。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">PrintMinNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] numbers)</span> </span>&#123;</div><div class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">    String[] str = <span class=\"keyword\">new</span> String[numbers.length];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numbers.length; i++)</div><div class=\"line\">        str[i] = String.valueOf(numbers[i]);</div><div class=\"line\"></div><div class=\"line\">    Arrays.sort(str, <span class=\"keyword\">new</span> Comparator&lt;String&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(String o1, String o2)</span> </span>&#123;</div><div class=\"line\">            String m = o1 + o2;</div><div class=\"line\">            String n = o2 + o1;</div><div class=\"line\">            <span class=\"keyword\">return</span> m.compareTo(n);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.length; i++)</div><div class=\"line\">        sb.append(str[i]);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】从1到n整数中1出现的次数","url":"http://yoursite.com/2017/08/31/【剑指Offer】从1到n整数中1出现的次数/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入一个整数n，求从1到n这n个整数的十进制表示中1出现的次数。例如输入12，从1到12这些整数中包含1的数字有1，10，11和12，1一共出现了5次。</p>\n<h2 id=\"不考虑时间效率的解法，靠它想拿Offer有点难\"><a href=\"#不考虑时间效率的解法，靠它想拿Offer有点难\" class=\"headerlink\" title=\"不考虑时间效率的解法，靠它想拿Offer有点难\"></a>不考虑时间效率的解法，靠它想拿Offer有点难</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">NumberOf1Between1AndN_Solution</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">        count += NumberOf1(i);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> count;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">NumberOf1</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (n % <span class=\"number\">10</span> == <span class=\"number\">1</span>)</div><div class=\"line\">            count++;</div><div class=\"line\"></div><div class=\"line\">        n /= <span class=\"number\">10</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> count;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"从数字规律着手明显提高时间效率的解法，能让面试官耳目一新\"><a href=\"#从数字规律着手明显提高时间效率的解法，能让面试官耳目一新\" class=\"headerlink\" title=\"从数字规律着手明显提高时间效率的解法，能让面试官耳目一新\"></a>从数字规律着手明显提高时间效率的解法，能让面试官耳目一新</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">NumberOf1Between1AndN_Solution</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> currentN = n;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (currentN &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> current = currentN % <span class=\"number\">10</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> high = currentN / <span class=\"number\">10</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> low = n - currentN * index;</div><div class=\"line\"></div><div class=\"line\">        count += high * index;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (current &gt; <span class=\"number\">1</span>)</div><div class=\"line\">            count += index;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == <span class=\"number\">1</span>)</div><div class=\"line\">            count += low + <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">        index *= <span class=\"number\">10</span>;</div><div class=\"line\">        currentN /= <span class=\"number\">10</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> count;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】连续子数组的最大和","url":"http://yoursite.com/2017/08/30/【剑指Offer】连续子数组的最大和/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入一个整形数组，数组里有正数也有负数。数组中一个或连续的多个整数组成一个子数组。求所有子数组的和的最大值。要求时间复杂度为O(n)。</p>\n<h2 id=\"举例分析数组的规律\"><a href=\"#举例分析数组的规律\" class=\"headerlink\" title=\"举例分析数组的规律\"></a>举例分析数组的规律</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">FindGreatestSumOfSubArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"keyword\">null</span> || array.length &lt; <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> max = Integer.MIN_VALUE;</div><div class=\"line\">    <span class=\"keyword\">int</span> sum = -<span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (sum &lt; <span class=\"number\">0</span>)</div><div class=\"line\">            sum = array[i];</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            sum += array[i];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (sum &gt; max)</div><div class=\"line\">            max = sum;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> max;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"应用动态规划法\"><a href=\"#应用动态规划法\" class=\"headerlink\" title=\"应用动态规划法\"></a>应用动态规划法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">FindGreatestSumOfSubArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"keyword\">null</span> || array.length &lt; <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> max = Integer.MIN_VALUE;</div><div class=\"line\">    <span class=\"keyword\">int</span>[] s = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[array.length];</div><div class=\"line\">    s[<span class=\"number\">0</span>] = array[<span class=\"number\">0</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; s.length; i++) &#123;</div><div class=\"line\">        s[i] = Math.max(array[i], s[i - <span class=\"number\">1</span>] + array[i]);</div><div class=\"line\">        max = Math.max(s[i] , max);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> max;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】最小的K个数","url":"http://yoursite.com/2017/08/29/【剑指Offer】最小的K个数/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入n个整数，找出其中最小的k个数。例如输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4.</p>\n<h2 id=\"O-n-的算法，只有当我们可以修改输入的数组时可用\"><a href=\"#O-n-的算法，只有当我们可以修改输入的数组时可用\" class=\"headerlink\" title=\"O(n)的算法，只有当我们可以修改输入的数组时可用\"></a>O(n)的算法，只有当我们可以修改输入的数组时可用</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title\">GetLeastNumbers_Solution</span><span class=\"params\">(<span class=\"keyword\">int</span>[] input, <span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">    ArrayList&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (input == <span class=\"keyword\">null</span> || input.length &lt;= <span class=\"number\">0</span> || k &gt; input.length || k &lt; <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> right = input.length - <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> pivot = Partition(input, left, right);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (pivot != k - <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (pivot &lt; k - <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            left = pivot + <span class=\"number\">1</span>;</div><div class=\"line\">            pivot = Partition(input, left, right);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            right = pivot - <span class=\"number\">1</span>;</div><div class=\"line\">            pivot = Partition(input, left, right);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++)</div><div class=\"line\">        result.add(input[i]);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">Partition</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = start + <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = start + <span class=\"number\">1</span>; j &lt;= end; j++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (array[j] &lt; array[start]) &#123;</div><div class=\"line\">            Swap(array, i, j);</div><div class=\"line\">            i++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Swap(array, start, --i);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> i;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (i == j)</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    array[i] = array[i] ^ array[j];</div><div class=\"line\">    array[j] = array[i] ^ array[j];</div><div class=\"line\">    array[i] = array[j] ^ array[i];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"O-nlogk-的算法，特别适合处理海量数据\"><a href=\"#O-nlogk-的算法，特别适合处理海量数据\" class=\"headerlink\" title=\"O(nlogk)的算法，特别适合处理海量数据\"></a>O(nlogk)的算法，特别适合处理海量数据</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title\">GetLeastNumbers_Solution</span><span class=\"params\">(<span class=\"keyword\">int</span>[] input, <span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">    ArrayList&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (input == <span class=\"keyword\">null</span> || input.length &lt;= <span class=\"number\">0</span> || k &gt; input.length || k &lt; <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\"></div><div class=\"line\">    PriorityQueue&lt;Integer&gt; maxHeap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;(k, <span class=\"keyword\">new</span> Comparator&lt;Integer&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Integer o1, Integer o2)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> o2.compareTo(o1);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; input.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (maxHeap.size() &lt; k)</div><div class=\"line\">            maxHeap.offer(input[i]);</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (input[i] &lt; maxHeap.peek()) &#123;</div><div class=\"line\">            maxHeap.poll();</div><div class=\"line\">            maxHeap.offer(input[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (Integer i : maxHeap)</div><div class=\"line\">        result.add(i);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】数组中出现次数超过一半的数字","url":"http://yoursite.com/2017/08/28/【剑指Offer】数组中出现次数超过一半的数字/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1，2，3，2，2，2，5，4，2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2.</p>\n<h2 id=\"基于Partition函数的O-n-算法\"><a href=\"#基于Partition函数的O-n-算法\" class=\"headerlink\" title=\"基于Partition函数的O(n)算法\"></a>基于Partition函数的O(n)算法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">MoreThanHalfNum_Solution</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"keyword\">null</span> || array.length &lt;= <span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> right = array.length - <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> middle = (left + right) / <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> pivot = Partition(array, left, right);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (pivot != middle) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (pivot &lt; middle) &#123;</div><div class=\"line\">            left = pivot + <span class=\"number\">1</span>;</div><div class=\"line\">            pivot = Partition(array, left, right);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            right = pivot - <span class=\"number\">1</span>;</div><div class=\"line\">            pivot = Partition(array, left, right);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> result = array[middle];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!CheckMoreThanHalf(array, result))</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">Partition</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = start + <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = start + <span class=\"number\">1</span>; j &lt;= end; j++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (array[j] &lt; array[start]) &#123;</div><div class=\"line\">            Swap(array, i, j);</div><div class=\"line\">            i++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Swap(array, start, --i);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> i;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (i == j)</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    array[i] = array[i] ^ array[j];</div><div class=\"line\">    array[j] = array[i] ^ array[j];</div><div class=\"line\">    array[i] = array[j] ^ array[i];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">CheckMoreThanHalf</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> result)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (result == array[i])</div><div class=\"line\">            count++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">2</span> * count &lt;= array.length)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"根据数组特点找出O-n-的算法\"><a href=\"#根据数组特点找出O-n-的算法\" class=\"headerlink\" title=\"根据数组特点找出O(n)的算法\"></a>根据数组特点找出O(n)的算法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">MoreThanHalfNum_Solution</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"keyword\">null</span> || array.length &lt;= <span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> result = array[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; array.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            count = <span class=\"number\">1</span>;</div><div class=\"line\">            result = array[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (array[i] == result)</div><div class=\"line\">            count++;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            count--;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!CheckMoreThanHalf(array, result))</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">CheckMoreThanHalf</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> result)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (result == array[i])</div><div class=\"line\">            count++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">2</span> * count &lt;= array.length)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】字符串的排列","url":"http://yoursite.com/2017/08/28/【剑指Offer】字符串的排列/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入一个字符串，打印出该字符串中字符的所有排列。例如输入字符串abc，则打印出由字符a、b、c所能排列出来的所有字符串abc、acb、bac、bca、cab和cba。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;String&gt; <span class=\"title\">Permutation</span><span class=\"params\">(String str)</span> </span>&#123;</div><div class=\"line\">    ArrayList&lt;String&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    HashSet&lt;String&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (str != <span class=\"keyword\">null</span> &amp;&amp; str.length() != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        Permutation(str.toCharArray(), <span class=\"number\">0</span>, set);</div><div class=\"line\">        result.addAll(set);</div><div class=\"line\">        Collections.sort(result);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Permutation</span><span class=\"params\">(<span class=\"keyword\">char</span>[] str, <span class=\"keyword\">int</span> pos, HashSet&lt;String&gt; result)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (pos == str.length - <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        result.add(String.valueOf(str));</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = pos; i &lt; str.length; i++)&#123;</div><div class=\"line\">        swap(str, i, pos);</div><div class=\"line\">        Permutation(str, pos + <span class=\"number\">1</span>, result);</div><div class=\"line\">        swap(str, pos, i);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">char</span>[] str, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> temp = str[i];</div><div class=\"line\">    str[i] = str[j];</div><div class=\"line\">    str[j] = temp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h2><ol>\n<li><p>输入一个含有8个数字的数组，判断有没有可能把这8个数字分别放到正方体的8个顶点上，使得正方体上三组相对的面上的4个顶点的和都相等。</p>\n</li>\n<li><p>在8x8的国际象棋上摆放8个皇后，使其不能相互攻击，即任意两个皇后不得处在同一行、同一列或者同一对角线上。请问总共有多少种符合条件的摆法？</p>\n</li>\n</ol>\n","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】二叉搜索树与双向链表","url":"http://yoursite.com/2017/08/27/【剑指Offer】二叉搜索树与双向链表/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</div><div class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</div><div class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> TreeNode last = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">Convert</span><span class=\"params\">(TreeNode pRootOfTree)</span> </span>&#123;</div><div class=\"line\">    ConvertNode(pRootOfTree);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (last != <span class=\"keyword\">null</span> &amp;&amp; last.left != <span class=\"keyword\">null</span>)</div><div class=\"line\">        last = last.left;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> last;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ConvertNode</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    ConvertNode(root.left);</div><div class=\"line\"></div><div class=\"line\">    root.left = last;</div><div class=\"line\">    <span class=\"keyword\">if</span> (last != <span class=\"keyword\">null</span>)</div><div class=\"line\">        last.right = root;</div><div class=\"line\">    last = root;</div><div class=\"line\"></div><div class=\"line\">    ConvertNode(root.right);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"Chat Robot Demo","url":"http://yoursite.com/2017/06/18/Chat-Robot-Demo/","content":"<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.*;</div><div class=\"line\"><span class=\"keyword\">import</span> com.google.gson.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChatRobot</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">        String APIKEY = <span class=\"string\">\"b239e8c2220941988f400352d7efb923\"</span>;</div><div class=\"line\">        String[] question = &#123;<span class=\"string\">\"你叫什么名字？\"</span>, <span class=\"string\">\"谁是世界上最聪明的人？\"</span>, <span class=\"string\">\"那谁是世界上最帅气的人？\"</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; question.length; i++)&#123;</div><div class=\"line\">            String INFO = URLEncoder.encode(question[i], <span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\">            String getURL = <span class=\"string\">\"http://www.tuling123.com/openapi/api?key=\"</span> + APIKEY + <span class=\"string\">\"&amp;info=\"</span> + INFO;</div><div class=\"line\">            URL getUrl = <span class=\"keyword\">new</span> URL(getURL);</div><div class=\"line\">            HttpURLConnection connection = (HttpURLConnection) getUrl.openConnection();</div><div class=\"line\">            connection.connect();</div><div class=\"line\"></div><div class=\"line\">            BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(connection.getInputStream(), <span class=\"string\">\"utf-8\"</span>));</div><div class=\"line\">            JsonParser parser = <span class=\"keyword\">new</span> JsonParser();</div><div class=\"line\">            JsonObject object = (JsonObject) parser.parse(reader);</div><div class=\"line\"></div><div class=\"line\">            reader.close();</div><div class=\"line\">            connection.disconnect();</div><div class=\"line\"></div><div class=\"line\">            System.out.println(<span class=\"string\">\"Q: \"</span> + question[i]);</div><div class=\"line\">            System.out.println(<span class=\"string\">\"A: \"</span> + object.get(<span class=\"string\">\"text\"</span>));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Result\"><a href=\"#Result\" class=\"headerlink\" title=\"Result\"></a>Result</h2><p><img src=\"http://i2.muimg.com/1949/0b7d48bb5ef52a39.png\" alt=\"Markdown\"></p>\n","categories":[],"tags":["Chat Robot"]},{"title":"React Demo","url":"http://yoursite.com/2017/06/15/React-Demo/","content":"<p>React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable and easier to debug.</p>\n<p>Build encapsulated components that manage their own state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the DOM.</p>\n<h2 id=\"build-an-interactive-tic-tac-toe-game\"><a href=\"#build-an-interactive-tic-tac-toe-game\" class=\"headerlink\" title=\"build an interactive tic-tac-toe game\"></a>build an interactive tic-tac-toe game</h2><p>We have three components:</p>\n<ul>\n<li>Square</li>\n<li>Board</li>\n<li>Game</li>\n</ul>\n<p>The Square component renders a single button, the Board renders 9 squares, and the Game component renders a board with some placeholders.</p>\n<h3 id=\"index-html\"><a href=\"#index-html\" class=\"headerlink\" title=\"index.html\"></a>index.html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>reactDemo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/react@latest/dist/react.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/react-dom@latest/dist/react-dom.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/babel-standalone@6.15.0/babel.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/babel\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Game</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"game\"</span>&gt;</span></span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"game-board\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Board</span> /&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Board</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">            <span class=\"attr\">squares</span>: <span class=\"built_in\">Array</span>(<span class=\"number\">9</span>).fill(<span class=\"literal\">null</span>),</div><div class=\"line\">            <span class=\"attr\">xIsNext</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handleClick(i)&#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> squares = <span class=\"keyword\">this</span>.state.squares.slice();</div><div class=\"line\">        <span class=\"keyword\">if</span> (calculateWinner(squares) || squares[i])</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        squares[i] = <span class=\"keyword\">this</span>.state.xIsNext ? <span class=\"string\">'X'</span> : <span class=\"string\">'O'</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">            <span class=\"attr\">squares</span>: squares,</div><div class=\"line\">            <span class=\"attr\">xIsNext</span>: !<span class=\"keyword\">this</span>.state.xIsNext,</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    renderSquare(i) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Square</span></span></span></div><div class=\"line\">                <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.state.squares[i]&#125;</span></div><div class=\"line\">                <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt; this.handleClick(i)&#125;</div><div class=\"line\">            /&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    render() &#123;</div><div class=\"line\">        const winner = calculateWinner(this.state.squares);</div><div class=\"line\">        let status;</div><div class=\"line\">        if (winner)</div><div class=\"line\">            status = 'Winner: ' + winner;</div><div class=\"line\">        else</div><div class=\"line\">            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');</div><div class=\"line\"></div><div class=\"line\">        return (</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"status\"</span>&gt;</span>&#123;status&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"board-row\"</span>&gt;</span></div><div class=\"line\">                    &#123;this.renderSquare(0)&#125;</div><div class=\"line\">                    &#123;this.renderSquare(1)&#125;</div><div class=\"line\">                    &#123;this.renderSquare(2)&#125;</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"board-row\"</span>&gt;</span></div><div class=\"line\">                    &#123;this.renderSquare(3)&#125;</div><div class=\"line\">                    &#123;this.renderSquare(4)&#125;</div><div class=\"line\">                    &#123;this.renderSquare(5)&#125;</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"board-row\"</span>&gt;</span></div><div class=\"line\">                    &#123;this.renderSquare(6)&#125;</div><div class=\"line\">                    &#123;this.renderSquare(7)&#125;</div><div class=\"line\">                    &#123;this.renderSquare(8)&#125;</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function Square(props) &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">className</span>=<span class=\"string\">\"square\"</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;props.onClick&#125;</span>&gt;</span></div><div class=\"line\">            &#123;props.value&#125;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function calculateWinner(squares) &#123;</div><div class=\"line\">    const lines = [</div><div class=\"line\">        [0, 1, 2],</div><div class=\"line\">        [3, 4, 5],</div><div class=\"line\">        [6, 7, 8],</div><div class=\"line\">        [0, 3, 6],</div><div class=\"line\">        [1, 4, 7],</div><div class=\"line\">        [2, 5, 8],</div><div class=\"line\">        [0, 4, 8],</div><div class=\"line\">        [2, 4, 6],</div><div class=\"line\">    ];</div><div class=\"line\"></div><div class=\"line\">    for (let i = 0; i <span class=\"tag\">&lt; <span class=\"attr\">lines.length</span>; <span class=\"attr\">i</span>++) &#123;</span></div><div class=\"line\">        <span class=\"attr\">const</span> [<span class=\"attr\">a</span>, <span class=\"attr\">b</span>, <span class=\"attr\">c</span>] = <span class=\"string\">lines[i];</span></div><div class=\"line\">        <span class=\"attr\">if</span> (<span class=\"attr\">squares</span>[<span class=\"attr\">a</span>] &amp;&amp; <span class=\"attr\">squares</span>[<span class=\"attr\">a</span>] === <span class=\"string\">squares[b]</span> &amp;&amp; <span class=\"attr\">squares</span>[<span class=\"attr\">a</span>] === <span class=\"string\">squares[c])</span> &#123;</div><div class=\"line\">            <span class=\"attr\">return</span> <span class=\"attr\">squares</span>[<span class=\"attr\">a</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"attr\">return</span> <span class=\"attr\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">ReactDOM.render</span>(</div><div class=\"line\">    &lt;<span class=\"attr\">Game</span> /&gt;,</div><div class=\"line\">    document.getElementById('root')</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h2 id=\"result\"><a href=\"#result\" class=\"headerlink\" title=\"result\"></a>result</h2><p><img src=\"http://i2.muimg.com/1949/905018b5283fe2ba.png\" alt=\"Markdown\"></p>\n","categories":["React"],"tags":["JavaScript","React"]},{"title":"Spring Boot Demo","url":"http://yoursite.com/2017/06/07/Spring-Boot-Demo/","content":"<p>Spring Boot offers a fast way to build applications. It looks at your classpath and at beans you have configured, makes reasonable assumptions about what you’re missing, and adds it. With Spring Boot you can focus more on business features and less on infrastructure.</p>\n<h2 id=\"Build-with-Maven\"><a href=\"#Build-with-Maven\" class=\"headerlink\" title=\"Build with Maven\"></a>Build with Maven</h2><h3 id=\"directory-structure\"><a href=\"#directory-structure\" class=\"headerlink\" title=\"directory structure\"></a>directory structure</h3><p><img src=\"http://i1.piimg.com/1949/9bb98f88651f90bc.png\" alt=\"Markdown\"></p>\n<h3 id=\"pom-xml\"><a href=\"#pom-xml\" class=\"headerlink\" title=\"pom.xml\"></a>pom.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></div><div class=\"line\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springbootDemo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"execute\"><a href=\"#execute\" class=\"headerlink\" title=\"execute\"></a>execute</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn package</div></pre></td></tr></table></figure>\n<h2 id=\"Create-a-simple-web-application\"><a href=\"#Create-a-simple-web-application\" class=\"headerlink\" title=\"Create a simple web application\"></a>Create a simple web application</h2><h3 id=\"create-a-web-controller\"><a href=\"#create-a-web-controller\" class=\"headerlink\" title=\"create a web controller\"></a>create a web controller</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> hello;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Greetings from Spring Boot!\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"create-an-Application-class\"><a href=\"#create-an-Application-class\" class=\"headerlink\" title=\"create an Application class\"></a>create an Application class</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> hello;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@SpringBootApplication</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        SpringApplication.run(Application.class, args);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"result\"><a href=\"#result\" class=\"headerlink\" title=\"result\"></a>result</h3><p><img src=\"http://i1.piimg.com/1949/c57405de9ca43f8c.png\" alt=\"Markdown\"></p>\n<h2 id=\"Add-Tests\"><a href=\"#Add-Tests\" class=\"headerlink\" title=\"Add Tests\"></a>Add Tests</h2><p>mock the HTTP request cycle</p>\n<h3 id=\"a-simple-unit-test\"><a href=\"#a-simple-unit-test\" class=\"headerlink\" title=\"a simple unit test\"></a>a simple unit test</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> hello;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.hamcrest.Matchers.equalTo;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.MediaType;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringRunner;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.web.servlet.MockMvc;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class)</div><div class=\"line\"><span class=\"meta\">@SpringBootTest</span></div><div class=\"line\"><span class=\"meta\">@AutoConfigureMockMvc</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloControllerTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"keyword\">private</span> MockMvc mvc;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getHello</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        mvc.perform(MockMvcRequestBuilders.get(<span class=\"string\">\"/\"</span>).accept(MediaType.APPLICATION_JSON))</div><div class=\"line\">                .andExpect(status().isOk())</div><div class=\"line\">                .andExpect(content().string(equalTo(<span class=\"string\">\"Greetings from Spring Boot!\"</span>)));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"a-very-simple-full-stack-integration-test\"><a href=\"#a-very-simple-full-stack-integration-test\" class=\"headerlink\" title=\"a very simple full-stack integration test\"></a>a very simple full-stack integration test</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> hello;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.hamcrest.Matchers.equalTo;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertThat;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.Before;</div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.embedded.LocalServerPort;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.web.client.TestRestTemplate;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.ResponseEntity;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringRunner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class)</div><div class=\"line\"><span class=\"meta\">@SpringBootTest</span>(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloControllerIT</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@LocalServerPort</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> URL base;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"keyword\">private</span> TestRestTemplate template;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Before</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.base = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"http://localhost:\"</span> + port + <span class=\"string\">\"/\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getHello</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        ResponseEntity&lt;String&gt; response = template.getForEntity(base.toString(),</div><div class=\"line\">                String.class);</div><div class=\"line\">        assertThat(response.getBody(), equalTo(<span class=\"string\">\"Greetings from Spring Boot!\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"result-1\"><a href=\"#result-1\" class=\"headerlink\" title=\"result\"></a>result</h3><p><img src=\"http://i1.piimg.com/1949/e1314d724d8d1e0e.png\" alt=\"Markdown\"></p>\n","categories":["Spring Boot"],"tags":["Java","Spring Boot"]},{"title":"【剑指Offer】复杂链表的复制","url":"http://yoursite.com/2017/05/16/【剑指Offer】复杂链表的复制/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>请实现函数ComplexListNode Clone(ComplexListNode pHead)，复制一个复杂链表。在复杂链表中，每个结点除了有一个m_pNext指针指向下一个结点外，还有一个m_pSibling指向链表中的任意结点或者NULL。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomListNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> label;</div><div class=\"line\">    RandomListNode next = <span class=\"keyword\">null</span>;</div><div class=\"line\">    RandomListNode random = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    RandomListNode(<span class=\"keyword\">int</span> label) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.label = label;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RandomListNode <span class=\"title\">Clone</span><span class=\"params\">(RandomListNode pHead)</span> </span>&#123;</div><div class=\"line\">    CloneNodes(pHead);</div><div class=\"line\">    ConnectSiblingNodes(pHead);</div><div class=\"line\">    <span class=\"keyword\">return</span> ReconnectNodes(pHead);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">CloneNodes</span><span class=\"params\">(RandomListNode pHead)</span> </span>&#123;</div><div class=\"line\">    RandomListNode node = pHead;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (node != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        RandomListNode clone = <span class=\"keyword\">new</span> RandomListNode(node.label);</div><div class=\"line\">        clone.next = node.next;</div><div class=\"line\">        node.next = clone;</div><div class=\"line\">        node = clone.next;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ConnectSiblingNodes</span><span class=\"params\">(RandomListNode pHead)</span> </span>&#123;</div><div class=\"line\">    RandomListNode node = pHead;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (node != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (node.random != <span class=\"keyword\">null</span>)</div><div class=\"line\">            node.next.random = node.random.next;</div><div class=\"line\"></div><div class=\"line\">        node = node.next.next;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> RandomListNode <span class=\"title\">ReconnectNodes</span><span class=\"params\">(RandomListNode pHead)</span> </span>&#123;</div><div class=\"line\">    RandomListNode node = pHead;</div><div class=\"line\">    RandomListNode cloneNode = <span class=\"keyword\">null</span>, cloneHead = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (node != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        cloneHead = cloneNode = node.next;</div><div class=\"line\">        node.next = cloneNode.next;</div><div class=\"line\">        node = node.next;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (node != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        cloneNode.next = node.next;</div><div class=\"line\">        cloneNode = cloneNode.next;</div><div class=\"line\">        node.next = cloneNode.next;</div><div class=\"line\">        node = node.next;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> cloneHead;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】二叉树中和为某一值的路径","url":"http://yoursite.com/2017/05/16/【剑指Offer】二叉树中和为某一值的路径/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入一棵二叉树和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</div><div class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</div><div class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; FindPath(TreeNode root, <span class=\"keyword\">int</span> target) &#123;</div><div class=\"line\">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; paths = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    ArrayList&lt;Integer&gt; path = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    FindPath(root, target, <span class=\"number\">0</span>, path, paths);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> paths;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">FindPath</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> sum, ArrayList&lt;Integer&gt; path, ArrayList&lt;ArrayList&lt;Integer&gt;&gt; paths)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> currentSum = sum + root.val;</div><div class=\"line\">    path.add(root.val);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (currentSum == target &amp;&amp; root.left == <span class=\"keyword\">null</span> &amp;&amp; root.right == <span class=\"keyword\">null</span>)</div><div class=\"line\">        paths.add(<span class=\"keyword\">new</span> ArrayList(path));</div><div class=\"line\"></div><div class=\"line\">    FindPath(root.left, target, currentSum, path, paths);</div><div class=\"line\">    FindPath(root.right, target, currentSum, path, paths);</div><div class=\"line\"></div><div class=\"line\">    path.remove(path.size() - <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】二叉搜索树的后序遍历序列","url":"http://yoursite.com/2017/05/16/【剑指Offer】二叉搜索树的后序遍历序列/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则返回true，否则返回false。假设输入的数组的任意两个数字都互不相同。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">VerifySquenceOfBST</span><span class=\"params\">(<span class=\"keyword\">int</span>[] sequence)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (sequence.length == <span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> VerifySquenceOfBST(sequence, <span class=\"number\">0</span>, sequence.length - <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">VerifySquenceOfBST</span><span class=\"params\">(<span class=\"keyword\">int</span>[] sequence, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (start &gt;= end)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> idx = start;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (; idx &lt; end; idx++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (sequence[idx] &gt; sequence[end])</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = idx + <span class=\"number\">1</span>; i &lt; end; i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (sequence[i] &lt; sequence[end])</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> VerifySquenceOfBST(sequence, start, idx - <span class=\"number\">1</span>) &amp;&amp; VerifySquenceOfBST(sequence, idx, end - <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h2><p>输入一个整数数组，判断该数组是不是某二叉搜索树的前序遍历的结果。这和前面问题的后序遍历很类似，只是在前序遍历得到的序列中，第一个数字是根结点的值。</p>\n","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】从上往下打印二叉树","url":"http://yoursite.com/2017/05/16/【剑指Offer】从上往下打印二叉树/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>从上往下打印出二叉树的每个结点，同一层的结点按照从左到右的顺序打印。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</div><div class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</div><div class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title\">PrintFromTopToBottom</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</div><div class=\"line\">    ArrayList&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\"></div><div class=\"line\">    Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</div><div class=\"line\">    queue.offer(root);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty())&#123;</div><div class=\"line\">        TreeNode node = queue.poll();</div><div class=\"line\">        result.add(node.val);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (node.left != <span class=\"keyword\">null</span>)</div><div class=\"line\">            queue.offer(node.left);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (node.right != <span class=\"keyword\">null</span>)</div><div class=\"line\">            queue.offer(node.right);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h2><p>如何广度优先遍历一个有向图》这同样也可以基于队列实现。树是图的一种特殊退化形式，从上到下按层遍历二叉树，从本质上来说就是广度优先遍历二叉树。</p>\n","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】栈的压入、弹出序列","url":"http://yoursite.com/2017/05/15/【剑指Offer】栈的压入、弹出序列/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1、2、3、4、5是某栈的压栈序列，序列4、5、3、2、1是该压栈序列对应的一个弹出序列，但4、3、5、1、2就不可能是该压栈序列的弹出序列。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">IsPopOrder</span><span class=\"params\">(<span class=\"keyword\">int</span>[] pushA, <span class=\"keyword\">int</span>[] popA)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> popPos = <span class=\"number\">0</span>;</div><div class=\"line\">    Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pushA.length; i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (stack.isEmpty() || stack.peek() != popA[popPos])</div><div class=\"line\">            stack.push(pushA[i]);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() == popA[popPos])&#123;</div><div class=\"line\">            stack.pop();</div><div class=\"line\">            popPos++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> stack.isEmpty();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】包含min函数的栈","url":"http://yoursite.com/2017/05/15/【剑指Offer】包含min函数的栈/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的min函数。在该栈中，调用min、push及pop的时间复杂度都是O(1)。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">Stack&lt;Integer&gt; data = <span class=\"keyword\">new</span> Stack&lt;&gt;();</div><div class=\"line\">Stack&lt;Integer&gt; min = <span class=\"keyword\">new</span> Stack&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> node)</span> </span>&#123;</div><div class=\"line\">    data.push(node);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (min.size() == <span class=\"number\">0</span> || node &lt; min.peek())</div><div class=\"line\">        min.push(node);</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        min.push(min.peek());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    data.pop();</div><div class=\"line\">    min.pop();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">top</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> data.peek();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> min.peek();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】顺时针打印矩阵","url":"http://yoursite.com/2017/05/14/【剑指Offer】顺时针打印矩阵/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title\">printMatrix</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> rows = matrix.length;</div><div class=\"line\">    <span class=\"keyword\">int</span> columns = matrix[<span class=\"number\">0</span>].length;</div><div class=\"line\">    <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</div><div class=\"line\">    ArrayList&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">2</span> * start &lt; rows &amp;&amp; <span class=\"number\">2</span> * start &lt; columns)&#123;</div><div class=\"line\">        printMatrixInCircle(result, matrix, start);</div><div class=\"line\">        start++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">printMatrixInCircle</span><span class=\"params\">(ArrayList&lt;Integer&gt; result, <span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> start)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> rows = matrix.length;</div><div class=\"line\">    <span class=\"keyword\">int</span> columns = matrix[<span class=\"number\">0</span>].length;</div><div class=\"line\">    <span class=\"keyword\">int</span> endX = columns - start - <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> endY = rows - start - <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt;= endX; i++)</div><div class=\"line\">        result.add(matrix[start][i]);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (start &lt; endY)&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start + <span class=\"number\">1</span>; i &lt;= endY; i++)</div><div class=\"line\">            result.add(matrix[i][endX]);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (start &lt; endX &amp;&amp; start &lt; endY)&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = endX - <span class=\"number\">1</span>; i &gt;= start; i--)</div><div class=\"line\">            result.add(matrix[endY][i]);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (start &lt; endY - <span class=\"number\">1</span> &amp;&amp; start &lt; endX)&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = endY - <span class=\"number\">1</span>; i &gt; start; i--)</div><div class=\"line\">            result.add(matrix[i][start]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】二叉树的镜像","url":"http://yoursite.com/2017/05/14/【剑指Offer】二叉树的镜像/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>请完成一个函数，输入一个二叉树，该函数输出它的镜像。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</div><div class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</div><div class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Mirror</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.left == <span class=\"keyword\">null</span> &amp;&amp; root.right == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    TreeNode tmp = root.left;</div><div class=\"line\">    root.left = root.right;</div><div class=\"line\">    root.right = tmp;</div><div class=\"line\"></div><div class=\"line\">    Mirror(root.left);</div><div class=\"line\">    Mirror(root.right);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】树的子结构","url":"http://yoursite.com/2017/05/14/【剑指Offer】树的子结构/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入两棵二叉树A和B，判断B是不是A的子结构。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</div><div class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</div><div class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">HasSubtree</span><span class=\"params\">(TreeNode root1, TreeNode root2)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (root1 != <span class=\"keyword\">null</span> &amp;&amp; root2 != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (root1.val == root2.val)</div><div class=\"line\">            result = DoesTree1HasTree2(root1, root2);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (result == <span class=\"keyword\">false</span>)</div><div class=\"line\">            result = HasSubtree(root1.left, root2);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (result == <span class=\"keyword\">false</span>)</div><div class=\"line\">            result = HasSubtree(root1.right, root2);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">DoesTree1HasTree2</span><span class=\"params\">(TreeNode root1, TreeNode root2)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root2 == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root1 == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root1.val != root2.val)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> DoesTree1HasTree2(root1.left, root2.left) &amp;&amp; DoesTree1HasTree2(root1.right, root2.right);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】合并两个排序的链表","url":"http://yoursite.com/2017/05/14/【剑指Offer】合并两个排序的链表/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入两个递增排序的链表，合并这两个链表并使新链表中的结点仍然是按照递增排序的。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    ListNode(<span class=\"keyword\">int</span> val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">Merge</span><span class=\"params\">(ListNode list1, ListNode list2)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (list1 == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> list2;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (list2 == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> list1;</div><div class=\"line\"></div><div class=\"line\">    ListNode head = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (list1.val &lt; list2.val)&#123;</div><div class=\"line\">        head = list1;</div><div class=\"line\">        head.next = Merge(list1.next, list2);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        head = list2;</div><div class=\"line\">        head.next = Merge(list1, list2.next);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> head;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】反转链表","url":"http://yoursite.com/2017/05/14/【剑指Offer】反转链表/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>定义一个函数，输入一个链表的头结点，反转该链表并输出反转后链表的头结点。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    ListNode(<span class=\"keyword\">int</span> val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">ReverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</div><div class=\"line\">    ListNode current = head;</div><div class=\"line\">    ListNode previous = <span class=\"keyword\">null</span>;</div><div class=\"line\">    ListNode tail = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (current != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">        ListNode next = current.next;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>)</div><div class=\"line\">            tail = current;</div><div class=\"line\"></div><div class=\"line\">        current.next = previous;</div><div class=\"line\">        previous = current;</div><div class=\"line\">        current = next;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> tail;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】链表中倒数第k个结点","url":"http://yoursite.com/2017/05/14/【剑指Offer】链表中倒数第k个结点/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入一个链表，输出该链表中倒数第k个结点。例如一个链表有6个结点，从头结点开始它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个结点是值为4的结点。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    ListNode(<span class=\"keyword\">int</span> val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">FindKthToTail</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (k == <span class=\"number\">0</span> || head == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    ListNode ahead = head;</div><div class=\"line\">    ListNode behind = head;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; k; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ahead.next == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">        ahead = ahead.next;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (ahead.next != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">        ahead = ahead.next;</div><div class=\"line\">        behind = behind.next;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> behind;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h2><ol>\n<li><p>求链表的中间结点。如果链表中结点总数为奇数，返回中间结点；如果结点总数是偶数，返回中间两个结点的任意一个。我们也可以定义两个指针，同时从链表的头结点出发，一个指针一次走一步，另一个指针一次走两步。当走得快的指针走到链表的末尾时，走得慢的指针正好在链表的中间。</p>\n</li>\n<li><p>判断一个单向链表是否形成了环形结构。定义两个指针，同时从链表的头结点出发，一个指针一次走一步，另一个指针一次走两步。如果走得快的指针追上了走得慢的指针，那么链表就是环形链表；如果走得快的指针走到了链表的末尾都没有追上第一个指针，那么链表就不是环形链表。</p>\n</li>\n</ol>\n","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】调整数组顺序使奇数位于偶数前面","url":"http://yoursite.com/2017/05/13/【剑指Offer】调整数组顺序使奇数位于偶数前面/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。</p>\n<h2 id=\"只完成基本功能的解法，仅适用于初级程序员\"><a href=\"#只完成基本功能的解法，仅适用于初级程序员\" class=\"headerlink\" title=\"只完成基本功能的解法，仅适用于初级程序员\"></a>只完成基本功能的解法，仅适用于初级程序员</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reOrderArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> begin = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> end = array.length - <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (begin &lt; end)&#123;</div><div class=\"line\">        <span class=\"keyword\">while</span> (begin &lt; end &amp;&amp; (array[begin] &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>)</div><div class=\"line\">            begin++;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">while</span> (begin &lt; end &amp;&amp; (array[end] &amp; <span class=\"number\">1</span>) != <span class=\"number\">1</span>)</div><div class=\"line\">            end--;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (begin &lt; end)&#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> tmp = array[end];</div><div class=\"line\">            array[end] = array[begin];</div><div class=\"line\">            array[begin] = tmp;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"考虑可扩展性的解法，能秒杀Offer\"><a href=\"#考虑可扩展性的解法，能秒杀Offer\" class=\"headerlink\" title=\"考虑可扩展性的解法，能秒杀Offer\"></a>考虑可扩展性的解法，能秒杀Offer</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reOrderArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> begin = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> end = array.length - <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (begin &lt; end)&#123;</div><div class=\"line\">        <span class=\"keyword\">while</span> (begin &lt; end &amp;&amp; isOdd(array[begin]))</div><div class=\"line\">            begin++;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">while</span> (begin &lt; end &amp;&amp; !isOdd(array[end]))</div><div class=\"line\">            end--;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (begin &lt; end)&#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> tmp = array[end];</div><div class=\"line\">            array[end] = array[begin];</div><div class=\"line\">            array[begin] = tmp;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOdd</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (n &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"本题扩展\"><a href=\"#本题扩展\" class=\"headerlink\" title=\"本题扩展\"></a>本题扩展</h2><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reOrderArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span>[] aux = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[array.length];</div><div class=\"line\">    <span class=\"keyword\">int</span> countOdd = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</div><div class=\"line\">        aux[i] = array[i];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (isOdd(array[i]))</div><div class=\"line\">            countOdd++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> oddPos = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> evenPos = countOdd;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; aux.length; i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isOdd(aux[i]))</div><div class=\"line\">            array[oddPos++] = aux[i];</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            array[evenPos++] = aux[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOdd</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (n &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】在O(1)时间删除链表结点","url":"http://yoursite.com/2017/05/13/【剑指Offer】在O-1-时间删除链表结点/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定单向链表的头指针和一个结点指针，定义一个函数在O(1)时间删除该结点。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    ListNode(<span class=\"keyword\">int</span> val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteNode</span><span class=\"params\">(ListNode head, ListNode node)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (node.next != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">        node.val = node.next.val;</div><div class=\"line\">        node.next = node.next.next;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (head == node)</div><div class=\"line\">        head = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">while</span> (head.next != node)</div><div class=\"line\">            head = head.next;</div><div class=\"line\"></div><div class=\"line\">        head.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】打印1到最大的n位数","url":"http://yoursite.com/2017/05/13/【剑指Offer】打印1到最大的n位数/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入数字n，按顺序打印出从1到最大的n为十进制数。比如输入3，则打印出1、2、3一直到最大的3位数即999。</p>\n<h2 id=\"跳进面试官的陷阱\"><a href=\"#跳进面试官的陷阱\" class=\"headerlink\" title=\"跳进面试官的陷阱\"></a>跳进面试官的陷阱</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Print1ToMaxOfNDigits</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> number = (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">10</span>, n);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; number; i++)</div><div class=\"line\">        System.out.println(i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"在字符串上模拟数字加法的解法，绕过陷阱才能拿到Offer\"><a href=\"#在字符串上模拟数字加法的解法，绕过陷阱才能拿到Offer\" class=\"headerlink\" title=\"在字符串上模拟数字加法的解法，绕过陷阱才能拿到Offer\"></a>在字符串上模拟数字加法的解法，绕过陷阱才能拿到Offer</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Print1ToMaxOfNDigits</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span>[] number = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[n];</div><div class=\"line\">    Arrays.fill(number, <span class=\"string\">'0'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (!Increment(number))&#123;</div><div class=\"line\">        PrintNumber(number);</div><div class=\"line\">        System.out.println();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">Increment</span><span class=\"params\">(<span class=\"keyword\">char</span>[] number)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> carry = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = number.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> sum = number[i] - <span class=\"string\">'0'</span> + carry;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (i == number.length - <span class=\"number\">1</span>)</div><div class=\"line\">            sum++;</div><div class=\"line\"></div><div class=\"line\">        carry = sum / <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (carry == <span class=\"number\">1</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>)</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">            number[i] = (<span class=\"keyword\">char</span>) (sum % <span class=\"number\">10</span> + <span class=\"string\">'0'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            number[i] = (<span class=\"keyword\">char</span>) (sum + <span class=\"string\">'0'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">PrintNumber</span><span class=\"params\">(<span class=\"keyword\">char</span>[] number)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> isBeginning0 = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; number.length; i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isBeginning0 == <span class=\"keyword\">true</span> &amp;&amp; number[i] != <span class=\"string\">'0'</span>)</div><div class=\"line\">            isBeginning0 = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (isBeginning0 == <span class=\"keyword\">false</span>)</div><div class=\"line\">            System.out.print(number[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"把问题转换成数字排列的解法，递归让代码更简洁\"><a href=\"#把问题转换成数字排列的解法，递归让代码更简洁\" class=\"headerlink\" title=\"把问题转换成数字排列的解法，递归让代码更简洁\"></a>把问题转换成数字排列的解法，递归让代码更简洁</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Print1ToMaxOfNDigits</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span>[] number = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[n];</div><div class=\"line\">    Arrays.fill(number, <span class=\"string\">'0'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">9</span>; i++)&#123;</div><div class=\"line\">        number[<span class=\"number\">0</span>] = (<span class=\"keyword\">char</span>) (i + <span class=\"string\">'0'</span>);</div><div class=\"line\">        Print1ToMaxOfNDigits(number, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Print1ToMaxOfNDigits</span><span class=\"params\">(<span class=\"keyword\">char</span>[] number, <span class=\"keyword\">int</span> index)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (index == number.length - <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        PrintNumber(number);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">9</span>; i++) &#123;</div><div class=\"line\">        number[index+<span class=\"number\">1</span>] = (<span class=\"keyword\">char</span>) (i + <span class=\"string\">'0'</span>);</div><div class=\"line\">        Print1ToMaxOfNDigits(number, index + <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">PrintNumber</span><span class=\"params\">(<span class=\"keyword\">char</span>[] number)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> isBeginning0 = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; number.length; i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isBeginning0 == <span class=\"keyword\">true</span> &amp;&amp; number[i] != <span class=\"string\">'0'</span>)</div><div class=\"line\">            isBeginning0 = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (isBeginning0 == <span class=\"keyword\">false</span>)</div><div class=\"line\">            System.out.print(number[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (isBeginning0 == <span class=\"keyword\">false</span>)</div><div class=\"line\">        System.out.println();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h2><p>定义一个函数，在该函数中可以实现任意两个整数的加法。由于没有限定输入两个数的大小范围，我们也要把它当做大数问题来处理。</p>\n","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】数值的整数次方","url":"http://yoursite.com/2017/05/12/【剑指Offer】数值的整数次方/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>实现函数double Power(double base, int exponent)，求base的exponent次方。不得使用库函数，同时不需要考虑大数问题。</p>\n<h2 id=\"自以为题目简单的解法\"><a href=\"#自以为题目简单的解法\" class=\"headerlink\" title=\"自以为题目简单的解法\"></a>自以为题目简单的解法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">Power</span><span class=\"params\">(<span class=\"keyword\">double</span> base, <span class=\"keyword\">int</span> exponent)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">double</span> result = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= Math.abs(exponent); i++)</div><div class=\"line\">        result *= base;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (exponent &lt; <span class=\"number\">0</span>)</div><div class=\"line\">        result = <span class=\"number\">1</span> / result;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"全面又高效的解法，确保我们能拿到Offer\"><a href=\"#全面又高效的解法，确保我们能拿到Offer\" class=\"headerlink\" title=\"全面又高效的解法，确保我们能拿到Offer\"></a>全面又高效的解法，确保我们能拿到Offer</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">Power</span><span class=\"params\">(<span class=\"keyword\">double</span> base, <span class=\"keyword\">int</span> exponent)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (exponent == <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> base;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (exponent == <span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">double</span> result = Power(base, Math.abs(exponent) &gt;&gt; <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    result *= result;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ((exponent &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>)</div><div class=\"line\">        result *= base;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (exponent &lt; <span class=\"number\">0</span>)</div><div class=\"line\">        result = <span class=\"number\">1</span> / result;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】二进制中1的个数","url":"http://yoursite.com/2017/05/12/【剑指Offer】二进制中1的个数/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>请实现一个函数，输入一个整数，输出该数二进制表示中1的个数。例如把9表示成二进制是1001，有2位是1。因此如果输入9，该函数输出2。</p>\n<h2 id=\"可能引起死循环的解法\"><a href=\"#可能引起死循环的解法\" class=\"headerlink\" title=\"可能引起死循环的解法\"></a>可能引起死循环的解法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">NumberOf1</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((n &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>)</div><div class=\"line\">            count++;</div><div class=\"line\"></div><div class=\"line\">        n = n &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> count;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"常规解法\"><a href=\"#常规解法\" class=\"headerlink\" title=\"常规解法\"></a>常规解法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">NumberOf1</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (flag != <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((n &amp; flag) == flag)</div><div class=\"line\">            count++;</div><div class=\"line\"></div><div class=\"line\">        flag = flag &lt;&lt; <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> count;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"能给面试官带来惊喜的解法\"><a href=\"#能给面试官带来惊喜的解法\" class=\"headerlink\" title=\"能给面试官带来惊喜的解法\"></a>能给面试官带来惊喜的解法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">NumberOf1</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        count++;</div><div class=\"line\">        n = n &amp; (n - <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> count;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h2><ol>\n<li><p>用一条语句判断一个整数是不是2的整数次方。一个整数如果是2的整数次方，那么它的二进制表示中有且只有一位是1，而其他所有位都是0.根据前面的分析，把这个整数减去1之后再和它自己做与运算，这个整数中唯一的1就会变成0.</p>\n</li>\n<li><p>输入两个整数m和n，计算需要改变m的二进制表示中的多少位才能得到n。比如10的二进制表示为1010，13的二进制表示为1101，需要改变1010中的3位才能得到1101.我们可以分为两步解决这个问题：第一步求这两个数的异或，第二步统计异或结果中1的位数。</p>\n</li>\n</ol>\n","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】斐波那契数列","url":"http://yoursite.com/2017/05/12/【剑指Offer】斐波那契数列/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>写一个函数，输入n，求斐波那契（Fibonacci）数列的第n项。</p>\n<h2 id=\"效率很低的解法，挑剔的面试官不会喜欢\"><a href=\"#效率很低的解法，挑剔的面试官不会喜欢\" class=\"headerlink\" title=\"效率很低的解法，挑剔的面试官不会喜欢\"></a>效率很低的解法，挑剔的面试官不会喜欢</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">Fibonacci</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> || n == <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> n;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> Fibonacci(n - <span class=\"number\">1</span>) + Fibonacci(n - <span class=\"number\">2</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"面试官期待的实用解法\"><a href=\"#面试官期待的实用解法\" class=\"headerlink\" title=\"面试官期待的实用解法\"></a>面试官期待的实用解法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">Fibonacci</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> || n == <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> n;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> fib1 = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> fib2 = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> current = fib1 + fib2;</div><div class=\"line\">        fib1 = fib2;</div><div class=\"line\">        fib2 = current;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> fib2;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"时间复杂度O-logn-但不够实用的解法\"><a href=\"#时间复杂度O-logn-但不够实用的解法\" class=\"headerlink\" title=\"时间复杂度O(logn)但不够实用的解法\"></a>时间复杂度O(logn)但不够实用的解法</h2><h2 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h2><h3 id=\"跳台阶\"><a href=\"#跳台阶\" class=\"headerlink\" title=\"跳台阶\"></a>跳台阶</h3><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">JumpFloor</span><span class=\"params\">(<span class=\"keyword\">int</span> target)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (target == <span class=\"number\">1</span> || target == <span class=\"number\">2</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> target;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> JumpFloor(target - <span class=\"number\">1</span>) + JumpFloor(target - <span class=\"number\">2</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"变态跳台阶\"><a href=\"#变态跳台阶\" class=\"headerlink\" title=\"变态跳台阶\"></a>变态跳台阶</h3><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。此时该青蛙跳上一个n级的台阶总共有多少种跳法？ </p>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">JumpFloorII</span><span class=\"params\">(<span class=\"keyword\">int</span> target)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (target == <span class=\"number\">0</span> || target == <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * JumpFloorII(target - <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"矩形覆盖\"><a href=\"#矩形覆盖\" class=\"headerlink\" title=\"矩形覆盖\"></a>矩形覆盖</h3><p>我们可以用2x1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2x1的小矩形无重叠地覆盖一个2xn的大矩形，总共有多少种方法？</p>\n<h3 id=\"实现-2\"><a href=\"#实现-2\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">RectCover</span><span class=\"params\">(<span class=\"keyword\">int</span> target)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (target == <span class=\"number\">0</span> || target == <span class=\"number\">1</span> || target == <span class=\"number\">2</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> target;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> RectCover(target - <span class=\"number\">1</span>) + RectCover(target - <span class=\"number\">2</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】旋转数组的最小数字","url":"http://yoursite.com/2017/05/12/【剑指Offer】旋转数组的最小数字/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minNumberInRotateArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> right = array.length - <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> mid = left;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (array[left] &gt;= array[right])&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (right - left == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            mid = right;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        mid = (left + right) / <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (array[mid] == array[left] &amp;&amp; array[mid] == array[right])</div><div class=\"line\">            <span class=\"keyword\">return</span> minInOrder(array, left, right);</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (array[mid] &gt;= array[left])</div><div class=\"line\">            left = mid;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (array[mid] &lt;= array[right])</div><div class=\"line\">            right = mid;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> array[mid];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">minInOrder</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> min = array[left];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = left + <span class=\"number\">1</span>; i &lt;= right; i++)</div><div class=\"line\">        min = Math.min(min, array[i]);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> min;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】用两个栈实现队列","url":"http://yoursite.com/2017/05/11/【剑指Offer】用两个栈实现队列/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>用两个栈实现一个队列。分别完成在队列尾部插入结点和在队列头部删除结点的功能。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Stack&lt;Integer&gt; stack1 = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</div><div class=\"line\">Stack&lt;Integer&gt; stack2 = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> node)</span> </span>&#123;</div><div class=\"line\">    stack1.push(node);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (stack2.isEmpty())&#123;</div><div class=\"line\">        <span class=\"keyword\">while</span> (!stack1.isEmpty())</div><div class=\"line\">            stack2.push(stack1.pop());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> stack2.pop();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h2><p>用两个队列实现一个栈。</p>\n","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】重建二叉树","url":"http://yoursite.com/2017/05/11/【剑指Offer】重建二叉树/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建出二叉树并输出它的头结点。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    TreeNode left;</div><div class=\"line\">    TreeNode right;</div><div class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">reConstructBinaryTree</span><span class=\"params\">(<span class=\"keyword\">int</span>[] pre, <span class=\"keyword\">int</span>[] in)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> reConstructBinaryTree(pre, in, <span class=\"number\">0</span>, pre.length - <span class=\"number\">1</span>, <span class=\"number\">0</span>, in.length - <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">reConstructBinaryTree</span><span class=\"params\">(<span class=\"keyword\">int</span>[] pre, <span class=\"keyword\">int</span>[] in, <span class=\"keyword\">int</span> startPreorder, <span class=\"keyword\">int</span> endPreorder, <span class=\"keyword\">int</span> startInorder, <span class=\"keyword\">int</span> endInorder)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (startPreorder &gt; endPreorder || startInorder &gt; endInorder)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    TreeNode node = <span class=\"keyword\">new</span> TreeNode(pre[startPreorder]);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = startInorder; i &lt;= endInorder; i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (in[i] == pre[startPreorder])&#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> leftLength = i - startInorder;</div><div class=\"line\">            node.left = reConstructBinaryTree(pre, in, startPreorder + <span class=\"number\">1</span>, startPreorder + leftLength, startInorder, i - <span class=\"number\">1</span>);</div><div class=\"line\">            node.right = reConstructBinaryTree(pre, in, startPreorder + leftLength + <span class=\"number\">1</span>, endPreorder, i + <span class=\"number\">1</span>, endInorder);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> node;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】从尾到头打印链表","url":"http://yoursite.com/2017/05/11/【剑指Offer】从尾到头打印链表/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入一个链表的头结点，从尾到头反过来打印出每个结点的值。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    ListNode(<span class=\"keyword\">int</span> val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title\">printListFromTailToHead</span><span class=\"params\">(ListNode listNode)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (listNode != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">        printListFromTailToHead(listNode.next);</div><div class=\"line\">        list.add(listNode.val);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> list;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】替换空格","url":"http://yoursite.com/2017/05/10/【剑指Offer】替换空格/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>请实现一个函数，把字符串中的每个空格替换成“%20”。例如输入“We are happy.”，则输出“We%20are%20happy.“。</p>\n<h2 id=\"时间复杂度为O-n-2-的解法，不足以拿到Offer\"><a href=\"#时间复杂度为O-n-2-的解法，不足以拿到Offer\" class=\"headerlink\" title=\"时间复杂度为O(n^2)的解法，不足以拿到Offer\"></a>时间复杂度为O(n^2)的解法，不足以拿到Offer</h2><h2 id=\"时间复杂度为O-n-的解法，搞定Offer就靠它了\"><a href=\"#时间复杂度为O-n-的解法，搞定Offer就靠它了\" class=\"headerlink\" title=\"时间复杂度为O(n)的解法，搞定Offer就靠它了\"></a>时间复杂度为O(n)的解法，搞定Offer就靠它了</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">replaceSpace</span><span class=\"params\">(StringBuffer str)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> originalLength = str.length();</div><div class=\"line\">    <span class=\"keyword\">int</span> numberOfBlank = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; originalLength; i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (str.charAt(i) == <span class=\"string\">' '</span>)</div><div class=\"line\">            numberOfBlank++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> newLength = originalLength + <span class=\"number\">2</span> * numberOfBlank;</div><div class=\"line\">    str.setLength(newLength);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> indexOfOriginal = originalLength - <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> indexOfNew = newLength - <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (indexOfNew &gt; indexOfOriginal)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (str.charAt(indexOfOriginal) == <span class=\"string\">' '</span>)&#123;</div><div class=\"line\">            str.setCharAt(indexOfNew, <span class=\"string\">'0'</span>);</div><div class=\"line\">            str.setCharAt(--indexOfNew, <span class=\"string\">'2'</span>);</div><div class=\"line\">            str.setCharAt(--indexOfNew, <span class=\"string\">'%'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            str.setCharAt(indexOfNew, str.charAt(indexOfOriginal));</div><div class=\"line\"></div><div class=\"line\">        indexOfNew--;</div><div class=\"line\">        indexOfOriginal--;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> str.toString();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h2><p>有两个排序的数组A1和A2，内存在A1的末尾有足够多的空余空间容纳A2。请实现一个函数，把A2中的所有数字插入到A1中并且所有的数字是排序的。</p>\n","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】二维数组中的查找","url":"http://yoursite.com/2017/05/10/【剑指Offer】二维数组中的查找/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">Find</span><span class=\"params\">(<span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span>[][] array)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> rows = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> columns = array[<span class=\"number\">0</span>].length - <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (rows &lt; array.length &amp;&amp; columns &gt;= <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (array[rows][columns] &lt; target)</div><div class=\"line\">            rows++;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (array[rows][columns] &gt; target)</div><div class=\"line\">            columns--;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】实现Singleton模式","url":"http://yoursite.com/2017/05/09/【剑指Offer】实现Singleton模式/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>设计一个类，我们只能生成该类的一个实例。</p>\n<h2 id=\"不好的解法一：只适用于单线程环境\"><a href=\"#不好的解法一：只适用于单线程环境\" class=\"headerlink\" title=\"不好的解法一：只适用于单线程环境\"></a>不好的解法一：只适用于单线程环境</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton1</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton1 instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton1</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton1 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>)</div><div class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton1();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"不好的解法二：虽然在多线程环境中能工作但效率不高\"><a href=\"#不好的解法二：虽然在多线程环境中能工作但效率不高\" class=\"headerlink\" title=\"不好的解法二：虽然在多线程环境中能工作但效率不高\"></a>不好的解法二：虽然在多线程环境中能工作但效率不高</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton2</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton2 instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton2</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton2 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>)</div><div class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton2();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"可行的解法：加同步锁前后两次判断实例是否已存在\"><a href=\"#可行的解法：加同步锁前后两次判断实例是否已存在\" class=\"headerlink\" title=\"可行的解法：加同步锁前后两次判断实例是否已存在\"></a>可行的解法：加同步锁前后两次判断实例是否已存在</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton3</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton3 instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton3</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton3 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton3.class)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>)</div><div class=\"line\">                    instance = <span class=\"keyword\">new</span> Singleton3();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"强烈推荐的解法一：利用静态构造函数\"><a href=\"#强烈推荐的解法一：利用静态构造函数\" class=\"headerlink\" title=\"强烈推荐的解法一：利用静态构造函数\"></a>强烈推荐的解法一：利用静态构造函数</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton4</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton4 instance = <span class=\"keyword\">new</span> Singleton4();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton4</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton4 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"强烈推荐的解法二：实现按需创建实例\"><a href=\"#强烈推荐的解法二：实现按需创建实例\" class=\"headerlink\" title=\"强烈推荐的解法二：实现按需创建实例\"></a>强烈推荐的解法二：实现按需创建实例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton5</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton5</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton5 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Nested.instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nested</span></span>&#123;</div><div class=\"line\">         <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton5 instance = <span class=\"keyword\">new</span> Singleton5();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【算法】图","url":"http://yoursite.com/2017/04/16/【算法】图/","content":"<h2 id=\"union-find算法\"><a href=\"#union-find算法\" class=\"headerlink\" title=\"union-find算法\"></a>union-find算法</h2><h3 id=\"动态连通性\"><a href=\"#动态连通性\" class=\"headerlink\" title=\"动态连通性\"></a>动态连通性</h3><p><img src=\"http://i1.piimg.com/1949/7830aa780246348a.png\" alt=\"Markdown\"></p>\n<h3 id=\"quick-find算法\"><a href=\"#quick-find算法\" class=\"headerlink\" title=\"quick-find算法\"></a>quick-find算法</h3><h4 id=\"示意\"><a href=\"#示意\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i2.muimg.com/1949/9456a8293d32c9ef.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">union</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> pID = find(p);</div><div class=\"line\">\t<span class=\"keyword\">int</span> qID = find(q);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pID == qID)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; id.length; i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (id[i] == pID)</div><div class=\"line\">\t\t\tid[i] = qID;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tcount--;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> id[p];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>在quick-find算法中，每次find调用只需要访问数组一次，而归并两个分量的union操作访问数组的次数在N+3到2N+1之间。</p>\n<h3 id=\"quick-union算法\"><a href=\"#quick-union算法\" class=\"headerlink\" title=\"quick-union算法\"></a>quick-union算法</h3><h4 id=\"示意-1\"><a href=\"#示意-1\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i2.muimg.com/1949/23a364290eea1782.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">union</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> pRoot = find(p);</div><div class=\"line\">\t<span class=\"keyword\">int</span> qRoot = find(q);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pRoot == qRoot)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t</div><div class=\"line\">\tid[pRoot] = qRoot;</div><div class=\"line\">\t</div><div class=\"line\">\tcount--;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;\t\t</div><div class=\"line\">\t<span class=\"keyword\">while</span> (id[p] != p)</div><div class=\"line\">\t\tp = id[p];</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> id[p];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p><img src=\"http://i2.muimg.com/1949/d63e558f3cd8e654.png\" alt=\"Markdown\"></p>\n<p>quick-union算法中的find方法访问数组的次数为1加上给定触点所对应的节点的深度的两倍。union和connected访问数组的次数为两次find操作（如果union中给定的两个触点分别在不同的树中则还需要加1）。</p>\n<h3 id=\"加权quick-union算法\"><a href=\"#加权quick-union算法\" class=\"headerlink\" title=\"加权quick-union算法\"></a>加权quick-union算法</h3><p>记录每一棵树的大小并总是将较小的树连接到较大的树上。</p>\n<h4 id=\"示意-2\"><a href=\"#示意-2\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/a3c8a2c34bb44f5c.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-2\"><a href=\"#实现-2\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnionFind</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] size;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UnionFind</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">\t\tcount = n;</div><div class=\"line\">\t\tid = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\tsize = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\tid[i] = i;</div><div class=\"line\">\t\t\tsize[i] = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> count;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">connected</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> find(p) == find(q);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">union</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> pRoot = find(p);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> qRoot = find(q);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pRoot == qRoot)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (size[pRoot] &lt; size[qRoot])&#123;</div><div class=\"line\">\t\t\tid[pRoot] = qRoot;</div><div class=\"line\">\t\t\tsize[qRoot] += size[pRoot];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\tid[qRoot] = pRoot;</div><div class=\"line\">\t\t\tsize[pRoot] += size[qRoot];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tcount--;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (id[p] != p)</div><div class=\"line\">\t\t\tp = id[p];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id[p];</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>对于N个触点，加权quick-union算法构造的森林中的任意节点的深度最多为lgN。</p>\n<p>对于加权quick-union算法和N个触点，在最坏情况下find、connected和union的成本的增长数量级为lgN。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><img src=\"http://i1.piimg.com/1949/974c6a77edb3dacf.png\" alt=\"Markdown\"></p>\n<h2 id=\"无向图\"><a href=\"#无向图\" class=\"headerlink\" title=\"无向图\"></a>无向图</h2><h3 id=\"深度优先搜索\"><a href=\"#深度优先搜索\" class=\"headerlink\" title=\"深度优先搜索\"></a>深度优先搜索</h3><p>要搜索一幅图，只需用一个递归方法来遍历所有顶点。在访问其中一个顶点时：</p>\n<ol>\n<li>将它标记为已访问</li>\n<li>递归地访问它的所有没有被标记过的邻居顶点</li>\n</ol>\n<p>如果图是连通的，每个连接链表中的元素都会被检查到。</p>\n<h4 id=\"示意-3\"><a href=\"#示意-3\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/0264195b993311fb.png\" alt=\"Markdown\"><br><img src=\"http://i1.piimg.com/1949/7a07a3fd3f50eb8d.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-3\"><a href=\"#实现-3\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DepthFirstPaths</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> s;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] edgeTo;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DepthFirstPaths</span><span class=\"params\">(Graph g, <span class=\"keyword\">int</span> s)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[g.V()];</div><div class=\"line\">\t\tdfs(g, s);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Graph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)&#123;</div><div class=\"line\">\t\t\t\tedgeTo[w] = v;</div><div class=\"line\">\t\t\t\tdfs(g, w);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> marked[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">pathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!hasPathTo(v))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tStack&lt;Integer&gt; path = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</div><div class=\"line\">\t\tpath.push(v);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (v != s)&#123;</div><div class=\"line\">\t\t\tpath.push(edgeTo[v]);</div><div class=\"line\">\t\t\tv = edgeTo[v];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> path;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-3\"><a href=\"#特点-3\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>深度优先搜索标记与起点连通的所有顶点所需的时间和顶点的度数之和成正比。</p>\n<p>使用深度优先搜索得到从给定起点到任意标记顶点的路径所需的时间与路径的长度成正比。</p>\n<p>单点路径：给定一幅图和一个起点s，回答“从s到给定目的顶点v是否存在一条路径？如果有，找出这条路径。”等类似问题。</p>\n<h3 id=\"广度优先搜索\"><a href=\"#广度优先搜索\" class=\"headerlink\" title=\"广度优先搜索\"></a>广度优先搜索</h3><p>使用一个队列来保存所有已经被标记过但其邻接表还未被检查过的顶点。先将起点加入队列，然后重复以下步骤直到队列为空：</p>\n<ol>\n<li>取队列中的下一个顶点v并标记它</li>\n<li>将与v相邻的所有未被标记过的顶点加入队列</li>\n</ol>\n<h4 id=\"示意-4\"><a href=\"#示意-4\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/3c2eaf4cb946acf8.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-4\"><a href=\"#实现-4\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BreadthFirstPaths</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> s;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] edgeTo;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BreadthFirstPaths</span><span class=\"params\">(Graph g, <span class=\"keyword\">int</span> s)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[g.V()];</div><div class=\"line\">\t\tbfs(g, s);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(Graph g, <span class=\"keyword\">int</span> s)</span></span>&#123;</div><div class=\"line\">\t\tQueue&lt;Integer&gt; queue = <span class=\"keyword\">new</span> Queue&lt;Integer&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tmarked[s] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\tqueue.enqueue(s);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(!queue.isEmpty())&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> v = queue.dequeue();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)&#123;</div><div class=\"line\">\t\t\t\t\tmarked[w] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t\t\tqueue.enqueue(w);</div><div class=\"line\">\t\t\t\t\tedgeTo[w] = v;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> marked[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">pathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!hasPathTo(v))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tStack&lt;Integer&gt; path = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</div><div class=\"line\">\t\tpath.push(v);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (v != s)&#123;</div><div class=\"line\">\t\t\tpath.push(edgeTo[v]);</div><div class=\"line\">\t\t\tv = edgeTo[v];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> path;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-4\"><a href=\"#特点-4\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>对于从s可达的任意顶点v，广度优先搜索都能找到一条从s到v的最短路径（没有其他从s到v的路径所含的边比这条路径更少）。</p>\n<p>广度优先搜索所需的时间在最坏情况下和V+E成正比。</p>\n<p>单点最短路径：给定一幅图和一个起点s，回答“从s到给定目的顶点v是否存在一条路径？如果有，找出其中最短的那条（所含边数最少）。”等类似问题。</p>\n<h4 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h4><p>在搜索中都会先将起点存入数据结构中，然后重复以下步骤直到数据结构被清空：</p>\n<ol>\n<li>取其中的下一个顶点并标记它</li>\n<li>将v的所有相邻而又未被标记的顶点加入数据结构</li>\n</ol>\n<p>这两个算法的不同之处仅在于从数据结构中获取下一个顶点的规则（对于广度优先搜索来说是最早加入的顶点，对于深度优先搜索来说是最晚加入的顶点）。</p>\n<h3 id=\"连通分量\"><a href=\"#连通分量\" class=\"headerlink\" title=\"连通分量\"></a>连通分量</h3><p>深度优先搜索的直接应用是找出一幅图的所有连通分量。它能够将所有顶点切分为等价类。</p>\n<h4 id=\"示意-5\"><a href=\"#示意-5\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/639ea2cba5992960.png\" alt=\"Markdown\"><br><img src=\"http://i4.buimg.com/1949/e7a39bc32cca0ce8.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-5\"><a href=\"#实现-5\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConnectedComponents</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] id;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConnectedComponents</span><span class=\"params\">(Graph g)</span></span>&#123;</div><div class=\"line\">\t\tcount = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tid = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[g.V()];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> s = <span class=\"number\">0</span>; s &lt; g.V(); s++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[s] == <span class=\"keyword\">false</span>)&#123;</div><div class=\"line\">\t\t\t\tdfs(g, s);</div><div class=\"line\">\t\t\t\tcount++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Graph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\tid[v] = count;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)</div><div class=\"line\">\t\t\t\tdfs(g, w);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">connected</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id[v] == id[w];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">id</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> count;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-5\"><a href=\"#特点-5\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>深度优先搜索的预处理使用的时间和空间与V+E成正比且可以在常数时间内处理关于图的连通性查询。</p>\n<h4 id=\"比较-1\"><a href=\"#比较-1\" class=\"headerlink\" title=\"比较\"></a>比较</h4><p>union-find算法其实更快，因为它不需要完整地构造并表示一幅图，是一种动态算法（在任何时候都能用接近常数的时间检查两个顶点是否连通，甚至是在添加一条边的时候），但深度优先搜索则必须要对图进行预处理。因此，在完成只需要判断连通性或是需要完成有大量连通性查询和插入操作混合等类似的任务时，更倾向使用union-find算法，而深度优先搜索则更适合实现图的抽象数据类型，因为它能更有效地利用已有的数据结构。</p>\n<h3 id=\"检测环\"><a href=\"#检测环\" class=\"headerlink\" title=\"检测环\"></a>检测环</h3><p>给定的图是无环图吗？</p>\n<h4 id=\"实现-6\"><a href=\"#实现-6\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cycle</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> hasCycle;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cycle</span><span class=\"params\">(Graph g)</span></span>&#123;</div><div class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\thasCycle = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> s = <span class=\"number\">0</span>; s &lt; g.V(); s++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[s] == <span class=\"keyword\">false</span>)</div><div class=\"line\">\t\t\t\tdfs(g, s, s);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Graph g, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> p)</span></span>&#123;</div><div class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)</div><div class=\"line\">\t\t\t\tdfs(g, w, v);</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (w != p)</div><div class=\"line\">\t\t\t\thasCycle = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasCycle</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> hasCycle;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"双色问题\"><a href=\"#双色问题\" class=\"headerlink\" title=\"双色问题\"></a>双色问题</h3><p>能够用两种颜色将图的所有顶点着色，使得任意一条边的两个端点的颜色都不相同吗？（这是一幅二分图吗？）</p>\n<h4 id=\"实现-7\"><a href=\"#实现-7\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TwoColor</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] color;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isTwoColorable;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TwoColor</span><span class=\"params\">(Graph g)</span></span>&#123;</div><div class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tcolor = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tisTwoColorable = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> s = <span class=\"number\">0</span>; s &lt; g.V(); s++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[s] == <span class=\"keyword\">false</span>)</div><div class=\"line\">\t\t\t\tdfs(g, s);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Graph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)&#123;</div><div class=\"line\">\t\t\t\tcolor[w] = !color[v];</div><div class=\"line\">\t\t\t\tdfs(g, w);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (color[w] == color[v])</div><div class=\"line\">\t\t\t\tisTwoColorable = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBipartite</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> isTwoColorable;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"有向图\"><a href=\"#有向图\" class=\"headerlink\" title=\"有向图\"></a>有向图</h2><h3 id=\"深度优先搜索-1\"><a href=\"#深度优先搜索-1\" class=\"headerlink\" title=\"深度优先搜索\"></a>深度优先搜索</h3><h4 id=\"实现-8\"><a href=\"#实现-8\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DepthFirstDirectedPaths</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> s;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] edgeTo;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DepthFirstDirectedPaths</span><span class=\"params\">(Digraph g, <span class=\"keyword\">int</span> s)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[g.V()];</div><div class=\"line\">\t\tdfs(g, s);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Digraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)&#123;</div><div class=\"line\">\t\t\t\tedgeTo[w] = v;</div><div class=\"line\">\t\t\t\tdfs(g, w);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> marked[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">pathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!hasPathTo(v))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tStack&lt;Integer&gt; path = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</div><div class=\"line\">\t\tpath.push(v);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (v != s)&#123;</div><div class=\"line\">\t\t\tpath.push(edgeTo[v]);</div><div class=\"line\">\t\t\tv = edgeTo[v];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> path;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-6\"><a href=\"#特点-6\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>在有向图中，深度优先搜索标记由一个集合的顶点可达的所有顶点所需的时间与被标记的所有顶点的出度之和成正比。</p>\n<p>单向有向路径给定一幅有向图和一个起点s，回答“从s到给定目的顶点v是否存在一条有向路径？如果有，找出这条路径。”等类似问题。</p>\n<h3 id=\"广度优先搜索-1\"><a href=\"#广度优先搜索-1\" class=\"headerlink\" title=\"广度优先搜索\"></a>广度优先搜索</h3><h4 id=\"实现-9\"><a href=\"#实现-9\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BreadthFirstDirectedPaths</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> s;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] edgeTo;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BreadthFirstDirectedPaths</span><span class=\"params\">(Digraph g, <span class=\"keyword\">int</span> s)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[g.V()];</div><div class=\"line\">\t\tbfs(g, s);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(Digraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\tQueue&lt;Integer&gt; queue = <span class=\"keyword\">new</span> Queue&lt;Integer&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\tqueue.enqueue(v);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (!queue.isEmpty())&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> x = queue.dequeue();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(x))&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)&#123;</div><div class=\"line\">\t\t\t\t\tmarked[w] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t\t\tedgeTo[w] = x;</div><div class=\"line\">\t\t\t\t\tqueue.enqueue(w);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> marked[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">pathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!hasPathTo(v))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tStack&lt;Integer&gt; path = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</div><div class=\"line\">\t\tpath.push(v);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (v != s)&#123;</div><div class=\"line\">\t\t\tpath.push(edgeTo[v]);</div><div class=\"line\">\t\t\tv = edgeTo[v];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> path;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-7\"><a href=\"#特点-7\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>单点最短有向路径给定一幅有向图和一个起点s，回答“从s到给定目的顶点v是否存在一条有向路径？如果有，找出其中最短的那条（所含边数最少）。”等类似问题。</p>\n<h3 id=\"有向环检测\"><a href=\"#有向环检测\" class=\"headerlink\" title=\"有向环检测\"></a>有向环检测</h3><p>给定的有向图中包含有向环吗？如果有，按照路径的方向从某个顶点并返回自己来找到环上的所有顶点。</p>\n<h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>有向无环图（DAG）就是一幅不含有环的有向图。</p>\n<h4 id=\"示意-6\"><a href=\"#示意-6\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i2.muimg.com/1949/bbfa85a5cd288ecd.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-10\"><a href=\"#实现-10\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirectedCycle</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] edgeTo;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] onStack;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Stack&lt;Integer&gt; cycle;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DirectedCycle</span><span class=\"params\">(Digraph g)</span></span>&#123;</div><div class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[g.V()];</div><div class=\"line\">\t\tonStack = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; g.V(); v++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[v] == <span class=\"keyword\">false</span>)</div><div class=\"line\">\t\t\t\tdfs(g, v);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Digraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\tonStack[v] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (hasCycle())</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)&#123;</div><div class=\"line\">\t\t\t\tedgeTo[w] = v;</div><div class=\"line\">\t\t\t\tdfs(g, w);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (onStack[w] == <span class=\"keyword\">true</span>)&#123;</div><div class=\"line\">\t\t\t\tcycle = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> x = v;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\tcycle.push(x);</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (x != w)&#123;</div><div class=\"line\">\t\t\t\t\tcycle.push(edgeTo[x]);</div><div class=\"line\">\t\t\t\t\tx = edgeTo[x];</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\tcycle.push(v);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tonStack[v] = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasCycle</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> cycle != <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">cycle</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> cycle;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h3><p>给定一幅有向图，将所有的顶点排序，使得所有的有向边均从排在前面的元素指向排在后面的元素（或者说明无法做到这一点）。</p>\n<h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>当且仅当一幅有向图是无环图时它才能进行拓扑排序。</p>\n<p>一幅有向无环图的拓扑排序即为所有顶点的逆后序排列。</p>\n<h4 id=\"基于深度优先搜索的顶点排序\"><a href=\"#基于深度优先搜索的顶点排序\" class=\"headerlink\" title=\"基于深度优先搜索的顶点排序\"></a>基于深度优先搜索的顶点排序</h4><p>将dfs的参数顶点保存在一个数据结构中，遍历这个数据结构实际上就能访问图中的所有顶点。顶点有以下三种排列顺序：</p>\n<ol>\n<li>前序：在递归调用之前将顶点加入队列</li>\n<li>后序：在递归调用之后将顶点加入队列</li>\n<li>逆后序：在递归调用之后将顶点压入栈</li>\n</ol>\n<h5 id=\"示意-7\"><a href=\"#示意-7\" class=\"headerlink\" title=\"示意\"></a>示意</h5><p><img src=\"http://i2.muimg.com/1949/049d82a3e4c670be.png\" alt=\"Markdown\"></p>\n<h5 id=\"实现-11\"><a href=\"#实现-11\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DepthFirstOrder</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Queue&lt;Integer&gt; pre;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Queue&lt;Integer&gt; post;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Stack&lt;Integer&gt; reversePost;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DepthFirstOrder</span><span class=\"params\">(Digraph g)</span></span>&#123;</div><div class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tpre = <span class=\"keyword\">new</span> Queue&lt;Integer&gt;();</div><div class=\"line\">\t\tpost = <span class=\"keyword\">new</span> Queue&lt;Integer&gt;();</div><div class=\"line\">\t\treversePost = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; g.V(); v++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[v] == <span class=\"keyword\">false</span>)</div><div class=\"line\">\t\t\t\tdfs(g, v);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Digraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\tpre.enqueue(v);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)</div><div class=\"line\">\t\t\t\tdfs(g, w);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tpost.enqueue(v);</div><div class=\"line\">\t\treversePost.push(v);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">pre</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> pre;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">post</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> post;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">reversePost</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> reversePost;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"示意-8\"><a href=\"#示意-8\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/3e80d583c02a2ab5.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-12\"><a href=\"#实现-12\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Topological</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Iterable&lt;Integer&gt; order;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Topological</span><span class=\"params\">(Digraph g)</span></span>&#123;</div><div class=\"line\">\t\tDirectedCycle cycle = <span class=\"keyword\">new</span> DirectedCycle(g);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!cycle.hasCycle())&#123;</div><div class=\"line\">\t\t\tDepthFirstOrder dfs = <span class=\"keyword\">new</span> DepthFirstOrder(g);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\torder = dfs.reversePost();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">order</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> order;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isDAG</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> order != <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-8\"><a href=\"#特点-8\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>使用深度优先搜索对有向无环图进行拓扑排序所需的时间和V+E成正比。</p>\n<h3 id=\"强连通性\"><a href=\"#强连通性\" class=\"headerlink\" title=\"强连通性\"></a>强连通性</h3><p>使用深度优先搜索查找给定有向图G的反向图G’，根据由此得到的所有顶点的逆后序再次用深度优先搜索处理有向图G（Kosaraju算法），其构造函数中的每一次递归调用所标记的顶点都在同一个强连通分量之中。</p>\n<h4 id=\"示意-9\"><a href=\"#示意-9\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/bec441ce218db0b9.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-13\"><a href=\"#实现-13\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KosarajuSCC</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">KosarajuSCC</span><span class=\"params\">(Digraph g)</span></span>&#123;</div><div class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tid = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[g.V()];</div><div class=\"line\">\t\tcount = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tDepthFirstOrder order = <span class=\"keyword\">new</span> DepthFirstOrder(g.reverse());</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v : order.reversePost())&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[v] == <span class=\"keyword\">false</span>)&#123;</div><div class=\"line\">\t\t\t\tdfs(g, v);</div><div class=\"line\">\t\t\t\tcount++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Digraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\tid[v] = count;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)</div><div class=\"line\">\t\t\t\tdfs(g, w);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">stronglyConnected</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id[v] == id[w];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">id</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> count;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-9\"><a href=\"#特点-9\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>Kosaraju算法的预处理所需的时间和空间与V+E成正比且支持常数时间的有向图强连通性的查询。</p>\n<p>给定一幅有向图，回答“给定的两个顶点是强连通的吗？这幅有向图中含有多少个强连通分量？”等类似问题。</p>\n<h2 id=\"最小生成树\"><a href=\"#最小生成树\" class=\"headerlink\" title=\"最小生成树\"></a>最小生成树</h2><h3 id=\"Prim算法\"><a href=\"#Prim算法\" class=\"headerlink\" title=\"Prim算法\"></a>Prim算法</h3><p>每一步都会为一棵生长中的树添加一条边。一开始这棵树只有一个顶点，然后会向它添加V-1条边，每次总是将下一条连接树中的顶点与不在树中的顶点且权重最小的边（黑色表示）加入树中（即由树中的顶点所定义的切分中的一条横向边）。</p>\n<p>每当向树中添加了一条边之后，也向树中添加了一个顶点。要维护一个包含所有横切边的集合，就要将连接这个顶点和其他所有不在树中的顶点的边加入优先队列。但，连接新加入树中的顶点与其他已经在树中顶点的所有边都失效了。（这样的边都已经不是横切边了，因为它的两个顶点都在树中。）</p>\n<h4 id=\"示意-10\"><a href=\"#示意-10\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/8a0d924a7b467969.png\" alt=\"Markdown\"></p>\n<h4 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>Prim算法能够得到任意加权无向图的最小生成树。</p>\n<h4 id=\"延时实现\"><a href=\"#延时实现\" class=\"headerlink\" title=\"延时实现\"></a>延时实现</h4><p>将失效的边先留在优先队列中，等到要删除它们的时候再检查边的有效性。</p>\n<h5 id=\"示意-11\"><a href=\"#示意-11\" class=\"headerlink\" title=\"示意\"></a>示意</h5><p><img src=\"http://i2.muimg.com/1949/6bc3fc9f01231433.png\" alt=\"Markdown\"></p>\n<h5 id=\"实现-14\"><a href=\"#实现-14\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazyPrimMST</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> weight;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Queue&lt;Edge&gt; mst;</div><div class=\"line\">\t<span class=\"keyword\">private</span> MinPQ&lt;Edge&gt; pq;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LazyPrimMST</span><span class=\"params\">(EdgeWeightedGraph g)</span></span>&#123;</div><div class=\"line\">\t\tweight = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tmst = <span class=\"keyword\">new</span> Queue&lt;Edge&gt;();</div><div class=\"line\">\t\tpq = <span class=\"keyword\">new</span> MinPQ&lt;Edge&gt;(g.E());</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tprim(g);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">prim</span><span class=\"params\">(EdgeWeightedGraph g)</span></span>&#123;</div><div class=\"line\">\t\tvisit(g, <span class=\"number\">0</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (!pq.isEmpty())&#123;</div><div class=\"line\">\t\t\tEdge e = pq.delMin();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> v = e.either();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = e.other(v);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[v] == <span class=\"keyword\">true</span> &amp;&amp; marked[w] == <span class=\"keyword\">true</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tweight += e.weight();</div><div class=\"line\">\t\t\tmst.enqueue(e);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[v] == <span class=\"keyword\">false</span>)</div><div class=\"line\">\t\t\t\tvisit(g, v);</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)</div><div class=\"line\">\t\t\t\tvisit(g, w);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(EdgeWeightedGraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (Edge e : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[e.other(v)] == <span class=\"keyword\">false</span>)</div><div class=\"line\">\t\t\t\tpq.insert(e);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Edge&gt; <span class=\"title\">edges</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> mst;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">weight</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> weight;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"特点-10\"><a href=\"#特点-10\" class=\"headerlink\" title=\"特点\"></a>特点</h5><p>Prim算法的延时实现计算一幅含有V个顶点和E条边的连通加权无向图的最小生成树所需的空间与E成正比，所需的时间与ElogE成正比（最坏情况）。</p>\n<h4 id=\"即时实现\"><a href=\"#即时实现\" class=\"headerlink\" title=\"即时实现\"></a>即时实现</h4><p>只会在优先队列中保存每个非树顶点w的一条边：将它与树中的顶点连接起来的权重最小的那条边。将w和树的顶点连接起来的其他权重较大的边迟早都会失效，所以没必要在优先队列中保存它们。</p>\n<h5 id=\"示意-12\"><a href=\"#示意-12\" class=\"headerlink\" title=\"示意\"></a>示意</h5><p><img src=\"http://i4.buimg.com/1949/1b05ce43e01383e7.png\" alt=\"Markdown\"></p>\n<h5 id=\"实现-15\"><a href=\"#实现-15\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrimMST</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Edge[] edgeTo;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span>[] distTo;</div><div class=\"line\">\t<span class=\"keyword\">private</span> IndexMinPQ&lt;Double&gt; pq;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PrimMST</span><span class=\"params\">(EdgeWeightedGraph g)</span></span>&#123;</div><div class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> Edge[g.V()];</div><div class=\"line\">\t\tdistTo = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[g.V()];</div><div class=\"line\">\t\tpq = <span class=\"keyword\">new</span> IndexMinPQ&lt;Double&gt;(g.V());</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; g.V(); v++)</div><div class=\"line\">\t\t\tdistTo[v] = Double.POSITIVE_INFINITY;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tprim(g);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">prim</span><span class=\"params\">(EdgeWeightedGraph g)</span></span>&#123;</div><div class=\"line\">\t\tpq.insert(<span class=\"number\">0</span>, <span class=\"number\">0.0</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (!pq.isEmpty())</div><div class=\"line\">\t\t\tvisit(g, pq.delMin());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(EdgeWeightedGraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (Edge e : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = e.other(v);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">true</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (e.weight() &lt; distTo[w])&#123;</div><div class=\"line\">\t\t\t\tdistTo[w] = e.weight();</div><div class=\"line\">\t\t\t\tedgeTo[w] = e;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (pq.contains(w))</div><div class=\"line\">\t\t\t\t\tpq.change(w, distTo[w]);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t\tpq.insert(w, distTo[w]);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Edge&gt; <span class=\"title\">edges</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tQueue&lt;Edge&gt; mst = <span class=\"keyword\">new</span> Queue&lt;Edge&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">1</span>; v &lt; edgeTo.length; v++)</div><div class=\"line\">\t\t\tmst.enqueue(edgeTo[v]);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> mst;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">weight</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">double</span> weight = <span class=\"number\">0.0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">1</span>; v &lt; distTo.length; v++)</div><div class=\"line\">\t\t\tweight += distTo[v];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> weight;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"特点-11\"><a href=\"#特点-11\" class=\"headerlink\" title=\"特点\"></a>特点</h5><p>Prim算法的即时实现计算一幅含有V个顶点和E条边的连通加权无向图的最小生成树所需的空间和V成正比，所需的时间和ElogV成正比（最坏情况）。</p>\n<h3 id=\"Kruskal算法\"><a href=\"#Kruskal算法\" class=\"headerlink\" title=\"Kruskal算法\"></a>Kruskal算法</h3><p>按照边的权重顺序（从小到大）处理它们，将边加入最小生成树中，加入的边不会与已经加入的边构成环，直到树中含有V-1条边为止。这些黑色的边逐渐由一片森林合并为一棵树，也就是图的最小生成树。</p>\n<h4 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>Kruskal算法能够计算任意加权无向图的最小生成树。</p>\n<h4 id=\"示意-13\"><a href=\"#示意-13\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i2.muimg.com/1949/362be3c027985b40.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-16\"><a href=\"#实现-16\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KruskalMST</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Queue&lt;Edge&gt; mst;</div><div class=\"line\">\t<span class=\"keyword\">private</span> MinPQ&lt;Edge&gt; pq;</div><div class=\"line\">\t<span class=\"keyword\">private</span> UnionFind uf;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> weight;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">KruskalMST</span><span class=\"params\">(EdgeWeightedGraph g)</span></span>&#123;</div><div class=\"line\">\t\tweight = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tmst = <span class=\"keyword\">new</span> Queue&lt;Edge&gt;();</div><div class=\"line\">\t\tpq = <span class=\"keyword\">new</span> MinPQ&lt;Edge&gt;(g.E());</div><div class=\"line\">\t\tuf = <span class=\"keyword\">new</span> UnionFind(g.V());</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (Edge e : g.edges())</div><div class=\"line\">\t\t\tpq.insert(e);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tkruskal(g);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">kruskal</span><span class=\"params\">(EdgeWeightedGraph g)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (!pq.isEmpty() &amp;&amp; mst.size() &lt; g.V())&#123;</div><div class=\"line\">\t\t\tEdge e = pq.delMin();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> v = e.either();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = e.other(v);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (uf.connected(v, w))</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tuf.union(v, w);</div><div class=\"line\">\t\t\tmst.enqueue(e);</div><div class=\"line\">\t\t\tweight += e.weight();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Edge&gt; <span class=\"title\">edges</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> mst;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">weight</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> weight;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-12\"><a href=\"#特点-12\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>Kruskal算法计算一幅含有V个顶点和E条边的连通加权无向图的最小生成树所需的空间和E成正比，所需的时间和ElogE成正比（最坏情况）。</p>\n<h4 id=\"比较-2\"><a href=\"#比较-2\" class=\"headerlink\" title=\"比较\"></a>比较</h4><p>Prim算法是一条边一条边地来构造最小生成树，每一步都为一棵树添加一条边。 Kruskal算法构造最小生成树的时候也是一条边一条边地构造，但不同的是它寻找的边会连接一片森林中的两棵树。从一片由V棵单顶点的树构成的森林开始并不断将两棵树合并（用可以找到的最短边）直到只剩下一棵树，它就是最小生成树。</p>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><img src=\"http://i1.piimg.com/1949/4bc5dd0a181d708d.png\" alt=\"Markdown\"></p>\n<h2 id=\"最短路径树\"><a href=\"#最短路径树\" class=\"headerlink\" title=\"最短路径树\"></a>最短路径树</h2><h3 id=\"Dijkstra算法\"><a href=\"#Dijkstra算法\" class=\"headerlink\" title=\"Dijkstra算法\"></a>Dijkstra算法</h3><p>采用了类似Prim算法的方法来计算最短路径树。</p>\n<h4 id=\"定义-4\"><a href=\"#定义-4\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>Dijkstra算法能够解决边权重非负的加权有向图的单起点最短路径问题。</p>\n<h4 id=\"示意-14\"><a href=\"#示意-14\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/8733dad4678b9290.png\" alt=\"Markdown\"><br><img src=\"http://i4.buimg.com/1949/240e62aa975ae40f.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-17\"><a href=\"#实现-17\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DijkstraSPT</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> DirectedEdge[] edgeTo;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span>[] distTo;</div><div class=\"line\">\t<span class=\"keyword\">private</span> IndexMinPQ&lt;Double&gt; pq;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> s;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DijkstraSPT</span><span class=\"params\">(EdgeWeightedDigraph g, <span class=\"keyword\">int</span> s)</span></span>&#123;</div><div class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> DirectedEdge[g.V()];</div><div class=\"line\">\t\tdistTo = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[g.V()];</div><div class=\"line\">\t\tpq = <span class=\"keyword\">new</span> IndexMinPQ&lt;Double&gt;(g.V());</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; g.V(); v++)</div><div class=\"line\">\t\t\tdistTo[v] = Double.POSITIVE_INFINITY;</div><div class=\"line\">\t\tdistTo[s] = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tpq.insert(s, <span class=\"number\">0.0</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (!pq.isEmpty())</div><div class=\"line\">\t\t\trelax(g, pq.delMin());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">relax</span><span class=\"params\">(EdgeWeightedDigraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (DirectedEdge e : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = e.to();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (distTo[v] + e.weight() &lt; distTo[w])&#123;</div><div class=\"line\">\t\t\t\tdistTo[w] = distTo[v] + e.weight();</div><div class=\"line\">\t\t\t\tedgeTo[w] = e;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (pq.contains(w))</div><div class=\"line\">\t\t\t\t\tpq.change(w, distTo[w]);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t\tpq.insert(w, distTo[w]);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">distTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> distTo[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> distTo[v] &lt; Double.POSITIVE_INFINITY;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;DirectedEdge&gt; <span class=\"title\">pathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!hasPathTo(v))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tStack&lt;DirectedEdge&gt; path = <span class=\"keyword\">new</span> Stack&lt;DirectedEdge&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tDirectedEdge e = edgeTo[v];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (e.from() != s)&#123;</div><div class=\"line\">\t\t\tpath.push(e);</div><div class=\"line\">\t\t\te = edgeTo[e.from()];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tpath.push(e);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> path;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-13\"><a href=\"#特点-13\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>在一幅含有V个顶点和E条边的加权有向图中，使用Dijkstra算法计算根结点为给定起点的最短路径树所需的空间与V成正比，时间与ElogV成正比（最坏情况下）。</p>\n<h4 id=\"比较-3\"><a href=\"#比较-3\" class=\"headerlink\" title=\"比较\"></a>比较</h4><p>Prim算法每次添加的都是离树最近的非树顶点，Dijkstra算法每次添加的都是离起点最近的非树顶点。</p>\n<h3 id=\"拓扑排序-1\"><a href=\"#拓扑排序-1\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h3><p>将顶点的放松和拓扑排序结合起来。</p>\n<h4 id=\"示意-15\"><a href=\"#示意-15\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/16378a692db6d55e.png\" alt=\"Markdown\"><br><img src=\"http://i4.buimg.com/1949/9caad83078acc930.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-18\"><a href=\"#实现-18\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AcyclicSPT</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> DirectedEdge[] edgeTo;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span>[] distTo;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> s;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AcyclicSPT</span><span class=\"params\">(EdgeWeightedDigraph g, <span class=\"keyword\">int</span> s)</span></span>&#123;</div><div class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> DirectedEdge[g.V()];</div><div class=\"line\">\t\tdistTo = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[g.V()];</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; g.V(); v++)</div><div class=\"line\">\t\t\tdistTo[v] = Double.POSITIVE_INFINITY;</div><div class=\"line\">\t\tdistTo[s] = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tTopological t = <span class=\"keyword\">new</span> Topological(g);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v : t.order())</div><div class=\"line\">\t\t\trelax(g, v);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">relax</span><span class=\"params\">(EdgeWeightedDigraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (DirectedEdge e : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = e.to();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (distTo[v] + e.weight() &lt; distTo[w])&#123;</div><div class=\"line\">\t\t\t\tdistTo[w] = distTo[v] + e.weight();</div><div class=\"line\">\t\t\t\tedgeTo[w] = e;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">distTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> distTo[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> distTo[v] &lt; Double.POSITIVE_INFINITY;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;DirectedEdge&gt; <span class=\"title\">pathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!hasPathTo(v))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tStack&lt;DirectedEdge&gt; path = <span class=\"keyword\">new</span> Stack&lt;DirectedEdge&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tDirectedEdge e = edgeTo[v];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (e.from() != s)&#123;</div><div class=\"line\">\t\t\tpath.push(e);</div><div class=\"line\">\t\t\te = edgeTo[e.from()];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tpath.push(e);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> path;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-14\"><a href=\"#特点-14\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>按照拓扑排序放松顶点，就能在和E+V成正比的时间内解决无环有向图的单点最短路径问题。</p>\n<ol>\n<li>能够在线性时间内解决单点最短路径问题</li>\n<li>能够处理负权重的边</li>\n<li>能够解决相关的问题，例如找出最长的路径</li>\n</ol>\n<h3 id=\"Bellman-Ford算法\"><a href=\"#Bellman-Ford算法\" class=\"headerlink\" title=\"Bellman-Ford算法\"></a>Bellman-Ford算法</h3><p>解决一般有向图中的以下问题：</p>\n<ol>\n<li>负权重环的检测。给定的加权有向图中含有负权重环吗？如果有，找到它。</li>\n<li>负权重环不可达时的单点最短路径。给定一幅加权有向图和一个起点s且从s无法到达任何负权重环，回答“是否存在一条从s到给定的顶点v的有向路径？如果有，找出最短（总权重最小）的那条路径。“等类似问题。</li>\n</ol>\n<h4 id=\"定义-5\"><a href=\"#定义-5\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>在任意含有V个顶点的加权有向图中给定起点s，从s无法到达任何负权重环，以下算法能够解决其中的单点最短路径问题：以任意顺序放松有向图的所有边，重复V轮。</p>\n<h4 id=\"示意-16\"><a href=\"#示意-16\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/df93ee57234d2ba9.png\" alt=\"Markdown\"><br><img src=\"http://i1.piimg.com/1949/e1a0706c291bbb2f.png\" alt=\"Markdown\"></p>\n<h4 id=\"负权重环的检测\"><a href=\"#负权重环的检测\" class=\"headerlink\" title=\"负权重环的检测\"></a>负权重环的检测</h4><p>在将所有边放松V轮之后当且仅当队列非空时有向图中才存在从起点可达的负权重环。</p>\n<h5 id=\"示意-17\"><a href=\"#示意-17\" class=\"headerlink\" title=\"示意\"></a>示意</h5><p><img src=\"http://i1.piimg.com/1949/1898c8704c79fb60.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-19\"><a href=\"#实现-19\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BellmanFordSPT</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> DirectedEdge[] edgeTo;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span>[] distTo;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Iterable&lt;DirectedEdge&gt; cycle;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Queue&lt;Integer&gt; queue;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] onQ;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> s;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> cost;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BellmanFordSPT</span><span class=\"params\">(EdgeWeightedDigraph g, <span class=\"keyword\">int</span> s)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">\t\tcost = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> DirectedEdge[g.V()];</div><div class=\"line\">\t\tdistTo = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[g.V()];</div><div class=\"line\">\t\tonQ = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tqueue = <span class=\"keyword\">new</span> Queue&lt;Integer&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; g.V(); v++)</div><div class=\"line\">\t\t\tdistTo[v] = Double.POSITIVE_INFINITY;</div><div class=\"line\">\t\tdistTo[s] = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tonQ[s] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\tqueue.enqueue(s);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (!queue.isEmpty() &amp;&amp; !hasNegativeCycle())&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> v = queue.dequeue();</div><div class=\"line\">\t\t\tonQ[v] = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\trelax(g, v);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (++cost % g.V() == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\tfindNegativeCycle();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">relax</span><span class=\"params\">(EdgeWeightedDigraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (DirectedEdge e : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = e.to();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (distTo[v] + e.weight() &lt; distTo[w])&#123;</div><div class=\"line\">\t\t\t\tdistTo[w] = distTo[v] + e.weight();</div><div class=\"line\">\t\t\t\tedgeTo[w] = e;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (onQ[w] == <span class=\"keyword\">false</span>)&#123;</div><div class=\"line\">\t\t\t\t\tonQ[w] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t\t\tqueue.enqueue(w);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">findNegativeCycle</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> V = edgeTo.length;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tEdgeWeightedDigraph g = <span class=\"keyword\">new</span> EdgeWeightedDigraph(V);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; V; v++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (edgeTo[v] != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\tg.addEdge(edgeTo[v]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tEdgeWeightedDirectedCycle c = <span class=\"keyword\">new</span> EdgeWeightedDirectedCycle(g);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tcycle = c.cycle();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNegativeCycle</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> cycle != <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;DirectedEdge&gt; <span class=\"title\">negativeCycle</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> cycle;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">distTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> distTo[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> distTo[v] &lt; Double.POSITIVE_INFINITY;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;DirectedEdge&gt; <span class=\"title\">pathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!hasPathTo(v))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tStack&lt;DirectedEdge&gt; path = <span class=\"keyword\">new</span> Stack&lt;DirectedEdge&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tDirectedEdge e = edgeTo[v];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (e.from() != s)&#123;</div><div class=\"line\">\t\t\tpath.push(e);</div><div class=\"line\">\t\t\te = edgeTo[e.from()];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tpath.push(e);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> path;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-15\"><a href=\"#特点-15\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>对于任意含有V个顶点的加权有向图和给定的起点s，在最坏情况下基于队列的Bellman-Ford算法解决最短路径问题（或者找到从s可达的负权重环）所需的时间和EV成正比，空间和V成正比。</p>\n<h3 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><img src=\"http://i1.piimg.com/1949/5019ec6bc1ced557.png\" alt=\"Markdown\"></p>\n","categories":["Algorithm"],"tags":["Algorithm","Graph"]},{"title":"【算法】查找","url":"http://yoursite.com/2017/04/16/【算法】查找/","content":"<h2 id=\"顺序查找（无序链表）\"><a href=\"#顺序查找（无序链表）\" class=\"headerlink\" title=\"顺序查找（无序链表）\"></a>顺序查找（无序链表）</h2><p>符号表中使用的数据结构的一个简单选择是链表，每个结点存储一个键值对。</p>\n<h3 id=\"示意\"><a href=\"#示意\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i1.piimg.com/1949/a47128266118b83b.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SequentialSearch</span>&lt;<span class=\"title\">Key</span>, <span class=\"title\">Value</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Node first;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> n;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</div><div class=\"line\">\t\tKey key;</div><div class=\"line\">\t\tValue value;</div><div class=\"line\">\t\tNode next;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span> <span class=\"params\">(Key key, Value value, Node next)</span></span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.key = key;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.next = next;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (Node x = first; x != <span class=\"keyword\">null</span>; x = x.next)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (key.equals(x.key))&#123;</div><div class=\"line\">\t\t\t\tx.value = value;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tfirst = <span class=\"keyword\">new</span> Node(key, value, first);</div><div class=\"line\">\t\tn++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (Node x = first; x != <span class=\"keyword\">null</span>; x = x.next)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (key.equals(x.key))</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x.value;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty())</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (key.equals(first.key))</div><div class=\"line\">\t\t\tfirst = first.next;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\tdeleteNode(first, key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tn--;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteNode</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x.next == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (key.equals(x.next.key))</div><div class=\"line\">\t\t\tx.next = x.next.next;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\tdeleteNode(x.next, key);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tQueue&lt;Key&gt; queue = <span class=\"keyword\">new</span> Queue&lt;Key&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (Node x = first; x != <span class=\"keyword\">null</span>; x = x.next)</div><div class=\"line\">\t\t\tqueue.enqueue(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> queue;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> n;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> size() == <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> get(key) != <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>在含有N对键值的基于（无序）链表的符号表中，未命名的查找和插入操作都需要N次比较。命中的查找在最坏情况下需要N次比较。特别地，向一个空表中插入N个不同的键需要~N^2/2次比较。</p>\n<h2 id=\"二分查找（有序数组）\"><a href=\"#二分查找（有序数组）\" class=\"headerlink\" title=\"二分查找（有序数组）\"></a>二分查找（有序数组）</h2><p>符号表使用的数据结构是一对平行的数组，一个存储键一个存储值。</p>\n<p>计算小于给定键的键的数量：首先将key和中间键比较，如果相等则返回其索引；如果小于中间键则在左半部分查找；大于则在右半部分查找。</p>\n<h3 id=\"示意-1\"><a href=\"#示意-1\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i2.muimg.com/1949/a340ca0bc218a588.png\" alt=\"Markdown\"><br><img src=\"http://i2.muimg.com/1949/b74a9d4a067f70a2.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinarySearch</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;, <span class=\"title\">Value</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> n;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Key[] keys;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Value[] values;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BinarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span></span>&#123;</div><div class=\"line\">\t\tkeys = (Key[]) <span class=\"keyword\">new</span> Comparable[capacity];</div><div class=\"line\">\t\tvalues = (Value[]) <span class=\"keyword\">new</span> Object[capacity];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = rank(key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (i &lt; n &amp;&amp; key.compareTo(keys[i]) == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\tvalues[i] = value;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = n; j &gt; i; j--)&#123;</div><div class=\"line\">\t\t\tkeys[j] = keys[j-<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\tvalues[j] = values[j-<span class=\"number\">1</span>];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tkeys[i] = key;</div><div class=\"line\">\t\tvalues[i] = value;</div><div class=\"line\">\t\tn++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty())</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = rank(key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (i &lt; n &amp;&amp; key.compareTo(keys[i]) == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> values[i];</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> lo = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> hi = n - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (lo &lt;= hi)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> mid = lo + (hi - lo) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> compare = key.compareTo(keys[mid]);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\thi = mid - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\tlo = mid + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> mid;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> lo;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty())</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = rank(key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (key.compareTo(keys[i]) != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; j++)&#123;</div><div class=\"line\">\t\t\tkeys[j-<span class=\"number\">1</span>] = keys[j];</div><div class=\"line\">\t\t\tvalues[j-<span class=\"number\">1</span>] = values[j];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tkeys[n] = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\tvalues[n] = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\tn--;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> n;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">(Key lo, Key hi)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (hi.compareTo(lo) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (contains(hi))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(hi) - rank(lo) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(hi) - rank(lo);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">floor</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = rank(key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (i &lt; n &amp;&amp; key.compareTo(keys[i]) == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> keys[i];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> keys[i-<span class=\"number\">1</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">ceiling</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = rank(key);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> keys[i];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> keys(min(), max());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">(Key lo, Key hi)</span></span>&#123;</div><div class=\"line\">\t\tQueue&lt;Key&gt; queue = <span class=\"keyword\">new</span> Queue&lt;Key&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = rank(lo); i &lt; rank(hi); i++)</div><div class=\"line\">\t\t\tqueue.enqueue(keys[i]);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (contains(hi))</div><div class=\"line\">\t\t\tqueue.enqueue(hi);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> queue;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> size() == <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> get(key) != <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">min</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> keys[<span class=\"number\">0</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">max</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> keys[n-<span class=\"number\">1</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">select</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> keys[k];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMin</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tdelete(min());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMax</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tdelete(max());</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>在N个键的有序数组中进行二分查找最多需要（lgN+1）次比较（无论是否成功）。</p>\n<p>向大小为N的有序数组中插入一个新的元素在最坏情况下需要访问～2N次数组，因此向一个空符号表中插入N个元素在最坏情况下需要访问~N^2次数组。</p>\n<h3 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h3><p><img src=\"http://i2.muimg.com/1949/d23f6043a2502391.png\" alt=\"Markdown\"></p>\n<h2 id=\"二叉查找树\"><a href=\"#二叉查找树\" class=\"headerlink\" title=\"二叉查找树\"></a>二叉查找树</h2><p>定义一个类表示二叉查找树上的一个结点。每个结点都含有一个键、一个值、一条左链接、一条右链接和一个结点计数器。左链接指向一棵由小于该结点的所有键组成的二叉查找树，右链接指向一棵由大于该结点的所有键组成的二叉查找树。变量N给出了以该结点为根的子树的结点总数。</p>\n<h3 id=\"示意-2\"><a href=\"#示意-2\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i1.piimg.com/1949/15034c3f80c18e29.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-2\"><a href=\"#实现-2\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinarySearchTree</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;, <span class=\"title\">Value</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Node root;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</div><div class=\"line\">\t\tKey key;</div><div class=\"line\">\t\tValue value;</div><div class=\"line\">\t\tNode left;</div><div class=\"line\">\t\tNode right;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Key key, Value value, <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.key = key;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.n = n;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span></span>&#123;\t\t</div><div class=\"line\">\t\troot = put(root, key, value);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">put</span><span class=\"params\">(Node x, Key key, Value value)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(key, value, <span class=\"number\">1</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tx.left = put(x.left, key, value);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tx.right = put(x.right, key, value);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\tx.value = value;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tx.n = size(x.left) + size(x.right) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> get(root, key);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Value <span class=\"title\">get</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> get(x.left, key);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> get(x.right, key);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.value;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\troot = delete(root, key);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">delete</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tx.left = delete(x.left, key);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tx.right = delete(x.right, key);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x.left == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x.right;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x.right == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x.left;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tNode t = x;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tx = min(t.right);</div><div class=\"line\">\t\t\tx.right = deleteMin(t.right);</div><div class=\"line\">\t\t\tx.left = t.left;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tx.n = size(x.left) + size(x.right) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMin</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\troot = deleteMin(root);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">deleteMin</span><span class=\"params\">(Node x)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x.left == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.right;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tx.left = deleteMin(x.left);</div><div class=\"line\">\t\tx.n = size(x.left) + size(x.right) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMax</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\troot = deleteMax(root);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">deleteMax</span><span class=\"params\">(Node x)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x.right == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.left;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tx.right = deleteMax(x.right);</div><div class=\"line\">\t\tx.n = size(x.left) + size(x.right) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">min</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> min(root).key;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">min</span><span class=\"params\">(Node x)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x.left == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> min(x.left);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">max</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> max(root).key;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">max</span><span class=\"params\">(Node x)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x.right == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> max(x.right);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">floor</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\tNode x = floor(root, key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.key;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">floor</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compare == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> floor(x.left, key);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tNode y = floor(x.right, key);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (y != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> y;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> rank(root, key);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(x.left, key);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(x.right, key) + size(x.left) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> size(x.left);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">select</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> select(root, k).key;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">select</span><span class=\"params\">(Node x, <span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> t = size(x.left);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t &gt; k)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> select(x.left, k);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &lt; k)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> select(x.right, k-t-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">ceiling</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\tNode x = ceiling(root, key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.key;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">ceiling</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compare == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> ceiling(x.right, key);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tNode y = ceiling(x.left, key);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (y != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> y;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> size(root);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">(Node x)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.n;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">(Key lo, Key hi)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (hi.compareTo(lo) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (contains(hi))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(hi) - rank(lo) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(hi) - rank(lo);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> keys(min(), max());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">(Key lo, Key hi)</span></span>&#123;</div><div class=\"line\">\t\tQueue&lt;Key&gt; queue = <span class=\"keyword\">new</span> Queue&lt;Key&gt;();</div><div class=\"line\">\t\tkeys(root, queue, lo, hi);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> queue;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">keys</span> <span class=\"params\">(Node x, Queue&lt;Key&gt; queue, Key lo, Key hi)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compareLo = lo.compareTo(x.key);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compareHi = hi.compareTo(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compareLo &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tkeys(x.left, queue, lo, hi);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compareLo &lt;= <span class=\"number\">0</span> &amp;&amp; compareHi &gt;= <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tqueue.enqueue(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compareHi &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tkeys(x.right, queue, lo, hi);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> size() == <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> get(key) != <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>在由N个随机键构造的二叉查找树中，查找命中平均所需的比较次数为~2lnN（约为1.39lgN），插入操作和查找未命中平均所需的比较次数为~2lnN（约为1.39lgN）。</p>\n<p>在一棵二叉查找树中，所有操作在最坏情况下所需的时间都和树的高度成正比。</p>\n<h3 id=\"比较-1\"><a href=\"#比较-1\" class=\"headerlink\" title=\"比较\"></a>比较</h3><p><img src=\"http://i4.buimg.com/1949/070e9df0ff688b4a.png\" alt=\"Markdown\"></p>\n<h2 id=\"红黑二叉查找树\"><a href=\"#红黑二叉查找树\" class=\"headerlink\" title=\"红黑二叉查找树\"></a>红黑二叉查找树</h2><p>只要谨慎地使用左旋转、右旋转和颜色转换这三种简单的操作，就能够保证插入操作后红黑树和2-3树的一一对应关系：</p>\n<ol>\n<li>如果右子结点是红色的而左子结点是黑色的，进行左旋转</li>\n<li>如果左子结点是红色的且它的左子结点也是红色的，进行右旋转</li>\n<li>如果左右子结点均为红色，进行颜色转换</li>\n</ol>\n<h3 id=\"示意-3\"><a href=\"#示意-3\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i1.piimg.com/1949/ccc450dbaa5f0bac.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-3\"><a href=\"#实现-3\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedBlackTree</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;, <span class=\"title\">Value</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> RED = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> BLACK = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Node root;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</div><div class=\"line\">\t\tKey key;</div><div class=\"line\">\t\tValue value;</div><div class=\"line\">\t\tNode left;</div><div class=\"line\">\t\tNode right;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n;</div><div class=\"line\">\t\t<span class=\"keyword\">boolean</span> color;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Key key, Value value, <span class=\"keyword\">int</span> n, <span class=\"keyword\">boolean</span> color)</span></span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.key = key;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.n = n;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.color = color;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isRed</span><span class=\"params\">(Node x)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> BLACK;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> x.color == RED;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">rotateLeft</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">\t\tNode x = h.right;</div><div class=\"line\">\t\th.right = x.left;</div><div class=\"line\">\t\tx.left = h;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tx.color = h.color;</div><div class=\"line\">\t\th.color = RED;</div><div class=\"line\">\t\tx.n = h.n;</div><div class=\"line\">\t\th.n = size(h.left) + size(h.right) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">rotateRight</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">\t\tNode x = h.left;</div><div class=\"line\">\t\th.left = x.right;</div><div class=\"line\">\t\tx.right = h;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tx.color = h.color;</div><div class=\"line\">\t\th.color = RED;</div><div class=\"line\">\t\tx.n = h.n;</div><div class=\"line\">\t\th.n = size(h.left) + size(h.right) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">flipColors</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">\t\th.left.color = !h.left.color;</div><div class=\"line\">\t\th.right.color = !h.right.color;</div><div class=\"line\">\t\th.color = !h.color;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">balance</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isRed(h.left) &amp;&amp; isRed(h.left.left))</div><div class=\"line\">\t\t\th = rotateRight(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isRed(h.right))\t</div><div class=\"line\">\t\t\th = rotateLeft(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isRed(h.left) &amp;&amp; isRed(h.right))</div><div class=\"line\">\t\t\tflipColors(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\th.n = size(h.left) + size(h.right) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> h;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">moveRedLeft</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">\t\tflipColors(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isRed(h.right.left))&#123;</div><div class=\"line\">\t\t\th.right = rotateRight(h.right);</div><div class=\"line\">\t\t\th = rotateLeft(h);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> h;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">moveRedRight</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">\t\tflipColors(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isRed(h.left.left))</div><div class=\"line\">\t\t\th = rotateRight(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> h;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span></span>&#123;</div><div class=\"line\">\t\troot = put(root, key, value);</div><div class=\"line\">\t\troot.color = BLACK;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">put</span><span class=\"params\">(Node h, Key key, Value value)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (h == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(key, value, <span class=\"number\">1</span>, RED);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(h.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\th.left = put(h.left, key, value);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\th.right = put(h.right, key, value);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\th.value = value;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isRed(h.left) &amp;&amp; isRed(h.left.left))</div><div class=\"line\">\t\t\th = rotateRight(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!isRed(h.left) &amp;&amp; isRed(h.right))\t</div><div class=\"line\">\t\t\th = rotateLeft(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isRed(h.left) &amp;&amp; isRed(h.right))</div><div class=\"line\">\t\t\tflipColors(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\th.n = size(h.left) + size(h.right) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> h;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> get(root, key);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Value <span class=\"title\">get</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (x != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\tx = x.left;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\tx = x.right;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x.value;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!isRed(root.left) &amp;&amp; !isRed(root.right))</div><div class=\"line\">\t\t\troot.color = RED;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\troot = delete(root, key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!isEmpty())</div><div class=\"line\">\t\t\troot.color = BLACK;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">delete</span><span class=\"params\">(Node h, Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (key.compareTo(h.key) &lt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!isRed(h.left) &amp;&amp; !isRed(h.left.left))</div><div class=\"line\">\t\t\t\th = moveRedLeft(h);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\th.left = delete(h.left, key);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isRed(h.left))</div><div class=\"line\">\t\t\t\th = rotateRight(h);</div><div class=\"line\">\t\t\t<span class=\"comment\">//如果被查找的键在树的底部，可以直接删除它</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (h.right == <span class=\"keyword\">null</span> &amp;&amp; key.compareTo(h.key) == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!isRed(h.right) &amp;&amp; !isRed(h.right.left))</div><div class=\"line\">\t\t\t\th = moveRedRight(h);</div><div class=\"line\">\t\t\t<span class=\"comment\">//如果不在，需要将它和它的后继结点交换</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (key.compareTo(h.key) == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\th.key = min(h.right).key;</div><div class=\"line\">\t\t\t\th.value = get(h.right, min(h.right).key);</div><div class=\"line\">\t\t\t\th.right = deleteMin(h.right);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\th.right = delete(h.right, key);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> balance(h);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMin</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!isRed(root.left) &amp;&amp; !isRed(root.right))</div><div class=\"line\">\t\t\troot.color = RED;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\troot = deleteMin(root);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!isEmpty())</div><div class=\"line\">\t\t\troot.color = BLACK;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">deleteMin</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (h.left == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!isRed(h.left) &amp;&amp; !isRed(h.left.left))</div><div class=\"line\">\t\t\th = moveRedLeft(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\th.left = deleteMin(h.left);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> balance(h);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMax</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!isRed(root.left) &amp;&amp; !isRed(root.right))</div><div class=\"line\">\t\t\troot.color = RED;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\troot = deleteMax(root);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!isEmpty())</div><div class=\"line\">\t\t\troot.color = BLACK;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">deleteMax</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isRed(h.left))</div><div class=\"line\">\t\t\th = rotateRight(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (h.right == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!isRed(h.right) &amp;&amp; !isRed(h.right.left))</div><div class=\"line\">\t\t\th = moveRedRight(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\th.right = deleteMax(h.right);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> balance(h);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> size(root);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">(Node x)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.n;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">(Key lo, Key hi)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (hi.compareTo(lo) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (contains(hi))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(hi) - rank(lo) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(hi) - rank(lo);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> rank(root, key);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(x.left, key);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(x.right, key) + size(x.left) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> size(x.left);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">select</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> select(root, k).key;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">select</span><span class=\"params\">(Node x, <span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> t = size(x.left);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t &gt; k)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> select(x.left, k);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &lt; k)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> select(x.right, k-t-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">floor</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\tNode x = floor(root, key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.key;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">floor</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compare == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> floor(x.left, key);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tNode y = floor(x.right, key);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (y != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> y;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">ceiling</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\tNode x = ceiling(root, key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.key;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">ceiling</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compare == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> ceiling(x.right, key);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tNode y = ceiling(x.left, key);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (y != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> y;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">min</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> min(root).key;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">min</span><span class=\"params\">(Node x)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x.left == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> min(x.left);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">max</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> max(root).key;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">max</span><span class=\"params\">(Node x)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x.right == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> max(x.right);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> keys(min(), max());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">(Key lo, Key hi)</span></span>&#123;</div><div class=\"line\">\t\tQueue&lt;Key&gt; queue = <span class=\"keyword\">new</span> Queue&lt;Key&gt;();</div><div class=\"line\">\t\tkeys(root, queue, lo, hi);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> queue;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">keys</span> <span class=\"params\">(Node x, Queue&lt;Key&gt; queue, Key lo, Key hi)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compareLo = lo.compareTo(x.key);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compareHi = hi.compareTo(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compareLo &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tkeys(x.left, queue, lo, hi);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compareLo &lt;= <span class=\"number\">0</span> &amp;&amp; compareHi &gt;= <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tqueue.enqueue(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compareHi &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tkeys(x.right, queue, lo, hi);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> get(key) != <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> size() == <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"特点-3\"><a href=\"#特点-3\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>一棵大小为N的红黑树的高度不会超过2lgN。</p>\n<p>一棵大小为N的红黑树中，根结点到任意结点的平均路径长度为~1.00lgN。</p>\n<p>在一棵红黑树中，以下操作在最坏情况下所需的时间是对数级别的：查找（get）、插入（put）、查找最小键、查找最大键、floor、ceiling、rank、select、删除最小键（deleteMin）、删除最大键（deleteMax）、删除（delete）和范围查询。</p>\n<h3 id=\"比较-2\"><a href=\"#比较-2\" class=\"headerlink\" title=\"比较\"></a>比较</h3><p><img src=\"http://i4.buimg.com/1949/43a6fb2559a670cd.png\" alt=\"Markdown\"></p>\n<h2 id=\"散列\"><a href=\"#散列\" class=\"headerlink\" title=\"散列\"></a>散列</h2><p>使用散列的查找算法分为两步。第一步是用散列函数将被查找的键转化为数组的一个索引（散列函数）；第二步就是一个处理碰撞冲突的过程（拉链法和线性探测法）。</p>\n<p>因为需要的是数组的索引而不是一个32位的整数，在实现中会将默认的hashCode()方法和除留余数法结合起来产生一个0到M-1的整数，方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Key x)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (x.hashCode() &amp; <span class=\"number\">0x7fffffff</span>) % M;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这段代码会将符号位屏蔽（将一个32位整数变为一个31位非负整数），然后用除留余数法计算它除以M的余数。在使用这样的代码一般会将数组的大小M取为素数以充分利用原散列值的所有位。</p>\n<h3 id=\"基于拉链法的散列表（链表数组）\"><a href=\"#基于拉链法的散列表（链表数组）\" class=\"headerlink\" title=\"基于拉链法的散列表（链表数组）\"></a>基于拉链法的散列表（链表数组）</h3><p>将大小为M的数组中的每个元素指向一条链表，链表中的每个结点都存储了散列值为该元素的索引的键值对。</p>\n<p>查找分两步：首先根据散列值找到对应的链表，然后沿着链表顺序查找相应的键。</p>\n<h4 id=\"示意-4\"><a href=\"#示意-4\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/b20715922f16c78d.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-4\"><a href=\"#实现-4\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SeparateChainHash</span>&lt;<span class=\"title\">Key</span>, <span class=\"title\">Value</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> M;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</div><div class=\"line\">\t<span class=\"keyword\">private</span> SequentialSearch&lt;Key, Value&gt;[] st;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SeparateChainHash</span><span class=\"params\">(<span class=\"keyword\">int</span> M)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.M = M;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.N = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tst = (SequentialSearch&lt;Key, Value&gt;[]) <span class=\"keyword\">new</span> SequentialSearch[M];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; M; i++)</div><div class=\"line\">\t\t\tst[i] = <span class=\"keyword\">new</span> SequentialSearch();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Key x)</span></span>&#123;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> (x.hashCode() &amp; <span class=\"number\">0x7fffffff</span>) % M;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> m = hash(key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!contains(key))</div><div class=\"line\">\t\t\tN++;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tst[m].put(key, value);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> m = hash(key);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> st[m].get(key);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> m = hash(key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (contains(key))</div><div class=\"line\">\t\t\tN--;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tst[m].delete(key);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tQueue&lt;Key&gt; queue = <span class=\"keyword\">new</span> Queue&lt;Key&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; st.length; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Key key : st[i].keys())</div><div class=\"line\">\t\t\t\tqueue.enqueue(key);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> queue;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> get(key) != <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> N;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> size() == <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-4\"><a href=\"#特点-4\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>在一张含有M条链表和N个键的散列表中，任意一条链表中的键的数量均在N/M的常熟因子范围内的概率无限趋于1，未命中查找和插入操作所需的比较次数为～N/M。</p>\n<h3 id=\"基于线性探测法的散列表（并行数组）\"><a href=\"#基于线性探测法的散列表（并行数组）\" class=\"headerlink\" title=\"基于线性探测法的散列表（并行数组）\"></a>基于线性探测法的散列表（并行数组）</h3><p>用大小为M的数组保存N个键值对，其中M&gt;N，需要依靠数组中的空位解决碰撞冲突。基于这种策略的所有方法被统称为开放地址散列表。</p>\n<p>最简单的方法叫做线性探测法：当碰撞发生时（当一个键的散列值已经被另一个不同的键占用），直接检查散列表中的下一个位置（将索引值加1）。这样的线性探测可能会产生三种结果：</p>\n<ol>\n<li>命中，该位置的键和被查找的键相同</li>\n<li>未命中，键为空（该位置没有键）</li>\n<li>继续查找，该位置的键和被查找的键不同</li>\n</ol>\n<h4 id=\"示意-5\"><a href=\"#示意-5\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/8ad232c2dbd2892a.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-5\"><a href=\"#实现-5\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinearProbingHash</span>&lt;<span class=\"title\">Key</span>, <span class=\"title\">Value</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> M;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Key[] keys;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Value[] values;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LinearProbingHash</span><span class=\"params\">(<span class=\"keyword\">int</span> M)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.M = M;</div><div class=\"line\">\t\tkeys = (Key[]) <span class=\"keyword\">new</span> Object[M];</div><div class=\"line\">\t\tvalues = (Value[]) <span class=\"keyword\">new</span> Object[M];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Key x)</span></span>&#123;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> (x.hashCode() &amp; <span class=\"number\">0x7fffffff</span>) % M;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">int</span> m)</span></span>&#123;</div><div class=\"line\">\t\tLinearProbingHash&lt;Key, Value&gt; tmp = <span class=\"keyword\">new</span> LinearProbingHash&lt;Key, Value&gt;(m);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; M; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (keys[i] != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\ttmp.put(keys[i], values[i]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.M = m;</div><div class=\"line\">\t\tkeys = tmp.keys;</div><div class=\"line\">\t\tvalues = tmp.values;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (N &gt;= M / <span class=\"number\">2</span>)</div><div class=\"line\">\t\t\tresize(<span class=\"number\">2</span> * M);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> m = hash(key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (m = hash(key); keys[m] != <span class=\"keyword\">null</span>; m = (m + <span class=\"number\">1</span>) % M)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (keys[m].equals(key))&#123;</div><div class=\"line\">\t\t\t\tvalues[m] = value;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tkeys[m] = key;</div><div class=\"line\">\t\tvalues[m] = value;</div><div class=\"line\">\t\tN++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> m = hash(key); keys[m] != <span class=\"keyword\">null</span>; m = (m + <span class=\"number\">1</span>) % M)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (keys[m].equals(key))</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> values[m];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> m;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (m = hash(key); keys[m] != <span class=\"keyword\">null</span>; m = (m + <span class=\"number\">1</span>) % M)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (keys[m].equals(key))&#123;</div><div class=\"line\">\t\t\t\tkeys[m] = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\t\tvalues[m] = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (m = (m + <span class=\"number\">1</span>) % M; keys[m] != <span class=\"keyword\">null</span>; m = (m + <span class=\"number\">1</span>) % M)&#123;</div><div class=\"line\">\t\t\tKey k = keys[m];</div><div class=\"line\">\t\t\tValue v = values[m];</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tkeys[m] = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\tvalues[m] = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tput(k, v);</div><div class=\"line\">\t\t\tN--;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tN--;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (N &gt; <span class=\"number\">0</span> &amp;&amp; N == M / <span class=\"number\">8</span>)</div><div class=\"line\">\t\t\tresize(M / <span class=\"number\">2</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tQueue&lt;Key&gt; queue = <span class=\"keyword\">new</span> Queue&lt;Key&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; M; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (keys[i] != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\tqueue.enqueue(keys[i]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> queue;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> get(key) != <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> N;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> size() == <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-5\"><a href=\"#特点-5\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>在一张大小为M并含有N=aM个键的基于线性探测的散列表中，命中和未命中的查找所需的探测次数分别为：</p>\n<p><img src=\"http://i2.muimg.com/1949/e14e5b0fae6829b4.png\" alt=\"Markdown\"></p>\n<p>假设一张散列表能够自己调整数组的大小，初始为空。执行任意数序的t次查找、插入和删除操作所需的时间和t成正比，所使用的内存量总是在表中的键的总数的常数因子范围内。</p>\n<ol>\n<li>线性探测的平均成本取决于元素在插入数组后聚集成的一组连续的条目，也叫做键簇。短小的键簇才能保证较高的效率，因此需要动态调整数组的大小来保证使用率在1/8到1/2之间。</li>\n</ol>\n<h4 id=\"比较-3\"><a href=\"#比较-3\" class=\"headerlink\" title=\"比较\"></a>比较</h4><p>将a=N/M称为散列表的使用率。对于基于拉链法的散列表，a是每条链表的长度，因此一般大于1；对于基于线性探测的散列表，a是表中已被占用的空间的比例，它是不可能大于1的。</p>\n<h3 id=\"特点-6\"><a href=\"#特点-6\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ol>\n<li>每种类型的键都需要一个优秀的散列函数</li>\n<li>性能保证来自于散列函数的质量</li>\n<li>散列函数的计算可能复杂而且昂贵</li>\n<li>难以支持有序性相关的符号表操作</li>\n</ol>\n<h3 id=\"比较-4\"><a href=\"#比较-4\" class=\"headerlink\" title=\"比较\"></a>比较</h3><p><img src=\"http://i4.buimg.com/1949/39f17afd0f7dc23c.png\" alt=\"Markdown\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><img src=\"http://i2.muimg.com/1949/95d69b5d605ec62a.png\" alt=\"Markdown\"><br><img src=\"http://i1.piimg.com/1949/57df48f1b0bb28b0.png\" alt=\"Markdown\"></p>\n","categories":["Algorithm"],"tags":["Algorithm","Search"]},{"title":"【算法】排序","url":"http://yoursite.com/2017/04/13/【算法】排序/","content":"<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><p>首先，找到数组中最小的那个元素，其次，将它和数组的第一个元素交换位置（如果第一个元素就是最小元素那么它就和自己交换）。再次，在剩下的元素中找到最小的元素，将它与数组的第二个元素交换位置。如此往复，直到将整个数组排序。</p>\n<h3 id=\"示意\"><a href=\"#示意\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/37c5303b947c2871.png\" alt=\"Markdown\"><br><img src=\"http://i4.buimg.com/1949/2e4a7fde5bb8cead.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Selection</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length - <span class=\"number\">1</span>; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> minIndex = i;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; a.length; j++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!less(a[minIndex], a[j]))</div><div class=\"line\">\t\t\t\t\tminIndex = j;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\texch(a, i, minIndex);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(Comparable a, Comparable b)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a.compareTo(b) &lt; <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</div><div class=\"line\">\t\tComparable t = a[i];</div><div class=\"line\">\t\ta[i] = a[j];</div><div class=\"line\">\t\ta[j] = t;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</div><div class=\"line\">\t\t\tSystem.out.print(a[i] + <span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>对于长度为N的数组，选择排序需要大约N^2/2次比较和N次交换。</p>\n<ol>\n<li>运行时间和输入无关</li>\n<li>数据移动是最少的</li>\n</ol>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><p>将元素插入到其他已经有序的数组中的适当位置。为了要给插入的元素腾出空间，需要将其余所有元素在插入之前都向右移动一位。</p>\n<h3 id=\"示意-1\"><a href=\"#示意-1\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/58ff4414ea0b0aa8.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Insertion</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; a.length; i++)&#123;\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &gt; <span class=\"number\">0</span> &amp;&amp; less(a[j], a[j-<span class=\"number\">1</span>]); j--)</div><div class=\"line\">\t\t\t\texch(a, j-<span class=\"number\">1</span>, j);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(Comparable a, Comparable b)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a.compareTo(b) &lt; <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</div><div class=\"line\">\t\tComparable t = a[i];</div><div class=\"line\">\t\ta[i] = a[j];</div><div class=\"line\">\t\ta[j] = t;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</div><div class=\"line\">\t\t\tSystem.out.print(a[i] + <span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>对于随机排列的长度为N且主键不重复的数组，平均情况下插入排序需要～N^2/2次比较以及~N^2/4次交换。最坏情况下需要～N^2/2次比较和～N^2/2次交换，最好情况下需要N-1次比较和0次交换。</p>\n<p>插入排序需要的交换操作和数组中倒置的数量相同，需要的比较次数大于等于倒置的数量，小于等于倒置的数量加上数组的大小再减一。</p>\n<ol>\n<li>所需的时间取决于输入中元素的初始顺序，对于部分有序的数组十分高效，也很适合小规模数组</li>\n</ol>\n<h3 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h3><p>对于随机排序的无重复主键的数组，插入排序和选择排序的运行时间是平方级别的，两者之比应该是一个较小的常数。</p>\n<ol>\n<li>插入排序不会访问索引右侧的元素，而选择排序不会访问索引左侧的元素</li>\n<li>插入排序所需的比较次数平均只有选择排序的一半</li>\n</ol>\n<h2 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h2><p>希尔排序的思想是使数组中任意间隔为h的元素都是有序的。这样的数组被称为h有序数组。在进行排序时，如果h很大，就能将元素移动到很远的地方，为实现更小的h有序创造方便。用这种方式，对于任意以1结尾的h序列，都能够将数组排序。</p>\n<h3 id=\"示意-2\"><a href=\"#示意-2\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/cd9e7723e4a03206.png\" alt=\"Markdown\"><br><img src=\"http://i4.buimg.com/1949/dea476cb7d030f95.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-2\"><a href=\"#实现-2\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shell</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> h = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (h &lt;= a.length / <span class=\"number\">3</span>)</div><div class=\"line\">\t\t\th = <span class=\"number\">3</span> * h + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (h &gt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = h; i &lt; a.length; i++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &gt; h &amp;&amp; less(a[j], a[j-h]); j -= h)</div><div class=\"line\">\t\t\t\t\texch(a, j-h, j);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\th = (h - <span class=\"number\">1</span>) / <span class=\"number\">3</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(Comparable a, Comparable b)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a.compareTo(b) &lt; <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</div><div class=\"line\">\t\tComparable t = a[i];</div><div class=\"line\">\t\ta[i] = a[j];</div><div class=\"line\">\t\ta[j] = t;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</div><div class=\"line\">\t\t\tSystem.out.print(a[i] + <span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>使用递增序列1，4，13，40，121，364…的希尔排序所需的比较次数不会超出N的若干倍数乘以递增序列的长度。</p>\n<ol>\n<li>希尔排序更高效的原因是它权衡了子数组的规模和有序性。排序之初，各个子数组都很短，排序之后子数组都是部分有序的，这两种情况都很适合插入排序。</li>\n<li>希尔排序可以用于大型数组。它对任意排序（不一定是随机的）的数组表现也很好。</li>\n<li>希尔排序对于中等大小的数组它的运行时间是可以接受的。它的代码量很小，且不需要使用额外的内存空间。</li>\n</ol>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><p>要将一个数组排序，可以先（递归地）将它分成两半分别排序，然后将结果归并起来。</p>\n<p>递归实现的归并排序是算法设计中<em>分治思想</em>的典型应用。</p>\n<h3 id=\"示意-3\"><a href=\"#示意-3\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/36a6409cbc7bd58d.png\" alt=\"Markdown\"></p>\n<h3 id=\"特点-3\"><a href=\"#特点-3\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ol>\n<li>能够保证将任意长度为N的数组排序所需时间和NlogN成正比，所需的额外空间和N成正比。</li>\n<li>可以用归并排序处理数百万甚至更大规模的数组，这是插入排序或者选择排序做不到的。</li>\n</ol>\n<h3 id=\"自顶向下的归并排序\"><a href=\"#自顶向下的归并排序\" class=\"headerlink\" title=\"自顶向下的归并排序\"></a>自顶向下的归并排序</h3><h4 id=\"示意-4\"><a href=\"#示意-4\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/a840c99994a6f5a6.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-3\"><a href=\"#实现-3\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Merge</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Comparable[] aux;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\taux = <span class=\"keyword\">new</span> Comparable[a.length];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tsort(a, <span class=\"number\">0</span>, a.length-<span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (lo == hi)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> mid = (hi + lo) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tsort(a, lo, mid);</div><div class=\"line\">\t\tsort(a, mid+<span class=\"number\">1</span>, hi);</div><div class=\"line\">\t\tmerge(a, lo, mid, hi);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> hi)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> j = lo;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> k = mid + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lo; i &lt;= hi; i++)</div><div class=\"line\">\t\t\taux[i] = a[i];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lo; i &lt;= hi; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j &gt; mid)</div><div class=\"line\">\t\t\t\ta[i] = aux[k++];</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k &gt; hi)</div><div class=\"line\">\t\t\t\ta[i] = aux[j++];</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (less(aux[j], aux[k]))</div><div class=\"line\">\t\t\t\ta[i] = aux[j++];</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\ta[i] = aux[k++];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(Comparable a, Comparable b)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a.compareTo(b) &lt; <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</div><div class=\"line\">\t\t\tSystem.out.print(a[i] + <span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-4\"><a href=\"#特点-4\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>对于长度为N的任意数组，自顶向下的归并排序需要1/2*NlgN至NlgN次比较，最多需要访问数组6NlgN次。</p>\n<h3 id=\"自底向上的归并排序\"><a href=\"#自底向上的归并排序\" class=\"headerlink\" title=\"自底向上的归并排序\"></a>自底向上的归并排序</h3><h4 id=\"示意-5\"><a href=\"#示意-5\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/0029f5c2ef45566b.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-4\"><a href=\"#实现-4\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Merge</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Comparable[] aux;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\taux = <span class=\"keyword\">new</span> Comparable[a.length];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; a.length; i *= <span class=\"number\">2</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; a.length; j += <span class=\"number\">2</span>*i)</div><div class=\"line\">\t\t\t\tmerge(a, j, j+i-<span class=\"number\">1</span>, Math.min(j+<span class=\"number\">2</span>*i-<span class=\"number\">1</span>, a.length-<span class=\"number\">1</span>));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> hi)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> j = lo;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> k = mid + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lo; i &lt;= hi; i++)</div><div class=\"line\">\t\t\taux[i] = a[i];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lo; i &lt;= hi; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j &gt; mid)</div><div class=\"line\">\t\t\t\ta[i] = aux[k++];</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k &gt; hi)</div><div class=\"line\">\t\t\t\ta[i] = aux[j++];</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (less(aux[j], aux[k]))</div><div class=\"line\">\t\t\t\ta[i] = aux[j++];</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\ta[i] = aux[k++];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(Comparable a, Comparable b)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a.compareTo(b) &lt; <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</div><div class=\"line\">\t\t\tSystem.out.print(a[i] + <span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-5\"><a href=\"#特点-5\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>对于长度为N的任意数组，自底向上的归并排序需要1/2*NlgN至NlgN次比较，最多访问数组6NlgN次。</p>\n<ol>\n<li>比较适合用链表组织的数据。只需要重新组织链表链接就能将链表原地排序（不需要创建任何的链表结点）。</li>\n<li>归并排序是一种渐进最优的基于比较排序的算法。</li>\n</ol>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><p>快速排序是一种分治的排序算法。它将一个数组分成两个子数组，将两部分独立地排序。</p>\n<h3 id=\"示意-6\"><a href=\"#示意-6\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/788a2666f6f460b3.png\" alt=\"Markdown\"><br><img src=\"http://i4.buimg.com/1949/839068374a31bf98.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-5\"><a href=\"#实现-5\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Quick</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Random random;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> seed;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        seed = System.currentTimeMillis();</div><div class=\"line\">        random = <span class=\"keyword\">new</span> Random(seed);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\tshuffle(a);</div><div class=\"line\">\t\tsort(a, <span class=\"number\">0</span>, a.length-<span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (hi &lt;= lo)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = partition(a, lo, hi);</div><div class=\"line\">\t\tsort(a, lo, i-<span class=\"number\">1</span>);</div><div class=\"line\">\t\tsort(a, i+<span class=\"number\">1</span>, hi);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = lo;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> j = hi;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (i &lt; j)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (i &lt; j &amp;&amp; less(a[i], a[lo]))</div><div class=\"line\">\t\t\t\ti++;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (i &lt; j &amp;&amp; less(a[lo], a[j]))</div><div class=\"line\">\t\t\t\tj--;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\texch(a, i, j);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\texch(a, lo, i);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> i;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(Comparable a, Comparable b)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a.compareTo(b) &lt; <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</div><div class=\"line\">\t\tComparable t = a[i];</div><div class=\"line\">\t\ta[i] = a[j];</div><div class=\"line\">\t\ta[j] = t;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</div><div class=\"line\">\t\t\tSystem.out.print(a[i] + <span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shuffle</span><span class=\"params\">(Object[] a)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"argument array is null\"</span>);</div><div class=\"line\">        <span class=\"keyword\">int</span> n = a.length;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> r = i + uniform(n-i);</div><div class=\"line\">            Object temp = a[i];</div><div class=\"line\">            a[i] = a[r];</div><div class=\"line\">            a[r] = temp;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">uniform</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"argument must be positive\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> random.nextInt(n);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"特点-6\"><a href=\"#特点-6\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>将长度为N的无重复数组排序，快速排序平均需要~2NlnN次比较（以及1/6的交换），最多需要约N^2/2次比较，但随机打乱数组能够预防这种情况。</p>\n<ol>\n<li>快速排序实现简单、适用于各种不同的输入数据且在一般应用中比其他排序算法都要快得多。</li>\n<li>快速排序是原地排序（只需要一个很小的辅助栈），且将长度为N的数组排序所需的时间和NlgN成正比。</li>\n<li>非常脆弱，在实现时要非常小心才能避免低劣的性能。</li>\n</ol>\n<h3 id=\"比较-1\"><a href=\"#比较-1\" class=\"headerlink\" title=\"比较\"></a>比较</h3><p>快速排序和归并排序是互补的：归并排序将数组分成两个子数组分别排序，并将有序的子数组归并以将整个数组排序；而快速排序将数组排序的方式则是当两个子数组都有序时整个数组也就自然有序了。</p>\n<p>在第一种情况中，递归调用发生在处理整个数组之前；在第二种情况中，递归调用发生在处理整个数组之后。</p>\n<p>在归并排序中，一个数组被等分为两半；在快速排序中，切分的位置取决于数组的内容。</p>\n<h3 id=\"三向切分的快速排序\"><a href=\"#三向切分的快速排序\" class=\"headerlink\" title=\"三向切分的快速排序\"></a>三向切分的快速排序</h3><p>在有大量重复元素的情况下，快速排序的递归性会使元素全部重复的子数组经常出现。一个简单的想法是将数组切分为三部分，分别对应小于、等于和大于切分元素的数组元素。这样的切分能够将和切分元素相等的元素归位，就不会被包含在递归调用处理的子数组之中了。</p>\n<p>对于包含大量重复元素的数组，三向切分的快速排序将排序时间从线性对数级降低到了线性级别。</p>\n<h4 id=\"示意-7\"><a href=\"#示意-7\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i2.muimg.com/1949/4ef1978a61e4d2ed.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-6\"><a href=\"#实现-6\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Quick</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Random random;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> seed;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        seed = System.currentTimeMillis();</div><div class=\"line\">        random = <span class=\"keyword\">new</span> Random(seed);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\tshuffle(a);</div><div class=\"line\">\t\tsort(a, <span class=\"number\">0</span>, a.length-<span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (hi &lt;= lo)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> lt = lo;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> gt = hi;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = lo + <span class=\"number\">1</span>;</div><div class=\"line\">\t\tComparable v = a[lo];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (i &lt;= gt)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (a[i].compareTo(v) &lt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\texch(a, lt, i);</div><div class=\"line\">\t\t\t\tlt++;</div><div class=\"line\">\t\t\t\ti++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a[i].compareTo(v) &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\texch(a, gt, i);</div><div class=\"line\">\t\t\t\tgt--;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\ti++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tsort(a, lo, lt-<span class=\"number\">1</span>);</div><div class=\"line\">\t\tsort(a, gt+<span class=\"number\">1</span>, hi);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</div><div class=\"line\">\t\tComparable t = a[i];</div><div class=\"line\">\t\ta[i] = a[j];</div><div class=\"line\">\t\ta[j] = t;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</div><div class=\"line\">\t\t\tSystem.out.print(a[i] + <span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shuffle</span><span class=\"params\">(Object[] a)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"argument array is null\"</span>);</div><div class=\"line\">        <span class=\"keyword\">int</span> n = a.length;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> r = i + uniform(n-i);</div><div class=\"line\">            Object temp = a[i];</div><div class=\"line\">            a[i] = a[r];</div><div class=\"line\">            a[r] = temp;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">uniform</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"argument must be positive\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> random.nextInt(n);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-7\"><a href=\"#特点-7\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>对于大小为N的数组，三向切分的快速排序需要~(2ln2)NH次比较。其中H为由主键值出现频率定义的香农信息量。</p>\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><p>堆排序可以分为两个阶段。在堆的构造阶段中，将原始数组重新组织安排进一个堆中（从右至左用sink函数构造子堆）；然后在下沉排序阶段，从堆中按递减顺序取出所有元素得到排序结果（将堆中的最大元素删除，然后放入堆缩小后数组空出的位置）。</p>\n<h3 id=\"示意-8\"><a href=\"#示意-8\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i1.piimg.com/1949/940fc4273ab8f243.png\" alt=\"Markdown\"><br><img src=\"http://i1.piimg.com/1949/f91b943a1d066418.png\" alt=\"Markdown\"><br><img src=\"http://i1.piimg.com/1949/820fe5415a95d65a.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-7\"><a href=\"#实现-7\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Heap</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = a.length;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n / <span class=\"number\">2</span>; i &gt;= <span class=\"number\">1</span>; i--)</div><div class=\"line\">\t\t\tsink(a, i, n);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (n &gt; <span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\texch(a, <span class=\"number\">0</span>, n-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t\tsink(a, <span class=\"number\">1</span>, --n);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(Comparable a, Comparable b)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a.compareTo(b) &lt; <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</div><div class=\"line\">\t\tComparable t = a[i];</div><div class=\"line\">\t\ta[i] = a[j];</div><div class=\"line\">\t\ta[j] = t;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sink</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"number\">2</span> * k &lt;= n)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> j = <span class=\"number\">2</span> * k;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j &lt; n &amp;&amp; less(a[j-<span class=\"number\">1</span>], a[j]))</div><div class=\"line\">\t\t\t\tj++;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!less(a[k-<span class=\"number\">1</span>], a[j-<span class=\"number\">1</span>]))</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\texch(a, k-<span class=\"number\">1</span>, j-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tk = j;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</div><div class=\"line\">\t\t\tSystem.out.print(a[i] + <span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"特点-8\"><a href=\"#特点-8\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>用下沉操作由N个元素构造堆只需少于2N次比较以及少于N次交换。</p>\n<p>将N个元素排序，堆排序只需少于（2NlgN+2N）次比较（以及一半次数的交换）。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>快速排序是最快的通用排序算法。</p>\n<p><img src=\"http://i1.piimg.com/1949/5fb571a8e7c4ba4b.png\" alt=\"Markdown\"></p>\n","categories":["Algorithm"],"tags":["Algorithm","Sort"]},{"title":"【算法】基础","url":"http://yoursite.com/2017/04/13/【算法】基础/","content":"<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><p>链表是一种递归的数据结构，它或者为空（null），或者是指向一个结点（node）的引用，该结点含有一个泛型的元素和一个指向另一条链表的引用。</p>\n<h3 id=\"结点记录\"><a href=\"#结点记录\" class=\"headerlink\" title=\"结点记录\"></a>结点记录</h3><p>用一个嵌套类来定义结点的抽象数据类型。一个Node对象含有两个实例变量，类型分别为Item（参数类型）和Node。调用的结果是一个指向Node对象的引用，它的实例变量均被初始化为null。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</div><div class=\"line\">\tItem item;</div><div class=\"line\">\tNode next;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"构造链表\"><a href=\"#构造链表\" class=\"headerlink\" title=\"构造链表\"></a>构造链表</h3><p><img src=\"http://i2.muimg.com/1949/2fae2b9aa25cf46c.png\" alt=\"Markdown\"></p>\n<h3 id=\"在表头插入结点\"><a href=\"#在表头插入结点\" class=\"headerlink\" title=\"在表头插入结点\"></a>在表头插入结点</h3><p><img src=\"http://i2.muimg.com/1949/b3feac44119e5385.png\" alt=\"Markdown\"></p>\n<h3 id=\"从表头删除结点\"><a href=\"#从表头删除结点\" class=\"headerlink\" title=\"从表头删除结点\"></a>从表头删除结点</h3><p><img src=\"http://i2.muimg.com/1949/a353747333a6df9a.png\" alt=\"Markdown\"></p>\n<h3 id=\"在表尾插入结点\"><a href=\"#在表尾插入结点\" class=\"headerlink\" title=\"在表尾插入结点\"></a>在表尾插入结点</h3><p><img src=\"http://i2.muimg.com/1949/99b757251fa0d3ae.png\" alt=\"Markdown\"></p>\n<h3 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (Node x = first; x != <span class=\"keyword\">null</span>; x = x.next)&#123;</div><div class=\"line\">\t<span class=\"comment\">//处理x.item</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li>可以处理任意类型的数据</li>\n<li>所需的空间总是和集合的大小成正比</li>\n<li>操作所需的时间总是和集合的大小无关</li>\n</ol>\n<h2 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h2><p>栈是一种基于后进先出（LIFO）策略的集合类型。</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>将栈保存为一条链表，栈的顶部即为表头，实例变量first指向栈顶。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">E</span>&gt;</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> n;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Node first;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</div><div class=\"line\">\t\tE e;</div><div class=\"line\">\t\tNode next;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> n == <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> n;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(E e)</span></span>&#123;</div><div class=\"line\">\t\tNode oldFirst = first;</div><div class=\"line\">\t\tfirst = <span class=\"keyword\">new</span> Node();</div><div class=\"line\">\t\tfirst.e = e;</div><div class=\"line\">\t\tfirst.next = oldFirst;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tn++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">pop</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tE e = first.e;</div><div class=\"line\">\t\tfirst = first.next;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tn--;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> e;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ListIterator();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt;</span>&#123;</div><div class=\"line\">\t\tNode current = first;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> current != <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\tE e = current.e;</div><div class=\"line\">\t\t\tcurrent = current.next;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> e;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><p>队列是一种基于先进先出（FIFO）策略的集合类型。</p>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>将队列表示为一条从最早插入的元素到最近插入的元素的链表，实例变量first指向队列的开头，实例变量last指向队列的结尾。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">E</span>&gt;</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> n;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Node first;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Node last;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</div><div class=\"line\">\t\tE e;</div><div class=\"line\">\t\tNode next;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> n == <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> n;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">enqueue</span><span class=\"params\">(E e)</span></span>&#123;</div><div class=\"line\">\t\tNode oldLast = last;</div><div class=\"line\">\t\tlast = <span class=\"keyword\">new</span> Node();</div><div class=\"line\">\t\tlast.e = e;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty())</div><div class=\"line\">\t\t\tfirst = last;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\toldLast.next = last;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tn++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">dequeue</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tE e = first.e;</div><div class=\"line\">\t\tfirst = first.next;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty())</div><div class=\"line\">\t\t\tlast = first;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tn--;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> e;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ListIterator();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt;</span>&#123;</div><div class=\"line\">\t\tNode current = first;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> current != <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\tE e = current.e;</div><div class=\"line\">\t\t\tcurrent = current.next;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> e;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"二叉堆\"><a href=\"#二叉堆\" class=\"headerlink\" title=\"二叉堆\"></a>二叉堆</h2><p>在二叉堆的数组中，每个元素都要保证大于等于另两个特定位置的元素。相应地，这些位置的元素又至少要大于等于数组中的另两个元素，以此类推。</p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>当一棵二叉树的结点都大于等于它的两个子结点时，它被称为堆有序。</p>\n<p>二叉堆是一组能够用堆有序的完全二叉树排序的元素，并在数组中按照层级存储（不使用数组的第一个位置）。</p>\n<ol>\n<li>根结点是堆有序的二叉树中的最大结点</li>\n<li>一棵大小为N的完全二叉树的高度为floor(lgN)</li>\n</ol>\n<h3 id=\"示意\"><a href=\"#示意\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/2bd7dc7c0a5c6f3c.png\" alt=\"Markdown\"></p>\n<h3 id=\"由下至上的堆有序化（上浮）\"><a href=\"#由下至上的堆有序化（上浮）\" class=\"headerlink\" title=\"由下至上的堆有序化（上浮）\"></a>由下至上的堆有序化（上浮）</h3><p>如果堆的有序状态因为某个结点变得比它的父结点更大而被打破，那么就需要通过交换它和它的父结点来修复堆。</p>\n<h4 id=\"示意-1\"><a href=\"#示意-1\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/1a7c19e6c147a7a9.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-2\"><a href=\"#实现-2\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swim</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (k &gt; <span class=\"number\">1</span> &amp;&amp; less(k/<span class=\"number\">2</span>, k))&#123;</div><div class=\"line\">\t\texch(k, k/<span class=\"number\">2</span>);</div><div class=\"line\">\t\tk /= <span class=\"number\">2</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"由上至下的堆有序化（下沉）\"><a href=\"#由上至下的堆有序化（下沉）\" class=\"headerlink\" title=\"由上至下的堆有序化（下沉）\"></a>由上至下的堆有序化（下沉）</h3><p>如果堆的有序状态因为某个结点变得比它的两个子结点或是其中之一更小了而被打破了，那么可以通过将它和它的两个子结点中的较大者交换来恢复堆。</p>\n<h4 id=\"示意-2\"><a href=\"#示意-2\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/89505058e58013f5.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-3\"><a href=\"#实现-3\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sink</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">2</span> * k &lt;= n)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> j = <span class=\"number\">2</span> * k;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (j &lt; n &amp;&amp; less(j, j+<span class=\"number\">1</span>))</div><div class=\"line\">\t\t\tj++;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!less(k, j))</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\texch(k, j);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tk = j;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"优先队列\"><a href=\"#优先队列\" class=\"headerlink\" title=\"优先队列\"></a>优先队列</h2><p>优先队列是一种抽象数据类型，它表示了一组值和对这些值的操作。优先队列最重要的操作就是删除最大元素delMax()和插入元素insert()。</p>\n<h3 id=\"示意-3\"><a href=\"#示意-3\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/0fea3523976b8835.png\" alt=\"Markdown\"></p>\n<h3 id=\"插入元素\"><a href=\"#插入元素\" class=\"headerlink\" title=\"插入元素\"></a>插入元素</h3><p>将新元素加到数组末尾，增加堆的大小并让这个新元素上浮到合适的位置。</p>\n<p><img src=\"http://i4.buimg.com/1949/d0ca8c6eedd7b9a5.png\" alt=\"Markdown\"></p>\n<h3 id=\"删除最大元素\"><a href=\"#删除最大元素\" class=\"headerlink\" title=\"删除最大元素\"></a>删除最大元素</h3><p>从数组顶端删去最大的元素并将数组的最后一个元素放到顶端，减小堆的大小并让这个元素下沉到合适的位置。</p>\n<p><img src=\"http://i4.buimg.com/1949/0669587c1214742e.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-4\"><a href=\"#实现-4\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MaxPQ</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Key[] pq;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MaxPQ</span><span class=\"params\">(<span class=\"keyword\">int</span> max)</span></span>&#123;</div><div class=\"line\">\t\tpq = (Key[]) <span class=\"keyword\">new</span> Comparable[max+<span class=\"number\">1</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> n == <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> n;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Key k)</span></span>&#123;</div><div class=\"line\">\t\tpq[++n] = k;</div><div class=\"line\">\t\tswim(n);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">delMax</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tKey k = pq[<span class=\"number\">1</span>];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\texch(<span class=\"number\">1</span>, n);</div><div class=\"line\">\t\tn--;</div><div class=\"line\">\t\tpq[n+<span class=\"number\">1</span>] = <span class=\"keyword\">null</span>; </div><div class=\"line\">\t\tsink(<span class=\"number\">1</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> k;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> pq[i].compareTo(pq[j]) &lt; <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</div><div class=\"line\">\t\tKey t = pq[i];</div><div class=\"line\">\t\tpq[i] = pq[j];</div><div class=\"line\">\t\tpq[j] = t;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swim</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (k &gt; <span class=\"number\">1</span> &amp;&amp; less(k/<span class=\"number\">2</span>, k))&#123;</div><div class=\"line\">\t\t\texch(k, k/<span class=\"number\">2</span>);</div><div class=\"line\">\t\t\tk /= <span class=\"number\">2</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sink</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"number\">2</span> * k &lt;= n)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> j = <span class=\"number\">2</span> * k;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j &lt; n &amp;&amp; less(j, j+<span class=\"number\">1</span>))</div><div class=\"line\">\t\t\t\tj++;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!less(k, j))</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\texch(k, j);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tk = j;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>对于一个含有N个元素的基于堆的优先队列，插入元素操作只需不超过（lgN+1）次比较，删除最大元素的操作需要不超过2lgN次比较。</p>\n<h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><p>二叉树由结点组成，结点包含的链接可以指向空（null）或者其他结点。在二叉树中，每个结点只能有一个父结点指向自己（只有一个例外，也就是根结点，它没有父结点），而且每个结点都只有左右两个链接，分别指向自己的左子结点和右子结点。</p>\n<h3 id=\"示意-4\"><a href=\"#示意-4\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/a7eb66a889f94fda.png\" alt=\"Markdown\"></p>\n<h2 id=\"二叉查找树\"><a href=\"#二叉查找树\" class=\"headerlink\" title=\"二叉查找树\"></a>二叉查找树</h2><p>一棵二叉查找树（BST）是一棵二叉树，其中每个结点都含有一个Comparable的键（以及相关联的值）且每个结点的键都大于其左子树中的任意结点的键而小于右子树的任意结点的键。</p>\n<h3 id=\"示意-5\"><a href=\"#示意-5\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/3dac73f08016efaa.png\" alt=\"Markdown\"></p>\n<h3 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h3><p><img src=\"http://i1.piimg.com/1949/ac9f0373e2f6eaea.png\" alt=\"Markdown\"></p>\n<h3 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h3><p><img src=\"http://i1.piimg.com/1949/60048b17572f2981.png\" alt=\"Markdown\"></p>\n<h3 id=\"向下取整\"><a href=\"#向下取整\" class=\"headerlink\" title=\"向下取整\"></a>向下取整</h3><p><img src=\"http://i1.piimg.com/1949/2ab50411f56bb58b.png\" alt=\"Markdown\"></p>\n<h3 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h3><p><img src=\"http://i1.piimg.com/1949/3e77615b752ffe0d.png\" alt=\"Markdown\"></p>\n<h3 id=\"删除最小键\"><a href=\"#删除最小键\" class=\"headerlink\" title=\"删除最小键\"></a>删除最小键</h3><p><img src=\"http://i1.piimg.com/1949/f4195cae1bdf13a9.png\" alt=\"Markdown\"></p>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p><img src=\"http://i1.piimg.com/1949/ca452c8fd1292456.png\" alt=\"Markdown\"></p>\n<h3 id=\"范围查找\"><a href=\"#范围查找\" class=\"headerlink\" title=\"范围查找\"></a>范围查找</h3><p>需要一个遍历二叉查找树的基本方法，叫做中序遍历。</p>\n<p><img src=\"http://i1.piimg.com/1949/faf9f99b7542d5ea.png\" alt=\"Markdown\"></p>\n<h2 id=\"平衡查找树\"><a href=\"#平衡查找树\" class=\"headerlink\" title=\"平衡查找树\"></a>平衡查找树</h2><p>在一棵含有N个结点的树中，树高为～lgN。</p>\n<h3 id=\"2-3查找树\"><a href=\"#2-3查找树\" class=\"headerlink\" title=\"2-3查找树\"></a>2-3查找树</h3><p>一棵2-3查找树或为一棵空树，或由以下结点组成：</p>\n<ol>\n<li>2-结点，含有一个键（及其对应的值）和两条链接，左链接指向的2-3树中的键都小于该结点，右链接指向的2-3树中的键都大于该结点。</li>\n<li>3-结点，含有两个键（及其对应的值）和三条链接，左链接指向的2-3树中的键都小于该结点，中链接指向的2-3树中的键都位于该结点的两个键之间，右链接指向的2-3树中的键都大于该结点。</li>\n</ol>\n<p>将指向一棵空树的链接称为空链接。</p>\n<p>一棵完美平衡的2-3查找树中的所有空链接到根结点的距离都应该是相同的。</p>\n<h4 id=\"示意-6\"><a href=\"#示意-6\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/c13139f2c2dfe965.png\" alt=\"Markdown\"><br><img src=\"http://i1.piimg.com/1949/e79a6807de668bd7.png\" alt=\"Markdown\"></p>\n<h4 id=\"查找-1\"><a href=\"#查找-1\" class=\"headerlink\" title=\"查找\"></a>查找</h4><p><img src=\"http://i1.piimg.com/1949/d546e5595bf8c444.png\" alt=\"Markdown\"></p>\n<h4 id=\"插入-1\"><a href=\"#插入-1\" class=\"headerlink\" title=\"插入\"></a>插入</h4><h5 id=\"向2-结点中插入新键\"><a href=\"#向2-结点中插入新键\" class=\"headerlink\" title=\"向2-结点中插入新键\"></a>向2-结点中插入新键</h5><p><img src=\"http://i1.piimg.com/1949/23e6a42f3239e670.png\" alt=\"Markdown\"></p>\n<h5 id=\"向一棵只含有一个3-结点的树中插入新键\"><a href=\"#向一棵只含有一个3-结点的树中插入新键\" class=\"headerlink\" title=\"向一棵只含有一个3-结点的树中插入新键\"></a>向一棵只含有一个3-结点的树中插入新键</h5><p><img src=\"http://i1.piimg.com/1949/1194c64a618adf69.png\" alt=\"Markdown\"></p>\n<h5 id=\"向一个父结点为2-结点的3-结点中插入新键\"><a href=\"#向一个父结点为2-结点的3-结点中插入新键\" class=\"headerlink\" title=\"向一个父结点为2-结点的3-结点中插入新键\"></a>向一个父结点为2-结点的3-结点中插入新键</h5><p><img src=\"http://i2.muimg.com/1949/fa81da5c45e21cd2.png\" alt=\"Markdown\"></p>\n<h5 id=\"向一个父结点为3-结点的3-结点中插入新键\"><a href=\"#向一个父结点为3-结点的3-结点中插入新键\" class=\"headerlink\" title=\"向一个父结点为3-结点的3-结点中插入新键\"></a>向一个父结点为3-结点的3-结点中插入新键</h5><p><img src=\"http://i4.buimg.com/1949/f7cf69a22112237e.png\" alt=\"Markdown\"></p>\n<h5 id=\"分解根结点\"><a href=\"#分解根结点\" class=\"headerlink\" title=\"分解根结点\"></a>分解根结点</h5><p><img src=\"http://i1.piimg.com/1949/233af11e545fc9c8.png\" alt=\"Markdown\"></p>\n<h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>在一棵大小为N的2-3树中，查找和插入操作访问的结点必然不超过lgN个。</p>\n<ol>\n<li>2-3树插入算法的根本在于这些变换都是局部的：除了相关的结点和链接之外不必修改或者检查树的其他部分。</li>\n<li>这些局部变换不会影响树的全局有序性和平衡性：任意空链接到根结点的路径长度都是相等的。</li>\n</ol>\n<h4 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h4><p>和标准的二叉查找树由上向下生长不同，2-3树的生长是由下向上的。</p>\n<p>需要维护两种不同类型的结点，将被查找的键和结点中的每个键进行比较，将链接和其他信息从一种结点复制到另一种结点，将结点从一种数据类型转换到另一种数据类型等等。实现这些不仅需要大量的代码，而且它们所产生的额外开销可能会使算法比标准的二叉查找树更慢。</p>\n<h3 id=\"红黑二叉查找树\"><a href=\"#红黑二叉查找树\" class=\"headerlink\" title=\"红黑二叉查找树\"></a>红黑二叉查找树</h3><p>红黑二叉查找树背后的基本思想是用标准的二叉查找树（完全由2-结点构成）和一些额外的信息（替换3-结点）来表示2-3树。将树中的链接分为两种类型：</p>\n<ol>\n<li>红链接：将两个2-结点连接起来构成一个3-结点</li>\n<li>黑链接：2-3树中的普通链接。</li>\n</ol>\n<p>确切的说，将3-结点表示为由一条左斜的红色链接（两个2-结点其中之一是另一个的左子结点）相连的两个2-结点。</p>\n<h4 id=\"示意-7\"><a href=\"#示意-7\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/8477f275f5314089.png\" alt=\"Markdown\"><br><img src=\"http://i2.muimg.com/1949/000923f1d00e52b8.png\" alt=\"Markdown\"></p>\n<h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>红黑树是含有红黑链接并满足下列条件的二叉查找树：</p>\n<ol>\n<li>红链接均为左链接</li>\n<li>没有任何一个结点同时和两条红链接相连</li>\n<li>该树是完美黑色平衡的，即任意空链接到根结点的路径上的黑链接数量相同</li>\n</ol>\n<h4 id=\"颜色表示\"><a href=\"#颜色表示\" class=\"headerlink\" title=\"颜色表示\"></a>颜色表示</h4><p><img src=\"http://i1.piimg.com/1949/a2e6553a3a65f988.png\" alt=\"Markdown\"></p>\n<h4 id=\"颜色转换\"><a href=\"#颜色转换\" class=\"headerlink\" title=\"颜色转换\"></a>颜色转换</h4><p><img src=\"http://i2.muimg.com/1949/1ea6d6e50aaae209.png\" alt=\"Markdown\"><br><img src=\"http://i1.piimg.com/1949/5983c53313227279.png\" alt=\"Markdown\"></p>\n<h4 id=\"旋转\"><a href=\"#旋转\" class=\"headerlink\" title=\"旋转\"></a>旋转</h4><p><img src=\"http://i1.piimg.com/1949/ee04b318b328c5af.png\" alt=\"Markdown\"><br><img src=\"http://i1.piimg.com/1949/8af590b360b2f790.png\" alt=\"Markdown\"></p>\n<h5 id=\"实现-5\"><a href=\"#实现-5\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">rotateLeft</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">\tNode x = h.right;</div><div class=\"line\">\th.right = x.left;</div><div class=\"line\">\tx.left = h;</div><div class=\"line\">\t</div><div class=\"line\">\tx.color = h.color;</div><div class=\"line\">\th.color = RED;</div><div class=\"line\">\tx.n = h.n;</div><div class=\"line\">\th.n = size(h.left) + size(h.right) + <span class=\"number\">1</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">rotateRight</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">\tNode x = h.left;</div><div class=\"line\">\th.left = x.right;</div><div class=\"line\">\tx.right = h;</div><div class=\"line\">\t</div><div class=\"line\">\tx.color = h.color;</div><div class=\"line\">\th.color = RED;</div><div class=\"line\">\tx.n = h.n;</div><div class=\"line\">\th.n = size(h.left) + size(h.right) + <span class=\"number\">1</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"插入-2\"><a href=\"#插入-2\" class=\"headerlink\" title=\"插入\"></a>插入</h4><h5 id=\"向2-结点中插入新键-1\"><a href=\"#向2-结点中插入新键-1\" class=\"headerlink\" title=\"向2-结点中插入新键\"></a>向2-结点中插入新键</h5><p><img src=\"http://i4.buimg.com/1949/0b8bbef6cc6aee83.png\" alt=\"Markdown\"></p>\n<h5 id=\"向树底部的2-结点插入新键\"><a href=\"#向树底部的2-结点插入新键\" class=\"headerlink\" title=\"向树底部的2-结点插入新键\"></a>向树底部的2-结点插入新键</h5><p><img src=\"http://i2.muimg.com/1949/6bd301d8d00e1546.png\" alt=\"Markdown\"></p>\n<h5 id=\"向一棵双键树（即一个3-结点）中插入新键\"><a href=\"#向一棵双键树（即一个3-结点）中插入新键\" class=\"headerlink\" title=\"向一棵双键树（即一个3-结点）中插入新键\"></a>向一棵双键树（即一个3-结点）中插入新键</h5><p><img src=\"http://i2.muimg.com/1949/a35d435ca7cf05c6.png\" alt=\"Markdown\"></p>\n<h5 id=\"向树底部的3-结点插入新键\"><a href=\"#向树底部的3-结点插入新键\" class=\"headerlink\" title=\"向树底部的3-结点插入新键\"></a>向树底部的3-结点插入新键</h5><p><img src=\"http://i1.piimg.com/1949/1a9a7c08fe68f4b2.png\" alt=\"Markdown\"></p>\n<h4 id=\"删除-1\"><a href=\"#删除-1\" class=\"headerlink\" title=\"删除\"></a>删除</h4><p>不仅要在构造临时4-结点时沿着查找路径向下进行变换，还要在分解遗留的4-结点时沿着查找路径向上进行变换。</p>\n<h5 id=\"删除最小键-1\"><a href=\"#删除最小键-1\" class=\"headerlink\" title=\"删除最小键\"></a>删除最小键</h5><p><img src=\"http://i4.buimg.com/1949/551767262f0d3a7c.png\" alt=\"Markdown\"></p>\n<h4 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ol>\n<li>对于任意的2-3树，只要对结点进行转换，都可以立即派生出一棵对应的二叉查找树。</li>\n<li>红黑树既是二叉查找树，也是2-3树。</li>\n</ol>\n<h2 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h2><h3 id=\"示意-8\"><a href=\"#示意-8\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i2.muimg.com/1949/a1e95a1dfec7c611.png\" alt=\"Markdown\"></p>\n<h3 id=\"散列函数\"><a href=\"#散列函数\" class=\"headerlink\" title=\"散列函数\"></a>散列函数</h3><p>如果有一个能够保存M个键值对的数组，那么就需要一个能够将任意键转化为该数组范围内的索引（[0, M-1]范围内的整数）的散列函数。要找的散列函数应该易于计算并且能够均匀分布所有的键，即对于任意键，0到M-1之间的每个整数都有相等的可能性与之对应（与键无关）。</p>\n<h3 id=\"特点-3\"><a href=\"#特点-3\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>散列表是算法在时间和空间上作出权衡的经典例子。不必重写代码，只需要调整散列算法的参数就可以在空间和时间之间作出取舍。</p>\n<h2 id=\"邻接表\"><a href=\"#邻接表\" class=\"headerlink\" title=\"邻接表\"></a>邻接表</h2><p>将每个顶点的所有相邻顶点都保存在该顶点对应的元素所指向的一张链表中。</p>\n<h3 id=\"示意-9\"><a href=\"#示意-9\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i1.piimg.com/1949/117718a60bfb2d62.png\" alt=\"Markdown\"></p>\n<h3 id=\"特点-4\"><a href=\"#特点-4\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ol>\n<li>使用的空间和V+E成正比</li>\n<li>添加一条边所需的时间为常数</li>\n<li>遍历顶点v的所有相邻顶点所需的时间和v的度数成正比（处理每个相邻顶点所需的时间为常数）</li>\n</ol>\n<h2 id=\"无向图\"><a href=\"#无向图\" class=\"headerlink\" title=\"无向图\"></a>无向图</h2><p>边仅仅是两个顶点之间的连接。</p>\n<p>当两个顶点通过一条边相连时，称这两个顶点是相邻的，并称该连接依附于这两个顶点。某个顶点的度数即为依附于它的边的总数。子图是由一幅图的所有边的一个子集（以及它们所依附的所有顶点）组成的图。</p>\n<p>当两个顶点之间存在一条连接双方的路径时，称一个顶点和另一个顶点是连通的。</p>\n<p>特殊的图：</p>\n<ol>\n<li>自环，即一条连接一个顶点和其自身的边</li>\n<li>连接同一对顶点的两条边称为平行边</li>\n</ol>\n<p>当且仅当一幅含有V个结点的图G满足下列5个条件之一时，它就是一棵树：</p>\n<ol>\n<li>G有V-1条边且不含有环</li>\n<li>G有V-1条边且是连通的</li>\n<li>G是连通的，但删除任意一条边都会使它不再连通</li>\n<li>G是无环图，但添加任意一条边都会产生一条环</li>\n<li>G中的任意一对顶点之间仅存在一条简单路径</li>\n</ol>\n<p>图的密度是指已经连接的顶点对占所有可能被连接的顶点对的比例。在稀疏图中，被连接的顶点对很少；而在稠密图中，只有少部分顶点对之间没有边连接。</p>\n<p>二分图是一种能够将所有结点分为两部分的图，其中图的每条边所连接的两个顶点都分别属于不同的部分。</p>\n<h3 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>图是由一组顶点和一组能够将两个顶点相连的边组成的。</p>\n<p>在图中，路径是由边顺序连接的一系列顶点。简单路径是一条没有重复顶点的路径。环是一条至少含有一条边且起点和终点相同的路径，简单环是一条（除了起点和终点必须相同之外）不含有重复顶点和边的环。路径或者环的长度为其中所包含的边数。</p>\n<p>如果从任意一个顶点都存在一条路径到达另一个任意顶点，称这幅图是连通图。一幅非连通的图由若干连通的部分组成，它们都是其极大连通子图。</p>\n<p>树是一幅无环连通图。互不相连的树组成的集合称为森林。连通图的生成树是它的一幅子图，它含有图中的所有顶点且是一棵树。图的生成树森林是它的所有连通子图的生成树的集合。</p>\n<h3 id=\"示意-10\"><a href=\"#示意-10\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/0865c64aa1cbe6ca.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-6\"><a href=\"#实现-6\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Graph</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> V;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> E;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Stack&lt;Integer&gt;[] adj;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Graph</span><span class=\"params\">(<span class=\"keyword\">int</span> V)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.V = V;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.E = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tadj = (Stack&lt;Integer&gt;[]) <span class=\"keyword\">new</span> Stack[V];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; V; v++)</div><div class=\"line\">\t\t\tadj[v] = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">V</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> V;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">E</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> E;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span></span>&#123;</div><div class=\"line\">\t\tadj[v].push(w);</div><div class=\"line\">\t\tadj[w].push(v);</div><div class=\"line\">\t\tE++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">adj</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> adj[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"有向图\"><a href=\"#有向图\" class=\"headerlink\" title=\"有向图\"></a>有向图</h2><p>边是单向的：每条边所连接的两个顶点都是一个有序对，它们的邻接性是单向的。</p>\n<p>一个顶点的出度为由该顶点指出的边的总数；一个顶点的入度为指向该顶点的边的总数。</p>\n<p>一条有向边的第一个顶点称为它的头，第二个顶点则被称为它的尾。</p>\n<p>两个顶点是强连通的当且仅当它们都在一个普通的有向环中。</p>\n<p>有向图中的强连通性是一种顶点之间平等关系，因为它有着以下性质：</p>\n<ol>\n<li>自反性：任意顶点v和自己都是强连通的。</li>\n<li>对称性：如果v和w是强连通的，那么w和v也是强连通的。</li>\n<li>传递性：如果v和w是强连通的且w和x也是强连通的，那么v和x也是强连通的。</li>\n</ol>\n<p>作为一种平等关系，强连通行将所有顶点分为了一些平等的部分，每个部分都是由相互均为强连通的顶点的最大子集组成的，将这些子集称为强连通分量。一个含有V个顶点的有向图含有1～V个强连通分量，一个强连通图只含有一个强连通分量，而一个有向无环图中则含有V个强连通分量。</p>\n<h3 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>一幅有方向性的图（或有向图）是由一组顶点和一组有方向的边组成的，每条有方向的边都连接着有序的一对顶点。</p>\n<p>在一幅有向图中，有向路径由一系列顶点组成，对于其中的每个顶点都存在一条有向边从它指向序列中的下一个顶点。有向环为一条至少含有一条边且起点和终点相同的有向路径。简单有向环是一条（除了起点和终点必须相同之外）不含有重复的顶点和边的环。路径或者环的长度即为其中所包含的边数。</p>\n<p>如果两个顶点v和w是互相可达的，则称它们为强连通的。也就是说，既存在一条从v到w的有向路径，也存在一条从w到v的有向路径。如果一幅有向图中的任意两个顶点都是强连通的，则称这幅有向图也是强连通的。</p>\n<h3 id=\"示意-11\"><a href=\"#示意-11\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i2.muimg.com/1949/8f5117d2843fd6ed.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-7\"><a href=\"#实现-7\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Digraph</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> V;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> E;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Stack&lt;Integer&gt;[] adj;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Digraph</span><span class=\"params\">(<span class=\"keyword\">int</span> V)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.V = V;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.E = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tadj = (Stack&lt;Integer&gt;[]) <span class=\"keyword\">new</span> Stack[V];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; V; v++)&#123;</div><div class=\"line\">\t\t\tadj[v] = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">V</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> V;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">E</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> E;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span></span>&#123;</div><div class=\"line\">\t\tadj[v].push(w);</div><div class=\"line\">\t\tE++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">adj</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> adj[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Digraph <span class=\"title\">reverse</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tDigraph tmp = <span class=\"keyword\">new</span> Digraph(V);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; V; v++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : adj[v])</div><div class=\"line\">\t\t\t\ttmp.addEdge(w, v);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> tmp;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"加权无向图\"><a href=\"#加权无向图\" class=\"headerlink\" title=\"加权无向图\"></a>加权无向图</h2><p>加权图是一种为每条边关联一个权值或是成本的图模型。</p>\n<h3 id=\"示意-12\"><a href=\"#示意-12\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/3e0b4aa2190cd2cd.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-8\"><a href=\"#实现-8\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Edge</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Edge</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> v;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> w;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> weight;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Edge</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w, <span class=\"keyword\">double</span> weight)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.v = v;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.w = w;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.weight = weight;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">weight</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> weight;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">either</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> v;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">other</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (vertex == v)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> w;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> v;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Edge that)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> Double.compare(<span class=\"keyword\">this</span>.weight, that.weight);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EdgeWeightedGraph</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> V;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> E;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Stack&lt;Edge&gt;[] adj;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EdgeWeightedGraph</span><span class=\"params\">(<span class=\"keyword\">int</span> V)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.V = V;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.E = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tadj = (Stack&lt;Edge&gt;[]) <span class=\"keyword\">new</span> Stack[V];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; V; v++)</div><div class=\"line\">\t\t\tadj[v] = <span class=\"keyword\">new</span> Stack&lt;Edge&gt;();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">V</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> V;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">E</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> E;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(Edge e)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> v = e.either();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> w = e.other(v);</div><div class=\"line\">\t\tadj[v].push(e);</div><div class=\"line\">\t\tadj[w].push(e);</div><div class=\"line\">\t\tE++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Edge&gt; <span class=\"title\">adj</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> adj[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Edge&gt; <span class=\"title\">edges</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tStack&lt;Edge&gt; stack = <span class=\"keyword\">new</span> Stack&lt;Edge&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; V; v++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(Edge e : adj[v])&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (e.other(v) &gt; v)</div><div class=\"line\">\t\t\t\t\tstack.push(e);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> stack;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"最小生成树\"><a href=\"#最小生成树\" class=\"headerlink\" title=\"最小生成树\"></a>最小生成树</h2><h3 id=\"定义-4\"><a href=\"#定义-4\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>图的生成树是它的一棵含有其所有顶点的无环连通子图。一幅加权无向图的最小生成树（MST）是它的一棵权值（树中所有边的权值之和）最小的生成树。</p>\n<h3 id=\"示意-13\"><a href=\"#示意-13\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i2.muimg.com/1949/e5eea683c1af8b4c.png\" alt=\"Markdown\"></p>\n<h3 id=\"切分定理\"><a href=\"#切分定理\" class=\"headerlink\" title=\"切分定理\"></a>切分定理</h3><p>把加权图中的所有顶点分为两个集合、检查横跨两个集合的所有边并识别哪条边应属于图的最小生成树。通常，通过指定一个顶点集并隐式地认为它的补集为另一个顶点集来指定一个切分。这样，一条横切边就是连接该集合的一个顶点和不在该集合中的另一个顶点的一条边。</p>\n<h4 id=\"定义-5\"><a href=\"#定义-5\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>图的一种切分是将图的所有顶点分为两个非空且不重复的两个集合。横切边是一条连接两个属于不同集合的顶点的边。</p>\n<p>在一幅加权图中，给定任意的切分，它的横切边中的权重最小者必然属于图的最小生成树。</p>\n<h4 id=\"示意-14\"><a href=\"#示意-14\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i2.muimg.com/1949/b1ee2a6de3297463.png\" alt=\"Markdown\"></p>\n<h3 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h3><p>使用切分定理找到最小生成树的一条边，不断重复直到找到最小生成树的所有边。</p>\n<h4 id=\"定义-6\"><a href=\"#定义-6\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>将含有V个顶点的任意加权连通图中属于最小生成树的边标记为黑色：初始状态下所有边均为灰色，找到一种切分，它产生的横切边均不为黑色。将它权重最小的横切边标记为黑色。反复，直到标记了V-1条黑色边为止。</p>\n<h4 id=\"示意-15\"><a href=\"#示意-15\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i2.muimg.com/1949/90008faa2bf66c84.png\" alt=\"Markdown\"></p>\n<h2 id=\"加权有向图\"><a href=\"#加权有向图\" class=\"headerlink\" title=\"加权有向图\"></a>加权有向图</h2><p>在加权有向图中，每条有向路径都有一个与之关联的路径权重。</p>\n<h3 id=\"示意-16\"><a href=\"#示意-16\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i1.piimg.com/1949/675425f71207174c.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-9\"><a href=\"#实现-9\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirectedEdge</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> v;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> w;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> weight;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DirectedEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w, <span class=\"keyword\">double</span> weight)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.v = v;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.w = w;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.weight = weight;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">weight</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> weight;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">from</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> v;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">to</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> w;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EdgeWeightedDigraph</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> V;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> E;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Stack&lt;DirectedEdge&gt;[] adj;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EdgeWeightedDigraph</span><span class=\"params\">(<span class=\"keyword\">int</span> V)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.V = V;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.E = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tadj = (Stack&lt;DirectedEdge&gt;[]) <span class=\"keyword\">new</span> Stack[V];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; V; v++)</div><div class=\"line\">\t\t\tadj[v] = <span class=\"keyword\">new</span> Stack&lt;DirectedEdge&gt;();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">V</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> V;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">E</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> E;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(DirectedEdge e)</span></span>&#123;</div><div class=\"line\">\t\tadj[e.from()].push(e);</div><div class=\"line\">\t\tE++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;DirectedEdge&gt; <span class=\"title\">adj</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> adj[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;DirectedEdge&gt; <span class=\"title\">edges</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tStack&lt;DirectedEdge&gt; stack = <span class=\"keyword\">new</span> Stack&lt;DirectedEdge&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; V; v++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(DirectedEdge e : adj[v])</div><div class=\"line\">\t\t\t\tstack.push(e);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> stack;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"最短路径树\"><a href=\"#最短路径树\" class=\"headerlink\" title=\"最短路径树\"></a>最短路径树</h2><h3 id=\"最短路径\"><a href=\"#最短路径\" class=\"headerlink\" title=\"最短路径\"></a>最短路径</h3><h4 id=\"定义-7\"><a href=\"#定义-7\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>在一幅加权有向图中，从顶点s到顶点t的最短路径是所有从s到t的路径中的权重最小者。</p>\n<h4 id=\"示意-17\"><a href=\"#示意-17\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/3d4dec96dec81332.png\" alt=\"Markdown\"></p>\n<h3 id=\"定义-8\"><a href=\"#定义-8\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>给定一幅加权有向图和一个顶点s，以s为起点的一棵最短路径树是图的一幅子图，它包含s和从s可达的所有顶点。这棵有向树的根结点为s，树的每条路径都是有向图中的一条最短路径。</p>\n<h3 id=\"示意-18\"><a href=\"#示意-18\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i1.piimg.com/1949/479256bbdfa48501.png\" alt=\"Markdown\"></p>\n<h3 id=\"边的松弛\"><a href=\"#边的松弛\" class=\"headerlink\" title=\"边的松弛\"></a>边的松弛</h3><p>放松边v-&gt;w意味着检查从s到w的最短路径是否是先从s到v，然后再由v到w。如果是，则根据这个情况更新数据结构的内容。</p>\n<h4 id=\"示意-19\"><a href=\"#示意-19\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/c4abf1f956bffcda.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-10\"><a href=\"#实现-10\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">relax</span><span class=\"params\">(DirectedEdge e)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> v = e.from();</div><div class=\"line\">\t<span class=\"keyword\">int</span> w = e.to();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (distTo[v] + e.weight() &lt; distTo[w])&#123;</div><div class=\"line\">\t\tdistTo[w] = distTo[v] + e.weight();</div><div class=\"line\">\t\tedgeTo[w] = e;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"顶点的松弛\"><a href=\"#顶点的松弛\" class=\"headerlink\" title=\"顶点的松弛\"></a>顶点的松弛</h3><p>放松从一个给定顶点指出的所有边。</p>\n<h4 id=\"示意-20\"><a href=\"#示意-20\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/0ae698d2004e7964.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-11\"><a href=\"#实现-11\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">relax</span><span class=\"params\">(EdgeWeightedDigraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (DirectedEdge e : g.adj(v))&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> w = e.to();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (distTo[v] + e.weight() &lt; distTo[w])&#123;</div><div class=\"line\">\t\t\tdistTo[w] = distTo[v] + e.weight();</div><div class=\"line\">\t\t\tedgeTo[w] = e;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"负权重的环\"><a href=\"#负权重的环\" class=\"headerlink\" title=\"负权重的环\"></a>负权重的环</h3><h4 id=\"示意-21\"><a href=\"#示意-21\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/218b65660839ba34.png\" alt=\"Markdown\"></p>\n<h4 id=\"定义-9\"><a href=\"#定义-9\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>加权有向图中的负权重环是一个总权重（环上的所有边的权重之和）为负的有向环。</p>\n<p><img src=\"http://i2.muimg.com/1949/faeb01f3f7da5e8d.png\" alt=\"Markdown\"></p>\n<p>当且仅当加权有向图中至少存在一条从s到v的有向路径且所有从s到v的有向路径上的任意顶点都不存在于任何负权重环中时，s到v的最短路径才是存在的。</p>\n","categories":["Algorithm"],"tags":["Algorithm","Data Structure"]},{"title":"Algorithm from NowCoder (5)","url":"http://yoursite.com/2017/04/09/Algorithm-from-NowCoder-5/","content":"<h2 id=\"No-1-最长公共连续子串\"><a href=\"#No-1-最长公共连续子串\" class=\"headerlink\" title=\"No. 1 最长公共连续子串\"></a>No. 1 最长公共连续子串</h2><p>牛牛有两个字符串（可能包含空格）,牛牛想找出其中最长的公共连续子串,希望你能帮助他,并输出其长度。 </p>\n<h3 id=\"输入描述\"><a href=\"#输入描述\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入为两行字符串（可能包含空格），长度均小于等于50.</p>\n<h3 id=\"输出描述\"><a href=\"#输出描述\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出为一个整数，表示最长公共连续子串的长度。</p>\n<h3 id=\"输入例子\"><a href=\"#输入例子\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>abcde<br>abgde</p>\n<h3 id=\"输出例子\"><a href=\"#输出例子\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>2</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tString s1 = sc.nextLine();</div><div class=\"line\">\t\tString s2 = sc.nextLine();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (s1.length() &gt; <span class=\"number\">50</span> || s2.length() &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[s1.length()+<span class=\"number\">1</span>][s2.length()+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s1.length(); i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; s2.length(); j++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (s1.charAt(i) == s2.charAt(j))</div><div class=\"line\">\t\t\t\t\tdp[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>] = dp[i][j] + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= s1.length(); i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= s2.length(); j++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (dp[i][j] &gt; max)</div><div class=\"line\">\t\t\t\t\tmax = dp[i][j];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(max);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-2-找整除\"><a href=\"#No-2-找整除\" class=\"headerlink\" title=\"No. 2 找整除\"></a>No. 2 找整除</h2><p>牛牛想在[a, b]区间内找到一些数满足可以被一个整数c整除,现在你需要帮助牛牛统计区间内一共有多少个这样的数满足条件？ </p>\n<h3 id=\"输入描述-1\"><a href=\"#输入描述-1\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>首先输入两个整数a,b,（-5<em>10^8 ≤ a ≤ b ≤ 5</em>10^8)<br>接着是一个正整数c（1 &lt;= c &lt;= 1000）</p>\n<h3 id=\"输出描述-1\"><a href=\"#输出描述-1\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一个整数表示个数。</p>\n<h3 id=\"输入例子-1\"><a href=\"#输入例子-1\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>0 14 5</p>\n<h3 id=\"输出例子-1\"><a href=\"#输出例子-1\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>3</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> a = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> b = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> c = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (a &lt; -<span class=\"number\">5</span> * Math.pow(<span class=\"number\">10</span>, <span class=\"number\">8</span>) || a &gt; <span class=\"number\">5</span> * Math.pow(<span class=\"number\">10</span>, <span class=\"number\">8</span>) || b &lt; -<span class=\"number\">5</span> * Math.pow(<span class=\"number\">10</span>, <span class=\"number\">8</span>) || b &gt; <span class=\"number\">5</span> * Math.pow(<span class=\"number\">10</span>, <span class=\"number\">8</span>)</div><div class=\"line\">\t\t\t\t|| c &lt; <span class=\"number\">1</span> || c &gt; <span class=\"number\">1000</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (b % c != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tb--;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println((b - a) / c + <span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-3-组装三角形\"><a href=\"#No-3-组装三角形\" class=\"headerlink\" title=\"No. 3 组装三角形\"></a>No. 3 组装三角形</h2><p>牛牛手里有N根木棒,分别编号为1~N,现在他从N根里想取出三根木棒，使得三根木棒构成一个三角形,你能计算出牛牛有多少种取法吗?(考虑两种取法中使用的木棒编号有一个不一样就认为是不同的取法)。 </p>\n<h3 id=\"输入描述-2\"><a href=\"#输入描述-2\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>首先输入一个正整数N，接下来的一行共有N个正整数表示每个木棒的长度。</p>\n<p>N ≤ 50, 木棒的长度 ≤ 10000.</p>\n<h3 id=\"输出描述-2\"><a href=\"#输出描述-2\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一个整数表示方法数。</p>\n<h3 id=\"输入例子-2\"><a href=\"#输入例子-2\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>5<br>1 2 3 4 5</p>\n<h3 id=\"输出例子-2\"><a href=\"#输出例子-2\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>3</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x &gt; <span class=\"number\">10000</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\ta[i] = x;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tArrays.sort(a);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">2</span>; i--)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">1</span> &amp;&amp; <span class=\"number\">2</span> * a[j] &gt;= a[i]; j--)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = j - <span class=\"number\">1</span>; k &gt;=<span class=\"number\">0</span>; k--)&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (a[j] + a[k] &lt;= a[i])</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">\t\t\t\t\tcount++;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(count);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-4-最小的矩形\"><a href=\"#No-4-最小的矩形\" class=\"headerlink\" title=\"No. 4 最小的矩形\"></a>No. 4 最小的矩形</h2><p>牛牛在二维坐标系中画了N个点，且都是整点。现在牛牛想画出一个矩形，使得这N个点都在矩形内或者在矩形上。<br>矩形的边均平行于坐标轴。牛牛希望矩形的面积最小。请你帮助牛牛计算下最小矩形的面积。 </p>\n<h3 id=\"输入描述-3\"><a href=\"#输入描述-3\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>首先输入一个正整数N表示点的个数（2 &lt;= N &lt;= 50）</p>\n<p>接下来N行每行两个整数x, y，表示该点的坐标。绝对值均小于等于100.</p>\n<h3 id=\"输出描述-3\"><a href=\"#输出描述-3\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>一个整数表示最小矩形的面积。</p>\n<h3 id=\"输入例子-3\"><a href=\"#输入例子-3\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>2<br>0 1<br>1 0</p>\n<h3 id=\"输出例子-3\"><a href=\"#输出例子-3\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>1</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span> || n &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] xPos = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] yPos = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> y = sc.nextInt();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Math.abs(x) &gt; <span class=\"number\">100</span> || Math.abs(y) &gt; <span class=\"number\">100</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\txPos[i] = x;</div><div class=\"line\">\t\t\tyPos[i] = y;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tArrays.sort(xPos);</div><div class=\"line\">\t\tArrays.sort(yPos);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println((xPos[n-<span class=\"number\">1</span>] - xPos[<span class=\"number\">0</span>]) * (yPos[n-<span class=\"number\">1</span>] - yPos[<span class=\"number\">0</span>]));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-5-平衡数\"><a href=\"#No-5-平衡数\" class=\"headerlink\" title=\"No. 5 平衡数\"></a>No. 5 平衡数</h2><p>牛牛在研究他自己独创的平衡数，平衡数的定义是：将一个数分成左右两部分，分别成为两个新的数。<br>左右部分必须满足以下两点：<br>1，左边和右边至少存在一位。<br>2，左边的数每一位相乘如果等于右边的数每一位相乘，则这个数称为平衡数。<br>例如：1221这个数，分成12和21的话，1<em>2=2</em>1，则称1221为平衡数，再例如：1236这个数，可以分成123和1<em>2</em>3=6，所以1236也是平衡数。而1234无论怎样分也不满足平衡数。</p>\n<h3 id=\"输入描述-4\"><a href=\"#输入描述-4\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入一个正整数（int范围内）。</p>\n<h3 id=\"输出描述-4\"><a href=\"#输出描述-4\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>如果该数是平衡数，输出 “YES”, 否则输出 “NO”。</p>\n<h3 id=\"输入例子-4\"><a href=\"#输入例子-4\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>1221<br>1234</p>\n<h3 id=\"输出例子-4\"><a href=\"#输出例子-4\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>YES<br>NO</p>\n<h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (sc.hasNext())&#123;</div><div class=\"line\">\t\t\tString n = sc.next();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (n.length() &lt; <span class=\"number\">2</span>)&#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"NO\"</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span>[] digit = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n.length()];</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n.length(); i++)</div><div class=\"line\">\t\t\t\tdigit[i] = n.charAt(i) - <span class=\"string\">'0'</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> head = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> tail = n.length() - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> left = digit[head];</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> right = digit[tail];</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (head &lt; tail - <span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ((left &lt;= right &amp;&amp; left != <span class=\"number\">0</span>) || right == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\t\thead++;</div><div class=\"line\">\t\t\t\t\tleft *= digit[head];</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((left &gt; right &amp;&amp; right != <span class=\"number\">0</span>) || left == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\t\ttail--;</div><div class=\"line\">\t\t\t\t\tright *= digit[tail];</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (left != right)</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"NO\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"YES\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-6-字符串分类\"><a href=\"#No-6-字符串分类\" class=\"headerlink\" title=\"No. 6 字符串分类\"></a>No. 6 字符串分类</h2><p>牛牛有N个字符串，他想将这些字符串分类，他认为两个字符串A和B属于同一类需要满足以下条件：<br>A中交换任意位置的两个字符，最终可以得到B，交换的次数不限。比如：abc与bca就是同一类字符串。<br>现在牛牛想知道这N个字符串可以分成几类。</p>\n<h3 id=\"输入描述-5\"><a href=\"#输入描述-5\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>首先输入一个正整数N（1 &lt;= N &lt;= 50），接下来输入N个字符串，每个字符串长度不超过50。</p>\n<h3 id=\"输出描述-5\"><a href=\"#输出描述-5\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一个整数表示分类的个数。</p>\n<h3 id=\"输入例子-5\"><a href=\"#输入例子-5\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>4<br>abcd<br>abdc<br>dabc<br>bacd</p>\n<h3 id=\"输出例子-5\"><a href=\"#输出例子-5\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>1</p>\n<h3 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSet&lt;String&gt; set = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">char</span>[] ch = sc.next().toCharArray();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tArrays.sort(ch);</div><div class=\"line\">\t\t\tset.add(String.valueOf(ch));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(set.size());</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-7-创造新世界\"><a href=\"#No-7-创造新世界\" class=\"headerlink\" title=\"No. 7 创造新世界\"></a>No. 7 创造新世界</h2><p>众所周知计算机代码底层计算都是0和1的计算，牛牛知道这点之后就想使用0和1创造一个新世界！牛牛现在手里有n个0和m个1，给出牛牛可以创造的x种物品，每种物品都由一个01串表示。牛牛想知道当前手中的0和1可以最多创造出多少种物品。</p>\n<h3 id=\"输入描述-6\"><a href=\"#输入描述-6\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入数据包括x+1行：<br>第一行包括三个整数x(2 ≤ x ≤ 20)，n(0 ≤ n ≤ 500)，m(0 ≤ m ≤ 500)，以空格分隔<br>接下来的x行，每行一个01串item[i]，表示第i个物品。每个物品的长度length(1 ≤ length ≤ 50)</p>\n<h3 id=\"输出描述-6\"><a href=\"#输出描述-6\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一个整数，表示牛牛最多能创造多少种物品</p>\n<h3 id=\"输入例子-6\"><a href=\"#输入例子-6\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>3 3 1<br>1<br>00<br>100</p>\n<h3 id=\"输出例子-6\"><a href=\"#输出例子-6\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>2</p>\n<h3 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> m = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x &lt; <span class=\"number\">2</span> || x &gt; <span class=\"number\">20</span> || n &lt; <span class=\"number\">0</span> || n &gt; <span class=\"number\">500</span> || m &lt; <span class=\"number\">0</span> || m &gt; <span class=\"number\">500</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] zero = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[x];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] one = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[x];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; x; i++)&#123;</div><div class=\"line\">\t\t\tString item = sc.next();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (item.length() &lt; <span class=\"number\">1</span> || item.length() &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; item.length(); j++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (item.charAt(j) == <span class=\"string\">'0'</span>)</div><div class=\"line\">\t\t\t\t\tzero[i]++;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t\tone[i]++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n+<span class=\"number\">1</span>][m+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; x; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> u = n; u &gt;= zero[i]; u--)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = m; v &gt;= one[i]; v--)</div><div class=\"line\">\t\t\t\t\tdp[u][v] = Math.max(dp[u][v], dp[u-zero[i]][v-one[i]]+<span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(dp[n][m]);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-8-优美的回文串\"><a href=\"#No-8-优美的回文串\" class=\"headerlink\" title=\"No. 8 优美的回文串\"></a>No. 8 优美的回文串</h2><p>牛牛在书上看到一种字符串叫做回文串,当一个字符串从左到右和从右到左读都是一样的,就称这个字符串为回文串。牛牛又从好朋友羊羊那里了解到一种被称为优美的回文串的字符串,考虑一个长度为N只包含大写字母的字符串,写出它所有长度为M的连续子串(包含所有可能的起始位置的子串,相同的子串也要计入),如果这个字符串至少有K个子串都是回文串,我们就叫这个字符串为优美的回文串。现在给出一个N,牛牛希望你能帮他计算出长度为N的字符串有多少个是优美的回文串(每个位置都可以是’A’~’Z’的一个。)</p>\n<h3 id=\"输入描述-7\"><a href=\"#输入描述-7\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入数据包括三个整数N, M, K(2 ≤ N ≤ 11, 2 ≤ M ≤ N, 0 ≤ K ≤ 11).</p>\n<h3 id=\"输出描述-7\"><a href=\"#输出描述-7\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一个整数,表示所求的字符串个数.</p>\n<h3 id=\"输入例子-7\"><a href=\"#输入例子-7\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>2 2 1</p>\n<h3 id=\"输出例子-7\"><a href=\"#输出例子-7\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>26<br>长度为2的字符串,它长度为2的子串只有它自身。长度为2的回文串有”AA”,”BB”,”CC”…”ZZ”,一共26种。</p>\n<h3 id=\"代码-7\"><a href=\"#代码-7\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> n, m, k;</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">long</span> result = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">long</span>[] count = <span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[<span class=\"number\">12</span>];</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] pattern = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">12</span>];</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tn = sc.nextInt();</div><div class=\"line\">\t\tm = sc.nextInt();</div><div class=\"line\">\t\tk = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span> || n &gt; <span class=\"number\">11</span> || m &lt; <span class=\"number\">2</span> || m &gt; n || k &lt; <span class=\"number\">0</span> || k &gt; <span class=\"number\">11</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tcount[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">\t\t\tcount[i] = count[i-<span class=\"number\">1</span>] * (<span class=\"number\">26</span> - i + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tfind(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(result);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> num)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pos == n)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (check())</div><div class=\"line\">\t\t\t\tresult += count[num];</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; num; i++)&#123;</div><div class=\"line\">\t\t\tpattern[pos] = i;</div><div class=\"line\">\t\t\tfind(pos + <span class=\"number\">1</span>, num);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tpattern[pos] = num;</div><div class=\"line\">\t\tfind(pos + <span class=\"number\">1</span>, num + <span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">check</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n - m; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">boolean</span> isPalindrome = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m / <span class=\"number\">2</span> &amp;&amp; isPalindrome == <span class=\"keyword\">true</span>; j++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (pattern[i+j] != pattern[m+i-<span class=\"number\">1</span>-j])</div><div class=\"line\">\t\t\t\t\tisPalindrome = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isPalindrome == <span class=\"keyword\">true</span>)</div><div class=\"line\">\t\t\t\tsum++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (sum &gt;= k);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm"],"tags":["OJ","Algorithm"]},{"title":"[hihoCoder] Problem 1288 - Font Size","url":"http://yoursite.com/2017/04/01/hihoCoder-Problem-1288-Font-Size/","content":"<p>Steven loves reading book on his phone. The book he reads now consists of N paragraphs and the i-th paragraph contains ai characters.</p>\n<p>Steven wants to make the characters easier to read, so he decides to increase the font size of characters. But the size of Steven’s phone screen is limited. Its width is W and height is H. As a result, if the font size of characters is S then it can only show ⌊W / S⌋ characters in a line and ⌊H / S⌋ lines in a page. (⌊x⌋ is the largest integer no more than x)  </p>\n<p>So here’s the question, if Steven wants to control the number of pages no more than P, what’s the maximum font size he can set? Note that paragraphs must start in a new line and there is no empty line between paragraphs.</p>\n<p>Time Limit:10000ms<br>Case Time Limit:1000ms<br>Memory Limit:256MB</p>\n<h2 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h2><p>Input may contain multiple test cases.</p>\n<p>The first line is an integer TASKS, representing the number of test cases.</p>\n<p>For each test case, the first line contains four integers N, P, W and H, as described above.</p>\n<p>The second line contains N integers a1, a2, … aN, indicating the number of characters in each paragraph.</p>\n<p>For all test cases,</p>\n<p>1 &lt;= N &lt;= 10^3,</p>\n<p>1 &lt;= W, H, ai &lt;= 10^3,</p>\n<p>1 &lt;= P &lt;= 10^6,</p>\n<p>There is always a way to control the number of pages no more than P.</p>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><p>For each testcase, output a line with an integer Ans, indicating the maximum font size Steven can set.</p>\n<h2 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h2><p>2<br>1 10 4 3<br>10<br>2 10 4 3<br>10 10</p>\n<h2 id=\"Sample-Output\"><a href=\"#Sample-Output\" class=\"headerlink\" title=\"Sample Output\"></a>Sample Output</h2><p>3<br>2</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> t = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; t; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> p = sc.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = sc.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> h = sc.nextInt();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">1000</span> || w &lt; <span class=\"number\">1</span> || w &gt; <span class=\"number\">1000</span> || h &lt; <span class=\"number\">1</span> || h &gt; <span class=\"number\">1000</span> || p &lt; <span class=\"number\">1</span> || p &gt; <span class=\"number\">1000000</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (x &lt; <span class=\"number\">1</span> || x &gt; <span class=\"number\">1000</span>)</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\ta[j] = x;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> result = binarySearch(w, h, p, a);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tSystem.out.println(result);</div><div class=\"line\">\t\t&#125;\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">validatePages</span><span class=\"params\">(<span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span>[] a)</span> </span>&#123;\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">double</span> charactersPerLine = w / mid;</div><div class=\"line\">\t\t<span class=\"keyword\">double</span> linesPerPage = h / mid;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> lines = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</div><div class=\"line\">\t\t\tlines += Math.ceil(a[i] / charactersPerLine);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">double</span> pages = Math.ceil(lines / linesPerPage);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> pages;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span>[] a)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> right = Math.min(w, h);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (left &lt;= right)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> mid = (left + right) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (validatePages(mid, w, h, a) &lt;= p)&#123;</div><div class=\"line\">\t\t\t\tresult = mid;</div><div class=\"line\">\t\t\t\tleft = mid + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> </div><div class=\"line\">\t\t\t\tright = mid - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm"],"tags":["OJ","Algorithm"]},{"title":"[LightOJ] Problem 1138 - Trailing Zeroes (III)","url":"http://yoursite.com/2017/04/01/LightOJ-Problem-1138-Trailing-Zeroes-III/","content":"<p>You task is to find minimal natural number N, so that N! contains exactly Q zeroes on the trail in decimal notation. As you know N! = 1<em>2</em>…*N. For example, 5! = 120, 120 contains one zero on the trail.</p>\n<p>Time Limit: 2 second(s)<br>Memory Limit: 32 MB</p>\n<h2 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h2><p>Input starts with an integer T (≤ 10000), denoting the number of test cases.</p>\n<p>Each case contains an integer Q (1 ≤ Q ≤ 10^8) in a line.</p>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><p>For each case, print the case number and N. If no solution is found then print ‘impossible’.</p>\n<h2 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h2><p>3<br>1<br>2<br>5</p>\n<h2 id=\"Output-for-Sample-Input\"><a href=\"#Output-for-Sample-Input\" class=\"headerlink\" title=\"Output for Sample Input\"></a>Output for Sample Input</h2><p>Case 1: 5<br>Case 2: 10<br>Case 3: impossible</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> t = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t &lt; <span class=\"number\">1</span> || t &gt; <span class=\"number\">10000</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= t; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x &lt; <span class=\"number\">1</span> || x &gt; Math.pow(<span class=\"number\">10</span>, <span class=\"number\">8</span>))</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> result = binarySearch(<span class=\"number\">1</span>, Long.MAX_VALUE, x);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (result != -<span class=\"number\">1</span>)</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"Case \"</span> + i + <span class=\"string\">\": \"</span> + result);</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"Case \"</span> + i + <span class=\"string\">\": impossible\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">trailingZeroes</span><span class=\"params\">(<span class=\"keyword\">long</span> n)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> n == <span class=\"number\">0</span> ? <span class=\"number\">0</span> : n / <span class=\"number\">5</span> + trailingZeroes(n / <span class=\"number\">5</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">long</span> left, <span class=\"keyword\">long</span> right, <span class=\"keyword\">long</span> key)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (left &lt;= right)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> mid = (left + right) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (trailingZeroes(mid) == key &amp;&amp; trailingZeroes(mid - <span class=\"number\">1</span>) &lt; key) </div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> mid;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (trailingZeroes(mid) &lt; key) </div><div class=\"line\">\t\t\t\tleft = mid + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> </div><div class=\"line\">\t\t\t\tright = mid - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm"],"tags":["OJ","Algorithm"]},{"title":"Algorithm from NowCoder (4)","url":"http://yoursite.com/2017/03/27/Algorithm-from-NowCoder-4/","content":"<h2 id=\"No-1-好多鱼！\"><a href=\"#No-1-好多鱼！\" class=\"headerlink\" title=\"No. 1 好多鱼！\"></a>No. 1 好多鱼！</h2><p>牛牛有一个鱼缸。鱼缸里面已经有n条鱼，每条鱼的大小为fishSize[i] (1 ≤ i ≤ n,均为正整数)，牛牛现在想把新捕捉的鱼放入鱼缸。鱼缸内存在着大鱼吃小鱼的定律。经过观察，牛牛发现一条鱼A的大小为另外一条鱼B大小的2倍到10倍(包括2倍大小和10倍大小)，鱼A会吃掉鱼B。考虑到这个，牛牛要放入的鱼就需要保证：<br>1、放进去的鱼是安全的，不会被其他鱼吃掉<br>2、这条鱼放进去也不能吃掉其他鱼<br>鱼缸里面已经存在的鱼已经相处了很久，不考虑他们互相捕食。现在知道新放入鱼的大小范围[minSize,maxSize](考虑鱼的大小都是整数表示),牛牛想知道有多少种大小的鱼可以放入这个鱼缸。</p>\n<h3 id=\"输入描述\"><a href=\"#输入描述\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入数据包括3行.<br>第一行为新放入鱼的尺寸范围minSize,maxSize(1 ≤ minSize,maxSize ≤ 1000)，以空格分隔。</p>\n<p>第二行为鱼缸里面已经有鱼的数量n(1 ≤ n ≤ 50)</p>\n<p>第三行为已经有的鱼的大小fishSize[i](1 ≤ fishSize[i] ≤ 1000)，以空格分隔。</p>\n<h3 id=\"输出描述\"><a href=\"#输出描述\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出有多少种大小的鱼可以放入这个鱼缸。考虑鱼的大小都是整数表示</p>\n<h3 id=\"输入例子\"><a href=\"#输入例子\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>1 12<br>1<br>1</p>\n<h3 id=\"输出例子\"><a href=\"#输出例子\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>3</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> minSize = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> maxSize = sc.nextInt();</div><div class=\"line\">        <span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (minSize &lt; <span class=\"number\">1</span> || minSize &gt; <span class=\"number\">1000</span> || maxSize &lt; <span class=\"number\">1</span> || maxSize &gt; <span class=\"number\">1000</span> || n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] fishSize = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x &lt; <span class=\"number\">1</span> || x &gt; <span class=\"number\">1000</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tfishSize[i] = x;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = minSize; i &lt;= maxSize; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">boolean</span> isEaten = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n &amp;&amp; isEaten == <span class=\"keyword\">false</span>; j++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ((i &lt;= fishSize[j] * <span class=\"number\">10</span> &amp;&amp; i &gt;= fishSize[j] * <span class=\"number\">2</span>) || (<span class=\"number\">10</span> * i &gt;= fishSize[j] &amp;&amp; <span class=\"number\">2</span> * i &lt;= fishSize[j]))</div><div class=\"line\">\t\t\t\t\tisEaten = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!isEaten)</div><div class=\"line\">\t\t\t\tcount++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\tSystem.out.println(count);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-2-循环单词\"><a href=\"#No-2-循环单词\" class=\"headerlink\" title=\"No. 2 循环单词\"></a>No. 2 循环单词</h2><p>如果一个单词通过循环右移获得的单词，我们称这些单词都为一种循环单词。 例如：picture 和 turepic 就是属于同一种循环单词。 现在给出n个单词，需要统计这个n个单词中有多少种循环单词。 </p>\n<h3 id=\"输入描述-1\"><a href=\"#输入描述-1\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入包括n+1行：</p>\n<p>第一行为单词个数n(1 ≤ n ≤ 50)</p>\n<p>接下来的n行，每行一个单词word[i]，长度length(1 ≤ length ≤ 50)。由小写字母构成</p>\n<h3 id=\"输出描述-1\"><a href=\"#输出描述-1\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出循环单词的种数</p>\n<h3 id=\"输入例子-1\"><a href=\"#输入例子-1\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>5<br>picture<br>turepic<br>icturep<br>word<br>ordw</p>\n<h3 id=\"输出例子-1\"><a href=\"#输出例子-1\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>2</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tString[] word = <span class=\"keyword\">new</span> String[n];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\tString str = sc.next();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (str.length() &lt; <span class=\"number\">1</span> || str.length() &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tword[i] =str;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\tString str = word[i];</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!list.contains(str))&#123;</div><div class=\"line\">\t\t\t\tlist.add(str);</div><div class=\"line\">\t\t\t\tcount++;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; str.length(); j++)&#123;</div><div class=\"line\">\t\t\t\t\tString newString = <span class=\"keyword\">new</span> String();</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\"><span class=\"comment\">//\t\t\t\t\tnewString = str.substring(j) + str.substring(0, j);</span></div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">\t\t\t\t\tnewString = str + str;</div><div class=\"line\">\t\t\t\t\tnewString = newString.substring(j, j + str.length());</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">\t\t\t\t\tlist.add(newString);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(count);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-3-DNA合成\"><a href=\"#No-3-DNA合成\" class=\"headerlink\" title=\"No. 3 DNA合成\"></a>No. 3 DNA合成</h2><p>DNA分子是以4种脱氧核苷酸为单位连接而成的长链，这4种脱氧核苷酸分别含有A,T,C,G四种碱基。碱基互补配对原则：A和T是配对的，C和G是配对的。如果两条碱基链长度是相同的并且每个位置的碱基是配对的，那么他们就可以配对合成为DNA的双螺旋结构。现在给出两条碱基链，允许在其中一条上做替换操作：把序列上的某个位置的碱基更换为另外一种碱基。问最少需要多少次让两条碱基链配对成功 </p>\n<h3 id=\"输入描述-2\"><a href=\"#输入描述-2\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入包括一行：<br>包括两个字符串,分别表示两条链,两个字符串长度相同且长度均小于等于50。</p>\n<h3 id=\"输出描述-2\"><a href=\"#输出描述-2\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一个整数，即最少需要多少次让两条碱基链配对成功</p>\n<h3 id=\"输入例子-2\"><a href=\"#输入例子-2\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>ACGT TGCA</p>\n<h3 id=\"输出例子-2\"><a href=\"#输出例子-2\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>0</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tString str1 = sc.next();</div><div class=\"line\">\t\tString str2 = sc.next();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (str1.length() != str2.length() || str1.length() &gt; <span class=\"number\">50</span> || str2.length() &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"string\">'A'</span> + <span class=\"string\">'T'</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> b = <span class=\"string\">'C'</span> + <span class=\"string\">'G'</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str1.length(); i++)&#123;</div><div class=\"line\"><span class=\"comment\">//\t\t\tif ((str1.charAt(i) == 'A' &amp;&amp; str2.charAt(i) == 'T') || (str1.charAt(i) == 'T' &amp;&amp; str2.charAt(i) == 'A') || </span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\t\t(str1.charAt(i) == 'C' &amp;&amp; str2.charAt(i) == 'G') || (str1.charAt(i) == 'G' &amp;&amp; str2.charAt(i) == 'C'))</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\tcount++;</span></div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> c = str1.charAt(i) + str2.charAt(i);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (a != c &amp;&amp; b != c)</div><div class=\"line\">\t\t\t\tcount++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(str1.length() - count);</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(count);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-4-连续整数\"><a href=\"#No-4-连续整数\" class=\"headerlink\" title=\"No. 4 连续整数\"></a>No. 4 连续整数</h2><p>牛牛的好朋友羊羊在纸上写了n+1个整数，羊羊接着抹除掉了一个整数，给牛牛猜他抹除掉的数字是什么。牛牛知道羊羊写的整数神排序之后是一串连续的正整数，牛牛现在要猜出所有可能是抹除掉的整数。例如：<br>10 7 12 8 11 那么抹除掉的整数只可能是9<br>5 6 7 8 那么抹除掉的整数可能是4也可能是9</p>\n<h3 id=\"输入描述-3\"><a href=\"#输入描述-3\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入包括2行：</p>\n<p>第一行为整数n(1 &lt;= n &lt;= 50)，即抹除一个数之后剩下的数字个数</p>\n<p>第二行为n个整数num[i] (1 &lt;= num[i] &lt;= 1000000000)</p>\n<h3 id=\"输出描述-3\"><a href=\"#输出描述-3\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>在一行中输出所有可能是抹除掉的数,从小到大输出,用空格分割,行末无空格。如果没有可能的数，则输出mistake</p>\n<h3 id=\"输入例子-3\"><a href=\"#输入例子-3\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>2<br>3 6</p>\n<h3 id=\"输出例子-3\"><a href=\"#输出例子-3\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>mistake</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\"><span class=\"comment\">//\t\tint[] num = new int[n];</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> min = <span class=\"number\">1000000001</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x &lt; <span class=\"number\">1</span> || x &gt; <span class=\"number\">1000000000</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\"><span class=\"comment\">//\t\t\tnum[i] = x;</span></div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x &lt; min)</div><div class=\"line\">\t\t\t\tmin = x;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x &gt; max)</div><div class=\"line\">\t\t\t\tmax = x;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tres ^= x;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\"><span class=\"comment\">//\t\tArrays.sort(num);</span></div><div class=\"line\"><span class=\"comment\">//\t\t</span></div><div class=\"line\"><span class=\"comment\">//\t\tfor (int i = 0; i &lt; n - 1; i++)&#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\tif (num[i] == num[i+1])&#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\tSystem.out.println(\"mistake\");</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\treturn;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t&#125;</span></div><div class=\"line\"><span class=\"comment\">//\t\t&#125;</span></div><div class=\"line\"><span class=\"comment\">//\t\t</span></div><div class=\"line\"><span class=\"comment\">//\t\tif (num[n-1] - num[0] == n)&#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\tfor (int i = 0; i &lt; n - 1; i++)&#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\tif (num[i+1] - num[i] != 1)</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\t\tSystem.out.println(num[i] + 1);</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t&#125;</span></div><div class=\"line\"><span class=\"comment\">//\t\t&#125;</span></div><div class=\"line\"><span class=\"comment\">//\t\telse if (num[n-1] - num[0] == n - 1) &#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\tif (num[0] == 1)</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\tSystem.out.println(num[n-1] + 1);</span></div><div class=\"line\"><span class=\"comment\">//\t\t\telse </span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\tSystem.out.println((num[0] - 1) + \" \" + (num[n-1] + 1));</span></div><div class=\"line\"><span class=\"comment\">//\t\t&#125;</span></div><div class=\"line\"><span class=\"comment\">//\t\telse</span></div><div class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.println(\"mistake\");</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = min; i &lt;= max; i++)</div><div class=\"line\">\t\t\tres ^= i;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (res == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (min != <span class=\"number\">1</span>)</div><div class=\"line\">\t\t\t\tSystem.out.println((min - <span class=\"number\">1</span>) + <span class=\"string\">\" \"</span> + (max + <span class=\"number\">1</span>));</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\tSystem.out.println(max + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (res &lt;= min || res &gt;= max)</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"mistake\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\tSystem.out.println(res);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-5-超级素数幂\"><a href=\"#No-5-超级素数幂\" class=\"headerlink\" title=\"No. 5 超级素数幂\"></a>No. 5 超级素数幂</h2><p>如果一个数字能表示为p^q(^表示幂运算)且p为一个素数,q为大于1的正整数就称这个数叫做超级素数幂。现在给出一个正整数n,如果n是一个超级素数幂需要找出对应的p,q。</p>\n<h3 id=\"输入描述-4\"><a href=\"#输入描述-4\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入一个正整数n(2 ≤ n ≤ 10^18)</p>\n<h3 id=\"输出描述-4\"><a href=\"#输出描述-4\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>如果n是一个超级素数幂则输出p,q,以空格分隔,行末无空格。<br>如果n不是超级素数幂，则输出No</p>\n<h3 id=\"输入例子-4\"><a href=\"#输入例子-4\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>27</p>\n<h3 id=\"输出例子-4\"><a href=\"#输出例子-4\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>3 3</p>\n<h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> n = sc.nextLong();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span> || n &gt; Math.pow(<span class=\"number\">10</span>, <span class=\"number\">18</span>))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> q = <span class=\"number\">2</span>; q &lt;= Math.log(n) / Math.log(<span class=\"number\">2</span>); q++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">double</span> p = Math.pow(n, <span class=\"number\">1</span>d / q);</div><div class=\"line\">\t\t\t<span class=\"keyword\">boolean</span> isPrime = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= Math.sqrt(p) &amp;&amp; isPrime == <span class=\"keyword\">true</span>; i++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (p % i == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\t\tisPrime = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> ((<span class=\"keyword\">long</span>) p == p &amp;&amp; isPrime == <span class=\"keyword\">true</span>)&#123;</div><div class=\"line\">\t\t\t\tSystem.out.println((<span class=\"keyword\">long</span>) p + <span class=\"string\">\" \"</span> + q);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"No\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-6-序列和\"><a href=\"#No-6-序列和\" class=\"headerlink\" title=\"No. 6 序列和\"></a>No. 6 序列和</h2><p>给出一个正整数N和长度L，找出一段长度大于等于L的连续非负整数，他们的和恰好为N。答案可能有多个，我我们需要找出长度最小的那个。<br>例如 N = 18 L = 2：<br>5 + 6 + 7 = 18<br>3 + 4 + 5 + 6 = 18<br>都是满足要求的，但是我们输出更短的 5 6 7</p>\n<h3 id=\"输入描述-5\"><a href=\"#输入描述-5\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入数据包括一行：<br>两个正整数N(1 ≤ N ≤ 1000000000),L(2 ≤ L ≤ 100)</p>\n<h3 id=\"输出描述-5\"><a href=\"#输出描述-5\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>从小到大输出这段连续非负整数，以空格分隔，行末无空格。如果没有这样的序列或者找出的序列长度大于100，则输出No</p>\n<h3 id=\"输入例子-5\"><a href=\"#输入例子-5\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>18 2</p>\n<h3 id=\"输出例子-5\"><a href=\"#输出例子-5\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>5 6 7</p>\n<h3 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> l = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">1000000000</span> || l &lt; <span class=\"number\">2</span> || l &gt; <span class=\"number\">100</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = l; i &lt;= <span class=\"number\">100</span>; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> ((<span class=\"number\">2</span> * n - i * i + i) % (<span class=\"number\">2</span> * i) == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> a = (<span class=\"number\">2</span> * n - i * i + i) / (<span class=\"number\">2</span> * i);</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i - <span class=\"number\">1</span>; j++)</div><div class=\"line\">\t\t\t\t\tSystem.out.print(a + j + <span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\tSystem.out.print(a + i - <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"No\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-7-页码统计\"><a href=\"#No-7-页码统计\" class=\"headerlink\" title=\"No. 7 页码统计\"></a>No. 7 页码统计</h2><p>牛牛新买了一本算法书，算法书一共有n页，页码从1到n。牛牛于是想了一个算法题目：在这本算法书页码中0~9每个数字分别出现了多少次？</p>\n<h3 id=\"输入描述-6\"><a href=\"#输入描述-6\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入包括一个整数n(1 ≤ n ≤ 1,000,000,000)</p>\n<h3 id=\"输出描述-6\"><a href=\"#输出描述-6\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出包括一行10个整数，即0~9这些数字在页码中出现的次数，以空格分隔。行末无空格。</p>\n<h3 id=\"输入例子-6\"><a href=\"#输入例子-6\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>999</p>\n<h3 id=\"输出例子-6\"><a href=\"#输出例子-6\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>189 300 300 300 300 300 300 300 300 300</p>\n<h3 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">1000000000</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)&#123;</div><div class=\"line\">\t\t\tresult = count(n, i);</div><div class=\"line\">\t\t\tSystem.out.print(result + <span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tresult = count(n, <span class=\"number\">9</span>);</div><div class=\"line\">\t\tSystem.out.print(result);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> x)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> currentN = n;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (currentN &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> current = currentN % <span class=\"number\">10</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> high = currentN / <span class=\"number\">10</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> low = n - currentN * index;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (high != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\t\thigh--;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tsum += high * index;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (current &gt; x)</div><div class=\"line\">\t\t\t\tsum += index;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == x)</div><div class=\"line\">\t\t\t\tsum += low + <span class=\"number\">1</span>;\t</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tindex *= <span class=\"number\">10</span>;</div><div class=\"line\">\t\t\tcurrentN /= <span class=\"number\">10</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-8-01翻转\"><a href=\"#No-8-01翻转\" class=\"headerlink\" title=\"No. 8 01翻转\"></a>No. 8 01翻转</h2><p>牛牛正在挑战一款名为01翻转的游戏。游戏初始有A个0,B个1，牛牛的目标就是把所有的值都变为1，每次操作牛牛可以任意选择恰好K个数字，并将这K个数字的值进行翻转(0变为1，1变为0)。牛牛如果使用最少的操作次数完成这个游戏就可以获得奖品，牛牛想知道最少的操作次数是多少？<br>例如:A = 4 B = 0 K = 3<br>0000 -&gt; 1110 -&gt; 1001 -&gt; 0100 -&gt; 1111<br>需要的最少操作次数为4 </p>\n<h3 id=\"输入描述-7\"><a href=\"#输入描述-7\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入为一行：<br>一共三个整数A(0 ≤ A ≤ 100,000),B(0 ≤ B ≤ 100,000),K(1 ≤ K ≤100,000).以空格分隔</p>\n<h3 id=\"输出描述-7\"><a href=\"#输出描述-7\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一个整数，表示最少需要的操作次数。如果不能完成，则输出-1</p>\n<h3 id=\"输入例子-7\"><a href=\"#输入例子-7\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>4 0 3</p>\n<h3 id=\"输出例子-7\"><a href=\"#输出例子-7\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>4</p>\n<h3 id=\"代码-7\"><a href=\"#代码-7\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> a = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> b = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> k = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (a &lt; <span class=\"number\">0</span> || a &gt; <span class=\"number\">100000</span> || b &lt; <span class=\"number\">0</span> || b &gt; <span class=\"number\">100000</span> || k &lt; <span class=\"number\">1</span> || k &gt; <span class=\"number\">100000</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> n = <span class=\"number\">0</span>; n &lt; <span class=\"number\">200000</span>; n++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> x = n * k - a;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span> || x % <span class=\"number\">2</span> != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x / <span class=\"number\">2</span> &lt;= a * ((n - <span class=\"number\">1</span>) / <span class=\"number\">2</span>) + b * (n / <span class=\"number\">2</span>) || a == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(n);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(-<span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm"],"tags":["OJ","Algorithm"]},{"title":"Algorithm from NowCoder (3)","url":"http://yoursite.com/2017/03/25/Algorithm-from-NowCoder-3/","content":"<h2 id=\"No-1-构造回文\"><a href=\"#No-1-构造回文\" class=\"headerlink\" title=\"No. 1 构造回文\"></a>No. 1 构造回文</h2><p>给定一个字符串s，你可以从中删除一些字符，使得剩下的串是一个回文串。如何删除才能使得回文串最长呢？<br>输出需要删除的字符个数。</p>\n<h3 id=\"输入描述\"><a href=\"#输入描述\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入数据有多组，每组包含一个字符串s，且保证:1&lt;=s.length&lt;=1000.</p>\n<h3 id=\"输出描述\"><a href=\"#输出描述\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>对于每组数据，输出一个整数，代表最少需要删除的字符个数。</p>\n<h3 id=\"输入例子\"><a href=\"#输入例子\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>abcda<br>google</p>\n<h3 id=\"输出例子\"><a href=\"#输出例子\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>2<br>2</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (sc.hasNextLine()) &#123;</div><div class=\"line\">\t\t\tString str = sc.nextLine();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (str.length() &lt; <span class=\"number\">1</span> || str.length() &gt; <span class=\"number\">1000</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[str.length()+<span class=\"number\">1</span>][str.length()+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= str.length(); i++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= str.length(); j++)&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (str.charAt(i-<span class=\"number\">1</span>) == str.charAt(str.length()-j))</div><div class=\"line\">\t\t\t\t\t\tdp[i][j] = dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t\t\tdp[i][j] = Math.max(dp[i-<span class=\"number\">1</span>][j], dp[i][j-<span class=\"number\">1</span>]);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\tSystem.out.println(str.length() - dp[str.length()][str.length()]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-2-算法基础-字符移位\"><a href=\"#No-2-算法基础-字符移位\" class=\"headerlink\" title=\"No. 2 算法基础-字符移位\"></a>No. 2 算法基础-字符移位</h2><p>小Q最近遇到了一个难题：把一个字符串的大写字母放到字符串的后面，各个字符的相对位置不变，且不能申请额外的空间。<br>你能帮帮小Q吗？</p>\n<h3 id=\"输入描述-1\"><a href=\"#输入描述-1\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入数据有多组，每组包含一个字符串s，且保证:1&lt;=s.length&lt;=1000.</p>\n<h3 id=\"输出描述-1\"><a href=\"#输出描述-1\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>对于每组数据，输出移位后的字符串。</p>\n<h3 id=\"输入例子-1\"><a href=\"#输入例子-1\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>AkleBiCeilD</p>\n<h3 id=\"输出例子-1\"><a href=\"#输出例子-1\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>kleieilABCD</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (sc.hasNextLine()) &#123;</div><div class=\"line\">\t\t\tString str = sc.nextLine();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (str.length() &lt; <span class=\"number\">1</span> || str.length() &gt; <span class=\"number\">1000</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">char</span>[] ch = str.toCharArray();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = ch.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (ch[i] &gt;= <span class=\"string\">'A'</span> &amp;&amp; ch[i] &lt;= <span class=\"string\">'Z'</span>)&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt;= ch.length - <span class=\"number\">2</span>; j++)&#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (!Character.isUpperCase(ch[j+<span class=\"number\">1</span>]))&#123;\t</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">char</span> temp = ch[j+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t\t\t\t\tch[j+<span class=\"number\">1</span>] = ch[j];</div><div class=\"line\">\t\t\t\t\t\t\tch[j] = temp;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tSystem.out.println(String.valueOf(ch));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-3-有趣的数字\"><a href=\"#No-3-有趣的数字\" class=\"headerlink\" title=\"No. 3 有趣的数字\"></a>No. 3 有趣的数字</h2><p>小Q今天在上厕所时想到了这个问题：有n个数，两两组成二元组，差最小的有多少对呢？差最大呢？</p>\n<h3 id=\"输入描述-2\"><a href=\"#输入描述-2\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入包含多组测试数据。</p>\n<p>对于每组测试数据：</p>\n<p>N - 本组测试数据有n个数</p>\n<p>a1,a2…an - 需要计算的数据</p>\n<p>保证:</p>\n<p>1&lt;=N&lt;=100000,0&lt;=ai&lt;=INT_MAX.</p>\n<h3 id=\"输出描述-2\"><a href=\"#输出描述-2\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>对于每组数据，输出两个数，第一个数表示差最小的对数，第二个数表示差最大的对数。</p>\n<h3 id=\"输入例子-2\"><a href=\"#输入例子-2\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>6<br>45 12 45 32 5 6</p>\n<h3 id=\"输出例子-2\"><a href=\"#输出例子-2\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>1 2</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (sc.hasNext()) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">100000</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span> || x &gt; Integer.MAX_VALUE)</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\ta[i] = x;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tArrays.sort(a);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (a[<span class=\"number\">0</span>] == a[n-<span class=\"number\">1</span>])&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> x = n * (n - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t\tSystem.out.println(x + <span class=\"string\">\" \"</span> + x);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tMap&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;Integer, Integer&gt;();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (map.containsKey(a[i]))</div><div class=\"line\">\t\t\t\t\tmap.put(a[i], map.get(a[i]) + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t\tmap.put(a[i], <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> maxCount = map.get(a[<span class=\"number\">0</span>]) * map.get(a[n-<span class=\"number\">1</span>]);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> minCount = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (map.size() == n)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> min = a[<span class=\"number\">1</span>] - a[<span class=\"number\">0</span>];</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> x = a[i] - a[i-<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (x &lt; min)&#123;</div><div class=\"line\">\t\t\t\t\t\tmin = x;</div><div class=\"line\">\t\t\t\t\t\tminCount = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x == min)</div><div class=\"line\">\t\t\t\t\t\tminCount++;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (Integer key : map.keySet())&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> x = map.get(key);</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (x &gt; <span class=\"number\">1</span>)</div><div class=\"line\">\t\t\t\t\t\tminCount += x * (x - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tSystem.out.println(minCount + <span class=\"string\">\" \"</span> + maxCount);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm"],"tags":["OJ","Algorithm"]},{"title":"Algorithm from NowCoder (2)","url":"http://yoursite.com/2017/03/24/Algorithm-from-NowCoder-2/","content":"<h2 id=\"No-1-回文序列\"><a href=\"#No-1-回文序列\" class=\"headerlink\" title=\"No. 1 回文序列\"></a>No. 1 回文序列</h2><p>如果一个数字序列逆置之后跟原序列是一样的就称这样的数字序列为回文序列。例如：<br>{1, 2, 1}, {15, 78, 78, 15} , {112} 是回文序列,<br>{1, 2, 2}, {15, 78, 87, 51} ,{112, 2, 11} 不是回文序列。<br>现在给出一个数字序列，允许使用一种转换操作：<br>选择任意两个相邻的数，然后从序列移除这两个数，并用这两个数字的和插入到这两个数之前的位置(只插入一个和)。<br>现在对于所给序列要求出最少需要多少次操作可以将其变成回文序列。</p>\n<h3 id=\"输入描述\"><a href=\"#输入描述\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入为两行，第一行为序列长度n (1 ≤ n ≤ 50)<br>第二行为序列中的n个整数item[i]  (1 ≤ item[i] ≤ 10000)，以空格分隔。</p>\n<h3 id=\"输出描述\"><a href=\"#输出描述\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一个数，表示最少需要的转换次数</p>\n<h3 id=\"输入例子\"><a href=\"#输入例子\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>4<br>1 1 1 3</p>\n<h3 id=\"输出例子\"><a href=\"#输出例子\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>2</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] item = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x &lt; <span class=\"number\">1</span> || x &gt; <span class=\"number\">10000</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\titem[i] = x;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> head = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> tail = n - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\"><span class=\"comment\">//\t\twhile (head &lt; tail)&#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\tif (item[head] &lt; item[tail])&#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\thead++;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\titem[head] = item[head-1] + item[head];</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\tcount++;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t&#125;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\telse if (item[head] &gt; item[tail])&#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\ttail--;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\titem[tail] = item[tail] + item[tail+1];</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\tcount++;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t&#125;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\telse &#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\thead++;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\ttail--;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t&#125;</span></div><div class=\"line\"><span class=\"comment\">//\t\t&#125;</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\tcount = countOperations(head, tail, item);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(count);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">countOperations</span><span class=\"params\">(<span class=\"keyword\">int</span> head, <span class=\"keyword\">int</span> tail, <span class=\"keyword\">int</span>[] item)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (head &lt; tail &amp;&amp; item[head] != item[tail])&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (item[head] &lt; item[tail])&#123;</div><div class=\"line\">\t\t\t\thead++;</div><div class=\"line\">\t\t\t\titem[head] = item[head-<span class=\"number\">1</span>] + item[head];</div><div class=\"line\">\t\t\t\tcount++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\ttail--;</div><div class=\"line\">\t\t\t\titem[tail] = item[tail] + item[tail+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t\tcount++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (head &gt;= tail)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> count;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> </div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> count += countOperations(head+<span class=\"number\">1</span>, tail-<span class=\"number\">1</span>, item);\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-2-优雅的点\"><a href=\"#No-2-优雅的点\" class=\"headerlink\" title=\"No. 2 优雅的点\"></a>No. 2 优雅的点</h2><p>小易有一个圆心在坐标原点的圆，小易知道圆的半径的平方。小易认为在圆上的点而且横纵坐标都是整数的点是优雅的，小易现在想寻找一个算法计算出优雅的点的个数，请你来帮帮他。<br>例如：半径的平方如果为25<br>优雅的点就有：(+/-3, +/-4), (+/-4, +/-3), (0, +/-5) (+/-5, 0)，一共12个点。 </p>\n<h3 id=\"输入描述-1\"><a href=\"#输入描述-1\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入为一个整数，即为圆半径的平方,范围在32位int范围内。</p>\n<h3 id=\"输出描述-1\"><a href=\"#输出描述-1\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出为一个整数，即为优雅的点的个数</p>\n<h3 id=\"输入例子-1\"><a href=\"#输入例子-1\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>25</p>\n<h3 id=\"输出例子-1\"><a href=\"#输出例子-1\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>12</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> radius = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> a = (<span class=\"keyword\">int</span>) Math.sqrt(radius);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = -a; i &lt;= a; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">double</span> b = Math.sqrt(radius - i * i);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Math.round(b) == b)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\t\tcount++;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t\tcount += <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(count);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-3-跳石板\"><a href=\"#No-3-跳石板\" class=\"headerlink\" title=\"No. 3 跳石板\"></a>No. 3 跳石板</h2><p>小易来到了一条石板路前，每块石板上从1挨着编号为：1、2、3…….<br>这条石板路要根据特殊的规则才能前进：对于小易当前所在的编号为K的 石板，小易单次只能往前跳K的一个约数(不含1和K)步，即跳到K+X(X为K的一个非1和本身的约数)的位置。 小易当前处在编号为N的石板，他想跳到编号恰好为M的石板去，小易想知道最少需要跳跃几次可以到达。<br>例如：<br>N = 4，M = 24：<br>4-&gt;6-&gt;8-&gt;12-&gt;18-&gt;24<br>于是小易最少需要跳跃5次，就可以从4号石板跳到24号石板 </p>\n<h3 id=\"输入描述-2\"><a href=\"#输入描述-2\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入为一行，有两个整数N，M，以空格隔开。<br>(4 ≤ N ≤ 100000)<br>(N ≤ M ≤ 100000)</p>\n<h3 id=\"输出描述-2\"><a href=\"#输出描述-2\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出小易最少需要跳跃的步数,如果不能到达输出-1</p>\n<h3 id=\"输入例子-2\"><a href=\"#输入例子-2\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>4 24</p>\n<h3 id=\"输出例子-2\"><a href=\"#输出例子-2\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>5</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> m = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">4</span> || n &gt; <span class=\"number\">100000</span> || m &lt; n || m &gt; <span class=\"number\">100000</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[m+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= m; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i == n)</div><div class=\"line\">\t\t\t\tdp[i] = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\tdp[i] = Integer.MAX_VALUE;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n; i &lt;= m; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (dp[i] == Integer.MAX_VALUE)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tArrayList&lt;Integer&gt; divisor = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div><div class=\"line\">\t\t\tgetDivisor(divisor, i);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; divisor.size(); j++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (i + divisor.get(j) &lt;= m)</div><div class=\"line\">\t\t\t\t\tdp[i + divisor.get(j)] = Math.min(dp[i] + <span class=\"number\">1</span>, dp[i + divisor.get(j)]);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (dp[m] == Integer.MAX_VALUE)</div><div class=\"line\">\t\t\tSystem.out.println(-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\tSystem.out.println(dp[m]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">getDivisor</span><span class=\"params\">(ArrayList&lt;Integer&gt; divisor, <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= Math.sqrt(n); i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (n % i == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\tdivisor.add(i);</div><div class=\"line\">\t\t\t\tdivisor.add(n / i);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-4-暗黑的字符串\"><a href=\"#No-4-暗黑的字符串\" class=\"headerlink\" title=\"No. 4 暗黑的字符串\"></a>No. 4 暗黑的字符串</h2><p>一个只包含’A’、’B’和’C’的字符串，如果存在某一段长度为3的连续子串中恰好’A’、’B’和’C’各有一个，那么这个字符串就是纯净的，否则这个字符串就是暗黑的。例如：<br>BAACAACCBAAA 连续子串”CBA”中包含了’A’,’B’,’C’各一个，所以是纯净的字符串<br>AABBCCAABB 不存在一个长度为3的连续子串包含’A’,’B’,’C’,所以是暗黑的字符串<br>你的任务就是计算出长度为n的字符串(只包含’A’、’B’和’C’)，有多少个是暗黑的字符串。 </p>\n<h3 id=\"输入描述-3\"><a href=\"#输入描述-3\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入一个整数n，表示字符串长度(1 ≤ n ≤ 30)</p>\n<h3 id=\"输出描述-3\"><a href=\"#输出描述-3\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一个整数表示有多少个暗黑字符串</p>\n<h3 id=\"输入例子-3\"><a href=\"#输入例子-3\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>2<br>3</p>\n<h3 id=\"输出例子-3\"><a href=\"#输出例子-3\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>9<br>21</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (sc.hasNext())&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">30</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span>[] count = <span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[n];</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tcount[<span class=\"number\">0</span>] = <span class=\"number\">3</span>;</div><div class=\"line\">\t\t\tcount[<span class=\"number\">1</span>] = <span class=\"number\">9</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; n; i++)</div><div class=\"line\">\t\t\t\tcount[i] = <span class=\"number\">2</span> * count[i-<span class=\"number\">1</span>] + count[i-<span class=\"number\">2</span>];</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tSystem.out.println(count[n-<span class=\"number\">1</span>]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-5-数字翻转\"><a href=\"#No-5-数字翻转\" class=\"headerlink\" title=\"No. 5 数字翻转\"></a>No. 5 数字翻转</h2><p>对于一个整数X，定义操作rev(X)为将X按数位翻转过来，并且去除掉前导0。例如:<br>如果 X = 123，则rev(X) = 321;<br>如果 X = 100，则rev(X) = 1.<br>现在给出整数x和y,要求rev(rev(x) + rev(y))为多少？ </p>\n<h3 id=\"输入描述-4\"><a href=\"#输入描述-4\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入为一行，x、y(1 ≤ x、y ≤ 1000)，以空格隔开。</p>\n<h3 id=\"输出描述-4\"><a href=\"#输出描述-4\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出rev(rev(x) + rev(y))的值</p>\n<h3 id=\"输入例子-4\"><a href=\"#输入例子-4\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>123 100</p>\n<h3 id=\"输出例子-4\"><a href=\"#输出例子-4\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>223</p>\n<h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> y = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x &lt; <span class=\"number\">1</span> || y &lt; <span class=\"number\">1</span> || x &gt; <span class=\"number\">1000</span> || y &gt; <span class=\"number\">1000</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(reverse(reverse(x) + reverse(y)));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (a != <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\tresult = result * <span class=\"number\">10</span> + a % <span class=\"number\">10</span>;</div><div class=\"line\">\t\t\ta = a / <span class=\"number\">10</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-6-最大的奇约数\"><a href=\"#No-6-最大的奇约数\" class=\"headerlink\" title=\"No. 6 最大的奇约数\"></a>No. 6 最大的奇约数</h2><p>小易是一个数论爱好者，并且对于一个数的奇数约数十分感兴趣。一天小易遇到这样一个问题： 定义函数f(x)为x最大的奇数约数，x为正整数。 例如:f(44) = 11.<br>现在给出一个N，需要求出 f(1) + f(2) + f(3)…….f(N)<br>例如： N = 7<br>f(1) + f(2) + f(3) + f(4) + f(5) + f(6) + f(7) = 1 + 1 + 3 + 1 + 5 + 3 + 7 = 21<br>小易计算这个问题遇到了困难，需要你来设计一个算法帮助他。 </p>\n<h3 id=\"输入描述-5\"><a href=\"#输入描述-5\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入一个整数N (1 ≤ N ≤ 1000000000)</p>\n<h3 id=\"输出描述-5\"><a href=\"#输出描述-5\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一个整数，即为f(1) + f(2) + f(3)…….f(N)</p>\n<h3 id=\"输入例子-5\"><a href=\"#输入例子-5\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>7</p>\n<h3 id=\"输出例子-5\"><a href=\"#输出例子-5\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>21</p>\n<h3 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> n = sc.nextLong();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">1000000000</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> i = n; i &gt; <span class=\"number\">0</span>; i /= <span class=\"number\">2</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> temp = (i + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\tsum += temp * temp;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(sum);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-7-买苹果\"><a href=\"#No-7-买苹果\" class=\"headerlink\" title=\"No. 7 买苹果\"></a>No. 7 买苹果</h2><p>小易去附近的商店买苹果，奸诈的商贩使用了捆绑交易，只提供6个每袋和8个每袋的包装(包装不可拆分)。 可是小易现在只想购买恰好n个苹果，小易想购买尽量少的袋数方便携带。如果不能购买恰好n个苹果，小易将不会购买。 </p>\n<h3 id=\"输入描述-6\"><a href=\"#输入描述-6\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入一个整数n，表示小易想购买n(1 ≤ n ≤ 100)个苹果</p>\n<h3 id=\"输出描述-6\"><a href=\"#输出描述-6\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一个整数表示最少需要购买的袋数，如果不能买恰好n个苹果则输出-1</p>\n<h3 id=\"输入例子-6\"><a href=\"#输入例子-6\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>20</p>\n<h3 id=\"输出例子-6\"><a href=\"#输出例子-6\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>3</p>\n<h3 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">100</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\"><span class=\"comment\">//\t\tpackages(n);</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">8</span> || i == <span class=\"number\">6</span>)</div><div class=\"line\">\t\t\t\tdp[i] = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\tdp[i] = Integer.MAX_VALUE;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">6</span>; i &lt;= n; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (dp[i] == Integer.MAX_VALUE)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i + <span class=\"number\">6</span> &lt;= n)</div><div class=\"line\">\t\t\t\tdp[i+<span class=\"number\">6</span>] = Math.min(dp[i] + <span class=\"number\">1</span>, dp[i+<span class=\"number\">6</span>]);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i + <span class=\"number\">8</span> &lt;= n)</div><div class=\"line\">\t\t\t\tdp[i+<span class=\"number\">8</span>] = Math.min(dp[i] + <span class=\"number\">1</span>, dp[i+<span class=\"number\">8</span>]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (dp[n] == Integer.MAX_VALUE)</div><div class=\"line\">\t\t\tSystem.out.println(-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\tSystem.out.println(dp[n]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">packages</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n % <span class=\"number\">2</span> != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tSystem.out.println(-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n % <span class=\"number\">8</span> == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tSystem.out.println(n / <span class=\"number\">8</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n % <span class=\"number\">8</span> != <span class=\"number\">0</span>)&#123;</div><div class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.println(n / 8 + 1);</span></div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> count = n / <span class=\"number\">8</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> remain = n % <span class=\"number\">8</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (count &gt;= <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (remain % <span class=\"number\">6</span> == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(count + remain / <span class=\"number\">6</span>);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tcount -= remain % <span class=\"number\">3</span>;</div><div class=\"line\">\t\t\t\t\tremain += (remain % <span class=\"number\">3</span>) * <span class=\"number\">8</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-8-计算糖果\"><a href=\"#No-8-计算糖果\" class=\"headerlink\" title=\"No. 8 计算糖果\"></a>No. 8 计算糖果</h2><p>A,B,C三个人是好朋友,每个人手里都有一些糖果,我们不知道他们每个人手上具体有多少个糖果,但是我们知道以下的信息：<br>A - B, B - C, A + B, B + C. 这四个数值.每个字母代表每个人所拥有的糖果数.<br>现在需要通过这四个数值计算出每个人手里有多少个糖果,即A,B,C。这里保证最多只有一组整数A,B,C满足所有题设条件。</p>\n<h3 id=\"输入描述-7\"><a href=\"#输入描述-7\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入为一行，一共4个整数，分别为A - B，B - C，A + B，B + C，用空格隔开。<br>范围均在-30到30之间(闭区间)。</p>\n<h3 id=\"输出描述-7\"><a href=\"#输出描述-7\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出为一行，如果存在满足的整数A，B，C则按顺序输出A，B，C，用空格隔开，行末无空格。<br>如果不存在这样的整数A，B，C，则输出No</p>\n<h3 id=\"输入例子-7\"><a href=\"#输入例子-7\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>1 -2 3 4</p>\n<h3 id=\"输出例子-7\"><a href=\"#输出例子-7\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>2 1 3</p>\n<h3 id=\"代码-7\"><a href=\"#代码-7\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> j = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> m = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (i &lt; -<span class=\"number\">30</span> || i &gt; <span class=\"number\">30</span> || j &lt; -<span class=\"number\">30</span> || j &gt; <span class=\"number\">30</span> || m &lt; -<span class=\"number\">30</span> || m &gt; <span class=\"number\">30</span> || n &lt; -<span class=\"number\">30</span> || n &gt; <span class=\"number\">30</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((i + m) % <span class=\"number\">2</span> != <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"No\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> a = (i + m) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> b = m - a;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> c = b - j;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (b + c == n)</div><div class=\"line\">\t\t\tSystem.out.println(a + <span class=\"string\">\" \"</span> + b + <span class=\"string\">\" \"</span> + c);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"No\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm"],"tags":["OJ","Algorithm"]},{"title":"Algorithm from NowCoder (1)","url":"http://yoursite.com/2017/03/23/Algorithm-from-NowCoder-1/","content":"<h2 id=\"No-1-合唱团\"><a href=\"#No-1-合唱团\" class=\"headerlink\" title=\"No. 1 合唱团\"></a>No. 1 合唱团</h2><p>有 n 个学生站成一排，每个学生有一个能力值，牛牛想从这 n 个学生中按照顺序选取 k 名学生，要求相邻两个学生的位置编号的差不超过 d，使得这 k 个学生的能力值的乘积最大，你能返回最大的乘积吗？ </p>\n<h3 id=\"输入描述\"><a href=\"#输入描述\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>每个输入包含 1 个测试用例。每个测试数据的第一行包含一个整数 n (1 &lt;= n &lt;= 50)，表示学生的个数，接下来的一行，包含 n 个整数，按顺序表示每个学生的能力值 ai（-50 &lt;= ai &lt;= 50）。接下来的一行包含两个整数，k 和 d (1 &lt;= k &lt;= 10, 1 &lt;= d &lt;= 50)。</p>\n<h3 id=\"输出描述\"><a href=\"#输出描述\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一行表示最大的乘积。</p>\n<h3 id=\"输入例子\"><a href=\"#输入例子\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>3<br>7 4 7<br>2 50</p>\n<h3 id=\"输出例子\"><a href=\"#输出例子\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>49</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x &lt; -<span class=\"number\">50</span> || x &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\ta[i] = x;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> k = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> d = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (k &lt; <span class=\"number\">1</span> || k &gt; <span class=\"number\">10</span> || d &lt; <span class=\"number\">1</span> || d &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> dpMax[][] = <span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[k+<span class=\"number\">1</span>][n+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> dpMin[][] = <span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[k+<span class=\"number\">1</span>][n+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> result = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</div><div class=\"line\">\t\t\tdpMax[<span class=\"number\">1</span>][i] = a[i-<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\tdpMin[<span class=\"number\">1</span>][i] = a[i-<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> m = <span class=\"number\">2</span>; m &lt;= k; m++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i - <span class=\"number\">1</span>; j &gt;= i - d &amp;&amp; j &gt;<span class=\"number\">0</span>; j--)&#123;</div><div class=\"line\">\t\t\t\t\tdpMax[m][i] = Math.max(dpMax[m][i], Math.max(dpMax[m-<span class=\"number\">1</span>][j] * a[i-<span class=\"number\">1</span>], dpMin[m-<span class=\"number\">1</span>][j] * a[i-<span class=\"number\">1</span>]));</div><div class=\"line\">\t\t\t\t\tdpMin[m][i] = Math.min(dpMin[m][i], Math.min(dpMax[m-<span class=\"number\">1</span>][j] * a[i-<span class=\"number\">1</span>], dpMin[m-<span class=\"number\">1</span>][j] * a[i-<span class=\"number\">1</span>]));</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tresult = Math.max(result, dpMax[k][i]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(result);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-2-地牢逃脱\"><a href=\"#No-2-地牢逃脱\" class=\"headerlink\" title=\"No. 2 地牢逃脱\"></a>No. 2 地牢逃脱</h2><p>给定一个 n 行 m 列的地牢，其中 ‘.’ 表示可以通行的位置，’X’ 表示不可通行的障碍，牛牛从 (x0 , y0 ) 位置出发，遍历这个地牢，和一般的游戏所不同的是，他每一步只能按照一些指定的步长遍历地牢，要求每一步都不可以超过地牢的边界，也不能到达障碍上。地牢的出口可能在任意某个可以通行的位置上。牛牛想知道最坏情况下，他需要多少步才可以离开这个地牢。 </p>\n<h3 id=\"输入描述-1\"><a href=\"#输入描述-1\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>每个输入包含 1 个测试用例。每个测试用例的第一行包含两个整数 n 和 m（1 &lt;= n, m &lt;= 50），表示地牢的长和宽。接下来的 n 行，每行 m 个字符，描述地牢，地牢将至少包含两个 ‘.’。接下来的一行，包含两个整数 x0, y0，表示牛牛的出发位置（0 &lt;= x0 &lt; n, 0 &lt;= y0 &lt; m，左上角的坐标为 （0, 0），出发位置一定是 ‘.’）。之后的一行包含一个整数 k（0 &lt; k &lt;= 50）表示牛牛合法的步长数，接下来的 k 行，每行两个整数 dx, dy 表示每次可选择移动的行和列步长（-50 &lt;= dx, dy &lt;= 50）</p>\n<h3 id=\"输出描述-1\"><a href=\"#输出描述-1\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一行一个数字表示最坏情况下需要多少次移动可以离开地牢，如果永远无法离开，输出 -1。以下测试用例中，牛牛可以上下左右移动，在所有可通行的位置.上，地牢出口如果被设置在右下角，牛牛想离开需要移动的次数最多，为3次。</p>\n<h3 id=\"输入例子-1\"><a href=\"#输入例子-1\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>3 3<br>…<br>…<br>…<br>0 1<br>4<br>1 0<br>0 1<br>-1 0<br>0 -1</p>\n<h3 id=\"输出例子-1\"><a href=\"#输出例子-1\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>3</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Queue;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> m = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">50</span> || m &lt; <span class=\"number\">1</span> || m &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">char</span>[][] board = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[n][m];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[][] count = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n][m];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t\t\tboard[i] = sc.next().toCharArray();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> x0 = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> y0 = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> k = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x0 &lt; <span class=\"number\">0</span> || x0 &gt;= n || y0 &lt; <span class=\"number\">0</span> || y0 &gt;= m || k &lt;= <span class=\"number\">0</span> || k &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tList&lt;<span class=\"keyword\">int</span>[]&gt; steps = <span class=\"keyword\">new</span> LinkedList&lt;<span class=\"keyword\">int</span>[]&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> y = sc.nextInt();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x &lt; -<span class=\"number\">50</span> || x &gt; <span class=\"number\">50</span> || y &lt; -<span class=\"number\">50</span> || y &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\tsteps.add(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;x, y&#125;);</div><div class=\"line\">\t\t&#125;\t</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tBFS(count, board, steps, <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;x0, y0&#125;);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (count[i][j] == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (count[i][j] != -<span class=\"number\">1</span>)</div><div class=\"line\">\t\t\t\t\tmax = Math.max(count[i][j], max);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(max - <span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">BFS</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] count, <span class=\"keyword\">char</span>[][] board, List&lt;<span class=\"keyword\">int</span>[]&gt; steps, <span class=\"keyword\">int</span>[] start)</span></span>&#123;</div><div class=\"line\">\t\tQueue&lt;<span class=\"keyword\">int</span>[]&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;<span class=\"keyword\">int</span>[]&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tcount[start[<span class=\"number\">0</span>]][start[<span class=\"number\">1</span>]] = <span class=\"number\">1</span>;</div><div class=\"line\">\t\tqueue.add(start);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (!queue.isEmpty())&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span>[] current = queue.poll();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; steps.size(); i++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> nextX = current[<span class=\"number\">0</span>]+steps.get(i)[<span class=\"number\">0</span>];</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> nextY = current[<span class=\"number\">1</span>]+steps.get(i)[<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (nextX &lt; <span class=\"number\">0</span> || nextX &gt;= board.length || nextY &lt; <span class=\"number\">0</span> || nextY&gt;= board[<span class=\"number\">0</span>].length)</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (count[nextX][nextY] == <span class=\"number\">0</span> &amp;&amp; board[nextX][nextY] == <span class=\"string\">'.'</span>)&#123;</div><div class=\"line\">\t\t\t\t\tcount[nextX][nextY] = count[current[<span class=\"number\">0</span>]][current[<span class=\"number\">1</span>]] + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\tqueue.add(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;nextX, nextY&#125;);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (board[nextX][nextY] != <span class=\"string\">'.'</span>)</div><div class=\"line\">\t\t\t\t\tcount[nextX][nextY] = -<span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t&#125;\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-3-下厨房\"><a href=\"#No-3-下厨房\" class=\"headerlink\" title=\"No. 3 下厨房\"></a>No. 3 下厨房</h2><p>牛牛想尝试一些新的料理，每个料理需要一些不同的材料，问完成所有的料理需要准备多少种不同的材料。 </p>\n<h3 id=\"输入描述-2\"><a href=\"#输入描述-2\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>每个输入包含 1 个测试用例。每个测试用例的第 i 行，表示完成第 i 件料理需要哪些材料，各个材料用空格隔开，输入只包含大写英文字母和空格，输入文件不超过 50 行，每一行不超过 50 个字符。</p>\n<h3 id=\"输出描述-2\"><a href=\"#输出描述-2\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一行一个数字表示完成所有料理需要多少种不同的材料。</p>\n<h3 id=\"输入例子-2\"><a href=\"#输入例子-2\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>BUTTER FLOUR<br>HONEY FLOUR EGG</p>\n<h3 id=\"输出例子-2\"><a href=\"#输出例子-2\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>4</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSet&lt;String&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; sc.hasNextLine() &amp;&amp; i &lt;= <span class=\"number\">50</span>; i++)&#123;</div><div class=\"line\">\t\t\tString[] strs = sc.nextLine().split(<span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (String str : strs)</div><div class=\"line\">\t\t\t\tset.add(str);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(set.size());</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-4-分田地\"><a href=\"#No-4-分田地\" class=\"headerlink\" title=\"No. 4 分田地\"></a>No. 4 分田地</h2><p>牛牛和 15 个朋友来玩打土豪分田地的游戏，牛牛决定让你来分田地，地主的田地可以看成是一个矩形，每个位置有一个价值。分割田地的方法是横竖各切三刀，分成 16 份，作为领导干部，牛牛总是会选择其中总价值最小的一份田地， 作为牛牛最好的朋友，你希望牛牛取得的田地的价值和尽可能大，你知道这个值最大可以是多少吗？ </p>\n<h3 id=\"输入描述-3\"><a href=\"#输入描述-3\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>每个输入包含 1 个测试用例。每个测试用例的第一行包含两个整数 n 和 m（1 &lt;= n, m &lt;= 75），表示田地的大小，接下来的 n 行，每行包含 m 个 0-9 之间的数字，表示每块位置的价值。</p>\n<h3 id=\"输出描述-3\"><a href=\"#输出描述-3\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一行表示牛牛所能取得的最大的价值。</p>\n<h3 id=\"输入例子-3\"><a href=\"#输入例子-3\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>4 4<br>3332<br>3233<br>3332<br>2323</p>\n<h3 id=\"输出例子-3\"><a href=\"#输出例子-3\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>2</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[][] sum;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> m = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">75</span> || m &lt; <span class=\"number\">1</span> || m &gt; <span class=\"number\">75</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tsum = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n+<span class=\"number\">1</span>][m+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</div><div class=\"line\">\t\t\tString str = sc.next();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++)</div><div class=\"line\">\t\t\t\tsum[i][j] = sum[i-<span class=\"number\">1</span>][j] + sum[i][j-<span class=\"number\">1</span>] - sum[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] + (str.charAt(j-<span class=\"number\">1</span>) - <span class=\"string\">'0'</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> right = sum[n][m];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tmax = binarySearch(left, right);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(max);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (left &lt;= right)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> middle = (left + right) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isMin(middle))&#123;</div><div class=\"line\">\t\t\t\tleft = middle + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\tmax = middle;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> </div><div class=\"line\">\t\t\t\tright = middle - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> max;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMin</span><span class=\"params\">(<span class=\"keyword\">int</span> middle)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> m = sum[<span class=\"number\">0</span>].length - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m - <span class=\"number\">3</span>; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt;= m - <span class=\"number\">2</span>; j++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = j + <span class=\"number\">1</span>; k &lt;= m - <span class=\"number\">1</span>; k++)&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> prev = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> l = <span class=\"number\">1</span>; l &lt;= sum.length - <span class=\"number\">1</span>; l++)&#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">int</span> value1 = getValue(prev, <span class=\"number\">0</span>, l, i);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">int</span> value2 = getValue(prev, i, l, j);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">int</span> value3 = getValue(prev, j, l, k);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">int</span> value4 = getValue(prev, k, l, m);</div><div class=\"line\">\t\t\t\t\t\t</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (value1 &gt;= middle &amp;&amp; value2 &gt;= middle &amp;&amp; value3 &gt;= middle &amp;&amp; value4 &gt;= middle)&#123;</div><div class=\"line\">\t\t\t\t\t\t\tcount++;</div><div class=\"line\">\t\t\t\t\t\t\tprev = l;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (count &gt;= <span class=\"number\">4</span>)</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> sum[x][y] - sum[x][j] - sum[i][y] + sum[i][j];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-5-分苹果\"><a href=\"#No-5-分苹果\" class=\"headerlink\" title=\"No. 5 分苹果\"></a>No. 5 分苹果</h2><p>n 只奶牛坐在一排，每个奶牛拥有 ai 个苹果，现在你要在它们之间转移苹果，使得最后所有奶牛拥有的苹果数都相同，每一次，你只能从一只奶牛身上拿走恰好两个苹果到另一个奶牛上，问最少需要移动多少次可以平分苹果，如果方案不存在输出 -1。</p>\n<h3 id=\"输入描述-4\"><a href=\"#输入描述-4\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>每个输入包含一个测试用例。每个测试用例的第一行包含一个整数 n（1 &lt;= n &lt;= 100），接下来的一行包含 n 个整数 ai（1 &lt;= ai &lt;= 100）。</p>\n<h3 id=\"输出描述-4\"><a href=\"#输出描述-4\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一行表示最少需要移动多少次可以平分苹果，如果方案不存在则输出 -1。</p>\n<h3 id=\"输入例子-4\"><a href=\"#输入例子-4\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>4<br>7 15 9 5</p>\n<h3 id=\"输出例子-4\"><a href=\"#输出例子-4\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>3</p>\n<h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span> || n &gt; <span class=\"number\">100</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\ta[i] = sc.nextInt();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (a[i] &lt; <span class=\"number\">1</span> || a[i] &gt; <span class=\"number\">100</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tsum += a[i];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (sum % a.length != <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\tSystem.out.println(-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> avg = sum / a.length;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> move = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Math.abs(a[i] - avg) % <span class=\"number\">2</span> != <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (a[i] &gt; avg)</div><div class=\"line\">\t\t\t\tmove += a[i] - avg;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(move / <span class=\"number\">2</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-6-星际穿越\"><a href=\"#No-6-星际穿越\" class=\"headerlink\" title=\"No. 6 星际穿越\"></a>No. 6 星际穿越</h2><p>航天飞行器是一项复杂而又精密的仪器，飞行器的损耗主要集中在发射和降落的过程，科学家根据实验数据估计，如果在发射过程中，产生了 x 程度的损耗，那么在降落的过程中就会产生 x2 程度的损耗，如果飞船的总损耗超过了它的耐久度，飞行器就会爆炸坠毁。问一艘耐久度为 h 的飞行器，假设在飞行过程中不产生损耗，那么为了保证其可以安全的到达目的地，只考虑整数解，至多发射过程中可以承受多少程度的损耗？ </p>\n<h3 id=\"输入描述-5\"><a href=\"#输入描述-5\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>每个输入包含一个测试用例。每个测试用例包含一行一个整数 h （1 &lt;= h &lt;= 10^18）。</p>\n<h3 id=\"输出描述-5\"><a href=\"#输出描述-5\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一行一个整数表示结果。</p>\n<h3 id=\"输入例子-5\"><a href=\"#输入例子-5\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>10</p>\n<h3 id=\"输出例子-5\"><a href=\"#输出例子-5\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>2</p>\n<h3 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> h = sc.nextLong();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (h &lt; <span class=\"number\">0</span> || h &gt; Math.pow(<span class=\"number\">10</span>, <span class=\"number\">18</span>))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> x = (<span class=\"keyword\">long</span>) Math.sqrt(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (; x &gt;= <span class=\"number\">0</span>; x--)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x * x + x &lt;= h)&#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(x);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-7-藏宝图\"><a href=\"#No-7-藏宝图\" class=\"headerlink\" title=\"No. 7 藏宝图\"></a>No. 7 藏宝图</h2><p>牛牛拿到了一个藏宝图，顺着藏宝图的指示，牛牛发现了一个藏宝盒，藏宝盒上有一个机关，机关每次会显示两个字符串 s 和 t，根据古老的传说，牛牛需要每次都回答 t 是否是 s 的子序列。注意，子序列不要求在原字符串中是连续的，例如串 abc，它的子序列就有 {空串, a, b, c, ab, ac, bc, abc} 8 种。 </p>\n<h3 id=\"输入描述-6\"><a href=\"#输入描述-6\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>每个输入包含一个测试用例。每个测试用例包含两行长度不超过 10 的不包含空格的可见 ASCII 字符串。</p>\n<h3 id=\"输出描述-6\"><a href=\"#输出描述-6\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一行 “Yes” 或者 “No” 表示结果。</p>\n<h3 id=\"输入例子-6\"><a href=\"#输入例子-6\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>x.nowcoder.com<br>ooo</p>\n<h3 id=\"输出例子-6\"><a href=\"#输出例子-6\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>Yes</p>\n<h3 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tString s = sc.nextLine();</div><div class=\"line\">\t\tString t = sc.nextLine();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span> || t == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"No\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (; i &lt; t.length() &amp;&amp; j &lt; s.length(); j++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (t.charAt(i) == s.charAt(j))</div><div class=\"line\">\t\t\t\ti++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (i == t.length())</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Yes\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> </div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"No\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-8-数列还原\"><a href=\"#No-8-数列还原\" class=\"headerlink\" title=\"No. 8 数列还原\"></a>No. 8 数列还原</h2><p>牛牛的作业薄上有一个长度为 n 的排列 A，这个排列包含了从1到n的n个数，但是因为一些原因，其中有一些位置（不超过 10 个）看不清了，但是牛牛记得这个数列顺序对的数量是 k，顺序对是指满足 i &lt; j 且 A[i] &lt; A[j] 的对数，请帮助牛牛计算出，符合这个要求的合法排列的数目。 </p>\n<h3 id=\"输入描述-7\"><a href=\"#输入描述-7\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>每个输入包含一个测试用例。每个测试用例的第一行包含两个整数 n 和 k（1 &lt;= n &lt;= 100, 0 &lt;= k &lt;= 1000000000），接下来的 1 行，包含 n 个数字表示排列 A，其中等于0的项表示看不清的位置（不超过 10 个）。</p>\n<h3 id=\"输出描述-7\"><a href=\"#输出描述-7\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一行表示合法的排列数目。</p>\n<h3 id=\"输入例子-7\"><a href=\"#输入例子-7\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>5 5<br>4 0 0 2 0</p>\n<h3 id=\"输出例子-7\"><a href=\"#输出例子-7\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>2</p>\n<h3 id=\"代码-7\"><a href=\"#代码-7\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> k = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">100</span> || k &lt; <span class=\"number\">0</span> || k &gt; <span class=\"number\">1000000000</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tArrayList&lt;Integer&gt; a = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t\t\ta.add(sc.nextInt());</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tArrayList&lt;Integer&gt; number = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div><div class=\"line\">\t\tArrayList&lt;Integer&gt; copy = (ArrayList&lt;Integer&gt;) a.clone();</div><div class=\"line\">\t\tList&lt;ArrayList&lt;Integer&gt;&gt; perms = <span class=\"keyword\">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!a.contains(i))</div><div class=\"line\">\t\t\t\tnumber.add(i);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tpermutation(perms, number, <span class=\"number\">0</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (ArrayList&lt;Integer&gt; perm : perms)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.size(); i++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (a.get(i) == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\t\tcopy.set(i, perm.get(index));</div><div class=\"line\">\t\t\t\t\tindex++;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> pairs = calculatePairs(copy);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (pairs == k)</div><div class=\"line\">\t\t\t\tcount++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(count);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">permutation</span><span class=\"params\">(List&lt;ArrayList&lt;Integer&gt;&gt; perm, ArrayList&lt;Integer&gt; number, <span class=\"keyword\">int</span> index)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (index == number.size())</div><div class=\"line\">\t\t\tperm.add(<span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;(number));</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = index; i &lt; number.size(); i++)&#123;</div><div class=\"line\">\t\t\t\tCollections.swap(number, i, index);</div><div class=\"line\">\t\t\t\tpermutation(perm, number, index + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\tCollections.swap(number, i, index);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculatePairs</span><span class=\"params\">(ArrayList&lt;Integer&gt; a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> pairs = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.size() - <span class=\"number\">1</span>; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; a.size(); j++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (a.get(i) &lt; a.get(j))</div><div class=\"line\">\t\t\t\t\tpairs++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> pairs;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm"],"tags":["OJ","Algorithm"]},{"title":"Torch Demo","url":"http://yoursite.com/2017/03/18/Torch-Demo/","content":"<p>We have <strong><em>5 steps</em></strong> to do in training a torch neural network.</p>\n<blockquote><p><em>(1) Load and normalize data; </em><br><em>(2) Define Neural Network; </em><br><em>(3) Define Loss function; </em><br><em>(4) Train network on training data; </em><br><em>(5) Test network on test data. </em></p>\n<footer><strong>Tutorial</strong><cite><a href=\"https://github.com/soumith/cvpr2015/blob/master/Deep%20Learning%20with%20Torch.ipynb\" target=\"_blank\" rel=\"external\">cvpr2015/Deep Learning with Torch.ipynb</a></cite></footer></blockquote>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">'paths'</span></div><div class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">'nn'</span></div><div class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">'torch'</span></div><div class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">'cunn'</span></div><div class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">'cutorch'</span></div></pre></td></tr></table></figure>\n<h3 id=\"Load-and-normalize-data\"><a href=\"#Load-and-normalize-data\" class=\"headerlink\" title=\"Load and normalize data\"></a>Load and normalize data</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">not</span> paths.filep(<span class=\"string\">\"cifar10torchsmall.zip\"</span>)) <span class=\"keyword\">then</span></div><div class=\"line\">    os.execute(<span class=\"string\">'wget -c https://s3.amazonaws.com/torch7/data/cifar10torchsmall.zip'</span>)</div><div class=\"line\">    os.execute(<span class=\"string\">'unzip cifar10torchsmall.zip'</span>)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">trainset = torch.<span class=\"built_in\">load</span>(<span class=\"string\">'cifar10-train.t7'</span>)</div><div class=\"line\">testset = torch.<span class=\"built_in\">load</span>(<span class=\"string\">'cifar10-test.t7'</span>)</div><div class=\"line\">classes = &#123;<span class=\"string\">'airplane'</span>, <span class=\"string\">'automobile'</span>, <span class=\"string\">'bird'</span>, <span class=\"string\">'cat'</span>,</div><div class=\"line\">           <span class=\"string\">'deer'</span>, <span class=\"string\">'dog'</span>, <span class=\"string\">'frog'</span>, <span class=\"string\">'horse'</span>, <span class=\"string\">'ship'</span>, <span class=\"string\">'truck'</span>&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">setmetatable</span>(trainset,</div><div class=\"line\">    &#123;<span class=\"built_in\">__index</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(t, i)</span></span></div><div class=\"line\">                   <span class=\"keyword\">return</span> &#123;t.data[i], t.label[i]&#125;</div><div class=\"line\">               <span class=\"keyword\">end</span>&#125;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trainset:size</span><span class=\"params\">()</span></span></div><div class=\"line\">    <span class=\"keyword\">return</span> self.data:size(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\">&#123;% endcodeblock %&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;% codeblock lang:lua %&#125;</div><div class=\"line\">trainset.data = trainset.data:double()</div><div class=\"line\">testset.data = testset.data:double()</div><div class=\"line\"></div><div class=\"line\">mean = &#123;&#125;</div><div class=\"line\">stdv  = &#123;&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1</span>,<span class=\"number\">3</span> <span class=\"keyword\">do</span></div><div class=\"line\">    mean[i] = trainset.data[&#123; &#123;&#125;, &#123;i&#125;, &#123;&#125;, &#123;&#125;  &#125;]:mean()</div><div class=\"line\">    <span class=\"comment\">--print('Channel ' .. i .. ', Mean: ' .. mean[i])</span></div><div class=\"line\">    trainset.data[&#123; &#123;&#125;, &#123;i&#125;, &#123;&#125;, &#123;&#125;  &#125;]:add(-mean[i])   </div><div class=\"line\">    stdv[i] = trainset.data[&#123; &#123;&#125;, &#123;i&#125;, &#123;&#125;, &#123;&#125;  &#125;]:std()</div><div class=\"line\">    <span class=\"comment\">--print('Channel ' .. i .. ', Standard Deviation: ' .. stdv[i])</span></div><div class=\"line\">    trainset.data[&#123; &#123;&#125;, &#123;i&#125;, &#123;&#125;, &#123;&#125;  &#125;]:div(stdv[i])</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1</span>,<span class=\"number\">3</span> <span class=\"keyword\">do</span></div><div class=\"line\">     testset.data[&#123; &#123;&#125;, &#123;i&#125;, &#123;&#125;, &#123;&#125; &#125;]:add(-mean[i])</div><div class=\"line\">     testset.data[&#123; &#123;&#125;, &#123;i&#125;, &#123;&#125;, &#123;&#125; &#125;]:div(stdv[i])</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<h3 id=\"Define-neural-network\"><a href=\"#Define-neural-network\" class=\"headerlink\" title=\"Define neural network\"></a>Define neural network</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">net = nn.Sequential()</div><div class=\"line\">net:add(nn.SpatialConvolution(<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>)) <span class=\"comment\">-- 3 input image channels, 6 output channels, 5x5 convolution kernel</span></div><div class=\"line\">net:add(nn.ReLU())                         <span class=\"comment\">-- non-linearity</span></div><div class=\"line\">net:add(nn.SpatialMaxPooling(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>))     <span class=\"comment\">-- A max-pooling operation that looks at 2x2 windows and finds the max.</span></div><div class=\"line\">net:add(nn.SpatialConvolution(<span class=\"number\">6</span>, <span class=\"number\">16</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>))</div><div class=\"line\">net:add(nn.ReLU())                         <span class=\"comment\">-- non-linearity</span></div><div class=\"line\">net:add(nn.SpatialMaxPooling(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>))</div><div class=\"line\">net:add(nn.View(<span class=\"number\">16</span>*<span class=\"number\">5</span>*<span class=\"number\">5</span>))                   <span class=\"comment\">-- reshapes from a 3D tensor of 16x5x5 into 1D tensor of 16*5*5</span></div><div class=\"line\">net:add(nn.Linear(<span class=\"number\">16</span>*<span class=\"number\">5</span>*<span class=\"number\">5</span>, <span class=\"number\">120</span>))            <span class=\"comment\">-- fully connected layer (matrix multiplication between input and weights)</span></div><div class=\"line\">net:add(nn.ReLU())                         <span class=\"comment\">-- non-linearity</span></div><div class=\"line\">net:add(nn.Linear(<span class=\"number\">120</span>, <span class=\"number\">84</span>))</div><div class=\"line\">net:add(nn.ReLU())                         <span class=\"comment\">-- non-linearity</span></div><div class=\"line\">net:add(nn.Linear(<span class=\"number\">84</span>, <span class=\"number\">10</span>))                 <span class=\"comment\">-- 10 is the number of outputs of the network (in this case, 10 digits)</span></div><div class=\"line\">net:add(nn.LogSoftMax())                   <span class=\"comment\">-- converts the output to a log-probability. Useful for classification problems</span></div></pre></td></tr></table></figure>\n<h3 id=\"Define-the-Loss-function\"><a href=\"#Define-the-Loss-function\" class=\"headerlink\" title=\"Define the Loss function\"></a>Define the Loss function</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">criterion = nn.ClassNLLCriterion()</div></pre></td></tr></table></figure>\n<h3 id=\"Train-the-neural-network\"><a href=\"#Train-the-neural-network\" class=\"headerlink\" title=\"Train the neural network\"></a>Train the neural network</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">trainer = nn.StochasticGradient(net, criterion)</div><div class=\"line\">trainer.learningRate = <span class=\"number\">0.001</span></div><div class=\"line\">trainer.maxIteration = <span class=\"number\">5</span></div><div class=\"line\">trainer:train(trainset)</div></pre></td></tr></table></figure>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">-- train on GPU</span></div><div class=\"line\">net = net:cuda()</div><div class=\"line\">criterion = criterion:cuda()</div><div class=\"line\">trainset.data = trainset.data:cuda()</div><div class=\"line\">trainset.label = trainset.label:cuda()</div><div class=\"line\">testset.data = testset.data:cuda()</div><div class=\"line\">testset.label = testset.label:cuda()</div></pre></td></tr></table></figure>\n<h3 id=\"Test-the-network-print-accuracy\"><a href=\"#Test-the-network-print-accuracy\" class=\"headerlink\" title=\"Test the network, print accuracy\"></a>Test the network, print accuracy</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">correct = <span class=\"number\">0</span></div><div class=\"line\">class_performance = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1</span>,<span class=\"number\">10000</span> <span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"keyword\">local</span> groundtruth = testset.label[i]</div><div class=\"line\">    <span class=\"keyword\">local</span> prediction = net:forward(testset.data[i])</div><div class=\"line\">    <span class=\"keyword\">local</span> confidences, indices = torch.sort(prediction, <span class=\"literal\">true</span>)  <span class=\"comment\">-- true means sort in descending order</span></div><div class=\"line\">    <span class=\"keyword\">if</span> groundtruth == indices[<span class=\"number\">1</span>] <span class=\"keyword\">then</span></div><div class=\"line\">        correct = correct + <span class=\"number\">1</span></div><div class=\"line\">        class_performance[groundtruth] = class_performance[groundtruth] + <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span>(correct, <span class=\"number\">100</span>*correct/<span class=\"number\">10000</span> .. <span class=\"string\">\" % \"</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1</span>,#classes <span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"built_in\">print</span>(classes[i], <span class=\"number\">100</span>*class_performance[i]/<span class=\"number\">1000</span> .. <span class=\"string\">' %'</span>)</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<h2 id=\"Result\"><a href=\"#Result\" class=\"headerlink\" title=\"Result\"></a>Result</h2><p>It’ll take around 30 minutes to get the result on CPU. However, it’ll cost less than 10 minutes on GPU.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">th filename.lua</div></pre></td></tr></table></figure>\n<h3 id=\"On-CPU\"><a href=\"#On-CPU\" class=\"headerlink\" title=\"On CPU\"></a>On CPU</h3><p><img src=\"http://p1.bqimg.com/4851/2292e852a2790f62.png\" alt=\"cpu\"></p>\n<h3 id=\"On-GPU\"><a href=\"#On-GPU\" class=\"headerlink\" title=\"On GPU\"></a>On GPU</h3><p><img src=\"http://p1.bqimg.com/4851/d63d92b0f0d14405.png\" alt=\"gpu\"></p>\n","categories":["Deep Learning"],"tags":["Deep Learning","Torch"]},{"title":"Hello World","url":"http://yoursite.com/2017/03/17/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","categories":[],"tags":[]},{"title":"categories","url":"http://yoursite.com/categories/index.html","content":"","categories":[],"tags":[]},{"title":"tags","url":"http://yoursite.com/tags/index.html","content":"","categories":[],"tags":[]}]