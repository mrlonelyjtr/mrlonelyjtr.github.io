[{"title":"[LeetCode] Problem 236 - Lowest Common Ancestor of a Binary Tree","url":"http://yoursite.com/2019/05/01/LeetCode-Problem-236-Lowest-Common-Ancestor-of-a-Binary-Tree/","content":"<p>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.</p>\n<p>According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”</p>\n<p>Given the following binary tree:  root = [3,5,1,6,2,0,8,null,null,7,4]</p>\n<p><a href=\"https://imgchr.com/i/EJyVnP\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/01/EJyVnP.png\" alt=\"EJyVnP.png\"></a></p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1</p>\n<p>Output: 3</p>\n<p>Explanation: The LCA of nodes 5 and 1 is 3.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4</p>\n<p>Output: 5</p>\n<p>Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>All of the nodes’ values will be unique.</li>\n<li>p and q are different and both values will exist in the binary tree.</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">lowestCommonAncestor</span><span class=\"params\">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || p.val == root.val || q.val == root.val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\"></span><br><span class=\"line\">    TreeNode left = lowestCommonAncestor(root.left, p, q);        </span><br><span class=\"line\">    TreeNode right = lowestCommonAncestor(root.right, p, q);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left != <span class=\"keyword\">null</span> &amp;&amp; right != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> left == <span class=\"keyword\">null</span> ? right : left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 235 - Lowest Common Ancestor of a Binary Search Tree","url":"http://yoursite.com/2019/05/01/LeetCode-Problem-235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree/","content":"<p>Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.</p>\n<p>According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”</p>\n<p>Given binary search tree:  root = [6,2,8,0,4,7,9,null,null,3,5]</p>\n<p><a href=\"https://imgchr.com/i/EJrs2R\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/01/EJrs2R.png\" alt=\"EJrs2R.png\"></a></p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8</p>\n<p>Output: 6</p>\n<p>Explanation: The LCA of nodes 2 and 8 is 6.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4</p>\n<p>Output: 2</p>\n<p>Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>All of the nodes’ values will be unique.</li>\n<li>p and q are different and both values will exist in the BST.</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">lowestCommonAncestor</span><span class=\"params\">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p.val &lt; root.val &amp;&amp; q.val &lt; root.val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lowestCommonAncestor(root.left, p, q);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p.val &gt; root.val &amp;&amp; q.val &gt; root.val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lowestCommonAncestor(root.right, p, q);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 297 - Serialize and Deserialize Binary Tree","url":"http://yoursite.com/2019/05/01/LeetCode-Problem-297-Serialize-and-Deserialize-Binary-Tree/","content":"<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>\n<p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>You may serialize the following tree:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  1</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">2   3</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  4   5</span><br></pre></td></tr></table></figure>\n<p>as “[1,2,3,null,null,4,5]”</p>\n<h2 id=\"Clarification\"><a href=\"#Clarification\" class=\"headerlink\" title=\"Clarification\"></a>Clarification</h2><p>The above format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">serialize</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    preorder(root, sb);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">deserialize</span><span class=\"params\">(String data)</span> </span>&#123;</span><br><span class=\"line\">    String[] str = data.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> construct(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">preorder</span><span class=\"params\">(TreeNode root, StringBuilder sb)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"#,\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sb.append(root.val).append(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">    preorder(root.left, sb);</span><br><span class=\"line\">    preorder(root.right, sb);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">construct</span><span class=\"params\">(String[] str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str[index].equals(<span class=\"string\">\"#\"</span>)) &#123;</span><br><span class=\"line\">        index++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    TreeNode root = <span class=\"keyword\">new</span> TreeNode(Integer.parseInt(str[index++]));</span><br><span class=\"line\">    root.left = construct(str);</span><br><span class=\"line\">    root.right = construct(str);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 449 - Serialize and Deserialize BST","url":"http://yoursite.com/2019/04/30/LeetCode-Problem-449-Serialize-and-Deserialize-BST/","content":"<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>\n<p>Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary search tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>\n<p>The encoded string should be as compact as possible.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">serialize</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    preorder(root, sb);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.length() &lt; <span class=\"number\">1</span> ? <span class=\"string\">\"\"</span> : sb.deleteCharAt(sb.length() - <span class=\"number\">1</span>).toString();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">deserialize</span><span class=\"params\">(String data)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data.length() &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    String[] str = data.split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> construct(str, <span class=\"number\">0</span>, str.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">preorder</span><span class=\"params\">(TreeNode root, StringBuilder sb)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    sb.append(root.val + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    preorder(root.left, sb);</span><br><span class=\"line\">    preorder(root.right, sb);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">construct</span><span class=\"params\">(String[] str, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt; end)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    TreeNode root = <span class=\"keyword\">new</span> TreeNode(Integer.parseInt(str[start]));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = start + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; i &lt;= end; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Integer.parseInt(str[i]) &gt; root.val)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    root.left = construct(str, start + <span class=\"number\">1</span>, i - <span class=\"number\">1</span>);</span><br><span class=\"line\">    root.right = construct(str, i, end);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 450 - Delete Node in a BST","url":"http://yoursite.com/2019/04/30/LeetCode-Problem-450-Delete-Node-in-a-BST/","content":"<p>Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.</p>\n<p>Basically, the deletion can be divided into two stages:</p>\n<ol>\n<li>Search for a node to remove.</li>\n<li>If the node is found, delete the node.</li>\n</ol>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>Time complexity should be O(height of tree).</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>root = [5,3,6,2,4,null,7]<br>key = 3</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    5</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  3   6</span><br><span class=\"line\"> / \\   \\</span><br><span class=\"line\">2   4   7</span><br></pre></td></tr></table></figure>\n<p>Given key to delete is 3. So we find the node with value 3 and delete it.</p>\n<p>One valid answer is [5,4,6,2,null,null,7], shown in the following BST.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    5</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  4   6</span><br><span class=\"line\"> /     \\</span><br><span class=\"line\">2       7</span><br></pre></td></tr></table></figure>\n<p>Another valid answer is [5,2,6,null,4,null,7].</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  5</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">2   6</span><br><span class=\"line\"> \\   \\</span><br><span class=\"line\">  4   7</span><br></pre></td></tr></table></figure>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">deleteNode</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val &gt; key)</span><br><span class=\"line\">        root.left = deleteNode(root.left, key);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.val &lt; key)</span><br><span class=\"line\">        root.right = deleteNode(root.right, key);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left == <span class=\"keyword\">null</span> || root.right == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            root = (root.left != <span class=\"keyword\">null</span>) ? root.left : root.right;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            TreeNode node = root.right;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (node.left != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                node = node.left;</span><br><span class=\"line\"></span><br><span class=\"line\">            root.val = node.val;</span><br><span class=\"line\">            root.right = deleteNode(root.right, node.val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 530 - Minimum Absolute Difference in BST","url":"http://yoursite.com/2019/04/30/LeetCode-Problem-530-Minimum-Absolute-Difference-in-BST/","content":"<p>Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\"> \\</span><br><span class=\"line\">  3</span><br><span class=\"line\"> /</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n<p>Output:<br>1</p>\n<p>Explanation:<br>The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>There are at least two nodes in this BST.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> min = Integer.MAX_VALUE;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> prev = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMinimumDifference</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    inorder(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">inorder</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    inorder(root.left);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prev != -<span class=\"number\">1</span>)</span><br><span class=\"line\">        min = Math.min(min, root.val - prev);</span><br><span class=\"line\"></span><br><span class=\"line\">    prev = root.val;</span><br><span class=\"line\"></span><br><span class=\"line\">    inorder(root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 783 - Minimum Distance Between BST Nodes","url":"http://yoursite.com/2019/04/30/LeetCode-Problem-783-Minimum-Distance-Between-BST-Nodes/","content":"<p>Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: root = [4,2,6,1,3,null,null]</p>\n<p>Output: 1</p>\n<p>Explanation:<br>Note that root is a TreeNode object, not an array.</p>\n<p>The given tree [4,2,6,1,3,null,null] is represented by the following diagram:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      4</span><br><span class=\"line\">    /   \\</span><br><span class=\"line\">  2      6</span><br><span class=\"line\"> / \\    </span><br><span class=\"line\">1   3</span><br></pre></td></tr></table></figure>\n<p>while the minimum difference in this tree is 1, it occurs between node 1 and node 2, also between node 3 and node 2.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ol>\n<li>The size of the BST will be between 2 and 100.</li>\n<li>The BST is always valid, each node’s value is an integer, and each node’s value is different.</li>\n</ol>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> min = Integer.MAX_VALUE;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> prev = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minDiffInBST</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    inorder(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">inorder</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    inorder(root.left);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prev != -<span class=\"number\">1</span>)</span><br><span class=\"line\">        min = Math.min(min, root.val - prev);</span><br><span class=\"line\"></span><br><span class=\"line\">    prev = root.val;</span><br><span class=\"line\"></span><br><span class=\"line\">    inorder(root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 173 - Binary Search Tree Iterator","url":"http://yoursite.com/2019/04/29/LeetCode-Problem-173-Binary-Search-Tree-Iterator/","content":"<p>Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.</p>\n<p>Calling next() will return the next smallest number in the BST.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p><a href=\"https://imgchr.com/i/E3yZKf\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/04/29/E3yZKf.png\" alt=\"E3yZKf.png\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BSTIterator iterator = <span class=\"keyword\">new</span> BSTIterator(root);</span><br><span class=\"line\">iterator.next();    <span class=\"comment\">// return 3</span></span><br><span class=\"line\">iterator.next();    <span class=\"comment\">// return 7</span></span><br><span class=\"line\">iterator.hasNext(); <span class=\"comment\">// return true</span></span><br><span class=\"line\">iterator.next();    <span class=\"comment\">// return 9</span></span><br><span class=\"line\">iterator.hasNext(); <span class=\"comment\">// return true</span></span><br><span class=\"line\">iterator.next();    <span class=\"comment\">// return 15</span></span><br><span class=\"line\">iterator.hasNext(); <span class=\"comment\">// return true</span></span><br><span class=\"line\">iterator.next();    <span class=\"comment\">// return 20</span></span><br><span class=\"line\">iterator.hasNext(); <span class=\"comment\">// return false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.</li>\n<li>You may assume that next() call will always be valid, that is, there will be at least a next smallest number in the BST when next() is called.</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BSTIterator</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        stack.push(root);</span><br><span class=\"line\">        root = root.left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    TreeNode node = stack.pop();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val = node.val;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        node = node.right;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            stack.push(node);</span><br><span class=\"line\">            node = node.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !stack.isEmpty();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 230 - Kth Smallest Element in a BST","url":"http://yoursite.com/2019/04/29/LeetCode-Problem-230-Kth-Smallest-Element-in-a-BST/","content":"<p>Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>You may assume k is always valid, 1 ≤ k ≤ BST’s total elements.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: root = [3,1,4,null,2], k = 1</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  3</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">1   4</span><br><span class=\"line\"> \\</span><br><span class=\"line\">  2</span><br></pre></td></tr></table></figure>\n<p>Output: 1</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: root = [5,3,6,2,4,null,null,1], k = 3</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      5</span><br><span class=\"line\">     / \\</span><br><span class=\"line\">    3   6</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  2   4</span><br><span class=\"line\"> /</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<p>Output: 3</p>\n<h2 id=\"Follow-up\"><a href=\"#Follow-up\" class=\"headerlink\" title=\"Follow up\"></a>Follow up</h2><p>What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">kthSmallest</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    inorder(root, k);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">inorder</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.left != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        inorder(root.left, k);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++count == k) &#123;</span><br><span class=\"line\">        num = root.val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.right != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        inorder(root.right, k);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 863 - Binary Tree Path Sum IV","url":"http://yoursite.com/2019/04/29/LintCode-Problem-863-Binary-Tree-Path-Sum-IV/","content":"<p>If the depth of a tree is smaller than 5, this tree can be represented by a list of three-digits integers.</p>\n<p>For each integer in this list:</p>\n<ol>\n<li>The hundreds digit represents the depth D of this node, 1 &lt;= D &lt;= 4.</li>\n<li>The tens digit represents the position P of this node in the level it belongs to, 1 &lt;= P &lt;= 8. The position is the same as that in a full binary tree.</li>\n<li>The units digit represents the value V of this node, 0 &lt;= V &lt;= 9.</li>\n</ol>\n<p>Given a list of ascending three-digits integers representing a binary with the depth smaller than 5. You need to return the sum of all paths from the root towards the leaves.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: [113, 215, 221]</p>\n<p>Output: 12</p>\n<p>Explanation:<br>  The tree that the list represents is:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  3</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">5   1</span><br></pre></td></tr></table></figure>\n<p>  The path sum is (3 + 5) + (3 + 1) = 12.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: [113, 221]</p>\n<p>Output: 4</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pathSum</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums)</span><br><span class=\"line\">        map.put(num / <span class=\"number\">10</span>, num % <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    traverse(nums[<span class=\"number\">0</span>] / <span class=\"number\">10</span>, map, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">traverse</span><span class=\"params\">(<span class=\"keyword\">int</span> root, Map&lt;Integer, Integer&gt; map, <span class=\"keyword\">int</span> prevSum)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> level = root / <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos = root % <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = (level + <span class=\"number\">1</span>) * <span class=\"number\">10</span> + pos * <span class=\"number\">2</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = (level + <span class=\"number\">1</span>) * <span class=\"number\">10</span> + pos * <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> curSum = prevSum + map.get(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!map.containsKey(left) &amp;&amp; !map.containsKey(right)) &#123;</span><br><span class=\"line\">        sum += curSum;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (map.containsKey(left))</span><br><span class=\"line\">        traverse(left, map, curSum);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (map.containsKey(right))</span><br><span class=\"line\">        traverse(right, map, curSum);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 80 - Remove Duplicates from Sorted Array II","url":"http://yoursite.com/2019/04/28/LeetCode-Problem-80-Remove-Duplicates-from-Sorted-Array-II/","content":"<p>Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.</p>\n<p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Given nums = [1,1,1,2,2,3],</p>\n<p>Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.</p>\n<p>It doesn’t matter what you leave beyond the returned length.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Given nums = [0,0,1,1,1,1,2,3,3],</p>\n<p>Your function should return length = 7, with the first seven elements of nums being modified to 0, 0, 1, 1, 2, 3 and 3 respectively.</p>\n<p>It doesn’t matter what values are set beyond the returned length.</p>\n<h2 id=\"Clarification\"><a href=\"#Clarification\" class=\"headerlink\" title=\"Clarification\"></a>Clarification</h2><p>Confused why the returned value is an integer but your answer is an array?</p>\n<p>Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.</p>\n<p>Internally you can think of this:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// nums is passed in by reference. (i.e., without making a copy)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> len = removeDuplicates(nums);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// any modification to nums in your function would be known by the caller.</span></span><br><span class=\"line\"><span class=\"comment\">// using the length returned by your function, it prints the first len elements.</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    print(nums[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">removeDuplicates</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.length &lt; <span class=\"number\">3</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] != nums[length] || nums[i] != nums[length - <span class=\"number\">1</span>])</span><br><span class=\"line\">            nums[++length] = nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> length + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 889 - Construct Binary Tree from Preorder and Postorder Traversal","url":"http://yoursite.com/2019/04/26/LeetCode-Problem-889-Construct-Binary-Tree-from-Preorder-and-Postorder-Traversal/","content":"<p>Return any binary tree that matches the given preorder and postorder traversals.</p>\n<p>Values in the traversals pre and post are distinct positive integers.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1]</p>\n<p>Output: [1,2,3,4,5,6,7]</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>1 &lt;= pre.length == post.length &lt;= 30</li>\n<li>pre[] and post[] are both permutations of 1, 2, …, pre.length.</li>\n<li>It is guaranteed an answer exists. If there exists multiple answers, you can return any of them.</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">constructFromPrePost</span><span class=\"params\">(<span class=\"keyword\">int</span>[] pre, <span class=\"keyword\">int</span>[] post)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper(pre, post, <span class=\"number\">0</span>, pre.length - <span class=\"number\">1</span>, <span class=\"number\">0</span>, post.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] pre, <span class=\"keyword\">int</span>[] post, <span class=\"keyword\">int</span> preStart, <span class=\"keyword\">int</span> preEnd, <span class=\"keyword\">int</span> postStart, <span class=\"keyword\">int</span> postEnd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (preStart &gt; preEnd)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    TreeNode root = <span class=\"keyword\">new</span> TreeNode(pre[preStart]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (preStart == preEnd)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = postEnd - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; i &gt;= postStart; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (post[i] == pre[preStart + <span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    root.left = helper(pre, post, preStart + <span class=\"number\">1</span>, preEnd - postEnd + i + <span class=\"number\">1</span>, postStart, i);</span><br><span class=\"line\">    root.right = helper(pre, post, preEnd - postEnd + i + <span class=\"number\">2</span>, preEnd, i + <span class=\"number\">1</span>, postEnd - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 106 - Construct Binary Tree from Inorder and Postorder Traversal","url":"http://yoursite.com/2019/04/26/LeetCode-Problem-106-Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal/","content":"<p>Given inorder and postorder traversal of a tree, construct the binary tree.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>You may assume that duplicates do not exist in the tree.</p>\n<p>For example, given</p>\n<p>inorder = [9,3,15,20,7]<br>postorder = [9,15,7,20,3]</p>\n<p>Return the following binary tree:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  3</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">9  20</span><br><span class=\"line\">  /  \\</span><br><span class=\"line\"> 15   7</span><br></pre></td></tr></table></figure>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">buildTree</span><span class=\"params\">(<span class=\"keyword\">int</span>[] inorder, <span class=\"keyword\">int</span>[] postorder)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper(inorder, postorder, <span class=\"number\">0</span>, inorder.length - <span class=\"number\">1</span>, <span class=\"number\">0</span>, postorder.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] inorder, <span class=\"keyword\">int</span>[] postorder, <span class=\"keyword\">int</span> inStart, <span class=\"keyword\">int</span> inEnd, <span class=\"keyword\">int</span> postStart, <span class=\"keyword\">int</span> postEnd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inStart &gt; inEnd || postStart &gt; postEnd)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = inStart;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; i &lt;= inEnd; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inorder[i] == postorder[postEnd])</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    TreeNode root = <span class=\"keyword\">new</span> TreeNode(postorder[postEnd]);</span><br><span class=\"line\">    root.left = helper(inorder, postorder, inStart, i - <span class=\"number\">1</span>, postStart, postEnd - inEnd + i - <span class=\"number\">1</span>);</span><br><span class=\"line\">    root.right = helper(inorder, postorder, i + <span class=\"number\">1</span>, inEnd, postEnd - inEnd + i, postEnd - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 105 - Construct Binary Tree from Preorder and Inorder Traversal","url":"http://yoursite.com/2019/04/26/LeetCode-Problem-105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/","content":"<p>Given preorder and inorder traversal of a tree, construct the binary tree.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>You may assume that duplicates do not exist in the tree.</p>\n<p>For example, given</p>\n<p>preorder = [3,9,20,15,7]<br>inorder = [9,3,15,20,7]</p>\n<p>Return the following binary tree:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  3</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">9  20</span><br><span class=\"line\">  /  \\</span><br><span class=\"line\"> 15   7</span><br></pre></td></tr></table></figure>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">buildTree</span><span class=\"params\">(<span class=\"keyword\">int</span>[] preorder, <span class=\"keyword\">int</span>[] inorder)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper(preorder, inorder, <span class=\"number\">0</span>, preorder.length - <span class=\"number\">1</span>, <span class=\"number\">0</span>, inorder.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] preorder, <span class=\"keyword\">int</span>[] inorder, <span class=\"keyword\">int</span> preStart, <span class=\"keyword\">int</span> preEnd, <span class=\"keyword\">int</span> inStart, <span class=\"keyword\">int</span> inEnd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (preStart &gt; preEnd || inStart &gt; inEnd)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = inStart;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; i &lt;= inEnd; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inorder[i] == preorder[preStart])</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    TreeNode root = <span class=\"keyword\">new</span> TreeNode(preorder[preStart]);</span><br><span class=\"line\">    root.left = helper(preorder, inorder, preStart + <span class=\"number\">1</span>, preStart + i - inStart, inStart, i - <span class=\"number\">1</span>);</span><br><span class=\"line\">    root.right = helper(preorder, inorder, preStart + i - inStart + <span class=\"number\">1</span>, preEnd, i + <span class=\"number\">1</span>, inEnd);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 695 - Max Area of Island","url":"http://yoursite.com/2019/04/26/LeetCode-Problem-695-Max-Area-of-Island/","content":"<p>Given a non-empty 2D array grid of 0’s and 1’s, an island is a group of 1’s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.</p>\n<p>Find the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[0,0,1,0,0,0,0,1,0,0,0,0,0],</span><br><span class=\"line\"> [0,0,0,0,0,0,0,1,1,1,0,0,0],</span><br><span class=\"line\"> [0,1,1,0,1,0,0,0,0,0,0,0,0],</span><br><span class=\"line\"> [0,1,0,0,1,1,0,0,1,0,1,0,0],</span><br><span class=\"line\"> [0,1,0,0,1,1,0,0,1,1,1,0,0],</span><br><span class=\"line\"> [0,0,0,0,0,0,0,0,0,0,1,0,0],</span><br><span class=\"line\"> [0,0,0,0,0,0,0,1,1,1,0,0,0],</span><br><span class=\"line\"> [0,0,0,0,0,0,0,1,1,0,0,0,0]]</span><br></pre></td></tr></table></figure>\n<p>Given the above grid, return 6. Note the answer is not 11, because the island must be connected 4-directionally.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[0,0,0,0,0,0,0,0]]</span><br></pre></td></tr></table></figure>\n<p>Given the above grid, return 0.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>The length of each dimension in the given grid does not exceed 50.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxAreaOfIsland</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] grid)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; grid[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> count = bfs(grid, i, j);</span><br><span class=\"line\">                max = Math.max(count, max);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] grid, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = grid.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] directions = &#123;&#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">0</span>, -<span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, &#123;-<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;&#125;;</span><br><span class=\"line\">    Queue&lt;<span class=\"keyword\">int</span>[]&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    queue.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;i, j&#125;);</span><br><span class=\"line\">    grid[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] pos = queue.poll();</span><br><span class=\"line\">        count++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] direction : directions) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = direction[<span class=\"number\">0</span>] + pos[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> y = direction[<span class=\"number\">1</span>] + pos[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &gt;= <span class=\"number\">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class=\"number\">0</span> &amp;&amp; y &lt; m &amp;&amp; grid[x][y] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                queue.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;x, y&#125;);</span><br><span class=\"line\">                grid[x][y] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 921 - Count Univalue Subtrees","url":"http://yoursite.com/2019/04/26/LintCode-Problem-921-Count-Univalue-Subtrees/","content":"<p>Given a binary tree, count the number of uni-value subtrees.</p>\n<p>A Uni-value subtree means all nodes of the subtree have the same value.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input:  root = {5,1,5,5,5,#,5}</p>\n<p>Output: 4</p>\n<p>Explanation:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    5</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  1   5</span><br><span class=\"line\"> / \\   \\</span><br><span class=\"line\">5   5   5</span><br></pre></td></tr></table></figure>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input:  root = {1,3,2,4,5,#,6}</p>\n<p>Output: 3</p>\n<p>Explanation:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    1</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  3   2</span><br><span class=\"line\"> / \\   \\</span><br><span class=\"line\">4   5   6</span><br></pre></td></tr></table></figure>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">countUnivalSubtrees</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    countHelper(root, -<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">countHelper</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">int</span> parent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> left = countHelper(root.left, root.val);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> right = countHelper(root.right, root.val);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!left || !right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    count++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root.val == parent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 687 - Longest Univalue Path","url":"http://yoursite.com/2019/04/26/LeetCode-Problem-687-Longest-Univalue-Path/","content":"<p>Given a binary tree, find the length of the longest path where each node in the path has the same value. This path may or may not pass through the root.</p>\n<p>The length of path between two nodes is represented by the number of edges between them.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    5</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  4   5</span><br><span class=\"line\"> / \\   \\</span><br><span class=\"line\">1   1   5</span><br></pre></td></tr></table></figure>\n<p>Output: 2</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    1</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  4   5</span><br><span class=\"line\"> / \\   \\</span><br><span class=\"line\">4   4   5</span><br></pre></td></tr></table></figure>\n<p>Output: 2</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>The given binary tree has not more than 10000 nodes. The height of the tree is not more than 1000.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestUnivaluePath</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    pathHelper(root, -<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">pathHelper</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">int</span> parent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = pathHelper(root.left, root.val);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = pathHelper(root.right, root.val);</span><br><span class=\"line\"></span><br><span class=\"line\">    max = Math.max(max, left + right);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root.val == parent ? Math.max(left, right) + <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 463 - Island Perimeter","url":"http://yoursite.com/2019/04/25/LeetCode-Problem-463-Island-Perimeter/","content":"<p>You are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water.</p>\n<p>Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).</p>\n<p>The island doesn’t have “lakes” (water inside that isn’t connected to the water around the island). One cell is a square with side length 1. The grid is rectangular, width and height don’t exceed 100. Determine the perimeter of the island.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[0,1,0,0],</span><br><span class=\"line\"> [1,1,1,0],</span><br><span class=\"line\"> [0,1,0,0],</span><br><span class=\"line\"> [1,1,0,0]]</span><br></pre></td></tr></table></figure>\n<p>Output: 16</p>\n<p>Explanation: The perimeter is the 16 yellow stripes in the image below:</p>\n<p><a href=\"https://imgchr.com/i/Ee2GjJ\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/04/25/Ee2GjJ.png\" alt=\"Ee2GjJ.png\"></a></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">islandPerimeter</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] grid)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = grid.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            result += <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; grid[i][j - <span class=\"number\">1</span>] == <span class=\"number\">1</span>)</span><br><span class=\"line\">                result -= <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; grid[i - <span class=\"number\">1</span>][j] == <span class=\"number\">1</span>)</span><br><span class=\"line\">                result -= <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 733 - Flood Fill","url":"http://yoursite.com/2019/04/25/LeetCode-Problem-733-Flood-Fill/","content":"<p>An image is represented by a 2-D array of integers, each integer representing the pixel value of the image (from 0 to 65535).</p>\n<p>Given a coordinate (sr, sc) representing the starting pixel (row and column) of the flood fill, and a pixel value newColor, “flood fill” the image.</p>\n<p>To perform a “flood fill”, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color as the starting pixel), and so on. Replace the color of all of the aforementioned pixels with the newColor.</p>\n<p>At the end, return the modified image.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input:<br>image = [[1,1,1],[1,1,0],[1,0,1]]<br>sr = 1, sc = 1, newColor = 2</p>\n<p>Output: [[2,2,2],[2,2,0],[2,0,1]]</p>\n<p>Explanation:<br>From the center of the image (with position (sr, sc) = (1, 1)), all pixels connected<br>by a path of the same color as the starting pixel are colored with the new color.<br>Note the bottom corner is not colored 2, because it is not 4-directionally connected<br>to the starting pixel.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>The length of image and image[0] will be in the range [1, 50].</li>\n<li>The given starting pixel will satisfy 0 &lt;= sr &lt; image.length and 0 &lt;= sc &lt; image[0].length.</li>\n<li>The value of each color in image[i][j] and newColor will be an integer in [0, 65535].</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[][] floodFill(<span class=\"keyword\">int</span>[][] image, <span class=\"keyword\">int</span> sr, <span class=\"keyword\">int</span> sc, <span class=\"keyword\">int</span> newColor) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newColor == image[sr][sc])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> image;</span><br><span class=\"line\">    </span><br><span class=\"line\">    dfs(image, sr, sc, newColor, image[sr][sc]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> image;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] image, <span class=\"keyword\">int</span> sr, <span class=\"keyword\">int</span> sc, <span class=\"keyword\">int</span> newColor, <span class=\"keyword\">int</span> oldColor)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sr &gt;= <span class=\"number\">0</span> &amp;&amp; sr &lt;image.length &amp;&amp; sc &gt;= <span class=\"number\">0</span> &amp;&amp; sc &lt; image[<span class=\"number\">0</span>].length &amp;&amp; oldColor == image[sr][sc]) &#123;</span><br><span class=\"line\">        image[sr][sc] = newColor;</span><br><span class=\"line\"></span><br><span class=\"line\">        dfs(image, sr + <span class=\"number\">1</span>, sc, newColor, oldColor);</span><br><span class=\"line\">        dfs(image, sr - <span class=\"number\">1</span>, sc, newColor, oldColor);</span><br><span class=\"line\">        dfs(image, sr, sc + <span class=\"number\">1</span>, newColor, oldColor);</span><br><span class=\"line\">        dfs(image, sr, sc - <span class=\"number\">1</span>, newColor, oldColor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 437 - Path Sum III","url":"http://yoursite.com/2019/04/24/LeetCode-Problem-437-Path-Sum-III/","content":"<p>You are given a binary tree in which each node contains an integer value.</p>\n<p>Find the number of paths that sum to a given value.</p>\n<p>The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).</p>\n<p>The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      10</span><br><span class=\"line\">     /  \\</span><br><span class=\"line\">    5   -3</span><br><span class=\"line\">   / \\    \\</span><br><span class=\"line\">  3   2   11</span><br><span class=\"line\"> / \\   \\</span><br><span class=\"line\">3  -2   1</span><br></pre></td></tr></table></figure>\n<p>Return 3. The paths that sum to 8 are:</p>\n<ol>\n<li>5 -&gt; 3</li>\n<li>5 -&gt; 2 -&gt; 1</li>\n<li>-3 -&gt; 11</li>\n</ol>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// “当前节点值” + “某一中间路径和” = “目标值”</span></span><br><span class=\"line\"><span class=\"comment\">// “当前节点累加的根路径和” = “之前某一节点中累加的根路径和” + “某一中间路径和” + “当前节点值”</span></span><br><span class=\"line\"><span class=\"comment\">// 可得“当前节点累加的根路径和” - “之前某一节点中累加的根路径和” = “目标值”</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pathSum</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">int</span> sum)</span> </span>&#123;</span><br><span class=\"line\">    Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    traverse(root, map, sum, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">traverse</span><span class=\"params\">(TreeNode root, Map&lt;Integer, Integer&gt; map, <span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> currentSum)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    currentSum += root.val;</span><br><span class=\"line\">    count += map.getOrDefault(currentSum - target, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    map.put(currentSum, map.getOrDefault(currentSum, <span class=\"number\">0</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">    traverse(root.left, map, target, currentSum);</span><br><span class=\"line\">    traverse(root.right, map, target, currentSum);</span><br><span class=\"line\">    map.put(currentSum, map.get(currentSum) - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 113 - Path Sum II","url":"http://yoursite.com/2019/04/24/LeetCode-Problem-113-Path-Sum-II/","content":"<p>Given a binary tree and a sum, find all root-to-leaf paths where each path’s sum equals the given sum.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>A leaf is a node with no children.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Given the below binary tree and sum = 22,</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      5</span><br><span class=\"line\">     / \\</span><br><span class=\"line\">    4   8</span><br><span class=\"line\">   /   / \\</span><br><span class=\"line\">  11  13  4</span><br><span class=\"line\"> /  \\    / \\</span><br><span class=\"line\">7    2  5   1</span><br></pre></td></tr></table></figure>\n<p>Return:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">   [5,4,11,2],</span><br><span class=\"line\">   [5,8,4,5]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, <span class=\"keyword\">int</span> sum) &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    pathSumHelper(result, <span class=\"keyword\">new</span> ArrayList&lt;&gt;(), root, sum);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">pathSumHelper</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; path, TreeNode root, <span class=\"keyword\">int</span> sum)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    path.add(root.val);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.left == <span class=\"keyword\">null</span> &amp;&amp; root.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.val == sum)</span><br><span class=\"line\">            result.add(<span class=\"keyword\">new</span> ArrayList&lt;&gt;(path));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pathSumHelper(result, path, root.left, sum - root.val);</span><br><span class=\"line\">    pathSumHelper(result, path, root.right, sum - root.val);</span><br><span class=\"line\">    path.remove(path.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 112 - Path Sum","url":"http://yoursite.com/2019/04/24/LeetCode-Problem-112-Path-Sum/","content":"<p>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>A leaf is a node with no children.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Given the below binary tree and sum = 22,</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      5</span><br><span class=\"line\">     / \\</span><br><span class=\"line\">    4   8</span><br><span class=\"line\">   /   / \\</span><br><span class=\"line\">  11  13  4</span><br><span class=\"line\"> /  \\      \\</span><br><span class=\"line\">7    2      1</span><br></pre></td></tr></table></figure>\n<p>return true, as there exist a root-to-leaf path 5-&gt;4-&gt;11-&gt;2 which sum is 22.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathSum</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">int</span> sum)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.left == <span class=\"keyword\">null</span> &amp;&amp; root.right == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum == root.val;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasPathSum(root.left, sum - root.val) ||</span><br><span class=\"line\">            hasPathSum(root.right, sum - root.val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 64 - Minimum Path Sum","url":"http://yoursite.com/2019/04/24/LeetCode-Problem-64-Minimum-Path-Sum/","content":"<p>Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>You can only move either down or right at any point in time.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [1,3,1],</span><br><span class=\"line\">  [1,5,1],</span><br><span class=\"line\">  [4,2,1]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>Output: 7</p>\n<p>Explanation: Because the path 1→3→1→1→1 minimizes the sum.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minPathSum</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] grid)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = grid.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n][m];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = grid[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; m; i++)</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][i] = grid[<span class=\"number\">0</span>][i] + dp[<span class=\"number\">0</span>][i - <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = grid[i][<span class=\"number\">0</span>] + dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; m; j++)</span><br><span class=\"line\">            dp[i][j] = grid[i][j] + Math.min(dp[i - <span class=\"number\">1</span>][j], dp[i][j - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[n - <span class=\"number\">1</span>][m - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 77 - Combinations","url":"http://yoursite.com/2019/04/24/LeetCode-Problem-77-Combinations/","content":"<p>Given two integers n and k, return all possible combinations of k numbers out of 1 … n.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: n = 4, k = 2</p>\n<p>Output:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [2,4],</span><br><span class=\"line\">  [3,4],</span><br><span class=\"line\">  [2,3],</span><br><span class=\"line\">  [1,2],</span><br><span class=\"line\">  [1,3],</span><br><span class=\"line\">  [1,4],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; combine(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k) &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    combineHelper(result, <span class=\"keyword\">new</span> ArrayList&lt;&gt;(), n, k, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">combineHelper</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; combination, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> idx)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (combination.size() == k) &#123;</span><br><span class=\"line\">        result.add(<span class=\"keyword\">new</span> ArrayList&lt;&gt;(combination));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = idx; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        combination.add(i);</span><br><span class=\"line\">        combineHelper(result, combination, n, k, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        combination.remove(combination.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 717 - 1-bit and 2-bit Characters","url":"http://yoursite.com/2019/04/24/LeetCode-Problem-717-1-bit-and-2-bit-Characters/","content":"<p>We have two special characters. The first character can be represented by one bit 0. The second character can be represented by two bits (10 or 11).</p>\n<p>Now given a string represented by several bits. Return whether the last character must be a one-bit character or not. The given string will always end with a zero.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input:<br>bits = [1, 0, 0]</p>\n<p>Output: True</p>\n<p>Explanation:<br>The only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input:<br>bits = [1, 1, 1, 0]</p>\n<p>Output: False</p>\n<p>Explanation:<br>The only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>1 &lt;= len(bits) &lt;= 1000.</li>\n<li>bits[i] is always 0 or 1.</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOneBitCharacter</span><span class=\"params\">(<span class=\"keyword\">int</span>[] bits)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = bits.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; n - <span class=\"number\">1</span>)</span><br><span class=\"line\">        i += bits[i] + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> i == n - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 89 - Gray Code","url":"http://yoursite.com/2019/04/24/LeetCode-Problem-89-Gray-Code/","content":"<p>The gray code is a binary numeral system where two successive values differ in only one bit.</p>\n<p>Given a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: 2</p>\n<p>Output: [0,1,3,2]</p>\n<p>Explanation:<br>00 - 0<br>01 - 1<br>11 - 3<br>10 - 2</p>\n<p>For a given n, a gray code sequence may not be uniquely defined.<br>For example, [0,2,3,1] is also a valid gray code sequence.</p>\n<p>00 - 0<br>10 - 2<br>11 - 3<br>01 - 1</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: 0</p>\n<p>Output: [0]</p>\n<p>Explanation: We define the gray code sequence to begin with 0. A gray code sequence of n has size = 2^n, which for n = 0 the size is 2^0 = 1. Therefore, for n = 0 the gray code sequence is [0].</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">grayCode</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"number\">1</span> &lt;&lt; n); i++)</span><br><span class=\"line\">        result.add((i &gt;&gt; <span class=\"number\">1</span>) ^ i);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 49 - Group Anagrams","url":"http://yoursite.com/2019/04/23/LeetCode-Problem-49-Group-Anagrams/","content":"<p>Given an array of strings, group anagrams together.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”],</p>\n<p>Output:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"string\">\"ate\"</span>,<span class=\"string\">\"eat\"</span>,<span class=\"string\">\"tea\"</span>],</span><br><span class=\"line\">  [<span class=\"string\">\"nat\"</span>,<span class=\"string\">\"tan\"</span>],</span><br><span class=\"line\">  [<span class=\"string\">\"bat\"</span>]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>All inputs will be in lowercase.</li>\n<li>The order of your output does not matter.</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</span><br><span class=\"line\">    Map&lt;String, List&lt;String&gt;&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String str: strs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] dic = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> ch : str.toCharArray())</span><br><span class=\"line\">            dic[ch - <span class=\"string\">'a'</span>]++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; dic.length; i++)</span><br><span class=\"line\">            sb.append(dic[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">        map.putIfAbsent(sb.toString(), <span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">        map.get(sb.toString()).add(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;&gt;(map.values());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 43 - Multiply Strings","url":"http://yoursite.com/2019/04/23/LeetCode-Problem-43-Multiply-Strings/","content":"<p>Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: num1 = “2”, num2 = “3”</p>\n<p>Output: “6”</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: num1 = “123”, num2 = “456”</p>\n<p>Output: “56088”</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>The length of both num1 and num2 is &lt; 110.</li>\n<li>Both num1 and num2 contain only digits 0-9.</li>\n<li>Both num1 and num2 do not contain any leading zero, except the number 0 itself.</li>\n<li>You must not use any built-in BigInteger library or convert the inputs to integer directly.</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">multiply</span><span class=\"params\">(String num1, String num2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = num1.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = num2.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[m + n];</span><br><span class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = m - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> multiply = (num1.charAt(i) - <span class=\"string\">'0'</span>) * (num2.charAt(j) - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> sum = result[i + j + <span class=\"number\">1</span>] + multiply;</span><br><span class=\"line\">            result[i + j + <span class=\"number\">1</span>] = sum % <span class=\"number\">10</span>;</span><br><span class=\"line\">            result[i + j] += sum / <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> val : result) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sb.length() &gt; <span class=\"number\">0</span> || val != <span class=\"number\">0</span>)</span><br><span class=\"line\">            sb.append(val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.length() &gt; <span class=\"number\">0</span> ? sb.toString() : <span class=\"string\">\"0\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 415 - Add Strings","url":"http://yoursite.com/2019/04/23/LeetCode-Problem-415-Add-Strings/","content":"<p>Given two non-negative integers num1 and num2 represented as string, return the sum of num1 and num2.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>The length of both num1 and num2 is &lt; 5100.</li>\n<li>Both num1 and num2 contains only digits 0-9.</li>\n<li>Both num1 and num2 does not contain any leading zero.</li>\n<li>You must not use any built-in BigInteger library or convert the inputs to integer directly.</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addStrings</span><span class=\"params\">(String num1, String num2)</span> </span>&#123;</span><br><span class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = num1.length() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = num2.length() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> carry = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &gt;= <span class=\"number\">0</span> || j &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = i &gt;= <span class=\"number\">0</span> ? num1.charAt(i--) - <span class=\"string\">'0'</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b = j &gt;= <span class=\"number\">0</span> ? num2.charAt(j--) - <span class=\"string\">'0'</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = a + b + carry;</span><br><span class=\"line\"></span><br><span class=\"line\">        carry = sum / <span class=\"number\">10</span>;</span><br><span class=\"line\">        sb.append(sum % <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (carry != <span class=\"number\">0</span>)</span><br><span class=\"line\">        sb.append(carry);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.reverse().toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 48 - Rotate Image","url":"http://yoursite.com/2019/04/23/LeetCode-Problem-48-Rotate-Image/","content":"<p>You are given an n x n 2D matrix representing an image.</p>\n<p>Rotate the image by 90 degrees (clockwise).</p>\n<p>Note:</p>\n<p>You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Given input matrix = </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [1,2,3],</span><br><span class=\"line\">  [4,5,6],</span><br><span class=\"line\">  [7,8,9]</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<p>rotate the input matrix in-place such that it becomes:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [7,4,1],</span><br><span class=\"line\">  [8,5,2],</span><br><span class=\"line\">  [9,6,3]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Given input matrix =</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [ 5, 1, 9,11],</span><br><span class=\"line\">  [ 2, 4, 8,10],</span><br><span class=\"line\">  [13, 3, 6, 7],</span><br><span class=\"line\">  [15,14,12,16]</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<p>rotate the input matrix in-place such that it becomes:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [15,13, 2, 5],</span><br><span class=\"line\">  [14, 3, 4, 1],</span><br><span class=\"line\">  [12, 6, 8, 9],</span><br><span class=\"line\">  [16, 7,10,11]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = matrix.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> row = <span class=\"number\">0</span>; row &lt; n - <span class=\"number\">1</span>; row++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> col = <span class=\"number\">0</span>; col &lt; n - <span class=\"number\">1</span> - row; col++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = matrix[row][col];</span><br><span class=\"line\">            matrix[row][col] = matrix[n - <span class=\"number\">1</span> - col][n - <span class=\"number\">1</span> - row];</span><br><span class=\"line\">            matrix[n - <span class=\"number\">1</span> - col][n - <span class=\"number\">1</span> - row] = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n / <span class=\"number\">2</span> ; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = matrix[i][j];</span><br><span class=\"line\">            matrix[i][j] = matrix[n - <span class=\"number\">1</span> - i][j];</span><br><span class=\"line\">            matrix[n - <span class=\"number\">1</span> - i][j] = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 34 - Find First and Last Position of Element in Sorted Array","url":"http://yoursite.com/2019/04/22/LeetCode-Problem-34-Find-First-and-Last-Position-of-Element-in-Sorted-Array/","content":"<p>Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.</p>\n<p>Your algorithm’s runtime complexity must be in the order of O(log n).</p>\n<p>If the target is not found in the array, return [-1, -1].</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: nums = [5,7,7,8,8,10], target = 8</p>\n<p>Output: [3,4]</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: nums = [5,7,7,8,8,10], target = 6</p>\n<p>Output: [-1,-1]</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] searchRange(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] result = &#123;-<span class=\"number\">1</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || nums.length &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = binarySearch(nums, target, <span class=\"number\">0</span>, nums.length - <span class=\"number\">1</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[left] != target)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    result[<span class=\"number\">0</span>] = left;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = binarySearch(nums, target, left, nums.length, <span class=\"keyword\">false</span>) - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    result[<span class=\"number\">1</span>] = right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, <span class=\"keyword\">boolean</span> isLeft)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((isLeft &amp;&amp; nums[mid] &lt; target) || (!isLeft &amp;&amp; nums[mid] &lt;= target))</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            right = mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 95 - Unique Binary Search Trees II","url":"http://yoursite.com/2019/04/20/LeetCode-Problem-95-Unique-Binary-Search-Trees-II/","content":"<p>Given an integer n, generate all structurally unique BST’s (binary search trees) that store values 1 … n.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: 3</p>\n<p>Output:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [1,null,3,2],</span><br><span class=\"line\">  [3,2,null,1],</span><br><span class=\"line\">  [3,1,null,null,2],</span><br><span class=\"line\">  [2,1,3],</span><br><span class=\"line\">  [1,null,2,null,3]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>Explanation:<br>The above output corresponds to the 5 unique BST’s shown below:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1         3     3      2      1</span><br><span class=\"line\"> \\       /     /      / \\      \\</span><br><span class=\"line\">  3     2     1      1   3      2</span><br><span class=\"line\"> /     /       \\                 \\</span><br><span class=\"line\">2     1         2                 3</span><br></pre></td></tr></table></figure>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;TreeNode&gt; <span class=\"title\">generateTrees</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;   </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> generate(<span class=\"number\">1</span>, n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> List&lt;TreeNode&gt; <span class=\"title\">generate</span><span class=\"params\">(<span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;TreeNode&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt; end) &#123;</span><br><span class=\"line\">        result.add(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class=\"line\">        List&lt;TreeNode&gt; leftList = generate(start, i - <span class=\"number\">1</span>);</span><br><span class=\"line\">        List&lt;TreeNode&gt; rightList = generate(i + <span class=\"number\">1</span>, end);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (TreeNode left : leftList) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (TreeNode right : rightList) &#123;</span><br><span class=\"line\">                TreeNode root = <span class=\"keyword\">new</span> TreeNode(i);</span><br><span class=\"line\">                root.left = left;</span><br><span class=\"line\">                root.right = right;</span><br><span class=\"line\">                result.add(root);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 96 - Unique Binary Search Trees","url":"http://yoursite.com/2019/04/20/LeetCode-Problem-96-Unique-Binary-Search-Trees/","content":"<p>Given n, how many structurally unique BST’s (binary search trees) that store values 1 … n?</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: 3</p>\n<p>Output: 5</p>\n<p>Explanation:<br>Given n = 3, there are a total of 5 unique BST’s:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1         3     3      2      1</span><br><span class=\"line\"> \\       /     /      / \\      \\</span><br><span class=\"line\">  3     2     1      1   3      2</span><br><span class=\"line\"> /     /       \\                 \\</span><br><span class=\"line\">2     1         2                 3</span><br></pre></td></tr></table></figure>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">numTrees</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++)</span><br><span class=\"line\">            dp[i] += dp[j] * dp[i - j - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 119 - Pascal's Triangle II","url":"http://yoursite.com/2019/04/19/LeetCode-Problem-119-Pascal-s-Triangle-II/","content":"<p>Given a non-negative index k where k ≤ 33, return the kth index row of the Pascal’s triangle.</p>\n<p>Note that the row index starts from 0.</p>\n<p><a href=\"https://imgchr.com/i/EpVNMq\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/04/18/EpVNMq.gif\" alt=\"EpVNMq.gif\"></a></p>\n<p>In Pascal’s triangle, each number is the sum of the two numbers directly above it.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: 3</p>\n<p>Output: [1,3,3,1]</p>\n<h2 id=\"Follow-up\"><a href=\"#Follow-up\" class=\"headerlink\" title=\"Follow up\"></a>Follow up</h2><p>Could you optimize your algorithm to use only O(k) extra space?</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">getRow</span><span class=\"params\">(<span class=\"keyword\">int</span> rowIndex)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; triangle = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>; idx &lt;= rowIndex; idx++) &#123;</span><br><span class=\"line\">        triangle.add(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num = idx - <span class=\"number\">1</span>; num &gt; <span class=\"number\">0</span>; num--)</span><br><span class=\"line\">            triangle.set(num, triangle.get(num) + triangle.get(num - <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> triangle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 118 - Pascal's Triangle","url":"http://yoursite.com/2019/04/19/LeetCode-Problem-118-Pascal-s-Triangle/","content":"<p>Given a non-negative integer numRows, generate the first numRows of Pascal’s triangle.</p>\n<p><a href=\"https://imgchr.com/i/EpVNMq\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/04/18/EpVNMq.gif\" alt=\"EpVNMq.gif\"></a></p>\n<p>In Pascal’s triangle, each number is the sum of the two numbers directly above it.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: 5</p>\n<p>Output:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">     [1],</span><br><span class=\"line\">    [1,1],</span><br><span class=\"line\">   [1,2,1],</span><br><span class=\"line\">  [1,3,3,1],</span><br><span class=\"line\"> [1,4,6,4,1]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; generate(<span class=\"keyword\">int</span> numRows) &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; triangle = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numRows == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> triangle;</span><br><span class=\"line\">    </span><br><span class=\"line\">    triangle.add(<span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">    triangle.get(<span class=\"number\">0</span>).add(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num = <span class=\"number\">1</span>; num &lt; numRows; num++) &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; row = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        List&lt;Integer&gt; prev = triangle.get(num - <span class=\"number\">1</span>);</span><br><span class=\"line\">        row.add(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; num; i++)</span><br><span class=\"line\">            row.add(prev.get(i - <span class=\"number\">1</span>) + prev.get(i));</span><br><span class=\"line\"></span><br><span class=\"line\">        row.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        triangle.add(row);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> triangle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 900 - Closest Binary Search Tree Value","url":"http://yoursite.com/2019/04/18/LintCode-Problem-900-Closest-Binary-Search-Tree-Value/","content":"<p>Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>Given target value is a floating point.</li>\n<li>You are guaranteed to have only one unique value in the BST that is closest to the target.</li>\n</ul>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: root = {5,4,9,2,#,8,10} and target = 6.124780</p>\n<p>Output: 5</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: root = {3,2,4,1} and target = 4.142857</p>\n<p>Output: 4</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">closestValue</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">double</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val &gt; target)</span><br><span class=\"line\">        val = closestValue(root.left, target);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        val = closestValue(root.right, target);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.abs(root.val - target) &lt; Math.abs(val - target) ? root.val : val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 700 - Search in a Binary Search Tree","url":"http://yoursite.com/2019/04/18/LeetCode-Problem-700-Search-in-a-Binary-Search-Tree/","content":"<p>Given the root node of a binary search tree (BST) and a value. You need to find the node in the BST that the node’s value equals the given value. Return the subtree rooted with that node. If such node doesn’t exist, you should return NULL.</p>\n<p>For example, </p>\n<p>Given the tree:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    4</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  2   7</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">1   3</span><br></pre></td></tr></table></figure>\n<p>And the value to search: 2</p>\n<p>You should return this subtree:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  2     </span><br><span class=\"line\"> / \\   </span><br><span class=\"line\">1   3</span><br></pre></td></tr></table></figure>\n<p>In the example above, if we want to search the value 5, since there is no node with value 5, we should return NULL.</p>\n<p>Note that an empty tree is represented by NULL, therefore you would see the expected output (serialized tree format) as [], not null.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">searchBST</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val == val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val &lt; val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> searchBST(root.right, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> searchBST(root.left, val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 701 - Insert into a Binary Search Tree","url":"http://yoursite.com/2019/04/18/LeetCode-Problem-701-Insert-into-a-Binary-Search-Tree/","content":"<p>Given the root node of a binary search tree (BST) and a value to be inserted into the tree, insert the value into the BST. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.</p>\n<p>Note that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.</p>\n<p>For example, </p>\n<p>Given the tree:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    4</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  2   7</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">1   3</span><br></pre></td></tr></table></figure>\n<p>And the value to insert: 5</p>\n<p>You can return this binary search tree:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     4</span><br><span class=\"line\">   /   \\</span><br><span class=\"line\">  2     7</span><br><span class=\"line\"> / \\   /</span><br><span class=\"line\">1   3 5</span><br></pre></td></tr></table></figure>\n<p>This tree is also valid:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     5</span><br><span class=\"line\">   /   \\</span><br><span class=\"line\">  2     7</span><br><span class=\"line\"> / \\   </span><br><span class=\"line\">1   3</span><br><span class=\"line\">     \\</span><br><span class=\"line\">      4</span><br></pre></td></tr></table></figure>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">insertIntoBST</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TreeNode(val);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val &lt; val)</span><br><span class=\"line\">        root.right = insertIntoBST(root.right, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        root.left = insertIntoBST(root.left, val);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 168 - Excel Sheet Column Title","url":"http://yoursite.com/2019/04/18/LeetCode-Problem-168-Excel-Sheet-Column-Title/","content":"<p>Given a positive integer, return its corresponding column title as appear in an Excel sheet.</p>\n<p>For example:</p>\n<pre><code>1 -&gt; A\n2 -&gt; B\n3 -&gt; C\n...\n26 -&gt; Z\n27 -&gt; AA\n28 -&gt; AB \n...\n</code></pre><h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: 1</p>\n<p>Output: “A”</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: 28</p>\n<p>Output: “AB”</p>\n<h3 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h3><p>Input: 701</p>\n<p>Output: “ZY”</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">convertToTitle</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        sb.append((<span class=\"keyword\">char</span>) (--n % <span class=\"number\">26</span> + <span class=\"string\">'A'</span>));</span><br><span class=\"line\">        n /= <span class=\"number\">26</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.reverse().toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 171 - Excel Sheet Column Number","url":"http://yoursite.com/2019/04/18/LeetCode-Problem-171-Excel-Sheet-Column-Number/","content":"<p>Given a column title as appear in an Excel sheet, return its corresponding column number.</p>\n<p>For example:</p>\n<pre><code>A -&gt; 1\nB -&gt; 2\nC -&gt; 3\n...\nZ -&gt; 26\nAA -&gt; 27\nAB -&gt; 28 \n...\n</code></pre><h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: “A”</p>\n<p>Output: 1</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: “AB”</p>\n<p>Output: 28</p>\n<h3 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h3><p>Input: “ZY”</p>\n<p>Output: 701</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">titleToNumber</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = s.length() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> ch : s.toCharArray())</span><br><span class=\"line\">        sum += (ch - <span class=\"string\">'A'</span> + <span class=\"number\">1</span>) * Math.pow(<span class=\"number\">26</span>, n--);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 127 - Word Ladder","url":"http://yoursite.com/2019/04/18/LeetCode-Problem-127-Word-Ladder/","content":"<p>Given two words (beginWord and endWord), and a dictionary’s word list, find the length of shortest transformation sequence from beginWord to endWord, such that:</p>\n<ol>\n<li>Only one letter can be changed at a time.</li>\n<li>Each transformed word must exist in the word list. Note that beginWord is not a transformed word.</li>\n</ol>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>Return 0 if there is no such transformation sequence.</li>\n<li>All words have the same length.</li>\n<li>All words contain only lowercase alphabetic characters.</li>\n<li>You may assume no duplicates in the word list.</li>\n<li>You may assume beginWord and endWord are non-empty and are not the same.</li>\n</ul>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input:<br>beginWord = “hit”,<br>endWord = “cog”,<br>wordList = [“hot”,”dot”,”dog”,”lot”,”log”,”cog”]</p>\n<p>Output: 5</p>\n<p>Explanation: As one shortest transformation is “hit” -&gt; “hot” -&gt; “dot” -&gt; “dog” -&gt; “cog”,<br>return its length 5.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input:<br>beginWord = “hit”<br>endWord = “cog”<br>wordList = [“hot”,”dot”,”dog”,”lot”,”log”]</p>\n<p>Output: 0</p>\n<p>Explanation: The endWord “cog” is not in wordList, therefore no possible transformation.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">ladderLength</span><span class=\"params\">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">    Set&lt;String&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">    Queue&lt;String&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    queue.offer(beginWord);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String word : wordList)</span><br><span class=\"line\">        set.add(word);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = queue.size();</span><br><span class=\"line\">        count++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            String word = queue.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>; idx &lt; word.length(); idx++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span>[] newWord = word.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> ch = <span class=\"string\">'a'</span>; ch &lt;= <span class=\"string\">'z'</span>; ch++) &#123;</span><br><span class=\"line\">                    newWord[idx] = ch;</span><br><span class=\"line\">                    String str = String.valueOf(newWord);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (set.contains(str)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (endWord.equals(str))</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">                        queue.offer(str);</span><br><span class=\"line\">                        set.remove(str);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 79 - Word Search","url":"http://yoursite.com/2019/04/18/LeetCode-Problem-79-Word-Search/","content":"<p>Given a 2D board and a word, find if the word exists in the grid.</p>\n<p>The word can be constructed from letters of sequentially adjacent cell, where “adjacent” cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">board =</span><br><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>,<span class=\"string\">'E'</span>],</span><br><span class=\"line\">  [<span class=\"string\">'S'</span>,<span class=\"string\">'F'</span>,<span class=\"string\">'C'</span>,<span class=\"string\">'S'</span>],</span><br><span class=\"line\">  [<span class=\"string\">'A'</span>,<span class=\"string\">'D'</span>,<span class=\"string\">'E'</span>,<span class=\"string\">'E'</span>]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>Given word = “ABCCED”, return true.<br>Given word = “SEE”, return true.<br>Given word = “ABCB”, return false.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">exist</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = board.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = board[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[][] visited = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[n][m];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (search(board, visited, word, <span class=\"number\">0</span>, i, j, n, m))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] board, <span class=\"keyword\">boolean</span>[][] visited, String word, <span class=\"keyword\">int</span> idx, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (idx == word.length())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span> || x &gt;= n || y &lt; <span class=\"number\">0</span> || y &gt;= m || visited[x][y] || board[x][y] != word.charAt(idx))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    visited[x][y] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> exist = search(board, visited, word, idx + <span class=\"number\">1</span>, x + <span class=\"number\">1</span>, y, n, m) ||</span><br><span class=\"line\">                    search(board, visited, word, idx + <span class=\"number\">1</span>, x - <span class=\"number\">1</span>, y, n, m) ||</span><br><span class=\"line\">                    search(board, visited, word, idx + <span class=\"number\">1</span>, x, y + <span class=\"number\">1</span>, n, m) ||</span><br><span class=\"line\">                    search(board, visited, word, idx + <span class=\"number\">1</span>, x, y - <span class=\"number\">1</span>, n, m);</span><br><span class=\"line\"></span><br><span class=\"line\">    visited[x][y] = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> exist;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 860 - Number of Distinct Islands","url":"http://yoursite.com/2019/04/17/LintCode-Problem-860-Number-of-Distinct-Islands/","content":"<p>Given a non-empty 2D array grid of 0’s and 1’s, an island is a group of 1’s (representing land) connected 4-directionally (horizontal or vertical). You may assume all four edges of the grid are surrounded by water.</p>\n<p>Count the number of distinct islands. An island is considered to be the same as another if and only if one island has the same shape as another island (and not rotated or reflected).</p>\n<p>Notice that:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<p>and</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 1</span><br><span class=\"line\">11</span><br></pre></td></tr></table></figure>\n<p>are considered different island, because we do not consider reflection / rotation.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>The length of each dimension in the given grid does not exceed 50.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [1,1,0,0,1],</span><br><span class=\"line\">  [1,0,0,0,0],</span><br><span class=\"line\">  [1,1,0,0,1],</span><br><span class=\"line\">  [0,1,0,1,1]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>Output: 3</p>\n<p>Explanation:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11   1    1</span><br><span class=\"line\">1        11   </span><br><span class=\"line\">11</span><br><span class=\"line\"> 1</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [1,1,0,0,0],</span><br><span class=\"line\">  [1,1,0,0,0],</span><br><span class=\"line\">  [0,0,0,1,1],</span><br><span class=\"line\">  [0,0,0,1,1]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>Output: 1</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">numberofDistinctIslands</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] grid)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = grid.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[][] visit = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[n][m];</span><br><span class=\"line\">    Set&lt;List&lt;List&lt;Integer&gt;&gt;&gt; count = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"number\">1</span> &amp;&amp; !visit[i][j]) &#123;</span><br><span class=\"line\">                List&lt;List&lt;Integer&gt;&gt; island = bfs(grid, visit, i, j);</span><br><span class=\"line\">                count.add(island);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count.size();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;List&lt;Integer&gt;&gt; bfs(<span class=\"keyword\">int</span>[][] grid, <span class=\"keyword\">boolean</span>[][] visit, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = grid.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] directions = &#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, &#123;-<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">0</span>, -<span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; island = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    Queue&lt;<span class=\"keyword\">int</span>[]&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    queue.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;i, j&#125;);</span><br><span class=\"line\">    visit[i][j] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] pos = queue.poll();</span><br><span class=\"line\">        List&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        list.add(pos[<span class=\"number\">0</span>] - i);</span><br><span class=\"line\">        list.add(pos[<span class=\"number\">1</span>] - j);</span><br><span class=\"line\">        island.add(list);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] direction : directions) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = pos[<span class=\"number\">0</span>] + direction[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> y = pos[<span class=\"number\">1</span>] + direction[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &gt;= <span class=\"number\">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class=\"number\">0</span> &amp;&amp; y &lt; m &amp;&amp; grid[x][y] == <span class=\"number\">1</span> &amp;&amp; !visit[x][y]) &#123;</span><br><span class=\"line\">                queue.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;x, y&#125;);</span><br><span class=\"line\">                visit[x][y] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> island;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 1017 - Similar RGB Color","url":"http://yoursite.com/2019/04/16/LintCode-Problem-1017-Similar-RGB-Color/","content":"<p>In the following, every capital letter represents some hexadecimal digit from 0 to f.</p>\n<p>The red-green-blue color “#AABBCC” can be written as “#ABC” in shorthand. For example, “#15c” is shorthand for the color “#1155cc”.</p>\n<p>Now, say the similarity between two colors “#ABCDEF” and “#UVWXYZ” is -(AB - UV)^2 - (CD - WX)^2 - (EF - YZ)^2.</p>\n<p>Given the color “#ABCDEF”, return a 7 character color that is most similar to #ABCDEF, and has a shorthand (that is, it can be represented as some “#XYZ”)</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>color is a string of length 7.</li>\n<li>color is a valid RGB color: for i &gt; 0, color[i] is a hexadecimal digit from 0 to f</li>\n<li>Any answer which has the same (highest) similarity as the best answer will be accepted.</li>\n<li>All inputs and outputs should use lowercase letters, and the output is 7 characters.</li>\n</ul>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: color = “#09f166”</p>\n<p>Output: “#11ee66”</p>\n<p>Explanation:<br>The similarity is -(0x09 - 0x11)^2 -(0xf1 - 0xee)^2 - (0x66 - 0x66)^2 = -64 -9 -0 = -73.<br>This is the highest among any shorthand color.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: color = “#010000”</p>\n<p>Output: “#000000”</p>\n<p>Explanation:<br>The similarity is -(0x01 - 0x10)^2 -(0x00 - 0x00)^2 - (0x00 - 0x00)^2 = -1 -0 -0 = -1.<br>This is the highest among any shorthand color.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">similarRGB</span><span class=\"params\">(String color)</span> </span>&#123;</span><br><span class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"#\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; color.length(); i += <span class=\"number\">2</span>)</span><br><span class=\"line\">        sb.append(helper(color.substring(i, i + <span class=\"number\">2</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">helper</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = Integer.parseInt(str, <span class=\"number\">16</span>);</span><br><span class=\"line\">    num = num / <span class=\"number\">17</span> + (num % <span class=\"number\">17</span> &gt; <span class=\"number\">8</span> ? <span class=\"number\">1</span> : <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> String.format(<span class=\"string\">\"%02x\"</span>, num * <span class=\"number\">17</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 75 - Sort Colors","url":"http://yoursite.com/2019/04/15/LeetCode-Problem-75-Sort-Colors/","content":"<p>Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue.</p>\n<p>Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>You are not suppose to use the library’s sort function for this problem.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: [2,0,2,1,1,0]</p>\n<p>Output: [0,0,1,1,2,2]</p>\n<h2 id=\"Follow-up\"><a href=\"#Follow-up\" class=\"headerlink\" title=\"Follow up\"></a>Follow up</h2><ul>\n<li>A rather straight forward solution is a two-pass algorithm using counting sort.<br>First, iterate the array counting number of 0’s, 1’s, and 2’s, then overwrite array with total number of 0’s, then 1’s and followed by 2’s.</li>\n<li>Could you come up with a one-pass algorithm using only constant space?</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sortColors</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lo = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> hi = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= hi; ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] == <span class=\"number\">0</span>)</span><br><span class=\"line\">            swap(nums, i++, lo++);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[i] == <span class=\"number\">2</span>)</span><br><span class=\"line\">            swap(nums, i, hi--);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = nums[i];</span><br><span class=\"line\">    nums[i] = nums[j];</span><br><span class=\"line\">    nums[j] = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 922 - Sort Array By Parity II","url":"http://yoursite.com/2019/04/13/LeetCode-Problem-922-Sort-Array-By-Parity-II/","content":"<p>Given an array A of non-negative integers, half of the integers in A are odd, and half of the integers are even.</p>\n<p>Sort the array so that whenever A[i] is odd, i is odd; and whenever A[i] is even, i is even.</p>\n<p>You may return any answer array that satisfies this condition.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: [4,2,5,7]</p>\n<p>Output: [4,5,2,7]</p>\n<p>Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>2 &lt;= A.length &lt;= 20000</li>\n<li>A.length % 2 == 0</li>\n<li>0 &lt;= A[i] &lt;= 1000</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] sortArrayByParityII(<span class=\"keyword\">int</span>[] A) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = A.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; left &lt; A.length - <span class=\"number\">1</span> ; left += <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[left] % <span class=\"number\">2</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (right &gt; <span class=\"number\">0</span> &amp;&amp; A[right] % <span class=\"number\">2</span> != <span class=\"number\">0</span>)</span><br><span class=\"line\">                right -= <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = A[left];</span><br><span class=\"line\">            A[left] = A[right];</span><br><span class=\"line\">            A[right] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> A;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 324 - Wiggle Sort II","url":"http://yoursite.com/2019/04/10/LeetCode-Problem-324-Wiggle-Sort-II/","content":"<p>Given an unsorted array nums, reorder it such that nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]….</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: nums = [1, 5, 1, 1, 6, 4]</p>\n<p>Output: One possible answer is [1, 4, 1, 5, 1, 6].</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: nums = [1, 3, 2, 2, 3, 1]</p>\n<p>Output: One possible answer is [2, 3, 1, 3, 1, 2].</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>You may assume all input has valid answer.</p>\n<h2 id=\"Follow-Up\"><a href=\"#Follow-Up\" class=\"headerlink\" title=\"Follow Up\"></a>Follow Up</h2><p>Can you do it in O(n) time and/or in-place with O(1) extra space?</p>\n<h2 id=\"O-nlogn-runtime-O-n-space\"><a href=\"#O-nlogn-runtime-O-n-space\" class=\"headerlink\" title=\"O(nlogn) runtime, O(n) space\"></a>O(nlogn) runtime, O(n) space</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">wiggleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] copy = nums.clone();</span><br><span class=\"line\">    Arrays.sort(copy);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = (copy.length - <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = copy.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &gt;= <span class=\"number\">0</span> &amp;&amp; right &gt;= (copy.length + <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        nums[idx++] = copy[left--];</span><br><span class=\"line\">        nums[idx++] = copy[right--];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left == <span class=\"number\">0</span>)</span><br><span class=\"line\">        nums[idx] = copy[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"O-n-runtime-O-1-space\"><a href=\"#O-n-runtime-O-1-space\" class=\"headerlink\" title=\"O(n) runtime, O(1) space\"></a>O(n) runtime, O(1) space</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">wiggleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lo = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> hi = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> midNum = partition(nums, lo, hi, (n - <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= hi;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[getMapIdx(i, n)] &gt; midNum)</span><br><span class=\"line\">            swap(nums, getMapIdx(i++, n) , getMapIdx(lo++, n));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[getMapIdx(i, n)] &lt; midNum)</span><br><span class=\"line\">            swap(nums, getMapIdx(i, n), getMapIdx(hi--, n));</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = nums[i];</span><br><span class=\"line\">    nums[i] = nums[j];</span><br><span class=\"line\">    nums[j] = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getMapIdx</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"number\">2</span> * i + <span class=\"number\">1</span>) % (n | <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = lo;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = hi;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = nums[lo];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[right] &gt;= num)</span><br><span class=\"line\">            right--;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[left] &lt;= num)</span><br><span class=\"line\">            left++;</span><br><span class=\"line\"></span><br><span class=\"line\">        swap(nums, left, right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    swap(nums, lo, left);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left - lo == k)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (left - lo &lt; k)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> partition(nums, left + <span class=\"number\">1</span>, hi, k - (left - lo + <span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> partition(nums, lo, right - <span class=\"number\">1</span>, k);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 508 - Wiggle Sort","url":"http://yoursite.com/2019/04/10/LintCode-Problem-508-Wiggle-Sort/","content":"<p>Given an unsorted array nums, reorder it in-place such that</p>\n<p>nums[0] &lt;= nums[1] &gt;= nums[2] &lt;= nums[3]….</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>Please complete the problem in-place.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: [3, 5, 2, 1, 6, 4]</p>\n<p>Output: [1, 6, 2, 5, 3, 4]</p>\n<p>Explanation: This question may have multiple answers, and [2, 6, 1, 5, 3, 4] is also ok.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: [1, 2, 3, 4]</p>\n<p>Output: [2, 1, 4, 3]</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假如原来是 nums[i - 2] &lt;= nums[i - 1]，那么 nums[i - 1] 和 nums[i] 交换的条件是，nums[i - 1] &lt;= nums[i]。</span></span><br><span class=\"line\"><span class=\"comment\">// 推导出此时 nums[i] &gt;= nums[i - 2]，因此交换之后，不会让 nums[i] 和 nums[i - 2] 的大小关系出现变化。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">wiggleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length - <span class=\"number\">1</span> ; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((i % <span class=\"number\">2</span> == <span class=\"number\">0</span> &amp;&amp; nums[i] &gt; nums[i + <span class=\"number\">1</span>]) || (i % <span class=\"number\">2</span> != <span class=\"number\">0</span> &amp;&amp; nums[i] &lt; nums[i + <span class=\"number\">1</span>]))</span><br><span class=\"line\">            swap(nums, i, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = nums[i];</span><br><span class=\"line\">    nums[i] = nums[j];</span><br><span class=\"line\">    nums[j] = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 732 - My Calendar III","url":"http://yoursite.com/2019/04/10/LeetCode-Problem-732-My-Calendar-III/","content":"<p>Implement a MyCalendarThree class to store your events. A new event can always be added.</p>\n<p>Your class will have one method, book(int start, int end). Formally, this represents a booking on the half open interval [start, end), the range of real numbers x such that start &lt;= x &lt; end.</p>\n<p>A K-booking happens when K events have some non-empty intersection (ie., there is some time that is common to all K events.)</p>\n<p>For each call to the method MyCalendar.book, return an integer K representing the largest integer such that there exists a K-booking in the calendar.</p>\n<p>Your class will be called like this: MyCalendarThree cal = new MyCalendarThree(); MyCalendarThree.book(start, end)</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyCalendarThree();</span><br><span class=\"line\">MyCalendarThree.book(10, 20); // returns 1</span><br><span class=\"line\">MyCalendarThree.book(50, 60); // returns 1</span><br><span class=\"line\">MyCalendarThree.book(10, 40); // returns 2</span><br><span class=\"line\">MyCalendarThree.book(5, 15); // returns 3</span><br><span class=\"line\">MyCalendarThree.book(5, 10); // returns 3</span><br><span class=\"line\">MyCalendarThree.book(25, 55); // returns 3</span><br></pre></td></tr></table></figure>\n<p>Explanation:<br>The first two events can be booked and are disjoint, so the maximum K-booking is a 1-booking.<br>The third event [10, 40) intersects the first event, and the maximum K-booking is a 2-booking.<br>The remaining events cause the maximum K-booking to be only a 3-booking.<br>Note that the last event locally causes a 2-booking, but the answer is still 3 because<br>eg. [10, 20), [10, 40), and [5, 15) are still triple booked.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>The number of calls to MyCalendarThree.book per test case will be at most 400.</li>\n<li>In calls to MyCalendarThree.book(start, end), start and end are integers in the range [0, 10^9].</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> TreeMap&lt;Integer, Integer&gt; map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyCalendarThree</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    map = <span class=\"keyword\">new</span> TreeMap&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">book</span><span class=\"params\">(<span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    map.put(start, map.getOrDefault(start, <span class=\"number\">0</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">    map.put(end, map.getOrDefault(end, <span class=\"number\">0</span>) - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> key : map.keySet()) &#123;</span><br><span class=\"line\">        count += map.get(key);</span><br><span class=\"line\">        max = count &gt; max ? count : max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 731 - My Calendar II","url":"http://yoursite.com/2019/04/08/LeetCode-Problem-731-My-Calendar-II/","content":"<p>Implement a MyCalendarTwo class to store your events. A new event can be added if adding the event will not cause a triple booking.</p>\n<p>Your class will have one method, book(int start, int end). Formally, this represents a booking on the half open interval [start, end), the range of real numbers x such that start &lt;= x &lt; end.</p>\n<p>A triple booking happens when three events have some non-empty intersection (ie., there is some time that is common to all 3 events.)</p>\n<p>For each call to the method MyCalendar.book, return true if the event can be added to the calendar successfully without causing a triple booking. Otherwise, return false and do not add the event to the calendar.</p>\n<p>Your class will be called like this: MyCalendar cal = new MyCalendar(); MyCalendar.book(start, end)</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyCalendar();</span><br><span class=\"line\">MyCalendar.book(10, 20); // returns <span class=\"literal\">true</span></span><br><span class=\"line\">MyCalendar.book(50, 60); // returns <span class=\"literal\">true</span></span><br><span class=\"line\">MyCalendar.book(10, 40); // returns <span class=\"literal\">true</span></span><br><span class=\"line\">MyCalendar.book(5, 15); // returns <span class=\"literal\">false</span></span><br><span class=\"line\">MyCalendar.book(5, 10); // returns <span class=\"literal\">true</span></span><br><span class=\"line\">MyCalendar.book(25, 55); // returns <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>Explanation:<br>The first two events can be booked.  The third event can be double booked.<br>The fourth event (5, 15) can’t be booked, because it would result in a triple booking.<br>The fifth event (5, 10) can be booked, as it does not use time 10 which is already double booked.<br>The sixth event (25, 55) can be booked, as the time in [25, 40) will be double booked with the third event;<br>the time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>The number of calls to MyCalendar.book per test case will be at most 1000.</li>\n<li>In calls to MyCalendar.book(start, end), start and end are integers in the range [0, 10^9].</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> List&lt;<span class=\"keyword\">int</span>[]&gt; singles;</span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;<span class=\"keyword\">int</span>[]&gt; doubles;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyCalendarTwo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    singles = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    doubles = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">book</span><span class=\"params\">(<span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] d : doubles) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (end &gt; d[<span class=\"number\">0</span>] &amp;&amp; start &lt; d[<span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] s : singles) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (end &gt; s[<span class=\"number\">0</span>] &amp;&amp; start &lt; s[<span class=\"number\">1</span>])</span><br><span class=\"line\">            doubles.add(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;Math.max(start, s[<span class=\"number\">0</span>]), Math.min(end, s[<span class=\"number\">1</span>])&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    singles.add(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;start, end&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"TreeMap\"><a href=\"#TreeMap\" class=\"headerlink\" title=\"TreeMap\"></a>TreeMap</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> TreeMap&lt;Integer, Integer&gt; map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyCalendarTwo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    map = <span class=\"keyword\">new</span> TreeMap&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">book</span><span class=\"params\">(<span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    map.put(start, map.getOrDefault(start, <span class=\"number\">0</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">    map.put(end, map.getOrDefault(end, <span class=\"number\">0</span>) - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> key : map.keySet()) &#123;</span><br><span class=\"line\">        count += map.get(key);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            map.put(start, map.get(start) - <span class=\"number\">1</span>);</span><br><span class=\"line\">            map.put(end, map.get(end) + <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 729 - My Calendar I","url":"http://yoursite.com/2019/04/08/LeetCode-Problem-729-My-Calendar-I/","content":"<p>Implement a MyCalendar class to store your events. A new event can be added if adding the event will not cause a double booking.</p>\n<p>Your class will have the method, book(int start, int end). Formally, this represents a booking on the half open interval [start, end), the range of real numbers x such that start &lt;= x &lt; end.</p>\n<p>A double booking happens when two events have some non-empty intersection (ie., there is some time that is common to both events.)</p>\n<p>For each call to the method MyCalendar.book, return true if the event can be added to the calendar successfully without causing a double booking. Otherwise, return false and do not add the event to the calendar.</p>\n<p>Your class will be called like this: MyCalendar cal = new MyCalendar(); MyCalendar.book(start, end)</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyCalendar();</span><br><span class=\"line\">MyCalendar.book(10, 20); // returns <span class=\"literal\">true</span></span><br><span class=\"line\">MyCalendar.book(15, 25); // returns <span class=\"literal\">false</span></span><br><span class=\"line\">MyCalendar.book(20, 30); // returns <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>Explanation:<br>The first event can be booked.  The second can’t because time 15 is already booked by another event.<br>The third event can be booked, as the first event takes every time less than 20, but not including 20.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>The number of calls to MyCalendar.book per test case will be at most 1000.</li>\n<li>In calls to MyCalendar.book(start, end), start and end are integers in the range [0, 10^9].</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> List&lt;<span class=\"keyword\">int</span>[]&gt; list;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyCalendar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">book</span><span class=\"params\">(<span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] event : list) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Math.max(start, event[<span class=\"number\">0</span>]) &lt; Math.min(end, event[<span class=\"number\">1</span>]))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    list.add(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;start, end&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"TreeMap\"><a href=\"#TreeMap\" class=\"headerlink\" title=\"TreeMap\"></a>TreeMap</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> TreeMap&lt;Integer, Integer&gt; map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyCalendar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    map = <span class=\"keyword\">new</span> TreeMap&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">book</span><span class=\"params\">(<span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    Integer prev = map.floorKey(start);</span><br><span class=\"line\">    Integer next = map.ceilingKey(start);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((prev == <span class=\"keyword\">null</span> || map.get(prev) &lt;= start) &amp;&amp; (next == <span class=\"keyword\">null</span> || end &lt;= next)) &#123;</span><br><span class=\"line\">        map.put(start, end);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 849 - Basic Calculator III","url":"http://yoursite.com/2019/04/08/LintCode-Problem-849-Basic-Calculator-III/","content":"<p>Implement a basic calculator to evaluate a simple expression string.</p>\n<p>The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .</p>\n<p>The expression string contains only non-negative integers, +, -, *, / operators , open ( and closing parentheses ) and empty spaces . The integer division should truncate toward zero.</p>\n<p>You may assume that the given expression is always valid. All intermediate results will be in the range of [-2147483648, 2147483647]</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"1 + 1\"</span> = 2</span><br><span class=\"line\"><span class=\"string\">\" 6-4 / 2 \"</span> = 4</span><br><span class=\"line\"><span class=\"string\">\"2*(5+5*2)/3+(6/2+8)\"</span> = 21</span><br><span class=\"line\"><span class=\"string\">\"(2+6* 3+5- (3*14/7+2)*5)+3\"</span>=-12</span><br></pre></td></tr></table></figure>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> curResult = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> lastSign = <span class=\"string\">'+'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> ch = s.charAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Character.isDigit(ch)) &#123;</span><br><span class=\"line\">            num = <span class=\"number\">10</span> * num + (ch - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">'('</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = i;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s.charAt(i) == <span class=\"string\">'('</span>)</span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s.charAt(i) == <span class=\"string\">')'</span>)</span><br><span class=\"line\">                    count--;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            num = calculate(s.substring(j + <span class=\"number\">1</span>, i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">'+'</span> || ch == <span class=\"string\">'-'</span> || ch == <span class=\"string\">'*'</span> || ch == <span class=\"string\">'/'</span> || i == s.length() - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (lastSign) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'+'</span>: curResult += num; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'-'</span>: curResult -= num; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'*'</span>: curResult *= num; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'/'</span>: curResult /= num; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch == <span class=\"string\">'+'</span> || ch == <span class=\"string\">'-'</span> || i == s.length() - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                result += curResult;</span><br><span class=\"line\">                curResult = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            lastSign = ch;</span><br><span class=\"line\">            num = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 227 - Basic Calculator II","url":"http://yoursite.com/2019/04/08/LeetCode-Problem-227-Basic-Calculator-II/","content":"<p>Implement a basic calculator to evaluate a simple expression string.</p>\n<p>The expression string contains only non-negative integers, +, -, *, / operators and empty spaces . The integer division should truncate toward zero.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: “3+2*2”</p>\n<p>Output: 7</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: “ 3/2 “</p>\n<p>Output: 1</p>\n<h3 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h3><p>Input: “ 3+5 / 2 “</p>\n<p>Output: 5</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>You may assume that the given expression is always valid.</li>\n<li>Do not use the eval built-in library function.</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> curResult = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> lastSign = <span class=\"string\">'+'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> ch = s.charAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Character.isDigit(ch)) &#123;</span><br><span class=\"line\">            num = <span class=\"number\">10</span> * num + (ch - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">'+'</span> || ch == <span class=\"string\">'-'</span> || ch == <span class=\"string\">'*'</span> || ch == <span class=\"string\">'/'</span> || i == s.length() - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (lastSign) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'+'</span>: curResult += num; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'-'</span>: curResult -= num; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'*'</span>: curResult *= num; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'/'</span>: curResult /= num; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch == <span class=\"string\">'+'</span> || ch == <span class=\"string\">'-'</span> || i == s.length() - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                result += curResult;</span><br><span class=\"line\">                curResult = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            lastSign = ch;</span><br><span class=\"line\">            num = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 224 - Basic Calculator","url":"http://yoursite.com/2019/04/08/LeetCode-Problem-224-Basic-Calculator/","content":"<p>Implement a basic calculator to evaluate a simple expression string.</p>\n<p>The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: “1 + 1”</p>\n<p>Output: 2</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: “ 2-1 + 2 “</p>\n<p>Output: 3</p>\n<h3 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h3><p>Input: “(1+(4+5+2)-3)+(6+8)”</p>\n<p>Output: 23</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>You may assume that the given expression is always valid.</li>\n<li>Do not use the eval built-in library function.</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sign = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> ch = s.charAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Character.isDigit(ch)) &#123;</span><br><span class=\"line\">            num = <span class=\"number\">10</span> * num + (ch - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">'+'</span> || ch == <span class=\"string\">'-'</span>) &#123;</span><br><span class=\"line\">            result += sign * num;</span><br><span class=\"line\">            num = <span class=\"number\">0</span>;</span><br><span class=\"line\">            sign = ch == <span class=\"string\">'+'</span> ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">'('</span>) &#123;</span><br><span class=\"line\">            stack.push(result);</span><br><span class=\"line\">            stack.push(sign);</span><br><span class=\"line\">            sign = <span class=\"number\">1</span>;</span><br><span class=\"line\">            result = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">')'</span>) &#123;</span><br><span class=\"line\">            result += sign * num;</span><br><span class=\"line\">            num = <span class=\"number\">0</span>;</span><br><span class=\"line\">            result *= stack.pop();</span><br><span class=\"line\">            result += stack.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    result += sign * num;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 913 - Flip Game II","url":"http://yoursite.com/2019/04/07/LintCode-Problem-913-Flip-Game-II/","content":"<p>You are playing the following Flip Game with your friend: Given a string that contains only these two characters: + and -, you and your friend take turns to flip two consecutive “++” into “–”. The game ends when a person can no longer make a move and therefore the other person will be the winner.</p>\n<p>Write a function to determine if the starting player can guarantee a win.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input:  s = “++++”</p>\n<p>Output: true</p>\n<p>Explanation:<br>The starting player can guarantee a win by flipping the middle “++” to become “+–+”.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: s = “+++++”</p>\n<p>Output: false </p>\n<p>Explanation:<br>The starting player can not win<br>“+++–” –&gt; “+—-“<br>“++–+” –&gt; “—-+”</p>\n<h2 id=\"Challenge\"><a href=\"#Challenge\" class=\"headerlink\" title=\"Challenge\"></a>Challenge</h2><p>Derive your algorithm’s runtime complexity.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Map&lt;String, Boolean&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canWin</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (map.containsKey(s))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map.get(s);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> idx = s.indexOf(<span class=\"string\">\"++\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (idx != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        String str = s.substring(<span class=\"number\">0</span>, idx) + <span class=\"string\">\"--\"</span> + s.substring(idx + <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!canWin(str)) &#123;</span><br><span class=\"line\">            map.put(str, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        map.put(str, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        idx = s.indexOf(<span class=\"string\">\"++\"</span>, idx + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 914 - Flip Game","url":"http://yoursite.com/2019/04/07/LintCode-Problem-914-Flip-Game/","content":"<p>You are playing the following Flip Game with your friend: Given a string that contains only these two characters: + and -, you and your friend take turns to flip two consecutive “++” into “–”. The game ends when a person can no longer make a move and therefore the other person will be the winner.</p>\n<p>Write a function to compute all possible states of the string after one valid move.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input:  s = “++++”</p>\n<p>Output:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  <span class=\"string\">\"--++\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"+--+\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"++--\"</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: s = “—+++-+++-+”</p>\n<p>Output:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">\t<span class=\"string\">\"---+++-+---+\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"---+++---+-+\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"---+---+++-+\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"-----+-+++-+\"</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">generatePossibleNextMoves</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;String&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> idx = s.indexOf(<span class=\"string\">\"++\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (idx != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        result.add(s.substring(<span class=\"number\">0</span>, idx) + <span class=\"string\">\"--\"</span> + s.substring(idx + <span class=\"number\">2</span>));</span><br><span class=\"line\">        idx = s.indexOf(<span class=\"string\">\"++\"</span>, idx + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 203 - Remove Linked List Elements","url":"http://yoursite.com/2019/04/07/LeetCode-Problem-203-Remove-Linked-List-Elements/","content":"<p>Remove all elements from a linked list of integers that have value val.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input:  1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, val = 6</p>\n<p>Output: 1-&gt;2-&gt;3-&gt;4-&gt;5</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next;</span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">removeElements</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">    ListNode dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    dummy.next = head;</span><br><span class=\"line\">    ListNode current = dummy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current.next.val == val)</span><br><span class=\"line\">            current.next = current.next.next;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            current = current.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummy.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 237 - Delete Node in a Linked List","url":"http://yoursite.com/2019/04/07/LeetCode-Problem-237-Delete-Node-in-a-Linked-List/","content":"<p>Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.</p>\n<p>Given linked list – head = [4,5,1,9], which looks like following:</p>\n<p><a href=\"https://imgchr.com/i/AhSYQA\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/04/07/AhSYQA.png\" alt=\"AhSYQA.png\"></a></p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: head = [4,5,1,9], node = 5</p>\n<p>Output: [4,1,9]</p>\n<p>Explanation: You are given the second node with value 5, the linked list should become 4 -&gt; 1 -&gt; 9 after calling your function.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: head = [4,5,1,9], node = 1</p>\n<p>Output: [4,5,9]</p>\n<p>Explanation: You are given the third node with value 1, the linked list should become 4 -&gt; 5 -&gt; 9 after calling your function.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>The linked list will have at least two elements.</li>\n<li>All of the nodes’ values will be unique.</li>\n<li>The given node will not be the tail and it will always be a valid node of the linked list.</li>\n<li>Do not return anything from your function.</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next;</span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteNode</span><span class=\"params\">(ListNode node)</span> </span>&#123;</span><br><span class=\"line\">    node.val = node.next.val;</span><br><span class=\"line\">    node.next = node.next.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 240 - Search a 2D Matrix II","url":"http://yoursite.com/2019/04/07/LeetCode-Problem-240-Search-a-2D-Matrix-II/","content":"<p>Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:</p>\n<ul>\n<li>Integers in each row are sorted in ascending from left to right.</li>\n<li>Integers in each column are sorted in ascending from top to bottom.</li>\n</ul>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Consider the following matrix:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [1,   4,  7, 11, 15],</span><br><span class=\"line\">  [2,   5,  8, 12, 19],</span><br><span class=\"line\">  [3,   6,  9, 16, 22],</span><br><span class=\"line\">  [10, 13, 14, 17, 24],</span><br><span class=\"line\">  [18, 21, 23, 26, 30]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>Given target = 5, return true.</p>\n<p>Given target = 20, return false.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">searchMatrix</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = matrix.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; j &lt; matrix[<span class=\"number\">0</span>].length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (matrix[i][j] &lt; target)</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (matrix[i][j] &gt; target)</span><br><span class=\"line\">            i--;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 74 - Search a 2D Matrix","url":"http://yoursite.com/2019/04/07/LeetCode-Problem-74-Search-a-2D-Matrix/","content":"<p>Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:</p>\n<ul>\n<li>Integers in each row are sorted from left to right.</li>\n<li>The first integer of each row is greater than the last integer of the previous row.</li>\n</ul>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matrix = [</span><br><span class=\"line\">  [1,   3,  5,  7],</span><br><span class=\"line\">  [10, 11, 16, 20],</span><br><span class=\"line\">  [23, 30, 34, 50]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>target = 3</p>\n<p>Output: true</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matrix = [</span><br><span class=\"line\">  [1,   3,  5,  7],</span><br><span class=\"line\">  [10, 11, 16, 20],</span><br><span class=\"line\">  [23, 30, 34, 50]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>target = 13</p>\n<p>Output: false</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">searchMatrix</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (matrix.length &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = matrix.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = m * n - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (left + right) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = matrix[mid / n][mid % n];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num &lt; target)</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num &gt; target)</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 373 - Find K Pairs with Smallest Sums","url":"http://yoursite.com/2019/04/05/LeetCode-Problem-373-Find-K-Pairs-with-Smallest-Sums/","content":"<p>You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.</p>\n<p>Define a pair (u,v) which consists of one element from the first array and one element from the second array.</p>\n<p>Find the k pairs (u1,v1),(u2,v2) …(uk,vk) with the smallest sums.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3</p>\n<p>Output: [[1,2],[1,4],[1,6]] </p>\n<p>Explanation: The first 3 pairs are returned from the sequence:<br>             [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2</p>\n<p>Output: [1,1],[1,1]</p>\n<p>Explanation: The first 2 pairs are returned from the sequence:<br>             [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]</p>\n<h3 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h3><p>Input: nums1 = [1,2], nums2 = [3], k = 3</p>\n<p>Output: [1,3],[2,3]</p>\n<p>Explanation: All possible pairs are returned from the sequence: [1,3],[2,3]</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;<span class=\"keyword\">int</span>[]&gt; kSmallestPairs(<span class=\"keyword\">int</span>[] nums1, <span class=\"keyword\">int</span>[] nums2, <span class=\"keyword\">int</span> k) &#123;</span><br><span class=\"line\">    List&lt;<span class=\"keyword\">int</span>[]&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums1.length == <span class=\"number\">0</span> || nums2.length == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    </span><br><span class=\"line\">    PriorityQueue&lt;<span class=\"keyword\">int</span>[]&gt; minHeap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;(<span class=\"keyword\">new</span> Comparator&lt;<span class=\"keyword\">int</span>[]&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span>[] o1, <span class=\"keyword\">int</span>[] o2)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (o1[<span class=\"number\">0</span>] + o1[<span class=\"number\">1</span>]) - (o2[<span class=\"number\">0</span>] + o2[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; Math.min(k, nums1.length); i++)</span><br><span class=\"line\">        minHeap.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;nums1[i], nums2[<span class=\"number\">0</span>], <span class=\"number\">0</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!minHeap.isEmpty() &amp;&amp; k &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] pair = minHeap.poll();</span><br><span class=\"line\">        result.add(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;pair[<span class=\"number\">0</span>], pair[<span class=\"number\">1</span>]&#125;);</span><br><span class=\"line\">        k--;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pair[<span class=\"number\">2</span>] &lt; nums2.length - <span class=\"number\">1</span>)</span><br><span class=\"line\">            minHeap.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;pair[<span class=\"number\">0</span>], nums2[pair[<span class=\"number\">2</span>] + <span class=\"number\">1</span>], pair[<span class=\"number\">2</span>] + <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 378 - Kth Smallest Element in a Sorted Matrix","url":"http://yoursite.com/2019/04/05/LeetCode-Problem-378-Kth-Smallest-Element-in-a-Sorted-Matrix/","content":"<p>Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.</p>\n<p>Note that it is the kth smallest element in the sorted order, not the kth distinct element.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matrix = [</span><br><span class=\"line\">   [ 1,  5,  9],</span><br><span class=\"line\">   [10, 11, 13],</span><br><span class=\"line\">   [12, 13, 15]</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<p>k = 8,</p>\n<p>return 13.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>You may assume k is always valid, 1 ≤ k ≤ n^2.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第k小的数一定在left和right之间：即 left&lt;= answer &lt;= right</span></span><br><span class=\"line\"><span class=\"comment\">// 循环结束的条件必定是：left &gt;= right</span></span><br><span class=\"line\"><span class=\"comment\">// 所以：left == answer == right</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">kthSmallest</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> m = matrix.length;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> n = matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> left = matrix[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">   <span class=\"keyword\">int</span> right = matrix[m - <span class=\"number\">1</span>][n - <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> mid = (left + right) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> count = count(matrix, mid, m, n);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (count &lt; k)</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">            right = mid;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> i = m - <span class=\"number\">1</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">while</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; j &lt; n) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (matrix[i][j] &lt;= mid) &#123;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">            count += i + <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">            i--;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 93 - Restore IP Addresses","url":"http://yoursite.com/2019/04/05/LeetCode-Problem-93-Restore-IP-Addresses/","content":"<p>Given a string containing only digits, restore it by returning all possible valid IP address combinations.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: “25525511135”</p>\n<p>Output: [“255.255.11.135”, “255.255.111.35”]</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">restoreIpAddresses</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;String&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    restoreIpAddressesHelper(result, <span class=\"keyword\">new</span> ArrayList&lt;&gt;(), s, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">restoreIpAddressesHelper</span><span class=\"params\">(List&lt;String&gt; result, List&lt;String&gt; ip, String s, <span class=\"keyword\">int</span> idx, <span class=\"keyword\">int</span> level)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (level == <span class=\"number\">4</span> &amp;&amp; idx == s.length()) &#123;</span><br><span class=\"line\">        result.add(ip.get(<span class=\"number\">0</span>) + <span class=\"string\">\".\"</span> + ip.get(<span class=\"number\">1</span>) + <span class=\"string\">\".\"</span> + ip.get(<span class=\"number\">2</span>) + <span class=\"string\">\".\"</span> + ip.get(<span class=\"number\">3</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (level == <span class=\"number\">4</span> || idx == s.length())</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3</span> &amp;&amp; idx + i &lt;= s.length(); i++) &#123;</span><br><span class=\"line\">        String str = s.substring(idx, idx + i);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isValid(str))</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        ip.add(str);</span><br><span class=\"line\">        restoreIpAddressesHelper(result, ip, s, idx + i, level + <span class=\"number\">1</span>);</span><br><span class=\"line\">        ip.remove(ip.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length() &gt; <span class=\"number\">1</span> &amp;&amp; s.charAt(<span class=\"number\">0</span>) == <span class=\"string\">'0'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = Integer.parseInt(s);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i &lt;= <span class=\"number\">255</span> &amp;&amp; i &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 556 - Next Greater Element III","url":"http://yoursite.com/2019/04/05/LeetCode-Problem-556-Next-Greater-Element-III/","content":"<p>Given a positive 32-bit integer n, you need to find the smallest 32-bit integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive 32-bit integer exists, you need to return -1.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: 12</p>\n<p>Output: 21</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: 21</p>\n<p>Output: -1</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">nextGreaterElement</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] ch = String.valueOf(n).toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = ch.length - <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; ch[i] &gt;= ch[i + <span class=\"number\">1</span>])</span><br><span class=\"line\">        i--;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = ch.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &gt;= i &amp;&amp; ch[j] &lt;= ch[i])</span><br><span class=\"line\">        j--;</span><br><span class=\"line\"></span><br><span class=\"line\">    swap(ch, i, j);</span><br><span class=\"line\"></span><br><span class=\"line\">    reverse(ch, i + <span class=\"number\">1</span>, ch.length - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">long</span> result = Long.parseLong(String.valueOf(ch));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result &gt; Integer.MAX_VALUE ? -<span class=\"number\">1</span> : (<span class=\"keyword\">int</span>) result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">char</span>[] ch, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> temp = ch[i];</span><br><span class=\"line\">    ch[i] = ch[j];</span><br><span class=\"line\">    ch[j] = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">char</span>[] ch, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; j) &#123;</span><br><span class=\"line\">        swap(ch, i, j);</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        j--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 503 - Next Greater Element II","url":"http://yoursite.com/2019/04/04/LeetCode-Problem-503-Next-Greater-Element-II/","content":"<p>Given a circular array (the next element of the last element is the first element of the array), print the Next Greater Number for every element. The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn’t exist, output -1 for this number.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: [1,2,1]</p>\n<p>Output: [2,-1,2]</p>\n<p>Explanation: The first 1’s next greater number is 2;<br>The number 2 can’t find next greater number;<br>The second 1’s next greater number needs to search circularly, which is also 2.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>The length of given array won’t exceed 10000.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] nextGreaterElements(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\">    Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    Arrays.fill(result, -<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span> * nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> idx = i % nums.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stack.isEmpty() &amp;&amp; nums[stack.peek()] &lt; nums[idx])</span><br><span class=\"line\">            result[stack.pop()] = nums[idx];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; nums.length)</span><br><span class=\"line\">            stack.push(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 496 - Next Greater Element I","url":"http://yoursite.com/2019/04/04/LeetCode-Problem-496-Next-Greater-Element-I/","content":"<p>You are given two arrays (without duplicates) nums1 and nums2 where nums1’s elements are subset of nums2. Find all the next greater numbers for nums1’s elements in the corresponding places of nums2.</p>\n<p>The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: nums1 = [4,1,2], nums2 = [1,3,4,2].</p>\n<p>Output: [-1,3,-1]</p>\n<p>Explanation:<br>    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.<br>    For number 1 in the first array, the next greater number for it in the second array is 3.<br>    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: nums1 = [2,4], nums2 = [1,2,3,4].</p>\n<p>Output: [3,-1]</p>\n<p>Explanation:<br>    For number 2 in the first array, the next greater number for it in the second array is 3.<br>    For number 4 in the first array, there is no next greater number for it in the second array, so output -1.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>All elements in nums1 and nums2 are unique.</li>\n<li>The length of both nums1 and nums2 would not exceed 1000.</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] nextGreaterElement(<span class=\"keyword\">int</span>[] nums1, <span class=\"keyword\">int</span>[] nums2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums1.length];</span><br><span class=\"line\">    Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() &lt; num)</span><br><span class=\"line\">            map.put(stack.pop(), num);</span><br><span class=\"line\"></span><br><span class=\"line\">        stack.push(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums1.length; i++)</span><br><span class=\"line\">        result[i] = map.getOrDefault(nums1[i], -<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 55 - Jump Game","url":"http://yoursite.com/2019/04/02/LeetCode-Problem-55-Jump-Game/","content":"<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>\n<p>Each element in the array represents your maximum jump length at that position.</p>\n<p>Determine if you are able to reach the last index.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: [2,3,1,1,4]</p>\n<p>Output: true</p>\n<p>Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: [3,2,1,0,4]</p>\n<p>Output: false</p>\n<p>Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canJump</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> distance = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt;= distance)</span><br><span class=\"line\">            distance = Math.max(distance, i + nums[i]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 176 - Route Between Two Nodes in Graph","url":"http://yoursite.com/2019/04/02/LintCode-Problem-176-Route-Between-Two-Nodes-in-Graph/","content":"<p>Given a directed graph, design an algorithm to find out whether there is a route between two nodes.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Given graph:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tA-----&gt;B-----&gt;C</span><br><span class=\"line\">\\     |</span><br><span class=\"line\"> \\    |</span><br><span class=\"line\">  \\   |</span><br><span class=\"line\">   \\  v</span><br><span class=\"line\">    -&gt;D-----&gt;E</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input:s = B and t = E,</p>\n<p>Output:true</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input:s = D and t = C,</p>\n<p>Output:false</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirectedGraphNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> label;</span><br><span class=\"line\">    ArrayList&lt;DirectedGraphNode&gt; neighbors;</span><br><span class=\"line\">    DirectedGraphNode(<span class=\"keyword\">int</span> x) &#123;</span><br><span class=\"line\">        label = x;</span><br><span class=\"line\">        neighbors = <span class=\"keyword\">new</span> ArrayList&lt;DirectedGraphNode&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasRoute</span><span class=\"params\">(ArrayList&lt;DirectedGraphNode&gt; graph, DirectedGraphNode s, DirectedGraphNode t)</span> </span>&#123;</span><br><span class=\"line\">    Set&lt;DirectedGraphNode&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">    Queue&lt;DirectedGraphNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    queue.offer(s);</span><br><span class=\"line\">    set.add(s);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        DirectedGraphNode node = queue.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (DirectedGraphNode neighbor : node.neighbors) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (set.contains(neighbor))</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            set.add(neighbor);</span><br><span class=\"line\">            queue.offer(neighbor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> set.contains(t);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 165 - Compare Version Numbers","url":"http://yoursite.com/2019/04/02/LeetCode-Problem-165-Compare-Version-Numbers/","content":"<p>Compare two version numbers version1 and version2.<br>If version1 &gt; version2 return 1; if version1 &lt; version2 return -1;otherwise return 0.</p>\n<p>You may assume that the version strings are non-empty and contain only digits and the . character.</p>\n<p>The . character does not represent a decimal point and is used to separate number sequences.</p>\n<p>For instance, 2.5 is not “two and a half” or “half way to version three”, it is the fifth second-level revision of the second first-level revision.</p>\n<p>You may assume the default revision number for each level of a version number to be 0. For example, version number 3.4 has a revision number of 3 and 4 for its first and second level revision number. Its third and fourth level revision number are both 0.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: version1 = “0.1”, version2 = “1.1”</p>\n<p>Output: -1</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: version1 = “1.0.1”, version2 = “1”</p>\n<p>Output: 1</p>\n<h3 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h3><p>Input: version1 = “7.5.2.4”, version2 = “7.5.3”</p>\n<p>Output: -1</p>\n<h3 id=\"No-4\"><a href=\"#No-4\" class=\"headerlink\" title=\"No.4\"></a>No.4</h3><p>Input: version1 = “1.01”, version2 = “1.001”</p>\n<p>Output: 0</p>\n<p>Explanation: Ignoring leading zeroes, both “01” and “001” represent the same number “1”</p>\n<h3 id=\"No-5\"><a href=\"#No-5\" class=\"headerlink\" title=\"No.5\"></a>No.5</h3><p>Input: version1 = “1.0”, version2 = “1.0.0”</p>\n<p>Output: 0</p>\n<p>Explanation: The first version number does not have a third level revision number, which means its third level revision number is default to “0”</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>Version strings are composed of numeric strings separated by dots . and this numeric strings may have leading zeroes.</li>\n<li>Version strings do not start or end with dots, and they will not be two consecutive dots.</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareVersion</span><span class=\"params\">(String version1, String version2)</span> </span>&#123;</span><br><span class=\"line\">    String[] str1 = version1.split(<span class=\"string\">\"\\\\.\"</span>);</span><br><span class=\"line\">    String[] str2 = version2.split(<span class=\"string\">\"\\\\.\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = Math.max(str1.length, str2.length);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v1 = i &gt; str1.length - <span class=\"number\">1</span> ? <span class=\"number\">0</span> : Integer.parseInt(str1[i]);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v2 = i &gt; str2.length - <span class=\"number\">1</span> ? <span class=\"number\">0</span> : Integer.parseInt(str2[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v1 &gt; v2)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (v1 &lt; v2)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 445 - Add Two Numbers II","url":"http://yoursite.com/2019/04/01/LeetCode-Problem-445-Add-Two-Numbers-II/","content":"<p>You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n<h2 id=\"Follow-up\"><a href=\"#Follow-up\" class=\"headerlink\" title=\"Follow up\"></a>Follow up</h2><p>What if you cannot modify the input lists? In other words, reversing the lists is not allowed.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: (7 -&gt; 2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</p>\n<p>Output: 7 -&gt; 8 -&gt; 0 -&gt; 7</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next;</span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">addTwoNumbers</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">    Stack&lt;Integer&gt; stack1 = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    Stack&lt;Integer&gt; stack2 = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    ListNode dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l1 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        stack1.push(l1.val);</span><br><span class=\"line\">        l1 = l1.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l2 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        stack2.push(l2.val);</span><br><span class=\"line\">        l2 = l2.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> carry = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!stack1.isEmpty() || !stack2.isEmpty() || carry != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> val1 = stack1.isEmpty() ? <span class=\"number\">0</span> : stack1.pop();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> val2 = stack2.isEmpty() ? <span class=\"number\">0</span> : stack2.pop();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = val1 + val2 + carry;</span><br><span class=\"line\">        carry = sum / <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        ListNode node = <span class=\"keyword\">new</span> ListNode(sum % <span class=\"number\">10</span>);</span><br><span class=\"line\">        node.next = dummy.next;</span><br><span class=\"line\">        dummy.next = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummy.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 347 - Top K Frequent Elements","url":"http://yoursite.com/2019/04/01/LeetCode-Problem-347-Top-K-Frequent-Elements/","content":"<p>Given a non-empty array of integers, return the k most frequent elements.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: nums = [1,1,1,2,2,3], k = 2</p>\n<p>Output: [1,2]</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: nums = [1], k = 1</p>\n<p>Output: [1]</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>You may assume k is always valid, 1 ≤ k ≤ number of unique elements.</li>\n<li>Your algorithm’s time complexity must be better than O(n log n), where n is the array’s size.</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">topKFrequent</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    PriorityQueue&lt;Map.Entry&lt;Integer, Integer&gt;&gt; minHeap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;(<span class=\"keyword\">new</span> Comparator&lt;Map.Entry&lt;Integer, Integer&gt;&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Map.Entry&lt;Integer, Integer&gt; o1, Map.Entry&lt;Integer, Integer&gt; o2)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> o1.getValue() - o2.getValue();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums)</span><br><span class=\"line\">        map.put(num, map.getOrDefault(num, <span class=\"number\">0</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (minHeap.size() &lt; k)</span><br><span class=\"line\">            minHeap.offer(entry);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (entry.getValue() &gt; minHeap.peek().getValue()) &#123;</span><br><span class=\"line\">            minHeap.poll();</span><br><span class=\"line\">            minHeap.offer(entry);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!minHeap.isEmpty())</span><br><span class=\"line\">        result.add(minHeap.poll().getKey());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 31 - Next Permutation","url":"http://yoursite.com/2019/03/31/LeetCode-Problem-31-Next-Permutation/","content":"<p>Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.</p>\n<p>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).</p>\n<p>The replacement must be in-place and use only constant extra memory.</p>\n<p>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.</p>\n<p>1,2,3 → 1,3,2<br>3,2,1 → 1,2,3<br>1,1,5 → 1,5,1</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">nextPermutation</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = nums.length - <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; nums[i] &gt;= nums[i + <span class=\"number\">1</span>])</span><br><span class=\"line\">        i--;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt;= i &amp;&amp; nums[j] &lt;= nums[i])</span><br><span class=\"line\">            j--;</span><br><span class=\"line\"></span><br><span class=\"line\">        swap(nums, i, j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    reverse(nums, i + <span class=\"number\">1</span>, nums.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; j) &#123;</span><br><span class=\"line\">        swap(nums, i, j);</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        j--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = nums[i];</span><br><span class=\"line\">    nums[i] = nums[j];</span><br><span class=\"line\">    nums[j] = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 131 - Palindrome Partitioning","url":"http://yoursite.com/2019/03/31/LeetCode-Problem-131-Palindrome-Partitioning/","content":"<p>Given a string s, partition s such that every substring of the partition is a palindrome.</p>\n<p>Return all possible palindrome partitioning of s.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example:\"></a>Example:</h2><p>Input: “aab”</p>\n<p>Output:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"string\">\"aa\"</span>,<span class=\"string\">\"b\"</span>],</span><br><span class=\"line\">  [<span class=\"string\">\"a\"</span>,<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;String&gt;&gt; partition(String s) &#123;</span><br><span class=\"line\">    List&lt;List&lt;String&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    partitionHelper(result, <span class=\"keyword\">new</span> ArrayList&lt;&gt;(), s, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">partitionHelper</span><span class=\"params\">(List&lt;List&lt;String&gt;&gt; result, List&lt;String&gt; palindrome, String s, <span class=\"keyword\">int</span> idx)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (idx == s.length()) &#123;</span><br><span class=\"line\">        result.add(<span class=\"keyword\">new</span> ArrayList&lt;&gt;(palindrome));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = idx; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isPalindrome(s, idx, i)) &#123;</span><br><span class=\"line\">            palindrome.add(s.substring(idx, i + <span class=\"number\">1</span>));</span><br><span class=\"line\">            partitionHelper(result, palindrome, s, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            palindrome.remove(palindrome.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(String s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.charAt(start) != s.charAt(end))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        start++;</span><br><span class=\"line\">        end--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 90 - Subsets II","url":"http://yoursite.com/2019/03/31/LeetCode-Problem-90-Subsets-II/","content":"<p>Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>The solution set must not contain duplicate subsets.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: [1,2,2]</p>\n<p>Output:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [2],</span><br><span class=\"line\">  [1],</span><br><span class=\"line\">  [1,2,2],</span><br><span class=\"line\">  [2,2],</span><br><span class=\"line\">  [1,2],</span><br><span class=\"line\">  []</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    Arrays.sort(nums);</span><br><span class=\"line\">    subsetsWithDupHelper(result, <span class=\"keyword\">new</span> ArrayList&lt;&gt;(), nums, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">subsetsWithDupHelper</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; subset, <span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> idx)</span> </span>&#123;</span><br><span class=\"line\">    result.add(<span class=\"keyword\">new</span> ArrayList&lt;&gt;(subset));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = idx; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt; idx &amp;&amp; nums[i] == nums[i - <span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        subset.add(nums[i]);</span><br><span class=\"line\">        subsetsWithDupHelper(result, subset, nums, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        subset.remove(subset.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 78 - Subsets","url":"http://yoursite.com/2019/03/31/LeetCode-Problem-78-Subsets/","content":"<p>Given a set of distinct integers, nums, return all possible subsets (the power set).</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>The solution set must not contain duplicate subsets.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: nums = [1,2,3]</p>\n<p>Output:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [3],</span><br><span class=\"line\">  [1],</span><br><span class=\"line\">  [2],</span><br><span class=\"line\">  [1,2,3],</span><br><span class=\"line\">  [1,3],</span><br><span class=\"line\">  [2,3],</span><br><span class=\"line\">  [1,2],</span><br><span class=\"line\">  []</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    subsetsHelper(result, <span class=\"keyword\">new</span> ArrayList&lt;&gt;(), nums, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">subsetsHelper</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; subset, <span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> idx)</span> </span>&#123;</span><br><span class=\"line\">    result.add(<span class=\"keyword\">new</span> ArrayList&lt;&gt;(subset));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = idx; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        subset.add(nums[i]);</span><br><span class=\"line\">        subsetsHelper(result, subset, nums, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        subset.remove(subset.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 47 - Permutations II","url":"http://yoursite.com/2019/03/31/LeetCode-Problem-47-Permutations-II/","content":"<p>Given a collection of numbers that might contain duplicates, return all possible unique permutations.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: [1,1,2]</p>\n<p>Output:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [1,1,2],</span><br><span class=\"line\">  [1,2,1],</span><br><span class=\"line\">  [2,1,1]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; permuteUnique(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    Arrays.sort(nums);</span><br><span class=\"line\">    permuteUniqueHelper(result, <span class=\"keyword\">new</span> ArrayList&lt;&gt;(), <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[nums.length], nums);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">permuteUniqueHelper</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; permute, <span class=\"keyword\">boolean</span>[] visit, <span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (permute.size() == nums.length) &#123;</span><br><span class=\"line\">        result.add(<span class=\"keyword\">new</span> ArrayList&lt;&gt;(permute));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (visit[i] || (i &gt; <span class=\"number\">0</span> &amp;&amp; nums[i] == nums[i - <span class=\"number\">1</span>] &amp;&amp; !visit[i - <span class=\"number\">1</span>]))</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        permute.add(nums[i]);</span><br><span class=\"line\">        visit[i] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        permuteUniqueHelper(result, permute, visit, nums);</span><br><span class=\"line\">        permute.remove(permute.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        visit[i] = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 46 - Permutations","url":"http://yoursite.com/2019/03/31/LeetCode-Problem-46-Permutations/","content":"<p>Given a collection of distinct integers, return all possible permutations.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: [1,2,3]</p>\n<p>Output:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [1,2,3],</span><br><span class=\"line\">  [1,3,2],</span><br><span class=\"line\">  [2,1,3],</span><br><span class=\"line\">  [2,3,1],</span><br><span class=\"line\">  [3,1,2],</span><br><span class=\"line\">  [3,2,1]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    permuteHelper(result, <span class=\"keyword\">new</span> ArrayList&lt;&gt;(), nums);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">permuteHelper</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; permute, <span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (permute.size() == nums.length) &#123;</span><br><span class=\"line\">        result.add(<span class=\"keyword\">new</span> ArrayList&lt;&gt;(permute));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (permute.contains(nums[i]))</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        permute.add(nums[i]);</span><br><span class=\"line\">        permuteHelper(result, permute, nums);</span><br><span class=\"line\">        permute.remove(permute.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 641 - Design Circular Deque","url":"http://yoursite.com/2019/03/31/LeetCode-Problem-641-Design-Circular-Deque/","content":"<p>Design your implementation of the circular double-ended queue (deque).</p>\n<p>Your implementation should support following operations:</p>\n<p>MyCircularDeque(k): Constructor, set the size of the deque to be k.</p>\n<p>insertFront(): Adds an item at the front of Deque. Return true if the operation is successful.</p>\n<p>insertLast(): Adds an item at the rear of Deque. Return true if the operation is successful.</p>\n<p>deleteFront(): Deletes an item from the front of Deque. Return true if the operation is successful.</p>\n<p>deleteLast(): Deletes an item from the rear of Deque. Return true if the operation is successful.</p>\n<p>getFront(): Gets the front item from the Deque. If the deque is empty, return -1.</p>\n<p>getRear(): Gets the last item from Deque. If the deque is empty, return -1.</p>\n<p>isEmpty(): Checks whether Deque is empty or not. </p>\n<p>isFull(): Checks whether Deque is full or not.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyCircularDeque circularDeque = <span class=\"keyword\">new</span> MycircularDeque(<span class=\"number\">3</span>); <span class=\"comment\">// set the size to be 3</span></span><br><span class=\"line\">circularDeque.insertLast(<span class=\"number\">1</span>);\t\t\t<span class=\"comment\">// return true</span></span><br><span class=\"line\">circularDeque.insertLast(<span class=\"number\">2</span>);\t\t\t<span class=\"comment\">// return true</span></span><br><span class=\"line\">circularDeque.insertFront(<span class=\"number\">3</span>);\t\t\t<span class=\"comment\">// return true</span></span><br><span class=\"line\">circularDeque.insertFront(<span class=\"number\">4</span>);\t\t\t<span class=\"comment\">// return false, the queue is full</span></span><br><span class=\"line\">circularDeque.getRear();  \t\t\t<span class=\"comment\">// return 2</span></span><br><span class=\"line\">circularDeque.isFull();\t\t\t\t<span class=\"comment\">// return true</span></span><br><span class=\"line\">circularDeque.deleteLast();\t\t\t<span class=\"comment\">// return true</span></span><br><span class=\"line\">circularDeque.insertFront(<span class=\"number\">4</span>);\t\t\t<span class=\"comment\">// return true</span></span><br><span class=\"line\">circularDeque.getFront();\t\t\t<span class=\"comment\">// return 4</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>All values will be in the range of [0, 1000].</li>\n<li>The number of operations will be in the range of [1, 1000].</li>\n<li>Please do not use the built-in Deque library.</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] queue;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> front;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> rear;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyCircularDeque</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    queue = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[k];</span><br><span class=\"line\">    front = <span class=\"number\">0</span>;</span><br><span class=\"line\">    rear = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    size = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">insertFront</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isFull()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">            front = <span class=\"number\">0</span>;</span><br><span class=\"line\">            rear = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            front = (front - <span class=\"number\">1</span> + queue.length) % queue.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        queue[front] = value;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">insertLast</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isFull()) &#123;</span><br><span class=\"line\">        rear = (++rear) % queue.length;</span><br><span class=\"line\">        queue[rear] = value;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">deleteFront</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isEmpty()) &#123;</span><br><span class=\"line\">        front = (++front) % queue.length;</span><br><span class=\"line\">        size--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">deleteLast</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isEmpty()) &#123;</span><br><span class=\"line\">        rear = (rear - <span class=\"number\">1</span> + queue.length) % queue.length;</span><br><span class=\"line\">        size--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getFront</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isEmpty())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> queue[front];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getRear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isEmpty())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> queue[rear];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> size == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> size == queue.length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 622 - Design Circular Queue","url":"http://yoursite.com/2019/03/30/LeetCode-Problem-622-Design-Circular-Queue/","content":"<p>Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called “Ring Buffer”.</p>\n<p>One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.</p>\n<p>Your implementation should support following operations:</p>\n<p>MyCircularQueue(k): Constructor, set the size of the queue to be k.</p>\n<p>Front: Get the front item from the queue. If the queue is empty, return -1.</p>\n<p>Rear: Get the last item from the queue. If the queue is empty, return -1.</p>\n<p>enQueue(value): Insert an element into the circular queue. Return true if the operation is successful.</p>\n<p>deQueue(): Delete an element from the circular queue. Return true if the operation is successful.</p>\n<p>isEmpty(): Checks whether the circular queue is empty or not.</p>\n<p>isFull(): Checks whether the circular queue is full or not.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyCircularQueue circularQueue = <span class=\"keyword\">new</span> MyCircularQueue(<span class=\"number\">3</span>); <span class=\"comment\">// set the size to be 3</span></span><br><span class=\"line\">circularQueue.enQueue(<span class=\"number\">1</span>);  <span class=\"comment\">// return true</span></span><br><span class=\"line\">circularQueue.enQueue(<span class=\"number\">2</span>);  <span class=\"comment\">// return true</span></span><br><span class=\"line\">circularQueue.enQueue(<span class=\"number\">3</span>);  <span class=\"comment\">// return true</span></span><br><span class=\"line\">circularQueue.enQueue(<span class=\"number\">4</span>);  <span class=\"comment\">// return false, the queue is full</span></span><br><span class=\"line\">circularQueue.Rear();  <span class=\"comment\">// return 3</span></span><br><span class=\"line\">circularQueue.isFull();  <span class=\"comment\">// return true</span></span><br><span class=\"line\">circularQueue.deQueue();  <span class=\"comment\">// return true</span></span><br><span class=\"line\">circularQueue.enQueue(<span class=\"number\">4</span>);  <span class=\"comment\">// return true</span></span><br><span class=\"line\">circularQueue.Rear();  <span class=\"comment\">// return 4</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>All values will be in the range of [0, 1000].</li>\n<li>The number of operations will be in the range of [1, 1000].</li>\n<li>Please do not use the built-in Queue library.</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] queue;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> front;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> rear;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyCircularQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    queue = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[k];</span><br><span class=\"line\">    front = <span class=\"number\">0</span>;</span><br><span class=\"line\">    rear = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    size = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isFull()) &#123;</span><br><span class=\"line\">        rear = (++rear) % queue.length;</span><br><span class=\"line\">        queue[rear] = value;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">deQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isEmpty()) &#123;</span><br><span class=\"line\">        front = (++front) % queue.length;</span><br><span class=\"line\">        size--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">Front</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isEmpty())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> queue[front];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">Rear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isEmpty())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> queue[rear];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> size == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> size == queue.length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 707 - Design Linked List","url":"http://yoursite.com/2019/03/30/LeetCode-Problem-707-Design-Linked-List/","content":"<p>Design your implementation of the linked list. You can choose to use the singly linked list or the doubly linked list. A node in a singly linked list should have two attributes: val and next. val is the value of the current node, and next is a pointer/reference to the next node. If you want to use the doubly linked list, you will need one more attribute prev to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.</p>\n<p>Implement these functions in your linked list class:</p>\n<p>get(index) : Get the value of the index-th node in the linked list. If the index is invalid, return -1.</p>\n<p>addAtHead(val) : Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.</p>\n<p>addAtTail(val) : Append a node of value val to the last element of the linked list.</p>\n<p>addAtIndex(index, val) : Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.</p>\n<p>deleteAtIndex(index) : Delete the index-th node in the linked list, if the index is valid.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyLinkedList linkedList = <span class=\"keyword\">new</span> MyLinkedList();</span><br><span class=\"line\">linkedList.addAtHead(<span class=\"number\">1</span>);</span><br><span class=\"line\">linkedList.addAtTail(<span class=\"number\">3</span>);</span><br><span class=\"line\">linkedList.addAtIndex(<span class=\"number\">1</span>, <span class=\"number\">2</span>);  <span class=\"comment\">// linked list becomes 1-&gt;2-&gt;3</span></span><br><span class=\"line\">linkedList.get(<span class=\"number\">1</span>);            <span class=\"comment\">// returns 2</span></span><br><span class=\"line\">linkedList.deleteAtIndex(<span class=\"number\">1</span>);  <span class=\"comment\">// now the linked list is 1-&gt;3</span></span><br><span class=\"line\">linkedList.get(<span class=\"number\">1</span>);            <span class=\"comment\">// returns 3</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>All values will be in the range of [1, 1000].</li>\n<li>The number of operations will be in the range of [1, 1000].</li>\n<li>Please do not use the built-in LinkedList library.</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Node head;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Node tail;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyLinkedList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    size = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span> || index &gt;= size)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node node = head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= index; i++)</span><br><span class=\"line\">        node = node.next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> node.val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addAtHead</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">    Node node = <span class=\"keyword\">new</span> Node(val);</span><br><span class=\"line\">    node.next = head;</span><br><span class=\"line\">    head = node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>)</span><br><span class=\"line\">        tail = head;</span><br><span class=\"line\"></span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addAtTail</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">    Node node = <span class=\"keyword\">new</span> Node(val);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>)</span><br><span class=\"line\">        head = node;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        tail.next = node;</span><br><span class=\"line\"></span><br><span class=\"line\">    tail = node;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addAtIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt; size)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index == size) &#123;</span><br><span class=\"line\">        addAtTail(val);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        addAtHead(val);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node node = <span class=\"keyword\">new</span> Node(val);</span><br><span class=\"line\">    Node current = head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">        current = current.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    node.next = current.next;</span><br><span class=\"line\">    current.next = node;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteAtIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span> || index &gt;= size)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        head = head.next;</span><br><span class=\"line\">        size--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node current = head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">        current = current.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    current.next = current.next.next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index == size - <span class=\"number\">1</span>)</span><br><span class=\"line\">        tail = current;</span><br><span class=\"line\"></span><br><span class=\"line\">    size--;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 705 - Design HashSet","url":"http://yoursite.com/2019/03/30/LeetCode-Problem-705-Design-HashSet/","content":"<p>Design a HashSet without using any built-in hash table libraries.</p>\n<p>To be specific, your design should include these functions:</p>\n<p>add(value): Insert a value into the HashSet. </p>\n<p>contains(value) : Return whether the value exists in the HashSet or not.</p>\n<p>remove(value): Remove a value in the HashSet. If the value does not exist in the HashSet, do nothing.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyHashSet hashSet = <span class=\"keyword\">new</span> MyHashSet();</span><br><span class=\"line\">hashSet.add(<span class=\"number\">1</span>);         </span><br><span class=\"line\">hashSet.add(<span class=\"number\">2</span>);         </span><br><span class=\"line\">hashSet.contains(<span class=\"number\">1</span>);    <span class=\"comment\">// returns true</span></span><br><span class=\"line\">hashSet.contains(<span class=\"number\">3</span>);    <span class=\"comment\">// returns false (not found)</span></span><br><span class=\"line\">hashSet.add(<span class=\"number\">2</span>);          </span><br><span class=\"line\">hashSet.contains(<span class=\"number\">2</span>);    <span class=\"comment\">// returns true</span></span><br><span class=\"line\">hashSet.remove(<span class=\"number\">2</span>);          </span><br><span class=\"line\">hashSet.contains(<span class=\"number\">2</span>);    <span class=\"comment\">// returns false (already removed)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>All values will be in the range of [0, 1000000].</li>\n<li>The number of operations will be in the range of [1, 10000].</li>\n<li>Please do not use the built-in HashSet library.</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size = <span class=\"number\">1000</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> LinkedList[] map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyHashSet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    map = <span class=\"keyword\">new</span> LinkedList[size];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)</span><br><span class=\"line\">        map[i] = <span class=\"keyword\">new</span> LinkedList&lt;Integer&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!contains(key)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> hash = hash(key);</span><br><span class=\"line\">        map[hash].add(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (contains(key)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> hash = hash(key);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> idx = map[hash].indexOf(key);</span><br><span class=\"line\">        map[hash].remove(idx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(<span class=\"keyword\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> hash = hash(key);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map[hash].contains(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Integer x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.hashCode() % size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 706 - Design HashMap","url":"http://yoursite.com/2019/03/30/LeetCode-Problem-706-Design-HashMap/","content":"<p>Design a HashMap without using any built-in hash table libraries.</p>\n<p>To be specific, your design should include these functions:</p>\n<p>put(key, value) : Insert a (key, value) pair into the HashMap. If the value already exists in the HashMap, update the value.</p>\n<p>get(key): Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.</p>\n<p>remove(key) : Remove the mapping for the value key if this map contains the mapping for the key.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyHashMap hashMap = <span class=\"keyword\">new</span> MyHashMap();</span><br><span class=\"line\">hashMap.put(<span class=\"number\">1</span>, <span class=\"number\">1</span>);          </span><br><span class=\"line\">hashMap.put(<span class=\"number\">2</span>, <span class=\"number\">2</span>);         </span><br><span class=\"line\">hashMap.get(<span class=\"number\">1</span>);            <span class=\"comment\">// returns 1</span></span><br><span class=\"line\">hashMap.get(<span class=\"number\">3</span>);            <span class=\"comment\">// returns -1 (not found)</span></span><br><span class=\"line\">hashMap.put(<span class=\"number\">2</span>, <span class=\"number\">1</span>);          <span class=\"comment\">// update the existing value</span></span><br><span class=\"line\">hashMap.get(<span class=\"number\">2</span>);            <span class=\"comment\">// returns 1 </span></span><br><span class=\"line\">hashMap.remove(<span class=\"number\">2</span>);          <span class=\"comment\">// remove the mapping for 2</span></span><br><span class=\"line\">hashMap.get(<span class=\"number\">2</span>);            <span class=\"comment\">// returns -1 (not found)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>All keys and values will be in the range of [0, 1000000].</li>\n<li>The number of operations will be in the range of [1, 10000].</li>\n<li>Please do not use the built-in HashMap library.</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size = <span class=\"number\">1000</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Node[] map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> key;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">    Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span> <span class=\"params\">(<span class=\"keyword\">int</span> key, <span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyHashMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    map = <span class=\"keyword\">new</span> Node[size];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)</span><br><span class=\"line\">        map[i] = <span class=\"keyword\">new</span> Node(-<span class=\"number\">1</span>, -<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(<span class=\"keyword\">int</span> key, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> hash = hash(key);</span><br><span class=\"line\">    Node p = find(map[hash], key);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        p.next = <span class=\"keyword\">new</span> Node(key, value);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        p.next.value = value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> hash = hash(key);</span><br><span class=\"line\">    Node p = find(map[hash], key);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> p.next == <span class=\"keyword\">null</span> ? -<span class=\"number\">1</span> : p.next.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> hash = hash(key);</span><br><span class=\"line\">    Node p = find(map[hash], key);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p.next != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        p.next = p.next.next;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Integer x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.hashCode() % size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">find</span><span class=\"params\">(Node n, <span class=\"keyword\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">    Node p = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n != <span class=\"keyword\">null</span> &amp;&amp; n.key != key) &#123;</span><br><span class=\"line\">        p = n;</span><br><span class=\"line\">        n = n.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 232 - Implement Queue using Stacks","url":"http://yoursite.com/2019/03/29/LeetCode-Problem-232-Implement-Queue-using-Stacks/","content":"<p>Implement the following operations of a queue using stacks.</p>\n<p>push(x) – Push element x to the back of queue.<br>pop() – Removes the element from in front of queue.<br>peek() – Get the front element.<br>empty() – Return whether the queue is empty.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyQueue queue = <span class=\"keyword\">new</span> MyQueue();</span><br><span class=\"line\"></span><br><span class=\"line\">queue.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">queue.push(<span class=\"number\">2</span>);  </span><br><span class=\"line\">queue.peek();  <span class=\"comment\">// returns 1</span></span><br><span class=\"line\">queue.pop();   <span class=\"comment\">// returns 1</span></span><br><span class=\"line\">queue.empty(); <span class=\"comment\">// returns false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h2><ul>\n<li>You must use only standard operations of a stack – which means only push to top, peek/pop from top, size, and is empty operations are valid.</li>\n<li>Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.</li>\n<li>You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Stack&lt;Integer&gt; stack1;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Stack&lt;Integer&gt; stack2;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> top;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    stack1 = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    stack2 = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stack1.isEmpty())</span><br><span class=\"line\">        top = x;</span><br><span class=\"line\"></span><br><span class=\"line\">    stack1.push(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stack2.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stack1.isEmpty())</span><br><span class=\"line\">            stack2.push(stack1.pop());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> stack2.pop();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">peek</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stack2.isEmpty())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> top;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> stack2.peek();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">empty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> stack1.isEmpty() &amp;&amp; stack2.isEmpty();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 225 - Implement Stack using Queues","url":"http://yoursite.com/2019/03/29/LeetCode-Problem-225-Implement-Stack-using-Queues/","content":"<p>Implement the following operations of a stack using queues.</p>\n<p>push(x) – Push element x onto stack.<br>pop() – Removes the element on top of the stack.<br>top() – Get the top element.<br>empty() – Return whether the stack is empty.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyStack stack = <span class=\"keyword\">new</span> MyStack();</span><br><span class=\"line\"></span><br><span class=\"line\">stack.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">stack.push(<span class=\"number\">2</span>);  </span><br><span class=\"line\">stack.top();   <span class=\"comment\">// returns 2</span></span><br><span class=\"line\">stack.pop();   <span class=\"comment\">// returns 2</span></span><br><span class=\"line\">stack.empty(); <span class=\"comment\">// returns false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h2><ul>\n<li>You must use only standard operations of a queue – which means only push to back, peek/pop from front, size, and is empty operations are valid.</li>\n<li>Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.</li>\n<li>You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Queue&lt;Integer&gt; queue1;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Queue&lt;Integer&gt; queue2;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> top;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyStack</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    queue1 = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    queue2 = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    queue1.offer(x);</span><br><span class=\"line\">    top = x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (queue1.size() &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        top = queue1.remove();</span><br><span class=\"line\">        queue2.offer(top);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = queue1.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue2.isEmpty())</span><br><span class=\"line\">        queue1.offer(queue2.remove());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">top</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> top;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">empty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> queue1.isEmpty();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 377 - Combination Sum IV","url":"http://yoursite.com/2019/03/29/LeetCode-Problem-377-Combination-Sum-IV/","content":"<p>Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>nums = [1, 2, 3]<br>target = 4</p>\n<p>The possible combination ways are:<br>(1, 1, 1, 1)<br>(1, 1, 2)<br>(1, 2, 1)<br>(1, 3)<br>(2, 1, 1)<br>(2, 2)<br>(3, 1)</p>\n<p>Note that different sequences are counted as different combinations.</p>\n<p>Therefore the output is 7.</p>\n<h2 id=\"Follow-up\"><a href=\"#Follow-up\" class=\"headerlink\" title=\"Follow up\"></a>Follow up</h2><p>What if negative numbers are allowed in the given array?<br>How does it change the problem?<br>What limitation we need to add to the question to allow negative numbers?</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">combinationSum4</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[target + <span class=\"number\">1</span>];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// dp[i] += dp[i - num[j]]</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= target; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= num)</span><br><span class=\"line\">                dp[i] += dp[i - num];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[target];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 538 - Convert BST to Greater Tree","url":"http://yoursite.com/2019/03/29/LeetCode-Problem-538-Convert-BST-to-Greater-Tree/","content":"<p>Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: The root of a Binary Search Tree like this:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   5</span><br><span class=\"line\"> /   \\</span><br><span class=\"line\">2     13</span><br></pre></td></tr></table></figure></p>\n<p>Output: The root of a Greater Tree like this:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   18</span><br><span class=\"line\">  /   \\</span><br><span class=\"line\">20     13</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">convertBST</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.right != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        convertBST(root.right);</span><br><span class=\"line\"></span><br><span class=\"line\">    sum += root.val;</span><br><span class=\"line\">    root.val = sum;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.left != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        convertBST(root.left);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 216 - Combination Sum III","url":"http://yoursite.com/2019/03/28/LeetCode-Problem-216-Combination-Sum-III/","content":"<p>Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>All numbers will be positive integers.</li>\n<li>The solution set must not contain duplicate combinations.</li>\n</ul>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: k = 3, n = 7</p>\n<p>Output: [[1,2,4]]</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: k = 3, n = 9</p>\n<p>Output: [[1,2,6], [1,3,5], [2,3,4]]</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum3(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> n) &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    List&lt;Integer&gt; combination = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    combinationSum3Helper(result, combination, k, n, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">combinationSum3Helper</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; combination, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> idx)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> &amp;&amp; combination.size() == k) &#123;</span><br><span class=\"line\">        result.add(<span class=\"keyword\">new</span> ArrayList&lt;&gt;(combination));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = idx; i &lt;= <span class=\"number\">9</span> &amp;&amp; combination.size() &lt; k &amp;&amp; n &gt; <span class=\"number\">0</span>; i++) &#123;</span><br><span class=\"line\">        combination.add(i);</span><br><span class=\"line\">        combinationSum3Helper(result, combination, k, n - i, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        combination.remove(combination.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 40 - Combination Sum II","url":"http://yoursite.com/2019/03/28/LeetCode-Problem-40-Combination-Sum-II/","content":"<p>Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.</p>\n<p>Each number in candidates may only be used once in the combination.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>All numbers (including target) will be positive integers.</li>\n<li>The solution set must not contain duplicate combinations.</li>\n</ul>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: candidates = [10,1,2,7,6,1,5], target = 8,<br>A solution set is:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [1, 7],</span><br><span class=\"line\">  [1, 2, 5],</span><br><span class=\"line\">  [2, 6],</span><br><span class=\"line\">  [1, 1, 6]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: candidates = [2,5,2,1,2], target = 5,<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A solution <span class=\"built_in\">set</span> is:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [1,2,2],</span><br><span class=\"line\">  [5]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum2(<span class=\"keyword\">int</span>[] candidates, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    List&lt;Integer&gt; combination = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    Arrays.sort(candidates);</span><br><span class=\"line\"></span><br><span class=\"line\">    combinationSum2Helper(result, combination, candidates, target, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">combinationSum2Helper</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; combination, <span class=\"keyword\">int</span>[] candidates, <span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> idx)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        result.add(<span class=\"keyword\">new</span> ArrayList&lt;&gt;(combination));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = idx; i &lt; candidates.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt; idx &amp;&amp; candidates[i] == candidates[i - <span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        combination.add(candidates[i]);</span><br><span class=\"line\">        combinationSum2Helper(result, combination, candidates, target - candidates[i], i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        combination.remove(combination.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 39 - Combination Sum","url":"http://yoursite.com/2019/03/28/LeetCode-Problem-39-Combination-Sum/","content":"<p>Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.</p>\n<p>The same repeated number may be chosen from candidates unlimited number of times.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>All numbers (including target) will be positive integers.</li>\n<li>The solution set must not contain duplicate combinations.</li>\n</ul>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: candidates = [2,3,6,7], target = 7,<br>A solution set is:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [7],</span><br><span class=\"line\">  [2,2,3]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: candidates = [2,3,5], target = 8,<br>A solution set is:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [2,2,2,2],</span><br><span class=\"line\">  [2,3,3],</span><br><span class=\"line\">  [3,5]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class=\"keyword\">int</span>[] candidates, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    List&lt;Integer&gt; combination = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    Arrays.sort(candidates);</span><br><span class=\"line\"></span><br><span class=\"line\">    combinationSumHelper(result, combination, candidates, target, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">combinationSumHelper</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; combination, <span class=\"keyword\">int</span>[] candidates, <span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> idx)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        result.add(<span class=\"keyword\">new</span> ArrayList&lt;&gt;(combination));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = idx; i &lt; candidates.length; i++) &#123;</span><br><span class=\"line\">        combination.add(candidates[i]);</span><br><span class=\"line\">        combinationSumHelper(result, combination, candidates, target - candidates[i], i);</span><br><span class=\"line\">        combination.remove(combination.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 107 - Binary Tree Level Order Traversal II","url":"http://yoursite.com/2019/03/27/LeetCode-Problem-107-Binary-Tree-Level-Order-Traversal-II/","content":"<p>Given a binary tree, return the bottom-up level order traversal of its nodes’ values. (ie, from left to right, level by level from leaf to root).</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Given binary tree [3,9,20,null,null,15,7],<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  3</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">9  20</span><br><span class=\"line\">  /  \\</span><br><span class=\"line\"> 15   7</span><br></pre></td></tr></table></figure></p>\n<p>return its bottom-up level order traversal as:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [15,7],</span><br><span class=\"line\">  [9,20],</span><br><span class=\"line\">  [3]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    queue.offer(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = queue.size();</span><br><span class=\"line\">        List&lt;Integer&gt; level = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            TreeNode node = queue.poll();</span><br><span class=\"line\">            level.add(node.val);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.left != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                queue.offer(node.left);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.right != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                queue.offer(node.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        result.add(level);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Collections.reverse(result);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 102 - Binary Tree Level Order Traversal","url":"http://yoursite.com/2019/03/27/LeetCode-Problem-102-Binary-Tree-Level-Order-Traversal/","content":"<p>Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Given binary tree [3,9,20,null,null,15,7],<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  3</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">9  20</span><br><span class=\"line\">  /  \\</span><br><span class=\"line\"> 15   7</span><br></pre></td></tr></table></figure></p>\n<p>return its level order traversal as:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [3],</span><br><span class=\"line\">  [9,20],</span><br><span class=\"line\">  [15,7]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    queue.offer(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = queue.size();</span><br><span class=\"line\">        List&lt;Integer&gt; level = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            TreeNode node = queue.poll();</span><br><span class=\"line\">            level.add(node.val);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.left != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                queue.offer(node.left);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.right != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                queue.offer(node.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        result.add(level);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 145 - Binary Tree Postorder Traversal","url":"http://yoursite.com/2019/03/27/LeetCode-Problem-145-Binary-Tree-Postorder-Traversal/","content":"<p>Given a binary tree, return the postorder traversal of its nodes’ values.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: [1,null,2,3]<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\"> \\</span><br><span class=\"line\">  2</span><br><span class=\"line\"> /</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure></p>\n<p>Output: [3,2,1]</p>\n<h2 id=\"Follow-up\"><a href=\"#Follow-up\" class=\"headerlink\" title=\"Follow up\"></a>Follow up</h2><p>Recursive solution is trivial, could you do it iteratively?</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">postorderTraversal</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; result = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    stack.push(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!stack.isEmpty()) &#123;</span><br><span class=\"line\">        TreeNode node = stack.pop();</span><br><span class=\"line\">        result.add(<span class=\"number\">0</span>, node.val);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.left != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            stack.push(node.left);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.right != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            stack.push(node.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 94 - Binary Tree Inorder Traversal","url":"http://yoursite.com/2019/03/27/LeetCode-Problem-94-Binary-Tree-Inorder-Traversal/","content":"<p>Given a binary tree, return the inorder traversal of its nodes’ values.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: [1,null,2,3]<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\"> \\</span><br><span class=\"line\">  2</span><br><span class=\"line\"> /</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure></p>\n<p>Output: [1,3,2]</p>\n<h2 id=\"Follow-up\"><a href=\"#Follow-up\" class=\"headerlink\" title=\"Follow up\"></a>Follow up</h2><p>Recursive solution is trivial, could you do it iteratively?</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">inorderTraversal</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    TreeNode current = root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current != <span class=\"keyword\">null</span> || !stack.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (current != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            stack.push(current);</span><br><span class=\"line\">            current = current.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        TreeNode node = stack.pop();</span><br><span class=\"line\">        result.add(node.val);</span><br><span class=\"line\">        current = node.right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 144 - Binary Tree Preorder Traversal","url":"http://yoursite.com/2019/03/27/LeetCode-Problem-144-Binary-Tree-Preorder-Traversal/","content":"<p>Given a binary tree, return the preorder traversal of its nodes’ values.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: [1,null,2,3]<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\"> \\</span><br><span class=\"line\">  2</span><br><span class=\"line\"> /</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure></p>\n<p>Output: [1,2,3]</p>\n<h2 id=\"Follow-up\"><a href=\"#Follow-up\" class=\"headerlink\" title=\"Follow up\"></a>Follow up</h2><p>Recursive solution is trivial, could you do it iteratively?</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">preorderTraversal</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    stack.push(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!stack.isEmpty()) &#123;</span><br><span class=\"line\">        TreeNode node = stack.pop();</span><br><span class=\"line\">        result.add(node.val);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.right != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            stack.push(node.right);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.left != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            stack.push(node.left);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 92 - Reverse Linked List II","url":"http://yoursite.com/2019/03/27/LeetCode-Problem-92-Reverse-Linked-List-II/","content":"<p>Reverse a linked list from position m to n. Do it in one-pass.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>1 ≤ m ≤ n ≤ length of list.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m = 2, n = 4</p>\n<p>Output: 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next;</span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseBetween</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    ListNode dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    dummy.next = head;</span><br><span class=\"line\">    ListNode mPrevNode = dummy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; m; i++)</span><br><span class=\"line\">        mPrevNode = mPrevNode.next;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode mNode = mPrevNode.next;</span><br><span class=\"line\">    ListNode nNode = mNode;</span><br><span class=\"line\">    ListNode nPostNode = nNode.next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = m; i &lt; n; i++) &#123;</span><br><span class=\"line\">        ListNode next = nPostNode.next;</span><br><span class=\"line\">        nPostNode.next = nNode;</span><br><span class=\"line\">        nNode = nPostNode;</span><br><span class=\"line\">        nPostNode = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    mNode.next = nPostNode;</span><br><span class=\"line\">    mPrevNode.next = nNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummy.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 206 - Reverse Linked List","url":"http://yoursite.com/2019/03/27/LeetCode-Problem-206-Reverse-Linked-List/","content":"<p>Reverse a singly linked list.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</p>\n<p>Output: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p>\n<h2 id=\"Follow-up\"><a href=\"#Follow-up\" class=\"headerlink\" title=\"Follow up\"></a>Follow up</h2><p>A linked list can be reversed either iteratively or recursively. Could you implement both?</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next;</span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    ListNode prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    ListNode cur = head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        ListNode next = cur.next;</span><br><span class=\"line\">        cur.next = prev;</span><br><span class=\"line\">        prev = cur;</span><br><span class=\"line\">        cur = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> prev;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 142 - Linked List Cycle II","url":"http://yoursite.com/2019/03/27/LeetCode-Problem-142-Linked-List-Cycle-II/","content":"<p>Given a linked list, return the node where the cycle begins. If there is no cycle, return null.</p>\n<p>To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>Do not modify the linked list.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: head = [3,2,0,-4], pos = 1</p>\n<p>Output: true</p>\n<p>Explanation: There is a cycle in the linked list, where tail connects to the second node.</p>\n<p><a href=\"https://imgchr.com/i/AU5Gp4\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/03/26/AU5Gp4.png\" alt=\"AU5Gp4.png\"></a></p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: head = [1,2], pos = 0</p>\n<p>Output: true</p>\n<p>Explanation: There is a cycle in the linked list, where tail connects to the first node.</p>\n<p><a href=\"https://imgchr.com/i/AU5Un1\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/03/26/AU5Un1.png\" alt=\"AU5Un1.png\"></a></p>\n<h3 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h3><p>Input: head = [1], pos = -1</p>\n<p>Output: false</p>\n<p>Explanation: There is no cycle in the linked list.</p>\n<p><a href=\"https://imgchr.com/i/AU5DhD\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/03/26/AU5DhD.png\" alt=\"AU5DhD.png\"></a></p>\n<h2 id=\"Follow-up\"><a href=\"#Follow-up\" class=\"headerlink\" title=\"Follow up\"></a>Follow up</h2><p>Can you solve it without using extra space?</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next;</span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> x) &#123;</span><br><span class=\"line\">        val = x;</span><br><span class=\"line\">        next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">detectCycle</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    ListNode result = hasCycle(head);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (head != result) &#123;</span><br><span class=\"line\">        head = head.next;</span><br><span class=\"line\">        result = result.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ListNode <span class=\"title\">hasCycle</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode fast = head;</span><br><span class=\"line\">    ListNode slow = head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast.next != <span class=\"keyword\">null</span> &amp;&amp; fast.next.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        fast = fast.next.next;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fast == slow)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> slow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 141 - Linked List Cycle","url":"http://yoursite.com/2019/03/27/LeetCode-Problem-141-Linked-List-Cycle/","content":"<p>Given a linked list, determine if it has a cycle in it.</p>\n<p>To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: head = [3,2,0,-4], pos = 1</p>\n<p>Output: true</p>\n<p>Explanation: There is a cycle in the linked list, where tail connects to the second node.</p>\n<p><a href=\"https://imgchr.com/i/AU5Gp4\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/03/26/AU5Gp4.png\" alt=\"AU5Gp4.png\"></a></p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: head = [1,2], pos = 0</p>\n<p>Output: true</p>\n<p>Explanation: There is a cycle in the linked list, where tail connects to the first node.</p>\n<p><a href=\"https://imgchr.com/i/AU5Un1\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/03/26/AU5Un1.png\" alt=\"AU5Un1.png\"></a></p>\n<h3 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h3><p>Input: head = [1], pos = -1</p>\n<p>Output: false</p>\n<p>Explanation: There is no cycle in the linked list.</p>\n<p><a href=\"https://imgchr.com/i/AU5DhD\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/03/26/AU5DhD.png\" alt=\"AU5DhD.png\"></a></p>\n<h2 id=\"Follow-up\"><a href=\"#Follow-up\" class=\"headerlink\" title=\"Follow up\"></a>Follow up</h2><p>Can you solve it using O(1) (i.e. constant) memory?</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next;</span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> x) &#123;</span><br><span class=\"line\">        val = x;</span><br><span class=\"line\">        next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasCycle</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ListNode fast = head;</span><br><span class=\"line\">    ListNode slow = head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast.next != <span class=\"keyword\">null</span> &amp;&amp; fast.next.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        fast = fast.next.next;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fast == slow)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 260 - Single Number III","url":"http://yoursite.com/2019/03/25/LeetCode-Problem-260-Single-Number-III/","content":"<p>Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input:  [1,2,1,3,2,5]</p>\n<p>Output: [3,5]</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ol>\n<li>The order of the result is not important. So in the above example, [5, 3] is also correct.</li>\n<li>Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?</li>\n</ol>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] singleNumber(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> xor = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num2 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums)</span><br><span class=\"line\">        xor ^= num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> last = xor - (xor &amp; (xor - <span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((last &amp; nums[i]) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            num1 ^= nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            num2 ^= nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    result[<span class=\"number\">0</span>] = num1;</span><br><span class=\"line\">    result[<span class=\"number\">1</span>] = num2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 703 - Kth Largest Element in a Stream","url":"http://yoursite.com/2019/03/25/LeetCode-Problem-703-Kth-Largest-Element-in-a-Stream/","content":"<p>Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.</p>\n<p>Your KthLargest class will have a constructor which accepts an integer k and an integer array nums, which contains initial elements from the stream. For each call to the method KthLargest.add, return the element representing the kth largest element in the stream.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>int k = 3;<br>int[] arr = [4,5,8,2];<br>KthLargest kthLargest = new KthLargest(3, arr);<br>kthLargest.add(3);   // returns 4<br>kthLargest.add(5);   // returns 5<br>kthLargest.add(10);  // returns 5<br>kthLargest.add(9);   // returns 8<br>kthLargest.add(4);   // returns 8</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>You may assume that nums’ length ≥ k-1 and k ≥ 1.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> PriorityQueue&lt;Integer&gt; minHeap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">KthLargest</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    size = k;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums)</span><br><span class=\"line\">        add(num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">    minHeap.offer(val);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minHeap.size() &gt; size)</span><br><span class=\"line\">        minHeap.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> minHeap.peek();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 215 - Kth Largest Element in an Array","url":"http://yoursite.com/2019/03/24/LeetCode-Problem-215-Kth-Largest-Element-in-an-Array/","content":"<p>Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.</p>\n<p>Example </p>\n<h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: [3,2,1,5,6,4] and k = 2</p>\n<p>Output: 5</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: [3,2,3,1,2,4,5,5,6] and k = 4</p>\n<p>Output: 4</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>You may assume k is always valid, 1 ≤ k ≤ array’s length.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findKthLargest</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sort(nums, k, <span class=\"number\">0</span>, nums.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pivot = partition(nums, left, right);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pivot == nums.length - k)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[pivot];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pivot &lt; nums.length - k)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sort(nums, k, pivot + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> sort(nums, k, left, pivot - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pivot = left;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt;= right &amp;&amp; nums[left] &lt;= nums[pivot])</span><br><span class=\"line\">            left++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt;= right &amp;&amp; nums[right] &gt; nums[pivot])</span><br><span class=\"line\">            right--;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt; right)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        swap(nums, left, right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    swap(nums, pivot, right);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = nums[i];</span><br><span class=\"line\">    nums[i] = nums[j];</span><br><span class=\"line\">    nums[j] = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 541 - Zigzag Iterator II","url":"http://yoursite.com/2019/03/24/LintCode-Problem-541-Zigzag-Iterator-II/","content":"<p>Follow up Zigzag Iterator: What if you are given k 1d vectors? How well can your code be extended to such cases? The “Zigzag” order is not clearly defined and is ambiguous for k &gt; 2 cases. If “Zigzag” does not look right to you, replace “Zigzag” with “Cyclic”.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: k = 3<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vecs = [</span><br><span class=\"line\">    [1,2,3],</span><br><span class=\"line\">    [4,5,6,7],</span><br><span class=\"line\">    [8,9],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>Output: [1,4,8,2,5,9,3,6,7]</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: k = 3<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vecs = [</span><br><span class=\"line\">    [1,1,1]</span><br><span class=\"line\">    [2,2,2]</span><br><span class=\"line\">    [3,3,3]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>Output: [1,2,3,1,2,3,1,2,3]</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Queue&lt;Iterator&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ZigzagIterator2</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; vecs)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (List&lt;Integer&gt; vec : vecs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!vec.isEmpty())</span><br><span class=\"line\">            queue.offer(vec.iterator());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Iterator iterator = queue.poll();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> next = (<span class=\"keyword\">int</span>) iterator.next();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iterator.hasNext())</span><br><span class=\"line\">        queue.offer(iterator);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !queue.isEmpty();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 540 - Zigzag Iterator","url":"http://yoursite.com/2019/03/24/LintCode-Problem-540-Zigzag-Iterator/","content":"<p>Given two 1d vectors, implement an iterator to return their elements alternately.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: v1 = [1, 2] and v2 = [3, 4, 5, 6]</p>\n<p>Output: [1, 3, 2, 4, 5, 6]</p>\n<p>Explanation:<br>By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1, 3, 2, 4, 5, 6].</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: v1 = [1, 1, 1, 1] and v2 = [3, 4, 5, 6]</p>\n<p>Output: [1, 3, 1, 4, 1, 5, 1, 6]</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Queue&lt;Iterator&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ZigzagIterator</span><span class=\"params\">(List&lt;Integer&gt; v1, List&lt;Integer&gt; v2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!v1.isEmpty())</span><br><span class=\"line\">        queue.offer(v1.iterator());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!v2.isEmpty())</span><br><span class=\"line\">        queue.offer(v2.iterator());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Iterator iterator = queue.poll();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> next = (<span class=\"keyword\">int</span>) iterator.next();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iterator.hasNext())</span><br><span class=\"line\">        queue.offer(iterator);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !queue.isEmpty();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 904 - Plus One Linked List","url":"http://yoursite.com/2019/03/24/LintCode-Problem-904-Plus-One-Linked-List/","content":"<p>Given a non-negative integer represented as non-empty a singly linked list of digits, plus one to the integer.</p>\n<p>You may assume the integer do not contain any leading zero, except the number 0 itself.</p>\n<p>The digits are stored such that the most significant digit is at the head of the list.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: 1 -&gt; 2 -&gt; 3 -&gt; null</p>\n<p>Output: 1 -&gt; 2 -&gt; 4 -&gt; null</p>\n<p>Explanation:<br>123 + 1 = 124</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: 9 -&gt; 9 -&gt; null</p>\n<p>Output: 1 -&gt; 0 -&gt; 0 -&gt; null</p>\n<p>Explanation:<br>99 + 1 = 100</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next;</span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> x) &#123;</span><br><span class=\"line\">        val = x;</span><br><span class=\"line\">        next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">plusOne</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    ListNode dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    dummy.next = head;</span><br><span class=\"line\">    ListNode slow = dummy;</span><br><span class=\"line\">    ListNode fast = dummy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        fast = fast.next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fast.val != <span class=\"number\">9</span>)</span><br><span class=\"line\">            slow = fast;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fast.val != <span class=\"number\">9</span>) &#123;</span><br><span class=\"line\">        fast.val++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        slow.val++;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (slow != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            slow.val = <span class=\"number\">0</span>;</span><br><span class=\"line\">            slow = slow.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummy.val == <span class=\"number\">0</span> ? head : dummy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 872 - Kill Process","url":"http://yoursite.com/2019/03/23/LintCode-Problem-872-Kill-Process/","content":"<p>In this problem, each process has a unique PID (process id) and PPID (parent process id).</p>\n<p>Each process only has one parent process, but may have one or more children processes. This is just like a tree structure. Only one process has PPID that is 0, which means this process has no parent process. All the PIDs will be distinct positive integers.</p>\n<p>We use two list of integers to represent a list of processes, where the first list contains PID for each process and the second list contains the corresponding PPID.</p>\n<p>Now given the two lists, and a PID representing a process you want to kill, return a list of PIDs of processes that will be killed in the end. You should assume that when a process is killed, all its children processes will be killed. No order is required for the final answer.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ol>\n<li>The given kill id is guaranteed to be one of the given PIDs.</li>\n<li>There is at least one PID in the list.</li>\n</ol>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: PID = [1, 3, 10, 5], PPID = [3, 0, 5, 3], killID = 5</p>\n<p>Output: [5, 10]</p>\n<p>Explanation: Kill 5 will also kill 10.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   3</span><br><span class=\"line\"> /   \\</span><br><span class=\"line\">1     5</span><br><span class=\"line\">     /</span><br><span class=\"line\">    10</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: PID = [1, 2, 3], PPID = [0, 1, 1], killID = 2</p>\n<p>Output: [2]</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">killProcess</span><span class=\"params\">(List&lt;Integer&gt; pid, List&lt;Integer&gt; ppid, <span class=\"keyword\">int</span> kill)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    Map&lt;Integer, List&lt;Integer&gt;&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ppid.size(); i++) &#123;</span><br><span class=\"line\">        map.putIfAbsent(ppid.get(i), <span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">        map.get(ppid.get(i)).add(pid.get(i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dfs(result, map, kill);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(List&lt;Integer&gt; result, Map&lt;Integer, List&lt;Integer&gt;&gt; map, <span class=\"keyword\">int</span> pid)</span> </span>&#123;</span><br><span class=\"line\">    result.add(pid);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!map.containsKey(pid))</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Integer i : map.get(pid))</span><br><span class=\"line\">        dfs(result, map, i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 879 - Output Contest Matches","url":"http://yoursite.com/2019/03/23/LintCode-Problem-879-Output-Contest-Matches/","content":"<p>During the NBA playoffs, we always arrange the rather strong team to play with the rather weak team, like make the rank 1 team play with the rank nth team, which is a good strategy to make the contest more interesting. Now, you’re given n teams, and you need to output their final contest matches in the form of a string.</p>\n<p>The n teams are given in the form of positive integers from 1 to n, which represents their initial rank. (Rank 1 is the strongest team and Rank n is the weakest team.) We’ll use parentheses () and commas , to represent the contest team pairing - parentheses () for pairing and commas , for partition. During the pairing process in each round, you always need to follow the strategy of making the rather strong one pair with the rather weak one.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ol>\n<li>The n is in range [2, 2^12].</li>\n<li>We ensure that the input n can be converted into the form 2^k, where k is a positive integer.</li>\n</ol>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: 2</p>\n<p>Output: “(1,2)”</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: 4</p>\n<p>Output: “((1,4),(2,3))”</p>\n<p>Explanation:<br>In the first round, we pair the team 1 and 4, the team 2 and 3 together, as we need to make the strong team and weak team together.<br>And we got (1,4),(2,3).<br>In the second round, the winners of (1,4) and (2,3) need to play again to generate the final winner, so you need to add the paratheses outside them.<br>And we got the final answer ((1,4),(2,3)).</p>\n<h3 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h3><p>Input: 8</p>\n<p>Output: “(((1,8),(4,5)),((2,7),(3,6)))”</p>\n<p>Explanation:<br>First round: (1,8),(2,7),(3,6),(4,5)<br>Second round: ((1,8),(4,5)),((2,7),(3,6))<br>Third round: (((1,8),(4,5)),((2,7),(3,6)))</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">findContestMatch</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    String[] result = <span class=\"keyword\">new</span> String[n];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        result[i - <span class=\"number\">1</span>] = String.valueOf(i);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n / <span class=\"number\">2</span>; i++)</span><br><span class=\"line\">            result[i - <span class=\"number\">1</span>] = <span class=\"string\">\"(\"</span> + result[i - <span class=\"number\">1</span>] + <span class=\"string\">\",\"</span>+ result[n - i] + <span class=\"string\">\")\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        n &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 200 - Number of Islands","url":"http://yoursite.com/2019/03/22/LeetCode-Problem-200-Number-of-Islands/","content":"<p>Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11110</span><br><span class=\"line\">11010</span><br><span class=\"line\">11000</span><br><span class=\"line\">00000</span><br></pre></td></tr></table></figure></p>\n<p>Output: 1</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11000</span><br><span class=\"line\">11000</span><br><span class=\"line\">00100</span><br><span class=\"line\">00011</span><br></pre></td></tr></table></figure></p>\n<p>Output: 3</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">numIslands</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] grid)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (grid == <span class=\"keyword\">null</span> || grid.length &lt; <span class=\"number\">1</span> || grid[<span class=\"number\">0</span>].length &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = grid.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[][] visit = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[n][m];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"string\">'1'</span> &amp;&amp; !visit[i][j]) &#123;</span><br><span class=\"line\">                bfs(grid, visit, i, j);</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] grid, <span class=\"keyword\">boolean</span>[][] visit, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = grid.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] directions = &#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, &#123;-<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">0</span>, -<span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\">    Queue&lt;<span class=\"keyword\">int</span>[]&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    queue.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;i, j&#125;);</span><br><span class=\"line\">    visit[i][j] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] position = queue.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] direction : directions) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = position[<span class=\"number\">0</span>] + direction[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> y = position[<span class=\"number\">1</span>] + direction[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &gt;= <span class=\"number\">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class=\"number\">0</span> &amp;&amp; y &lt; m &amp;&amp; grid[x][y] == <span class=\"string\">'1'</span> &amp;&amp; !visit[x][y]) &#123;</span><br><span class=\"line\">                visit[x][y] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                queue.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;x, y&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 650 - Find Leaves of Binary Tree","url":"http://yoursite.com/2019/03/22/LintCode-Problem-650-Find-Leaves-of-Binary-Tree/","content":"<p>Given a binary tree, collect a tree’s nodes as if you were doing this: Collect and remove all leaves, repeat until the tree is empty.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: {1,2,3,4,5}</p>\n<p>Output: [[4, 5, 3], [2], [1]].</p>\n<p>Explanation:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    1</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  2   3</span><br><span class=\"line\"> / \\     </span><br><span class=\"line\">4   5</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: {1,2,3,4}</p>\n<p>Output: [[4, 3], [2], [1]].</p>\n<p>Explanation:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    1</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  2   3</span><br><span class=\"line\"> /</span><br><span class=\"line\">4</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode left, right;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.left = <span class=\"keyword\">this</span>.right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; findLeaves(TreeNode root) &#123;</span><br><span class=\"line\">    Map&lt;Integer, List&lt;Integer&gt;&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    findLeavesHelper(root, map);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (List&lt;Integer&gt; values : map.values())</span><br><span class=\"line\">        result.add(values);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">findLeavesHelper</span><span class=\"params\">(TreeNode root, Map&lt;Integer, List&lt;Integer&gt;&gt; map)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = findLeavesHelper(root.left, map);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = findLeavesHelper(root.right, map);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> level = Math.max(left, right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    map.putIfAbsent(level, <span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">    map.get(level).add(root.val);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> level;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 56 - Merge Intervals","url":"http://yoursite.com/2019/03/22/LeetCode-Problem-56-Merge-Intervals/","content":"<p>Given a collection of intervals, merge all overlapping intervals.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: [[1,3],[2,6],[8,10],[15,18]]</p>\n<p>Output: [[1,6],[8,10],[15,18]]</p>\n<p>Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: [[1,4],[4,5]]</p>\n<p>Output: [[1,5]]</p>\n<p>Explanation: Intervals [1,4] and [4,5] are considered overlapping.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Interval</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> start;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end;</span><br><span class=\"line\">    Interval() &#123; start = <span class=\"number\">0</span>; end = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">    Interval(<span class=\"keyword\">int</span> s, <span class=\"keyword\">int</span> e) &#123; start = s; end = e; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Interval&gt; <span class=\"title\">merge</span><span class=\"params\">(List&lt;Interval&gt; intervals)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Interval&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    Collections.sort(intervals, <span class=\"keyword\">new</span> Comparator&lt;Interval&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Interval o1, Interval o2)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> o1.start - o2.start;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Interval i : intervals) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result.size() &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            result.add(i);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Interval last = result.get(result.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i.start &gt; last.end)</span><br><span class=\"line\">            result.add(i);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            last.end = Math.max(last.end, i.end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 917 - Palindrome Permutation II","url":"http://yoursite.com/2019/03/21/LintCode-Problem-917-Palindrome-Permutation-II/","content":"<p>Given a string s, return all the palindromic permutations (without duplicates) of it. Return an empty list if no palindromic permutation could be form.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: s = “aabb”</p>\n<p>Output: [“abba”,”baab”]</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: “abc”</p>\n<p>Output: []</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">generatePalindromes</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;String&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    Map&lt;Character, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    String odd = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    List&lt;Character&gt; half = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Character ch : s.toCharArray())</span><br><span class=\"line\">        map.put(ch, map.getOrDefault(ch, <span class=\"number\">0</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Map.Entry&lt;Character, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class=\"line\">        Character key = entry.getKey();</span><br><span class=\"line\">        Integer value = entry.getValue();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value % <span class=\"number\">2</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">            odd = String.valueOf(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; value / <span class=\"number\">2</span>; i++)</span><br><span class=\"line\">            half.add(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    permutation(result, half, odd, <span class=\"keyword\">new</span> StringBuilder(), <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[half.size()]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">permutation</span><span class=\"params\">(List&lt;String&gt; result, List&lt;Character&gt; half, String odd, StringBuilder sb, <span class=\"keyword\">boolean</span>[] visit)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sb.length() == half.size()) &#123;</span><br><span class=\"line\">        result.add(sb.toString() + odd + sb.reverse().toString());</span><br><span class=\"line\">        sb.reverse();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; half.size(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; half.get(i) == half.get(i - <span class=\"number\">1</span>) &amp;&amp; !visit[i - <span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!visit[i]) &#123;</span><br><span class=\"line\">            visit[i] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            sb.append(half.get(i));</span><br><span class=\"line\">            permutation(result, half, odd, sb, visit);</span><br><span class=\"line\">            sb.deleteCharAt(sb.length() - <span class=\"number\">1</span>);</span><br><span class=\"line\">            visit[i] = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 916 - Palindrome Permutation","url":"http://yoursite.com/2019/03/19/LintCode-Problem-916-Palindrome-Permutation/","content":"<p>Given a string, determine if a permutation of the string could form a palindrome.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: s = “code”</p>\n<p>Output: False</p>\n<p>Explanation:<br>No solution</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: s = “aab”</p>\n<p>Output: True</p>\n<p>Explanation:<br>“aab” –&gt; “aba”</p>\n<h3 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h3><p>Input: s = “carerac”</p>\n<p>Output: True</p>\n<p>Explanation:<br>“carerac” –&gt; “carerac”</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canPermutePalindrome</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    Map&lt;Character, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Character ch : s.toCharArray())</span><br><span class=\"line\">        map.put(ch, map.getOrDefault(ch, <span class=\"number\">0</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : map.values()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> != <span class=\"number\">0</span>)</span><br><span class=\"line\">            count++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 642 - Moving Average from Data Stream","url":"http://yoursite.com/2019/03/19/LintCode-Problem-642-Moving-Average-from-Data-Stream/","content":"<p>Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>MovingAverage m = new MovingAverage(3);<br>m.next(1) = 1 // return 1.00000<br>m.next(10) = (1 + 10) / 2 // return 5.50000<br>m.next(3) = (1 + 10 + 3) / 3 // return 4.66667<br>m.next(5) = (10 + 3 + 5) / 3 // return 6.00000</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Queue&lt;Integer&gt; queue;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">double</span> sum;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MovingAverage</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">    queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.size = size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">next</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">    sum += val;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (queue.size() == size)</span><br><span class=\"line\">        sum -= queue.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">    queue.offer(val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum / queue.size();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 551 - Nested List Weight Sum","url":"http://yoursite.com/2019/03/17/LintCode-Problem-551-Nested-List-Weight-Sum/","content":"<p>Given a nested list of integers, return the sum of all integers in the list weighted by their depth. Each element is either an integer, or a list – whose elements may also be integers or other lists.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: the list [[1,1],2,[1,1]], </p>\n<p>Output: 10. </p>\n<p>Explanation:<br>four 1’s at depth 2, one 2 at depth 1, 4 * 1 * 2 + 1 * 2 * 1 = 10</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: the list [1,[4,[6]]], </p>\n<p>Output: 27. </p>\n<p>Explanation:<br>one 1 at depth 1, one 4 at depth 2, and one 6 at depth 3; 1 + 4 * 2 + 6 * 3 = 27</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NestedInteger</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isInteger</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getInteger</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;NestedInteger&gt; <span class=\"title\">getList</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">depthSum</span><span class=\"params\">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;</span><br><span class=\"line\">    Queue&lt;NestedInteger&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> level = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (NestedInteger nestedInteger : nestedList)</span><br><span class=\"line\">        queue.offer(nestedInteger);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = queue.size();</span><br><span class=\"line\">        level++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            NestedInteger nestedInteger = queue.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nestedInteger.isInteger())</span><br><span class=\"line\">                sum += level * nestedInteger.getInteger();</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (NestedInteger list : nestedInteger.getList())</span><br><span class=\"line\">                    queue.offer(list);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 813 - Find Anagram Mappings","url":"http://yoursite.com/2019/03/17/LintCode-Problem-813-Find-Anagram-Mappings/","content":"<p>Given two lists A and B, and B is an anagram of A. B is an anagram of A means B is made by randomizing the order of the elements in A.</p>\n<p>We want to find an index mapping P, from A to B. A mapping P[i] = j means the ith element in A appears in B at index j.</p>\n<p>These lists A and B may contain duplicates. If there are multiple answers, output any of them.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ul>\n<li>A, B have equal lengths in range [1, 100].</li>\n<li>A[i], B[i] are integers in range [0, 10^5].</li>\n</ul>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input:  A = [12, 28, 46, 32, 50] and B = [50, 12, 32, 46, 28]</p>\n<p>Output: [1, 4, 3, 2, 0]</p>\n<p>Explanation:<br>As P[0] = 1 because the 0th element of A appears at B[1], and P[1] = 4 because the 1st element of A appears at B[4], and so on.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input:  A = [1, 2, 3, 4, 5] and B = [5, 4, 3, 2, 1]</p>\n<p>Output: [4, 3, 2, 1, 0]</p>\n<p>Explanation:<br>As P[0] = 4 because the 0th element of A appears at B[4], and P[1] = 3 because the 1st element of A</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] anagramMappings(<span class=\"keyword\">int</span>[] A, <span class=\"keyword\">int</span>[] B) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[A.length];</span><br><span class=\"line\">    Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; B.length; i++)</span><br><span class=\"line\">        map.put(B[i], i);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; A.length; i++)</span><br><span class=\"line\">        result[i] = map.get(A[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 629 - Minimum Spanning Tree","url":"http://yoursite.com/2019/03/16/LintCode-Problem-629-Minimum-Spanning-Tree/","content":"<p>Given a list of Connections, which is the Connection class (the city name at both ends of the edge and a cost between them), find some edges, connect all the cities and spend the least amount.</p>\n<p>Return the connects if can connect all the cities, otherwise return empty list.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>Return the connections sorted by the cost, or sorted city1 name if their cost is same, or sorted city2 if their city1 name is also same.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Gievn the connections = [“Acity”,”Bcity”,1], [“Acity”,”Ccity”,2], [“Bcity”,”Ccity”,3]</p>\n<p>Return [“Acity”,”Bcity”,1], [“Acity”,”Ccity”,2]</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Connection</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String city1, city2;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> cost;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Connection</span><span class=\"params\">(String city1, String city2, <span class=\"keyword\">int</span> cost)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.city1 = city1;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.city2 = city2;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cost = cost;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnionFind</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UnionFind</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        id = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">            id[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (id[p] == p)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> id[p] = find(id[p]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connect</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pId = id[p];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> qId = id[q];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pId != qId)</span><br><span class=\"line\">            id[pId] = qId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Connection&gt; <span class=\"title\">lowestCost</span><span class=\"params\">(List&lt;Connection&gt; connections)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Connection&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    Collections.sort(connections, <span class=\"keyword\">new</span> Comparator&lt;Connection&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Connection o1, Connection o2)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o1.cost != o2.cost)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> o1.cost - o2.cost;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!o1.city1.equals(o2.city1))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> o1.city1.compareTo(o2.city1);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> o1.city2.compareTo(o2.city2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    Map&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Connection c : connections) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!map.containsKey(c.city1))</span><br><span class=\"line\">            map.put(c.city1, index++);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!map.containsKey(c.city2))</span><br><span class=\"line\">            map.put(c.city2, index++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    UnionFind uf = <span class=\"keyword\">new</span> UnionFind(index);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Connection c : connections) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> idx1 = map.get(c.city1);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> idx2 = map.get(c.city2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (uf.find(idx1) != uf.find(idx2)) &#123;</span><br><span class=\"line\">            result.add(c);</span><br><span class=\"line\">            uf.connect(idx1, idx2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.size() == index - <span class=\"number\">1</span> ? result : <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 919 - Meeting Rooms II","url":"http://yoursite.com/2019/03/16/LintCode-Problem-919-Meeting-Rooms-II/","content":"<p>Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],…] (si &lt; ei), find the minimum number of conference rooms required.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: intervals = [(0,30),(5,10),(15,20)]</p>\n<p>Output: 2</p>\n<p>Explanation:<br>We need two meeting rooms<br>room1: (0,30)<br>room2: (5,10),(15,20)</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: intervals = [(2,7)]</p>\n<p>Output: 1</p>\n<p>Explanation:<br>Only need one meeting room</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Interval</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> start, end;</span><br><span class=\"line\"></span><br><span class=\"line\">    Interval(<span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.start = start;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.end = end;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minMeetingRooms</span><span class=\"params\">(List&lt;Interval&gt; intervals)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (intervals == <span class=\"keyword\">null</span> || intervals.size() &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Collections.sort(intervals, <span class=\"keyword\">new</span> Comparator&lt;Interval&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Interval o1, Interval o2)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> o1.start - o2.start;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    PriorityQueue&lt;Integer&gt; minHeap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;();</span><br><span class=\"line\">    minHeap.offer(intervals.get(<span class=\"number\">0</span>).end);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; intervals.size(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (intervals.get(i).start &gt; minHeap.peek())</span><br><span class=\"line\">            minHeap.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">        minHeap.offer(intervals.get(i).end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> minHeap.size();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 920 - Meeting Rooms","url":"http://yoursite.com/2019/03/15/LintCode-Problem-920-Meeting-Rooms/","content":"<p>Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],…] (si &lt; ei), determine if a person could attend all meetings.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: intervals = [(0,30),(5,10),(15,20)]</p>\n<p>Output: false</p>\n<p>Explanation:<br>(0,30), (5,10) and (0,30),(15,20) will conflict</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: intervals = [(5,8),(9,15)]</p>\n<p>Output: true</p>\n<p>Explanation:<br>Two times will not conflict </p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Interval</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> start, end;</span><br><span class=\"line\"></span><br><span class=\"line\">    Interval(<span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.start = start;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.end = end;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canAttendMeetings</span><span class=\"params\">(List&lt;Interval&gt; intervals)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (intervals == <span class=\"keyword\">null</span> || intervals.size() &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">    Collections.sort(intervals, <span class=\"keyword\">new</span> Comparator&lt;Interval&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Interval o1, Interval o2)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> o1.start - o2.start;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = intervals.get(<span class=\"number\">0</span>).end;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; intervals.size(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (intervals.get(i).start &lt; end)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">        end = Math.max(end, intervals.get(i).end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 630 - Knight Shortest Path II","url":"http://yoursite.com/2019/03/14/LintCode-Problem-630-Knight-Shortest-Path-II/","content":"<p>Given a knight in a chessboard n * m (a binary matrix with 0 as empty and 1 as barrier). the knight initialze position is (0, 0) and he wants to reach position (n - 1, m - 1), Knight can only be from left to right. </p>\n<p>Find the shortest path to the destination position, return the length of the route. Return -1 if knight can not reached.</p>\n<h2 id=\"Clarification\"><a href=\"#Clarification\" class=\"headerlink\" title=\"Clarification\"></a>Clarification</h2><p>If the knight is at (x, y), he can get to the following positions in one step:</p>\n<p>(x + 1, y + 2)<br>(x - 1, y + 2)<br>(x + 2, y + 1)<br>(x - 2, y + 1)</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input:<br>[[0,0,0,0],[0,0,0,0],[0,0,0,0]]</p>\n<p>Output:<br>3</p>\n<p>Explanation:<br>[0,0]-&gt;[2,1]-&gt;[0,2]-&gt;[2,3]</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input:<br>[[0,1,0],[0,0,1],[0,0,0]]</p>\n<p>Output:<br>-1</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">shortestPath2</span><span class=\"params\">(<span class=\"keyword\">boolean</span>[][] grid)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = grid.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] visited = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n][m];</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] directions = &#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;, &#123;-<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;, &#123;<span class=\"number\">2</span>, <span class=\"number\">1</span>&#125;, &#123;-<span class=\"number\">2</span>, <span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\">    Queue&lt;<span class=\"keyword\">int</span>[]&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    queue.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    visited[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; queue.size(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span>[] position = queue.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (position[<span class=\"number\">0</span>] == n - <span class=\"number\">1</span> &amp;&amp; position[<span class=\"number\">1</span>] == m - <span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> position[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] direction : directions) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> x = position[<span class=\"number\">0</span>] + direction[<span class=\"number\">0</span>];</span><br><span class=\"line\">                <span class=\"keyword\">int</span> y = position[<span class=\"number\">1</span>] + direction[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x &gt;= <span class=\"number\">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class=\"number\">0</span> &amp;&amp; y &lt; m &amp;&amp; grid[x][y] == <span class=\"keyword\">false</span> &amp;&amp; visited[x][y] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    queue.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;x, y, position[<span class=\"number\">2</span>] + <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">                    visited[x][y] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 611 - Knight Shortest Path","url":"http://yoursite.com/2019/03/14/LintCode-Problem-611-Knight-Shortest-Path/","content":"<p>Given a knight in a chessboard (a binary matrix with 0 as empty and 1 as barrier) with a source position, find the shortest path to a destination position, return the length of the route.</p>\n<p>Return -1 if destination cannot be reached.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>source and destination must be empty.<br>Knight can not enter the barrier.</p>\n<h2 id=\"Clarification\"><a href=\"#Clarification\" class=\"headerlink\" title=\"Clarification\"></a>Clarification</h2><p>If the knight is at (x, y), he can get to the following positions in one step:</p>\n<p>(x + 1, y + 2)<br>(x + 1, y - 2)<br>(x - 1, y + 2)<br>(x - 1, y - 2)<br>(x + 2, y + 1)<br>(x + 2, y - 1)<br>(x - 2, y + 1)<br>(x - 2, y - 1)</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[0,0,0],</span><br><span class=\"line\"> [0,0,0],</span><br><span class=\"line\"> [0,0,0]]</span><br></pre></td></tr></table></figure></p>\n<p>source = [2, 0] destination = [2, 2]</p>\n<p>Output: 2</p>\n<p>Explanation:<br>[2,0]-&gt;[0,1]-&gt;[2,2]</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[0,1,0],</span><br><span class=\"line\"> [0,0,1],</span><br><span class=\"line\"> [0,0,0]]</span><br></pre></td></tr></table></figure></p>\n<p>source = [2, 0] destination = [2, 2] </p>\n<p>Output: -1</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">    Point() &#123; x = <span class=\"number\">0</span>; y = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">    Point(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123; x = a; y = b; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">shortestPath</span><span class=\"params\">(<span class=\"keyword\">boolean</span>[][] grid, Point source, Point destination)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = grid.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] visited = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n][m];</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] directions = &#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;, &#123;<span class=\"number\">1</span>, -<span class=\"number\">2</span>&#125;, &#123;-<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;, &#123;-<span class=\"number\">1</span>, -<span class=\"number\">2</span>&#125;, &#123;<span class=\"number\">2</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">2</span>, -<span class=\"number\">1</span>&#125;, &#123;-<span class=\"number\">2</span>, <span class=\"number\">1</span>&#125;, &#123;-<span class=\"number\">2</span>, -<span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\">    Queue&lt;Point&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    queue.offer(source);</span><br><span class=\"line\">    visited[source.x][source.y] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = queue.size();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            Point position = queue.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (position.x == destination.x &amp;&amp; position.y == destination.y)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] direction : directions) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> x = position.x + direction[<span class=\"number\">0</span>];</span><br><span class=\"line\">                <span class=\"keyword\">int</span> y = position.y + direction[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x &gt;= <span class=\"number\">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class=\"number\">0</span> &amp;&amp; y &lt; m &amp;&amp; grid[x][y] == <span class=\"keyword\">false</span> &amp;&amp; visited[x][y] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    Point nextPos = <span class=\"keyword\">new</span> Point(x, y);</span><br><span class=\"line\">                    queue.offer(nextPos);</span><br><span class=\"line\">                    visited[x][y] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        result++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 387 - First Unique Character in a String","url":"http://yoursite.com/2019/03/14/LeetCode-Problem-387-First-Unique-Character-in-a-String/","content":"<p>Given a string, find the first non-repeating character in it and return it’s index. If it doesn’t exist, return -1.</p>\n<h2 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>s = “leetcode”<br>return 0.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>s = “loveleetcode”,<br>return 2.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>You may assume the string contain only lowercase letters.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">firstUniqChar</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span> || s.length() &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] index = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> idx = s.charAt(i) - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">        index[idx]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> idx = s.charAt(i) - <span class=\"string\">'a'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index[idx] == <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 210 - Course Schedule II","url":"http://yoursite.com/2019/03/14/LeetCode-Problem-210-Course-Schedule-II/","content":"<p>There are a total of n courses you have to take, labeled from 0 to n-1.</p>\n<p>Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]</p>\n<p>Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.</p>\n<p>There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: 2, [[1,0]] </p>\n<p>Output: [0,1]</p>\n<p>Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1] .</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: 4, [[1,0],[2,0],[3,1],[3,2]]</p>\n<p>Output: [0,1,2,3] or [0,2,1,3]</p>\n<p>Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3] .</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ol>\n<li>The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.</li>\n<li>You may assume that there are no duplicate edges in the input prerequisites.</li>\n</ol>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] findOrder(<span class=\"keyword\">int</span> numCourses, <span class=\"keyword\">int</span>[][] prerequisites) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] inDegree = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[numCourses];</span><br><span class=\"line\">    List[] adj = <span class=\"keyword\">new</span> ArrayList[numCourses];</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[numCourses];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numCourses; i++)</span><br><span class=\"line\">        adj[i] = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] prerequisite : prerequisites) &#123;</span><br><span class=\"line\">        adj[prerequisite[<span class=\"number\">1</span>]].add(prerequisite[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        inDegree[prerequisite[<span class=\"number\">0</span>]]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Queue&lt;Integer&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inDegree[i] == <span class=\"number\">0</span>)</span><br><span class=\"line\">            queue.offer(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> course = queue.poll();</span><br><span class=\"line\">        result[count++] = course;</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; adj[course].size(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> postrequisite = (<span class=\"keyword\">int</span>) adj[course].get(i);</span><br><span class=\"line\">            inDegree[postrequisite]--;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inDegree[postrequisite] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                queue.offer(postrequisite);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count == numCourses ? result : <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 207 - Course Schedule","url":"http://yoursite.com/2019/03/13/LeetCode-Problem-207-Course-Schedule/","content":"<p>There are a total of n courses you have to take, labeled from 0 to n-1.</p>\n<p>Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]</p>\n<p>Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: 2, [[1,0]] </p>\n<p>Output: true</p>\n<p>Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: 2, [[1,0],[0,1]]</p>\n<p>Output: false</p>\n<p>Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ol>\n<li>The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.</li>\n<li>You may assume that there are no duplicate edges in the input prerequisites.</li>\n</ol>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canFinish</span><span class=\"params\">(<span class=\"keyword\">int</span> numCourses, <span class=\"keyword\">int</span>[][] prerequisites)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] inDegree = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[numCourses];</span><br><span class=\"line\">    List[] adj = <span class=\"keyword\">new</span> ArrayList[numCourses];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numCourses; i++)</span><br><span class=\"line\">        adj[i] = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] prerequisite : prerequisites) &#123;</span><br><span class=\"line\">        adj[prerequisite[<span class=\"number\">1</span>]].add(prerequisite[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        inDegree[prerequisite[<span class=\"number\">0</span>]]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Queue&lt;Integer&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inDegree[i] == <span class=\"number\">0</span>)</span><br><span class=\"line\">            queue.offer(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> course = queue.poll();</span><br><span class=\"line\">        count++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; adj[course].size(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> postrequisite = (<span class=\"keyword\">int</span>) adj[course].get(i);</span><br><span class=\"line\">            inDegree[postrequisite]--;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inDegree[postrequisite] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                queue.offer(postrequisite);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count == numCourses;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 604 - Window Sum","url":"http://yoursite.com/2019/03/13/LintCode-Problem-604-Window-Sum/","content":"<p>Given an array of n integers, and a moving window(size k), move the window at each iteration from the start of the array, find the sum of the element inside the window at each moving.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input：array = [1,2,7,8,5], k = 3</p>\n<p>Output：[10,17,20]</p>\n<p>Explanation：<br>1 + 2 + 7 = 10<br>2 + 7 + 8 = 17<br>7 + 8 + 5 = 20</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] winSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || k &lt;= <span class=\"number\">0</span> || nums.length &lt; k)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n-k+<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++)</span><br><span class=\"line\">        result[<span class=\"number\">0</span>] += nums[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n - k + <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">        result[i] = result[i-<span class=\"number\">1</span>] - nums[i-<span class=\"number\">1</span>] + nums[i+k-<span class=\"number\">1</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 836 - Rectangle Overlap","url":"http://yoursite.com/2019/03/13/LeetCode-Problem-836-Rectangle-Overlap/","content":"<p>A rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) are the coordinates of its bottom-left corner, and (x2, y2) are the coordinates of its top-right corner.</p>\n<p>Two rectangles overlap if the area of their intersection is positive.  To be clear, two rectangles that only touch at the corner or edges do not overlap.</p>\n<p>Given two (axis-aligned) rectangles, return whether they overlap.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: rec1 = [0,0,2,2], rec2 = [1,1,3,3]</p>\n<p>Output: true</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: rec1 = [0,0,1,1], rec2 = [1,0,2,1]</p>\n<p>Output: false</p>\n<h2 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h2><p>Both rectangles rec1 and rec2 are lists of 4 integers.<br>All coordinates in rectangles will be between -10^9 and 10^9.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isRectangleOverlap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] rec1, <span class=\"keyword\">int</span>[] rec2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x1 = rec1[<span class=\"number\">0</span>], y1 = rec1[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x2 = rec1[<span class=\"number\">2</span>], y2 = rec1[<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x3 = rec2[<span class=\"number\">0</span>], y3 = rec2[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x4 = rec2[<span class=\"number\">2</span>], y4 = rec2[<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x1 &gt;= x4 || x2 &lt;= x3 || y1 &gt;= y4 || y2 &lt;= y3)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 533 - Two Sum - Closest to target","url":"http://yoursite.com/2019/03/13/LintCode-Problem-533-Two-Sum-Closest-to-target/","content":"<p>Given an array nums of n integers, find two integers in nums such that the sum is closest to a given number, target.</p>\n<p>Return the absolute value of difference between the sum of the two integers and the target.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input:  nums = [-1, 2, 1, -4] and target = 4</p>\n<p>Output: 1</p>\n<p>Explanation:<br>The minimum difference is 1. (4 - (2 + 1) = 1).</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input:  nums = [-1, -1, -1, -4] and target = 4</p>\n<p>Output: 6</p>\n<p>Explanation:<br>The minimum difference is 6. (4 - (- 1 - 1) = 6).</p>\n<h2 id=\"Challenge\"><a href=\"#Challenge\" class=\"headerlink\" title=\"Challenge\"></a>Challenge</h2><p>Do it in O(nlogn) time complexity.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">twoSumClosest</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = Integer.MAX_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || nums.length &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Arrays.sort(nums);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = nums[left] + nums[right];</span><br><span class=\"line\">        result = Math.min(result, Math.abs(sum - target));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum &lt; target)</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sum &gt; target)</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 613 - High Five","url":"http://yoursite.com/2019/03/12/LintCode-Problem-613-High-Five/","content":"<p>There are two properties in the node student id and scores, to ensure that each student will have at least 5 points, find the average of 5 highest scores for each person.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input:<br>[[1,91],[1,92],[2,93],[2,99],[2,98],[2,97],[1,60],[1,58],[2,100],[1,61]]</p>\n<p>Output:<br>1: 72.40<br>2: 97.40</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input:<br>[[1,90],[1,90],[1,90],[1,90],[1,90],[1,90]]</p>\n<p>Output:<br>1: 90.00</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Record</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> id, score;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Record</span><span class=\"params\">(<span class=\"keyword\">int</span> id, <span class=\"keyword\">int</span> score)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.score = score;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;Integer, Double&gt; <span class=\"title\">highFive</span><span class=\"params\">(Record[] results)</span> </span>&#123;</span><br><span class=\"line\">    Map&lt;Integer, Double&gt; avgHigh = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    PriorityQueue&lt;Record&gt; queue = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;(<span class=\"keyword\">new</span> Comparator&lt;Record&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Record o1, Record o2)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o1.id != o2.id)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> o1.id - o2.id;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> o2.score - o1.score;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Record record : results)</span><br><span class=\"line\">        queue.offer(record);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id = Integer.MIN_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (queue.peek().id != id) &#123;</span><br><span class=\"line\">            id = queue.peek().id;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">                Record record = queue.poll();</span><br><span class=\"line\">                sum += record.score;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            avgHigh.put(id, (<span class=\"keyword\">double</span>) sum / <span class=\"number\">5</span>);</span><br><span class=\"line\">            sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!queue.isEmpty() &amp;&amp; queue.peek().id == id)</span><br><span class=\"line\">            queue.poll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> avgHigh;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 409 - Longest Palindrome","url":"http://yoursite.com/2019/03/12/LeetCode-Problem-409-Longest-Palindrome/","content":"<p>Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.</p>\n<p>This is case sensitive, for example “Aa” is not considered a palindrome here.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>Assume the length of given string will not exceed 1,010.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input:<br>“abccccdd”</p>\n<p>Output:<br>7</p>\n<p>Explanation:<br>One longest palindrome that can be built is “dccaccd”, whose length is 7.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestPalindrome</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] count = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">128</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isOdd = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> ch : s.toCharArray()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> idx = ch - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        count[idx]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> chCount : count) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (chCount % <span class=\"number\">2</span> != <span class=\"number\">0</span>)</span><br><span class=\"line\">            isOdd = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        result += (chCount &gt;&gt; <span class=\"number\">1</span>) * <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> isOdd ? result + <span class=\"number\">1</span> : result; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 612 - K Closest Points","url":"http://yoursite.com/2019/03/12/LintCode-Problem-612-K-Closest-Points/","content":"<p>Given some points and an origin point in two-dimensional space, find k points which are nearest to the origin.</p>\n<p>Return these points sorted by distance, if they are same in distance, sorted by the x-axis, and if they are same in the x-axis, sorted by y-axis.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: points = [[4,6],[4,7],[4,4],[2,5],[1,1]], origin = [0, 0], k = 3 </p>\n<p>Output: [[1,1],[2,5],[4,4]]</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: points = [[0,0],[0,9]], origin = [3, 1], k = 1</p>\n<p>Output: [[0,0]]</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">    Point() &#123; x = <span class=\"number\">0</span>; y = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">    Point(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123; x = a; y = b; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Point[] kClosest(Point[] points, Point origin, <span class=\"keyword\">int</span> k) &#123;</span><br><span class=\"line\">    Point[] result = <span class=\"keyword\">new</span> Point[k];</span><br><span class=\"line\">    PriorityQueue&lt;Point&gt; minHeap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;(<span class=\"keyword\">new</span> Comparator&lt;Point&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Point o1, Point o2)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> distance1 = (o1.x - origin.x) * (o1.x - origin.x)</span><br><span class=\"line\">                            + (o1.y - origin.y) * (o1.y - origin.y);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> distance2 = (o2.x - origin.x) * (o2.x - origin.x)</span><br><span class=\"line\">                            + (o2.y - origin.y) * (o2.y - origin.y);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (distance1 == distance2)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> o1.x == o2.x ? (o1.y - o2.y) : o1.x - o2.x;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> distance1 - distance2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Point point : points)</span><br><span class=\"line\">        minHeap.offer(point);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++)</span><br><span class=\"line\">        result[i] = minHeap.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 628 - Maximum Subtree","url":"http://yoursite.com/2019/03/12/LintCode-Problem-628-Maximum-Subtree/","content":"<p>Given a binary tree, find the subtree with maximum sum. Return the root of the subtree.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>It’s guaranteed that there is only one subtree with maximum sum and the given binary tree is not an empty tree.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input :<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     1</span><br><span class=\"line\">   /   \\</span><br><span class=\"line\"> -5     2</span><br><span class=\"line\"> / \\   /  \\</span><br><span class=\"line\">0   3 -4  -5</span><br></pre></td></tr></table></figure></p>\n<p>Output : 3</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> TreeNode maxTree;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSum = Integer.MIN_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">findSubtree</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    findSubtreeHelper(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxTree;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">findSubtreeHelper</span><span class=\"params\">(TreeNode node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = findSubtreeHelper(node.left);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = findSubtreeHelper(node.right);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = left + right + node.val;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (maxTree == <span class=\"keyword\">null</span> || sum &gt; maxSum) &#123;</span><br><span class=\"line\">        maxTree = node;</span><br><span class=\"line\">        maxSum = sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 937 - Reorder Log Files","url":"http://yoursite.com/2019/03/11/LeetCode-Problem-937-Reorder-Log-Files/","content":"<p>You have an array of logs.  Each log is a space delimited string of words.</p>\n<p>For each log, the first word in each log is an alphanumeric identifier.  Then, either:</p>\n<ul>\n<li>Each word after the identifier will consist only of lowercase letters, or;</li>\n<li>Each word after the identifier will consist only of digits.</li>\n</ul>\n<p>We will call these two varieties of logs letter-logs and digit-logs.  It is guaranteed that each log has at least one word after its identifier.</p>\n<p>Reorder the logs so that all of the letter-logs come before any digit-log.  The letter-logs are ordered lexicographically ignoring identifier, with the identifier used in case of ties.  The digit-logs should be put in their original order.</p>\n<p>Return the final order of the logs.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: [“a1 9 2 3 1”,”g1 act car”,”zo4 4 7”,”ab1 off key dog”,”a8 act zoo”]</p>\n<p>Output: [“g1 act car”,”a8 act zoo”,”ab1 off key dog”,”a1 9 2 3 1”,”zo4 4 7”]</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>0 &lt;= logs.length &lt;= 100<br>3 &lt;= logs[i].length &lt;= 100<br>logs[i] is guaranteed to have an identifier, and a word after the identifier.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String[] reorderLogFiles(String[] logs) &#123;</span><br><span class=\"line\">    Arrays.sort(logs, <span class=\"keyword\">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(String o1, String o2)</span> </span>&#123;</span><br><span class=\"line\">            String[] str1 = o1.split(<span class=\"string\">\" \"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">            String[] str2 = o2.split(<span class=\"string\">\" \"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">            <span class=\"keyword\">char</span> ch1 = str1[<span class=\"number\">1</span>].charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">char</span> ch2 = str2[<span class=\"number\">1</span>].charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Character.isLetter(ch1) &amp;&amp; Character.isLetter(ch2)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> compare = str1[<span class=\"number\">1</span>].compareTo(str2[<span class=\"number\">1</span>]);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> compare != <span class=\"number\">0</span> ? compare : str1[<span class=\"number\">0</span>].compareTo(str2[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Character.isDigit(ch1) &amp;&amp; Character.isDigit(ch2))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Character.isLetter(ch1) ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> logs;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 763 - Partition Labels","url":"http://yoursite.com/2019/03/11/LeetCode-Problem-763-Partition-Labels/","content":"<p>A string S of lowercase letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: S = “ababcbacadefegdehijhklij”</p>\n<p>Output: [9,7,8]</p>\n<p>Explanation:<br>The partition is “ababcbaca”, “defegde”, “hijhklij”.<br>This is a partition so that each letter appears in at most one part.<br>A partition like “ababcbacadefegde”, “hijhklij” is incorrect, because it splits S into less parts.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>S will have length in range [1, 500].<br>S will consist of lowercase letters (‘a’ to ‘z’) only.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">partitionLabels</span><span class=\"params\">(String S)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] last = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; S.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> idx = S.charAt(i) - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">        last[idx] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; S.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> idx = S.charAt(i) - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">        end = Math.max(end, last[idx]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == end) &#123;</span><br><span class=\"line\">            result.add(end - start + <span class=\"number\">1</span>);</span><br><span class=\"line\">            start = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 386 - Longest Substring with At Most K Distinct Characters","url":"http://yoursite.com/2019/03/10/LintCode-Problem-386-Longest-Substring-with-At-Most-K-Distinct-Characters/","content":"<p>Given a string S, find the length of the longest substring T that contains at most k distinct characters.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: s = “eceba”, k = 2</p>\n<p>Output: 3</p>\n<p>Explanation: T is “ece” which its length is 3.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: s = “aa”, k = 1</p>\n<p>Output: 2</p>\n<p>Explanation: T is “aa” which its length is 2.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstringKDistinct</span><span class=\"params\">(String s, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] count = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">128</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (end &lt; s.length()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> idxEnd = s.charAt(end) - <span class=\"string\">'0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count[idxEnd] == <span class=\"number\">0</span>)</span><br><span class=\"line\">            num++;</span><br><span class=\"line\"></span><br><span class=\"line\">        count[idxEnd]++;</span><br><span class=\"line\">        end++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (num &gt; k) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> idxStart = s.charAt(start) - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">            count[idxStart]--;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count[idxStart] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                num--;</span><br><span class=\"line\"></span><br><span class=\"line\">            start++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        result = Math.max(result, end - start);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 438 - Find All Anagrams in a String","url":"http://yoursite.com/2019/03/10/LeetCode-Problem-438-Find-All-Anagrams-in-a-String/","content":"<p>Given a string s and a non-empty string p, find all the start indices of p’s anagrams in s.</p>\n<p>Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.</p>\n<p>The order of output does not matter.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input:<br>s: “cbaebabacd” p: “abc”</p>\n<p>Output:<br>[0, 6]</p>\n<p>Explanation:<br>The substring with start index = 0 is “cba”, which is an anagram of “abc”.<br>The substring with start index = 6 is “bac”, which is an anagram of “abc”.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input:<br>s: “abab” p: “ab”</p>\n<p>Output:<br>[0, 1, 2]</p>\n<p>Explanation:<br>The substring with start index = 0 is “ab”, which is an anagram of “ab”.<br>The substring with start index = 1 is “ba”, which is an anagram of “ab”.<br>The substring with start index = 2 is “ab”, which is an anagram of “ab”.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">findAnagrams</span><span class=\"params\">(String s, String p)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length() &lt; p.length())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] count = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> ch : p.toCharArray()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> idx = ch - <span class=\"string\">'a'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count[idx] == <span class=\"number\">0</span>)</span><br><span class=\"line\">            num++;</span><br><span class=\"line\"></span><br><span class=\"line\">        count[idx]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (end &lt; s.length()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> idxEnd = s.charAt(end) - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">        count[idxEnd]--;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count[idxEnd] == <span class=\"number\">0</span>)</span><br><span class=\"line\">            num--;</span><br><span class=\"line\"></span><br><span class=\"line\">        end++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (num == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> idxStart = s.charAt(start) - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">            count[idxStart]++;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count[idxStart] &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                num++;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (end - start == p.length())</span><br><span class=\"line\">                result.add(start);</span><br><span class=\"line\">            </span><br><span class=\"line\">            start++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 597 - Subtree with Maximum Average","url":"http://yoursite.com/2019/03/10/LintCode-Problem-597-Subtree-with-Maximum-Average/","content":"<p>Given a binary tree, find the subtree with maximum average. Return the root of the subtree.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>It’s guaranteed that there is only one subtree with maximum average.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     1</span><br><span class=\"line\">   /   \\</span><br><span class=\"line\"> -5     11</span><br><span class=\"line\"> / \\   /  \\</span><br><span class=\"line\">1   2 4    -2</span><br></pre></td></tr></table></figure></p>\n<p>Output：11(it’s a TreeNode)</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    1</span><br><span class=\"line\">  /   \\</span><br><span class=\"line\">-5     11</span><br></pre></td></tr></table></figure></p>\n<p>Output：11(it’s a TreeNode)</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultType</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num;</span><br><span class=\"line\">    ResultType(<span class=\"keyword\">int</span> sum, <span class=\"keyword\">int</span> num) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sum = sum;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.num = num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> TreeNode maxTree;</span><br><span class=\"line\"><span class=\"keyword\">private</span> ResultType maxResult;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">findSubtree2</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    findSubtreeHelper(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxTree;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ResultType <span class=\"title\">findSubtreeHelper</span><span class=\"params\">(TreeNode node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultType(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    ResultType left = findSubtreeHelper(node.left);</span><br><span class=\"line\">    ResultType right = findSubtreeHelper(node.right);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = left.sum + right.sum + node.val;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = left.num + right.num + <span class=\"number\">1</span>;</span><br><span class=\"line\">    ResultType root = <span class=\"keyword\">new</span> ResultType(sum, num);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (maxTree == <span class=\"keyword\">null</span> || maxResult.sum * root.num &lt; root.sum * maxResult.num) &#123;</span><br><span class=\"line\">        maxTree = node;</span><br><span class=\"line\">        maxResult = root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 819 - Most Common Word","url":"http://yoursite.com/2019/03/09/LeetCode-Problem-819-Most-Common-Word/","content":"<p>Given a paragraph and a list of banned words, return the most frequent word that is not in the list of banned words.  It is guaranteed there is at least one word that isn’t banned, and that the answer is unique.</p>\n<p>Words in the list of banned words are given in lowercase, and free of punctuation.  Words in the paragraph are not case sensitive.  The answer is in lowercase.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input:<br>paragraph = “Bob hit a ball, the hit BALL flew far after it was hit.”<br>banned = [“hit”]</p>\n<p>Output: “ball”</p>\n<p>Explanation:<br>“hit” occurs 3 times, but it is a banned word.<br>“ball” occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph.<br>Note that words in the paragraph are not case sensitive,<br>that punctuation is ignored (even if adjacent to words, such as “ball,”),<br>and that “hit” isn’t the answer even though it occurs more because it is banned.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>1 &lt;= paragraph.length &lt;= 1000.<br>1 &lt;= banned.length &lt;= 100.<br>1 &lt;= banned[i].length &lt;= 10.<br>The answer is unique, and written in lowercase (even if its occurrences in paragraph may have uppercase symbols, and even if it is a proper noun.)<br>paragraph only consists of letters, spaces, or the punctuation symbols !?’,;.<br>There are no hyphens or hyphenated words.<br>Words only consist of letters, never apostrophes or other punctuation symbols.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">mostCommonWord</span><span class=\"params\">(String paragraph, String[] banned)</span> </span>&#123;</span><br><span class=\"line\">    Map&lt;String, Integer&gt; count = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    Set&lt;String&gt; ban = <span class=\"keyword\">new</span> HashSet(Arrays.asList(banned));</span><br><span class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    String result = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = Integer.MIN_VALUE;</span><br><span class=\"line\">    paragraph += <span class=\"string\">\".\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; paragraph.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> ch = paragraph.charAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Character.isLetter(ch))</span><br><span class=\"line\">            sb.append(Character.toLowerCase(ch));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sb.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            String word = sb.toString();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!ban.contains(word)) &#123;</span><br><span class=\"line\">                count.put(word, count.getOrDefault(word, <span class=\"number\">0</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (count.get(word) &gt; max) &#123;</span><br><span class=\"line\">                    result = word;</span><br><span class=\"line\">                    max = count.get(word);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            sb.setLength(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 973 - K Closest Points to Origin","url":"http://yoursite.com/2019/03/09/LeetCode-Problem-973-K-Closest-Points-to-Origin/","content":"<p>We have a list of points on the plane.  Find the K closest points to the origin (0, 0).</p>\n<p>(Here, the distance between two points on a plane is the Euclidean distance.)</p>\n<p>You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: points = [[1,3],[-2,2]], K = 1</p>\n<p>Output: [[-2,2]]</p>\n<p>Explanation:<br>The distance between (1, 3) and the origin is sqrt(10).<br>The distance between (-2, 2) and the origin is sqrt(8).<br>Since sqrt(8) &lt; sqrt(10), (-2, 2) is closer to the origin.<br>We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: points = [[3,3],[5,-1],[-2,4]], K = 2</p>\n<p>Output: [[3,3],[-2,4]]</p>\n<p>(The answer [[-2,4],[3,3]] would also be accepted.)</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ol>\n<li>1 &lt;= K &lt;= points.length &lt;= 10000</li>\n<li>-10000 &lt; points[i][0] &lt; 10000</li>\n<li>-10000 &lt; points[i][1] &lt; 10000</li>\n</ol>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[][] kClosest(<span class=\"keyword\">int</span>[][] points, <span class=\"keyword\">int</span> K) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] result = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[K][<span class=\"number\">2</span>];</span><br><span class=\"line\">    PriorityQueue&lt;<span class=\"keyword\">int</span>[]&gt; minHeap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;(<span class=\"keyword\">new</span> Comparator&lt;<span class=\"keyword\">int</span>[]&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span>[] o1, <span class=\"keyword\">int</span>[] o2)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (o1[<span class=\"number\">0</span>] * o1[<span class=\"number\">0</span>] + o1[<span class=\"number\">1</span>] * o1[<span class=\"number\">1</span>]) - (o2[<span class=\"number\">0</span>] * o2[<span class=\"number\">0</span>] + o2[<span class=\"number\">1</span>] * o2[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] point  : points)</span><br><span class=\"line\">        minHeap.offer(point);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; K; i++)</span><br><span class=\"line\">        result[i] = minHeap.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 788 - The Maze II","url":"http://yoursite.com/2019/03/09/LintCode-Problem-788-The-Maze-II/","content":"<p>There is a ball in a maze with empty spaces and walls. The ball can go through empty spaces by rolling up, down, left or right, but it won’t stop rolling until hitting a wall. When the ball stops, it could choose the next direction.</p>\n<p>Given the ball’s start position, the destination and the maze, find the shortest distance for the ball to stop at the destination. The distance is defined by the number of empty spaces traveled by the ball from the start position (excluded) to the destination (included). If the ball cannot stop at the destination, return -1.</p>\n<p>The maze is represented by a binary 2D array. 1 means the wall and 0 means the empty space. You may assume that the borders of the maze are all walls. The start and destination coordinates are represented by row and column indexes.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ol>\n<li>There is only one ball and one destination in the maze.</li>\n<li>Both the ball and the destination exist on an empty space, and they will not be at the same position initially.</li>\n<li>The given maze does not contain border (like the red rectangle in the example pictures), but you could assume the border of the maze are all walls.</li>\n<li>The maze contains at least 2 empty spaces, and both the width and height of the maze won’t exceed 100.</li>\n</ol>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input 1: a maze represented by a 2D array<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 0 1 0 0</span><br><span class=\"line\">0 0 0 0 0</span><br><span class=\"line\">0 0 0 1 0</span><br><span class=\"line\">1 1 0 1 1</span><br><span class=\"line\">0 0 0 0 0</span><br></pre></td></tr></table></figure></p>\n<p>Input 2: start coordinate (rowStart, colStart) = (0, 4)<br>Input 3: destination coordinate (rowDest, colDest) = (4, 4)</p>\n<p>Output: 12</p>\n<p>Explanation: One shortest way is : left -&gt; down -&gt; left -&gt; down -&gt; right -&gt; down -&gt; right. The total distance is 1 + 1 + 3 + 1 + 2 + 2 + 2 = 12.</p>\n<p><img src=\"https://s2.ax1x.com/2019/03/08/kxLaAP.png\" alt=\"kxLaAP.png\"></p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input 1: a maze represented by a 2D array<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 0 1 0 0</span><br><span class=\"line\">0 0 0 0 0</span><br><span class=\"line\">0 0 0 1 0</span><br><span class=\"line\">1 1 0 1 1</span><br><span class=\"line\">0 0 0 0 0</span><br></pre></td></tr></table></figure></p>\n<p>Input 2: start coordinate (rowStart, colStart) = (0, 4)<br>Input 3: destination coordinate (rowDest, colDest) = (3, 2)</p>\n<p>Output: -1</p>\n<p>Explanation: There is no way for the ball to stop at the destination.</p>\n<p><img src=\"https://s2.ax1x.com/2019/03/08/kxLWNV.png\" alt=\"kxLWNV.png\"></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">shortestDistance</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] maze, <span class=\"keyword\">int</span>[] start, <span class=\"keyword\">int</span>[] destination)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = maze.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = maze[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> minPath = Integer.MAX_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] directions = &#123;&#123;-<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">0</span>, -<span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] visit = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n][m];</span><br><span class=\"line\">    Queue&lt;<span class=\"keyword\">int</span>[]&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    visit[start[<span class=\"number\">0</span>]][start[<span class=\"number\">1</span>]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    queue.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;start[<span class=\"number\">0</span>], start[<span class=\"number\">1</span>], <span class=\"number\">0</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] position = queue.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (destination[<span class=\"number\">0</span>] == position[<span class=\"number\">0</span>] &amp;&amp; destination[<span class=\"number\">1</span>] == position[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            minPath = Math.min(minPath, position[<span class=\"number\">2</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] direction : directions) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = position[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> y = position[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> path = position[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (x &gt;= <span class=\"number\">0</span> &amp;&amp; y &gt;= <span class=\"number\">0</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; m &amp;&amp; maze[x][y] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                x += direction[<span class=\"number\">0</span>];</span><br><span class=\"line\">                y += direction[<span class=\"number\">1</span>];</span><br><span class=\"line\">                path++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            x -= direction[<span class=\"number\">0</span>];</span><br><span class=\"line\">            y -= direction[<span class=\"number\">1</span>];</span><br><span class=\"line\">            path--;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (visit[x][y] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                visit[x][y] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                queue.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;x, y, path&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> minPath == Integer.MAX_VALUE ? -<span class=\"number\">1</span> : minPath;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LintCode] Problem 787 - The Maze","url":"http://yoursite.com/2019/03/08/LintCode-Problem-787-The-Maze/","content":"<p>There is a ball in a maze with empty spaces and walls. The ball can go through empty spaces by rolling up, down, left or right, but it won’t stop rolling until hitting a wall. When the ball stops, it could choose the next direction.</p>\n<p>Given the ball’s start position, the destination and the maze, determine whether the ball could stop at the destination.</p>\n<p>The maze is represented by a binary 2D array. 1 means the wall and 0 means the empty space. You may assume that the borders of the maze are all walls. The start and destination coordinates are represented by row and column indexes.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ol>\n<li>There is only one ball and one destination in the maze.</li>\n<li>Both the ball and the destination exist on an empty space, and they will not be at the same position initially.</li>\n<li>The given maze does not contain border (like the red rectangle in the example pictures), but you could assume the border of the maze are all walls.</li>\n<li>The maze contains at least 2 empty spaces, and both the width and height of the maze won’t exceed 100.</li>\n</ol>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input 1: a maze represented by a 2D array<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 0 1 0 0</span><br><span class=\"line\">0 0 0 0 0</span><br><span class=\"line\">0 0 0 1 0</span><br><span class=\"line\">1 1 0 1 1</span><br><span class=\"line\">0 0 0 0 0</span><br></pre></td></tr></table></figure></p>\n<p>Input 2: start coordinate (rowStart, colStart) = (0, 4)<br>Input 3: destination coordinate (rowDest, colDest) = (4, 4)</p>\n<p>Output: true</p>\n<p>Explanation: One possible way is : left -&gt; down -&gt; left -&gt; down -&gt; right -&gt; down -&gt; right.</p>\n<p><img src=\"https://s2.ax1x.com/2019/03/08/kxLaAP.png\" alt=\"kxLaAP.png\"></p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input 1: a maze represented by a 2D array<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 0 1 0 0</span><br><span class=\"line\">0 0 0 0 0</span><br><span class=\"line\">0 0 0 1 0</span><br><span class=\"line\">1 1 0 1 1</span><br><span class=\"line\">0 0 0 0 0</span><br></pre></td></tr></table></figure></p>\n<p>Input 2: start coordinate (rowStart, colStart) = (0, 4)<br>Input 3: destination coordinate (rowDest, colDest) = (3, 2)</p>\n<p>Output: false</p>\n<p>Explanation: There is no way for the ball to stop at the destination.</p>\n<p><img src=\"https://s2.ax1x.com/2019/03/08/kxLWNV.png\" alt=\"kxLWNV.png\"></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPath</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] maze, <span class=\"keyword\">int</span>[] start, <span class=\"keyword\">int</span>[] destination)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = maze.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = maze[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] directions = &#123;&#123;-<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">0</span>, -<span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] visit = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n][m];</span><br><span class=\"line\">    Queue&lt;<span class=\"keyword\">int</span>[]&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    visit[start[<span class=\"number\">0</span>]][start[<span class=\"number\">1</span>]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    queue.offer(start);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] position = queue.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (destination[<span class=\"number\">0</span>] == position[<span class=\"number\">0</span>] &amp;&amp; destination[<span class=\"number\">1</span>] == position[<span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] direction : directions) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = position[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> y = position[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (x &gt;= <span class=\"number\">0</span> &amp;&amp; y &gt;= <span class=\"number\">0</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; m &amp;&amp; maze[x][y] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                x += direction[<span class=\"number\">0</span>];</span><br><span class=\"line\">                y += direction[<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            x -= direction[<span class=\"number\">0</span>];</span><br><span class=\"line\">            y -= direction[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (visit[x][y] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                visit[x][y] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                queue.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;x, y&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LintCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 516 - Longest Palindromic Subsequence","url":"http://yoursite.com/2019/03/08/LeetCode-Problem-516-Longest-Palindromic-Subsequence/","content":"<p>Given a string s, find the longest palindromic subsequence’s length in s. You may assume that the maximum length of s is 1000.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input:<br>“bbbab”</p>\n<p>Output:<br>4</p>\n<p>One possible longest palindromic subsequence is “bbbb”.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No. 2\"></a>No. 2</h3><p>Input:<br>“cbbd”</p>\n<p>Output:<br>2</p>\n<p>One possible longest palindromic subsequence is “bb”.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestPalindromeSubseq</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = s.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n][n];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// dp[i][j] = dp[i+1][j-1] + 2            (Si == Sj)</span></span><br><span class=\"line\">    <span class=\"comment\">// dp[i][j] = Max(dp[i+1][j], dp[i][j-1]) (Si != Sj)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        dp[i][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s.charAt(i) == s.charAt(j))</span><br><span class=\"line\">                dp[i][j] = dp[i+<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] + <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                dp[i][j] = Math.max(dp[i+<span class=\"number\">1</span>][j], dp[i][j-<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][n-<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 653 - Two Sum IV - Input is a BST","url":"http://yoursite.com/2019/03/08/LeetCode-Problem-653-Two-Sum-IV-Input-is-a-BST/","content":"<p>Given a Binary Search Tree and a target number, return true if there exist two elements in the BST such that their sum is equal to the given target.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    5</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  3   6</span><br><span class=\"line\"> / \\   \\</span><br><span class=\"line\">2   4   7</span><br></pre></td></tr></table></figure></p>\n<p>Target = 9</p>\n<p>Output: True</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    5</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  3   6</span><br><span class=\"line\"> / \\   \\</span><br><span class=\"line\">2   4   7</span><br></pre></td></tr></table></figure></p>\n<p>Target = 28</p>\n<p>Output: False</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">findTarget</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    inorder(list, root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = list.size() - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (list.get(left) + list.get(right) &lt; k)</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (list.get(left) + list.get(right) &gt; k)</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">inorder</span><span class=\"params\">(List&lt;Integer&gt; list, TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    inorder(list, root.left);</span><br><span class=\"line\">    list.add(root.val);</span><br><span class=\"line\">    inorder(list, root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 81 - Search in Rotated Sorted Array II","url":"http://yoursite.com/2019/03/04/LeetCode-Problem-81-Search-in-Rotated-Sorted-Array-II/","content":"<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>\n<p>(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).</p>\n<p>You are given a target value to search. If found in the array return true, otherwise return false.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: nums = [2,5,6,0,0,1,2], target = 0</p>\n<p>Output: true</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: nums = [2,5,6,0,0,1,2], target = 3</p>\n<p>Output: false</p>\n<h2 id=\"Follow-up\"><a href=\"#Follow-up\" class=\"headerlink\" title=\"Follow up\"></a>Follow up</h2><p>This is a follow up problem to Search in Rotated Sorted Array, where nums may contain duplicates.<br>Would this affect the run-time complexity? How and why?</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [1,1,1,1... 1]里有一个0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target == nums[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 33 - Search in Rotated Sorted Array","url":"http://yoursite.com/2019/03/04/LeetCode-Problem-33-Search-in-Rotated-Sorted-Array/","content":"<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>\n<p>(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).</p>\n<p>You are given a target value to search. If found in the array return its index, otherwise return -1.</p>\n<p>You may assume no duplicate exists in the array.</p>\n<p>Your algorithm’s runtime complexity must be in the order of O(log n).</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: nums = [4,5,6,7,0,1,2], target = 0</p>\n<p>Output: 4</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: nums = [4,5,6,7,0,1,2], target = 3</p>\n<p>Output: -1</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (left + right) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[mid] == target)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[mid] &lt; nums[left]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target &lt;= nums[right] &amp;&amp; target &gt; nums[mid])</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target &lt; nums[mid] &amp;&amp; target &gt;= nums[left])</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 32 - Longest Valid Parentheses","url":"http://yoursite.com/2019/03/04/LeetCode-Problem-32-Longest-Valid-Parentheses/","content":"<p>Given a string containing just the characters ‘(‘ and ‘)’, find the length of the longest valid (well-formed) parentheses substring.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: “(()”</p>\n<p>Output: 2</p>\n<p>Explanation: The longest valid parentheses substring is “()”</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: “)()())”</p>\n<p>Output: 4</p>\n<p>Explanation: The longest valid parentheses substring is “()()”</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestValidParentheses</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] d = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[s.length()];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// \"()\": d[i] = d[i-2] + 2</span></span><br><span class=\"line\">    <span class=\"comment\">// \"(...))\": d[i] = d[i-1] + d[i - d[i-1] - 2] + 2</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.charAt(i) == <span class=\"string\">')'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s.charAt(i - <span class=\"number\">1</span>) == <span class=\"string\">'('</span>)</span><br><span class=\"line\">                d[i] = (i &gt;= <span class=\"number\">2</span> ? d[i - <span class=\"number\">2</span>] : <span class=\"number\">0</span>) + <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i - d[i - <span class=\"number\">1</span>] &gt;= <span class=\"number\">1</span> &amp;&amp; s.charAt(i - d[i - <span class=\"number\">1</span>] - <span class=\"number\">1</span>) == <span class=\"string\">'('</span>)</span><br><span class=\"line\">                d[i] = d[i - <span class=\"number\">1</span>] + (i - d[i - <span class=\"number\">1</span>] &gt;= <span class=\"number\">2</span> ? d[i - d[i - <span class=\"number\">1</span>] - <span class=\"number\">2</span>] : <span class=\"number\">0</span>) + <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            result = Math.max(result, d[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 22 - Generate Parentheses","url":"http://yoursite.com/2019/03/03/LeetCode-Problem-22-Generate-Parentheses/","content":"<p>Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p>\n<p>For example, given n = 3, a solution set is:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  <span class=\"string\">\"((()))\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"(()())\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"(())()\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"()(())\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"()()()\"</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">generateParenthesis</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;String&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    generateParenthesisHelper(result, n, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">generateParenthesisHelper</span><span class=\"params\">(List&lt;String&gt; result, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> open, <span class=\"keyword\">int</span> close, String str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str.length() == <span class=\"number\">2</span> * n) &#123;</span><br><span class=\"line\">        result.add(str);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (close &lt; open)</span><br><span class=\"line\">        generateParenthesisHelper(result, n, open, close + <span class=\"number\">1</span>, str + <span class=\"string\">\")\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (open &lt; n)</span><br><span class=\"line\">        generateParenthesisHelper(result, n, open + <span class=\"number\">1</span>, close, str + <span class=\"string\">\"(\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 18 - 4Sum","url":"http://yoursite.com/2019/03/03/LeetCode-Problem-18-4Sum/","content":"<p>Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>The solution set must not contain duplicate quadruplets.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.</p>\n<p>A solution set is:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [-1,  0, 0, 1],</span><br><span class=\"line\">  [-2, -1, 1, 2],</span><br><span class=\"line\">  [-2,  0, 0, 2]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; fourSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    Arrays.sort(nums);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length - <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; nums[i] == nums[i - <span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        threeSum(nums, target, nums[i], i + <span class=\"number\">1</span>, result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">threeSum</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> num, <span class=\"keyword\">int</span> left, List&lt;List&lt;Integer&gt;&gt; result)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = left; i &lt; nums.length - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt; left &amp;&amp; nums[i] == nums[i - <span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        twoSum(nums, target, num, nums[i], i + <span class=\"number\">1</span>, result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">twoSum</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2, <span class=\"keyword\">int</span> left, List&lt;List&lt;Integer&gt;&gt; result)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = target - num1 - num2;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[left] + nums[right] == sum) &#123;</span><br><span class=\"line\">            result.add(Arrays.asList(num1, num2, nums[left], nums[right]));</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">            right--;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left - <span class=\"number\">1</span>])</span><br><span class=\"line\">                left++;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right + <span class=\"number\">1</span>])</span><br><span class=\"line\">                right--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[left] + nums[right] &lt; sum)</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            right--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 16 - 3Sum Closest","url":"http://yoursite.com/2019/03/03/LeetCode-Problem-16-3Sum-Closest/","content":"<p>Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Given array nums = [-1, 2, 1, -4], and target = 1.</p>\n<p>The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">threeSumClosest</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    Arrays.sort(nums);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = nums[<span class=\"number\">0</span>] + nums[<span class=\"number\">1</span>] + nums[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> sum = nums[i] + nums[left] + nums[right];</span><br><span class=\"line\">            result = Math.abs(target - sum) &lt; Math.abs(target - result) ? sum : result;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum &lt; target)</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                right--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 15 - 3Sum","url":"http://yoursite.com/2019/03/03/LeetCode-Problem-15-3Sum/","content":"<p>Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>The solution set must not contain duplicate triplets.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Given array nums = [-1, 0, 1, 2, -1, -4],</p>\n<p>A solution set is:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [-1, 0, 1],</span><br><span class=\"line\">  [-1, -1, 2]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    Arrays.sort(nums);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; nums[i] == nums[i - <span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        twoSum(nums, -nums[i], i + <span class=\"number\">1</span>, nums.length - <span class=\"number\">1</span>, result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">twoSum</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, List&lt;List&lt;Integer&gt;&gt; result)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[left] + nums[right] == target) &#123;</span><br><span class=\"line\">            result.add(Arrays.asList(-target, nums[left], nums[right]));</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">            right--;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left - <span class=\"number\">1</span>])</span><br><span class=\"line\">                left++;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right + <span class=\"number\">1</span>])</span><br><span class=\"line\">                right--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[left] + nums[right] &lt; target)</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            right--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 11 - Container With Most Water","url":"http://yoursite.com/2019/03/03/LeetCode-Problem-11-Container-With-Most-Water/","content":"<p>Given n non-negative integers a1, a2, …, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>You may not slant the container and n is at least 2.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p><img src=\"https://s2.ax1x.com/2019/03/02/kq1Go8.jpg\" alt=\"kq1Go8.jpg\"></p>\n<p>The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</p>\n<p>Input: [1,8,6,2,5,4,8,3,7]</p>\n<p>Output: 49</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxArea</span><span class=\"params\">(<span class=\"keyword\">int</span>[] height)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = height.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">        result = Math.max(result, Math.min(height[left], height[right]) * (right - left));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (height[left] &lt; height[right])</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            right--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 38 - Count and Say","url":"http://yoursite.com/2019/03/03/LeetCode-Problem-38-Count-and-Say/","content":"<p>The count-and-say sequence is the sequence of integers with the first five terms as following:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.     1</span><br><span class=\"line\">2.     11</span><br><span class=\"line\">3.     21</span><br><span class=\"line\">4.     1211</span><br><span class=\"line\">5.     111221</span><br></pre></td></tr></table></figure></p>\n<p>1 is read off as “one 1” or 11.<br>11 is read off as “two 1s” or 21.<br>21 is read off as “one 2, then one 1” or 1211.</p>\n<p>Given an integer n where 1 ≤ n ≤ 30, generate the nth term of the count-and-say sequence.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>Each term of the sequence of integers will be represented as a string.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: 1</p>\n<p>Output: “1”</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: 4</p>\n<p>Output: “1211”</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">countAndSay</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"1\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    String prev = countAndSay(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    StringBuilder result = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; prev.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i + <span class=\"number\">1</span> &lt; prev.length() &amp;&amp; prev.charAt(i) == prev.charAt(i + <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        result.append(count).append(prev.charAt(i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 6 - ZigZag Conversion","url":"http://yoursite.com/2019/03/02/LeetCode-Problem-6-ZigZag-Conversion/","content":"<p>The string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">P   A   H   N</span><br><span class=\"line\">A P L S I I G</span><br><span class=\"line\">Y   I   R</span><br></pre></td></tr></table></figure></p>\n<p>And then read line by line: “PAHNAPLSIIGYIR”</p>\n<p>Write the code that will take a string and make this conversion given a number of rows:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">string <span class=\"title\">convert</span><span class=\"params\">(string s, <span class=\"keyword\">int</span> numRows)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: s = “PAYPALISHIRING”, numRows = 3</p>\n<p>Output: “PAHNAPLSIIGYIR”</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: s = “PAYPALISHIRING”, numRows = 4</p>\n<p>Output: “PINALSIGYAHRPI”</p>\n<p>Explanation:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">P     I    N</span><br><span class=\"line\">A   L S  I G</span><br><span class=\"line\">Y A   H R</span><br><span class=\"line\">P     I</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">convert</span><span class=\"params\">(String s, <span class=\"keyword\">int</span> numRows)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numRows == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    </span><br><span class=\"line\">    StringBuffer result = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cycle = <span class=\"number\">2</span> * numRows - <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numRows; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; i + j &lt; s.length(); j += cycle) &#123;</span><br><span class=\"line\">            result.append(s.charAt(i + j));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span> &amp;&amp; i != numRows - <span class=\"number\">1</span> &amp;&amp; cycle - i + j &lt; s.length())</span><br><span class=\"line\">                result.append(s.charAt(cycle - i + j));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 14 - Longest Common Prefix","url":"http://yoursite.com/2019/03/02/LeetCode-Problem-14-Longest-Common-Prefix/","content":"<p>Write a function to find the longest common prefix string amongst an array of strings.</p>\n<p>If there is no common prefix, return an empty string “”.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: [“flower”,”flow”,”flight”]</p>\n<p>Output: “fl”</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: [“dog”,”racecar”,”car”]</p>\n<p>Output: “”</p>\n<p>Explanation: There is no common prefix among the input strings.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>All given inputs are in lowercase letters a-z.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">longestCommonPrefix</span><span class=\"params\">(String[] strs)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strs == <span class=\"keyword\">null</span> || strs.length &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; strs[<span class=\"number\">0</span>].length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; strs.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == strs[j].length() || strs[j].charAt(i) != strs[<span class=\"number\">0</span>].charAt(i))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> strs[<span class=\"number\">0</span>].substring(<span class=\"number\">0</span>, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> strs[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 58 - Length of Last Word","url":"http://yoursite.com/2019/03/02/LeetCode-Problem-58-Length-of-Last-Word/","content":"<p>Given a string s consists of upper/lower-case alphabets and empty space characters ‘ ‘, return the length of last word in the string.</p>\n<p>If the last word does not exist, return 0.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>A word is defined as a character sequence consists of non-space characters only.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: “Hello World”</p>\n<p>Output: 5</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLastWord</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span> || s.length() &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = s.length() - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; s.charAt(i) == <span class=\"string\">' '</span>)</span><br><span class=\"line\">        i--;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; s.charAt(i) != <span class=\"string\">' '</span>) &#123;</span><br><span class=\"line\">        result++;</span><br><span class=\"line\">        i--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 67 - Add Binary","url":"http://yoursite.com/2019/03/02/LeetCode-Problem-67-Add-Binary/","content":"<p>Given two binary strings, return their sum (also a binary string).</p>\n<p>The input strings are both non-empty and contains only characters 1 or 0.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: a = “11”, b = “1”</p>\n<p>Output: “100”</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: a = “1010”, b = “1011”</p>\n<p>Output: “10101”</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addBinary</span><span class=\"params\">(String a, String b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> carry = <span class=\"number\">0</span>;</span><br><span class=\"line\">    StringBuffer result = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = a.length() - <span class=\"number\">1</span>, j = b.length() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span> || j &gt;= <span class=\"number\">0</span>; i--, j--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = carry;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">            sum += a.charAt(i) - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">            sum += b.charAt(j) - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        carry = sum / <span class=\"number\">2</span>;</span><br><span class=\"line\">        result.insert(<span class=\"number\">0</span>, sum % <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (carry &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        result.insert(<span class=\"number\">0</span>, carry);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 100 - Same Tree","url":"http://yoursite.com/2019/03/02/LeetCode-Problem-100-Same-Tree/","content":"<p>Given two binary trees, write a function to check if they are the same or not.</p>\n<p>Two binary trees are considered the same if they are structurally identical and the nodes have the same value.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   1         1</span><br><span class=\"line\">  / \\       / \\</span><br><span class=\"line\"> 2   3     2   3</span><br><span class=\"line\"></span><br><span class=\"line\">[1,2,3],   [1,2,3]</span><br></pre></td></tr></table></figure></p>\n<p>Output: true</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   1         1</span><br><span class=\"line\">  /           \\</span><br><span class=\"line\"> 2             2</span><br><span class=\"line\"></span><br><span class=\"line\">[1,2],     [1,null,2]</span><br></pre></td></tr></table></figure></p>\n<p>Output: false</p>\n<h3 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h3><p>Input:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   1         1</span><br><span class=\"line\">  / \\       / \\</span><br><span class=\"line\"> 2   1     1   2</span><br><span class=\"line\"></span><br><span class=\"line\">[1,2,1],   [1,1,2]</span><br></pre></td></tr></table></figure></p>\n<p>Output: false</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSameTree</span><span class=\"params\">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> &amp;&amp; q == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> || q == <span class=\"keyword\">null</span> || p.val != q.val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 101 - Symmetric Tree","url":"http://yoursite.com/2019/03/02/LeetCode-Problem-101-Symmetric-Tree/","content":"<p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p>\n<p>For example, this binary tree [1,2,2,3,4,4,3] is symmetric:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    1</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  2   2</span><br><span class=\"line\"> / \\ / \\</span><br><span class=\"line\">3  4 4  3</span><br></pre></td></tr></table></figure></p>\n<p>But the following [1,2,2,null,3,null,3] is not:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  1</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">2   2</span><br><span class=\"line\"> \\   \\</span><br><span class=\"line\"> 3    3</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>Bonus points if you could solve it both recursively and iteratively.</p>\n<h2 id=\"Recursive\"><a href=\"#Recursive\" class=\"headerlink\" title=\"Recursive\"></a>Recursive</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSymmetric</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> isSymmetricHelper(root.left, root.right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSymmetricHelper</span><span class=\"params\">(TreeNode n1, TreeNode n2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n1 == <span class=\"keyword\">null</span> &amp;&amp; n2 == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n1 == <span class=\"keyword\">null</span> || n2 == <span class=\"keyword\">null</span> || n1.val != n2.val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> isSymmetricHelper(n1.left, n2.right) &amp;&amp; isSymmetricHelper(n1.right, n2.left);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Iterative\"><a href=\"#Iterative\" class=\"headerlink\" title=\"Iterative\"></a>Iterative</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSymmetric</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    queue.offer(root.left);</span><br><span class=\"line\">    queue.offer(root.right);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        TreeNode n1 = queue.poll();</span><br><span class=\"line\">        TreeNode n2 = queue.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n1 == <span class=\"keyword\">null</span> &amp;&amp; n2 == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n1 == <span class=\"keyword\">null</span> || n2 == <span class=\"keyword\">null</span> || n1.val != n2.val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        queue.offer(n1.left);</span><br><span class=\"line\">        queue.offer(n2.right);</span><br><span class=\"line\">        queue.offer(n1.right);</span><br><span class=\"line\">        queue.offer(n2.left);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 965 - Univalued Binary Tree","url":"http://yoursite.com/2019/03/02/LeetCode-Problem-965-Univalued-Binary-Tree/","content":"<p>A binary tree is univalued if every node in the tree has the same value.</p>\n<p>Return true if and only if the given tree is univalued.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p><img src=\"https://s2.ax1x.com/2019/03/01/kb8uO1.png\" alt=\"kb8uO1.png\"></p>\n<p>Input: [1,1,1,1,1,null,1]</p>\n<p>Output: true</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p><img src=\"https://s2.ax1x.com/2019/03/01/kb88YD.png\" alt=\"kb88YD.png\"></p>\n<p>Input: [2,2,2,5,2]</p>\n<p>Output: false</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>The number of nodes in the given tree will be in the range [1, 100].<br>Each node’s value will be an integer in the range [0, 99].</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isUnivalTree</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.left != <span class=\"keyword\">null</span> &amp;&amp; root.val != root.left.val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.right != <span class=\"keyword\">null</span> &amp;&amp; root.val != root.right.val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> isUnivalTree(root.left) &amp;&amp; isUnivalTree(root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 985 - Sum of Even Numbers After Queries","url":"http://yoursite.com/2019/03/02/LeetCode-Problem-985-Sum-of-Even-Numbers-After-Queries/","content":"<p>We have an array A of integers, and an array queries of queries.</p>\n<p>For the i-th query val = queries[i][0], index = queries[i][1], we add val to A[index].  Then, the answer to the i-th query is the sum of the even values of A.</p>\n<p>(Here, the given index = queries[i][1] is a 0-based index, and each query permanently modifies the array A.)</p>\n<p>Return the answer to all queries.  Your answer array should have answer[i] as the answer to the i-th query.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: A = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]</p>\n<p>Output: [8,6,2,4]</p>\n<p>Explanation:<br>At the beginning, the array is [1,2,3,4].<br>After adding 1 to A[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.<br>After adding -3 to A[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.<br>After adding -4 to A[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.<br>After adding 2 to A[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>1 &lt;= A.length &lt;= 10000<br>-10000 &lt;= A[i] &lt;= 10000<br>1 &lt;= queries.length &lt;= 10000<br>-10000 &lt;= queries[i][0] &lt;= 10000<br>0 &lt;= queries[i][1] &lt; A.length</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] sumEvenAfterQueries(<span class=\"keyword\">int</span>[] A, <span class=\"keyword\">int</span>[][] queries) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = queries.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; A.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[i] % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">            sum += A[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> val = queries[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = queries[i][<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[index] % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">            sum -= A[index];</span><br><span class=\"line\"></span><br><span class=\"line\">        A[index] += val;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[index] % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">            sum += A[index];</span><br><span class=\"line\"></span><br><span class=\"line\">        result[i] = sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 561 - Array Partition I","url":"http://yoursite.com/2019/03/01/LeetCode-Problem-561-Array-Partition-I/","content":"<p>Given an array of 2n integers, your task is to group these integers into n pairs of integer, say (a1, b1), (a2, b2), …, (an, bn) which makes sum of min(ai, bi) for all i from 1 to n as large as possible.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: [1,4,3,2]</p>\n<p>Output: 4</p>\n<p>Explanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>n is a positive integer, which is in the range of [1, 10000].<br>All the integers in the array will be in the range of [-10000, 10000].</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">arrayPairSum</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    Arrays.sort(nums);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i += <span class=\"number\">2</span>) </span><br><span class=\"line\">        sum += nums[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 933 - Number of Recent Calls","url":"http://yoursite.com/2019/03/01/LeetCode-Problem-933-Number-of-Recent-Calls/","content":"<p>Write a class RecentCounter to count recent requests.</p>\n<p>It has only one method: ping(int t), where t represents some time in milliseconds.</p>\n<p>Return the number of pings that have been made from 3000 milliseconds ago until now.</p>\n<p>Any ping with time in [t - 3000, t] will count, including the current ping.</p>\n<p>It is guaranteed that every call to ping uses a strictly larger value of t than before.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: inputs = [“RecentCounter”,”ping”,”ping”,”ping”,”ping”], inputs = [[],[1],[100],[3001],[3002]]</p>\n<p>Output: [null,1,2,3,3]</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>Each test case will have at most 10000 calls to ping.<br>Each test case will call ping with strictly increasing values of t.<br>Each call to ping will have 1 &lt;= t &lt;= 10^9.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Queue&lt;Integer&gt; queue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RecentCounter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    queue = <span class=\"keyword\">new</span> LinkedList();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">ping</span><span class=\"params\">(<span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">    queue.offer(t);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (queue.peek() &lt; t - <span class=\"number\">3000</span>)</span><br><span class=\"line\">        queue.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> queue.size();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 728 - Self Dividing Numbers","url":"http://yoursite.com/2019/03/01/LeetCode-Problem-728-Self-Dividing-Numbers/","content":"<p>A self-dividing number is a number that is divisible by every digit it contains.</p>\n<p>For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.</p>\n<p>Also, a self-dividing number is not allowed to contain the digit zero.</p>\n<p>Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input:<br>left = 1, right = 22</p>\n<p>Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>The boundaries of each input argument are 1 &lt;= left &lt;= right &lt;= 10000.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">selfDividingNumbers</span><span class=\"params\">(<span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> ans = left; ans &lt;= right; ans++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = ans;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> d = i % <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d == <span class=\"number\">0</span> || ans % d != <span class=\"number\">0</span>) </span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            i /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>)</span><br><span class=\"line\">            result.add(ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 852 - Peak Index in a Mountain Array","url":"http://yoursite.com/2019/03/01/LeetCode-Problem-852-Peak-Index-in-a-Mountain-Array/","content":"<p>Let’s call an array A a mountain if the following properties hold:</p>\n<p>A.length &gt;= 3<br>There exists some 0 &lt; i &lt; A.length - 1 such that A[0] &lt; A[1] &lt; … A[i-1] &lt; A[i] &gt; A[i+1] &gt; … &gt; A[A.length - 1]</p>\n<p>Given an array that is definitely a mountain, return any i such that A[0] &lt; A[1] &lt; … A[i-1] &lt; A[i] &gt; A[i+1] &gt; … &gt; A[A.length - 1].</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: [0,1,0]</p>\n<p>Output: 1</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: [0,2,1,0]</p>\n<p>Output: 1</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>3 &lt;= A.length &lt;= 10000<br>0 &lt;= A[i] &lt;= 10^6<br>A is a mountain, as defined above.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">peakIndexInMountainArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = A.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (left + right) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[mid] &lt; A[mid + <span class=\"number\">1</span>])</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            right = mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 617 - Merge Two Binary Trees","url":"http://yoursite.com/2019/02/28/LeetCode-Problem-617-Merge-Two-Binary-Trees/","content":"<p>Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.</p>\n<p>You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tree 1                     Tree 2                  </span><br><span class=\"line\">         1                         2                             </span><br><span class=\"line\">        / \\                       / \\                            </span><br><span class=\"line\">       3   2                     1   3                        </span><br><span class=\"line\">      /                           \\   \\                      </span><br><span class=\"line\">     5                             4   7</span><br></pre></td></tr></table></figure></p>\n<p>Output:<br>Merged tree:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    3</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  4   5</span><br><span class=\"line\"> / \\   \\ </span><br><span class=\"line\">5   4   7</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>The merging process must start from the root nodes of both trees.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">mergeTrees</span><span class=\"params\">(TreeNode t1, TreeNode t2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t1 == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t2 == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    TreeNode t = <span class=\"keyword\">new</span> TreeNode(t1.val + t2.val);</span><br><span class=\"line\">    t.left = mergeTrees(t1.left, t2.left);</span><br><span class=\"line\">    t.right = mergeTrees(t1.right, t2.right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 461 - Hamming Distance","url":"http://yoursite.com/2019/02/28/LeetCode-Problem-461-Hamming-Distance/","content":"<p>The Hamming distance between two integers is the number of positions at which the corresponding bits are different.</p>\n<p>Given two integers x and y, calculate the Hamming distance.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>0 ≤ x, y &lt; 2^31.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: x = 1, y = 4</p>\n<p>Output: 2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Explanation:</span><br><span class=\"line\">1   (0 0 0 1)</span><br><span class=\"line\">4   (0 1 0 0)</span><br><span class=\"line\">       ↑   ↑</span><br></pre></td></tr></table></figure>\n<p>The above arrows point to positions where the corresponding bits are different.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hammingDistance</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> xor = x ^ y;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (xor != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        result++;  </span><br><span class=\"line\">        xor &amp;= xor - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 944 - Delete Columns to Make Sorted","url":"http://yoursite.com/2019/02/28/LeetCode-Problem-944-Delete-Columns-to-Make-Sorted/","content":"<p>We are given an array A of N lowercase letter strings, all of the same length.</p>\n<p>Now, we may choose any set of deletion indices, and for each string, we delete all the characters in those indices.</p>\n<p>For example, if we have an array A = [“abcdef”,”uvwxyz”] and deletion indices {0, 2, 3}, then the final array after deletions is [“bef”, “vyz”], and the remaining columns of A are [“b”,”v”], [“e”,”y”], and [“f”,”z”].  (Formally, the c-th column is [A[0][c], A[1][c], …, A[A.length-1][c]].)</p>\n<p>Suppose we chose a set of deletion indices D such that after deletions, each remaining column in A is in non-decreasing sorted order.</p>\n<p>Return the minimum possible value of D.length.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: [“cba”,”daf”,”ghi”]</p>\n<p>Output: 1</p>\n<p>Explanation:<br>After choosing D = {1}, each column [“c”,”d”,”g”] and [“a”,”f”,”i”] are in non-decreasing sorted order.<br>If we chose D = {}, then a column [“b”,”a”,”h”] would not be in non-decreasing sorted order.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: [“a”,”b”]</p>\n<p>Output: 0</p>\n<p>Explanation: D = {}</p>\n<h3 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h3><p>Input: [“zyx”,”wvu”,”tsr”]</p>\n<p>Output: 3</p>\n<p>Explanation: D = {0, 1, 2}</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>1 &lt;= A.length &lt;= 100<br>1 &lt;= A[i].length &lt;= 1000</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minDeletionSize</span><span class=\"params\">(String[] A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; A[<span class=\"number\">0</span>].length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; A.length - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (A[j].charAt(i) &gt; A[j + <span class=\"number\">1</span>].charAt(i)) &#123;</span><br><span class=\"line\">                result++;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 942 - DI String Match","url":"http://yoursite.com/2019/02/28/LeetCode-Problem-942-DI-String-Match/","content":"<p>Given a string S that only contains “I” (increase) or “D” (decrease), let N = S.length.</p>\n<p>Return any permutation A of [0, 1, …, N] such that for all i = 0, …, N-1:</p>\n<p>If S[i] == “I”, then A[i] &lt; A[i+1]<br>If S[i] == “D”, then A[i] &gt; A[i+1]</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: “IDID”</p>\n<p>Output: [0,4,1,3,2]</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: “III”</p>\n<p>Output: [0,1,2,3]</p>\n<h3 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h3><p>Input: “DDI”</p>\n<p>Output: [3,2,0,1]</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>1 &lt;= S.length &lt;= 10000<br>S only contains characters “I” or “D”.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] diStringMatch(String S) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = S.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (S.charAt(i) == <span class=\"string\">'I'</span>)</span><br><span class=\"line\">            result[i] = left++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            result[i] = right--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result[n] = left;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 657 - Robot Return to Origin","url":"http://yoursite.com/2019/02/27/LeetCode-Problem-657-Robot-Return-to-Origin/","content":"<p>There is a robot starting at position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.</p>\n<p>The move sequence is represented by a string, and the character moves[i] represents its ith move. Valid moves are R (right), L (left), U (up), and D (down). If the robot returns to the origin after it finishes all of its moves, return true. Otherwise, return false.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>The way that the robot is “facing” is irrelevant. “R” will always make the robot move to the right once, “L” will always make it move left, etc. Also, assume that the magnitude of the robot’s movement is the same for each move.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: “UD”</p>\n<p>Output: true </p>\n<p>Explanation: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: “LL”</p>\n<p>Output: false</p>\n<p>Explanation: The robot moves left twice. It ends up two “moves” to the left of the origin. We return false because it is not at the origin at the end of its moves.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">judgeCircle</span><span class=\"params\">(String moves)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] chs = moves.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> ch : chs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">'L'</span>)</span><br><span class=\"line\">            x--;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">'R'</span>)</span><br><span class=\"line\">            x++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">'D'</span>)</span><br><span class=\"line\">            y--;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">'U'</span>)</span><br><span class=\"line\">            y++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x == <span class=\"number\">0</span> &amp;&amp; y == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 832 - Flipping an Image","url":"http://yoursite.com/2019/02/27/LeetCode-Problem-832-Flipping-an-Image/","content":"<p>Given a binary matrix A, we want to flip the image horizontally, then invert it, and return the resulting image.</p>\n<p>To flip an image horizontally means that each row of the image is reversed.  For example, flipping [1, 1, 0] horizontally results in [0, 1, 1].</p>\n<p>To invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0. For example, inverting [0, 1, 1] results in [1, 0, 0].</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: [[1,1,0],[1,0,1],[0,0,0]]</p>\n<p>Output: [[1,0,0],[0,1,0],[1,1,1]]</p>\n<p>Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]]. Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]]</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]</p>\n<p>Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</p>\n<p>Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]. Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</p>\n<h2 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h2><p>1 &lt;= A.length = A[0].length &lt;= 20<br>0 &lt;= A[i][j] &lt;= 1</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[][] flipAndInvertImage(<span class=\"keyword\">int</span>[][] A) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] row : A) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (row.length + <span class=\"number\">1</span>) / <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = row[row.length - i - <span class=\"number\">1</span>] ^ <span class=\"number\">1</span>;</span><br><span class=\"line\">            row[row.length - i - <span class=\"number\">1</span>] = row[i] ^ <span class=\"number\">1</span>;</span><br><span class=\"line\">            row[i] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> A;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 905 - Sort Array By Parity","url":"http://yoursite.com/2019/02/27/LeetCode-Problem-905-Sort-Array-By-Parity/","content":"<p>Given an array A of non-negative integers, return an array consisting of all the even elements of A, followed by all the odd elements of A.</p>\n<p>You may return any answer array that satisfies this condition.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: [3,1,2,4]</p>\n<p>Output: [2,4,3,1]</p>\n<p>The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>1 &lt;= A.length &lt;= 5000<br>0 &lt;= A[i] &lt;= 5000</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] sortArrayByParity(<span class=\"keyword\">int</span>[] A) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = A.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;   </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[left] % <span class=\"number\">2</span> &gt; A[right] % <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = A[left];</span><br><span class=\"line\">            A[left] = A[right];</span><br><span class=\"line\">            A[right] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">                    </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[left] % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">            left++; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[right] % <span class=\"number\">2</span> &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> A;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 977 - Squares of a Sorted Array","url":"http://yoursite.com/2019/02/27/LeetCode-Problem-977-Squares-of-a-Sorted-Array/","content":"<p>Given an array of integers A sorted in non-decreasing order, return an array of the squares of each number, also in sorted non-decreasing order.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: [-4,-1,0,3,10]</p>\n<p>Output: [0,1,9,16,100]</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: [-7,-3,2,3,11]</p>\n<p>Output: [4,9,9,49,121]</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>1 &lt;= A.length &lt;= 10000<br>-10000 &lt;= A[i] &lt;= 10000<br>A is sorted in non-decreasing order.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] sortedSquares(<span class=\"keyword\">int</span>[] A) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = A.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (right &lt; n &amp;&amp; A[right] &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        right++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = right - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &gt;= <span class=\"number\">0</span> &amp;&amp; right &lt; n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[left] * A[left] &lt; A[right] * A[right]) &#123;</span><br><span class=\"line\">            result[i++] = A[left] * A[left];</span><br><span class=\"line\">            left--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result[i++] = A[right] * A[right];</span><br><span class=\"line\">            right++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        result[i++] = A[left] * A[left];</span><br><span class=\"line\">        left--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (right &lt; n) &#123;</span><br><span class=\"line\">        result[i++] = A[right] * A[right];</span><br><span class=\"line\">        right++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 961 - N-Repeated Element in Size 2N Array","url":"http://yoursite.com/2019/02/27/LeetCode-Problem-961-N-Repeated-Element-in-Size-2N-Array/","content":"<p>In a array A of size 2N, there are N+1 unique elements, and exactly one of these elements is repeated N times.</p>\n<p>Return the element repeated N times.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: [1,2,3,3]</p>\n<p>Output: 3</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: [2,1,2,5,3,2]</p>\n<p>Output: 2</p>\n<h3 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h3><p>Input: [5,1,5,2,5,3,5,4]</p>\n<p>Output: 5</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>4 &lt;= A.length &lt;= 10000<br>0 &lt;= A[i] &lt; 10000<br>A.length is even</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">repeatedNTimes</span><span class=\"params\">(<span class=\"keyword\">int</span>[] A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; A.length - i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (A[j] == A[j + i])</span><br><span class=\"line\">                <span class=\"keyword\">return</span> A[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 804 - Unique Morse Code Words","url":"http://yoursite.com/2019/02/26/LeetCode-Problem-804-Unique-Morse-Code-Words/","content":"<p>International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: “a” maps to “.-“, “b” maps to “-…”, “c” maps to “-.-.”, and so on.</p>\n<p>For convenience, the full table for the 26 letters of the English alphabet is given below:</p>\n<p>[“.-“,”-…”,”-.-.”,”-..”,”.”,”..-.”,”–.”,”….”,”..”,”.—“,”-.-“,”.-..”,”–”,”-.”,”—“,”.–.”,”–.-“,”.-.”,”…”,”-“,”..-“,”…-“,”.–”,”-..-“,”-.–”,”–..”]</p>\n<p>Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, “cba” can be written as “-.-..–…”, (which is the concatenation “-.-.” + “-…” + “.-“). We’ll call such a concatenation, the transformation of a word.</p>\n<p>Return the number of different transformations among all words we have.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: words = [“gin”, “zen”, “gig”, “msg”]</p>\n<p>Output: 2</p>\n<p>Explanation:<br>The transformation of each word is:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"gin\"</span> -&gt; <span class=\"string\">\"--...-.\"</span></span><br><span class=\"line\"><span class=\"string\">\"zen\"</span> -&gt; <span class=\"string\">\"--...-.\"</span></span><br><span class=\"line\"><span class=\"string\">\"gig\"</span> -&gt; <span class=\"string\">\"--...--.\"</span></span><br><span class=\"line\"><span class=\"string\">\"msg\"</span> -&gt; <span class=\"string\">\"--...--.\"</span></span><br></pre></td></tr></table></figure></p>\n<p>There are 2 different transformations, “–…-.” and “–…–.”.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>The length of words will be at most 100.<br>Each words[i] will have length in range [1, 12].<br>words[i] will only consist of lowercase letters.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">uniqueMorseRepresentations</span><span class=\"params\">(String[] words)</span> </span>&#123;</span><br><span class=\"line\">    Set&lt;String&gt; result = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">    String[] morse = &#123;<span class=\"string\">\".-\"</span>,<span class=\"string\">\"-...\"</span>,<span class=\"string\">\"-.-.\"</span>,<span class=\"string\">\"-..\"</span>,<span class=\"string\">\".\"</span>,<span class=\"string\">\"..-.\"</span>,<span class=\"string\">\"--.\"</span>,<span class=\"string\">\"....\"</span>,<span class=\"string\">\"..\"</span>,<span class=\"string\">\".---\"</span>,<span class=\"string\">\"-.-\"</span>,<span class=\"string\">\".-..\"</span>,<span class=\"string\">\"--\"</span>,<span class=\"string\">\"-.\"</span>,<span class=\"string\">\"---\"</span>,                    <span class=\"string\">\".--.\"</span>,<span class=\"string\">\"--.-\"</span>,<span class=\"string\">\".-.\"</span>,<span class=\"string\">\"...\"</span>,<span class=\"string\">\"-\"</span>,<span class=\"string\">\"..-\"</span>,<span class=\"string\">\"...-\"</span>,<span class=\"string\">\".--\"</span>,<span class=\"string\">\"-..-\"</span>,<span class=\"string\">\"-.--\"</span>,<span class=\"string\">\"--..\"</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String word : words) &#123;</span><br><span class=\"line\">        String str = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> ch : word.toCharArray())</span><br><span class=\"line\">            str += morse[ch - <span class=\"string\">'a'</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        result.add(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.size();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 709 - To Lower Case","url":"http://yoursite.com/2019/02/26/LeetCode-Problem-709-To-Lower-Case/","content":"<p>Implement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: “Hello”</p>\n<p>Output: “hello”</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: “here”</p>\n<p>Output: “here”</p>\n<h3 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h3><p>Input: “LOVELY”</p>\n<p>Output: “lovely”</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toLowerCase</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] ch = str.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ch.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch[i] &gt;= <span class=\"string\">'A'</span> &amp;&amp; ch[i] &lt;= <span class=\"string\">'Z'</span>)</span><br><span class=\"line\">            ch[i] -= <span class=\"string\">'A'</span> - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> String.valueOf(ch);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 929 - Unique Email Addresses","url":"http://yoursite.com/2019/02/26/LeetCode-Problem-929-Unique-Email-Addresses/","content":"<p>Every email consists of a local name and a domain name, separated by the @ sign.</p>\n<p>For example, in <a href=\"mailto:alice@leetcode.com\" target=\"_blank\" rel=\"noopener\">alice@leetcode.com</a>, alice is the local name, and leetcode.com is the domain name.</p>\n<p>Besides lowercase letters, these emails may contain ‘.’s or ‘+’s.</p>\n<p>If you add periods (‘.’) between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name.  For example, “<a href=\"mailto:alice.z@leetcode.com\" target=\"_blank\" rel=\"noopener\">alice.z@leetcode.com</a>“ and “<a href=\"mailto:alicez@leetcode.com\" target=\"_blank\" rel=\"noopener\">alicez@leetcode.com</a>“ forward to the same email address.  (Note that this rule does not apply for domain names.)</p>\n<p>If you add a plus (‘+’) in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered, for example <a href=\"mailto:m.y+name@email.com\" target=\"_blank\" rel=\"noopener\">m.y+name@email.com</a> will be forwarded to <a href=\"mailto:my@email.com\" target=\"_blank\" rel=\"noopener\">my@email.com</a>.  (Again, this rule does not apply for domain names.)</p>\n<p>It is possible to use both of these rules at the same time.</p>\n<p>Given a list of emails, we send one email to each address in the list.  How many different addresses actually receive mails? </p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: [“<a href=\"mailto:test.email+alex@leetcode.com\" target=\"_blank\" rel=\"noopener\">test.email+alex@leetcode.com</a>“,”<a href=\"mailto:test.e.mail+bob.cathy@leetcode.com\" target=\"_blank\" rel=\"noopener\">test.e.mail+bob.cathy@leetcode.com</a>“,”<a href=\"mailto:testemail+david@lee.tcode.com\" target=\"_blank\" rel=\"noopener\">testemail+david@lee.tcode.com</a>“]</p>\n<p>Output: 2</p>\n<p>Explanation: “<a href=\"mailto:testemail@leetcode.com\" target=\"_blank\" rel=\"noopener\">testemail@leetcode.com</a>“ and “<a href=\"mailto:testemail@lee.tcode.com\" target=\"_blank\" rel=\"noopener\">testemail@lee.tcode.com</a>“ actually receive mails</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>1 &lt;= emails[i].length &lt;= 100<br>1 &lt;= emails.length &lt;= 100<br>Each emails[i] contains exactly one ‘@’ character.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">numUniqueEmails</span><span class=\"params\">(String[] emails)</span> </span>&#123;</span><br><span class=\"line\">    Set&lt;String&gt; result = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String email : emails) &#123;</span><br><span class=\"line\">        String[] names = email.split(<span class=\"string\">\"@\"</span>);</span><br><span class=\"line\">        String[] local = names[<span class=\"number\">0</span>].split(<span class=\"string\">\"\\\\+\"</span>);</span><br><span class=\"line\">        result.add(local[<span class=\"number\">0</span>].replace(<span class=\"string\">\".\"</span>, <span class=\"string\">\"\"</span>) + <span class=\"string\">\"@\"</span> + names[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.size();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 295 - Find Median from Data Stream","url":"http://yoursite.com/2019/02/26/LeetCode-Problem-295-Find-Median-from-Data-Stream/","content":"<p>Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.</p>\n<p>For example,<br>[2,3,4], the median is 3</p>\n<p>[2,3], the median is (2 + 3) / 2 = 2.5</p>\n<p>Design a data structure that supports the following two operations:</p>\n<p>void addNum(int num) - Add a integer number from the data stream to the data structure.<br>double findMedian() - Return the median of all elements so far.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>addNum(1)<br>addNum(2)<br>findMedian() -&gt; 1.5<br>addNum(3)<br>findMedian() -&gt; 2</p>\n<h2 id=\"Follow-up\"><a href=\"#Follow-up\" class=\"headerlink\" title=\"Follow up\"></a>Follow up</h2><p>If all integer numbers from the stream are between 0 and 100, how would you optimize it?<br>If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> PriorityQueue&lt;Integer&gt; maxHeap, minHeap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MedianFinder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    minHeap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;();</span><br><span class=\"line\">    maxHeap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;(<span class=\"keyword\">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> o2.compareTo(o1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addNum</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">    maxHeap.add(num);</span><br><span class=\"line\">    minHeap.add(maxHeap.poll());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minHeap.size() &gt; maxHeap.size())</span><br><span class=\"line\">        maxHeap.add(minHeap.poll());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">findMedian</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minHeap.size() == maxHeap.size())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">double</span>) (minHeap.peek() + maxHeap.peek()) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">double</span>) maxHeap.peek();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 17 - Letter Combinations of a Phone Number","url":"http://yoursite.com/2019/02/25/LeetCode-Problem-17-Letter-Combinations-of-a-Phone-Number/","content":"<p>Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.</p>\n<p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>\n<p><img src=\"https://s2.ax1x.com/2019/02/24/k5iEQ0.png\" alt=\"k5iEQ0.png\"></p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: “23”</p>\n<p>Output: [“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>Although the above answer is in lexicographical order, your answer could be in any order you want.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;Character, <span class=\"keyword\">char</span>[]&gt; map = <span class=\"keyword\">new</span> HashMap&lt;Character, <span class=\"keyword\">char</span>[]&gt;() &#123;&#123;</span><br><span class=\"line\">    put(<span class=\"string\">'2'</span>, <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[] &#123; <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span> &#125;);</span><br><span class=\"line\">    put(<span class=\"string\">'3'</span>, <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[] &#123; <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span> &#125;);</span><br><span class=\"line\">    put(<span class=\"string\">'4'</span>, <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[] &#123; <span class=\"string\">'g'</span>, <span class=\"string\">'h'</span>, <span class=\"string\">'i'</span> &#125;);</span><br><span class=\"line\">    put(<span class=\"string\">'5'</span>, <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[] &#123; <span class=\"string\">'j'</span>, <span class=\"string\">'k'</span>, <span class=\"string\">'l'</span> &#125;);</span><br><span class=\"line\">    put(<span class=\"string\">'6'</span>, <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[] &#123; <span class=\"string\">'m'</span>, <span class=\"string\">'n'</span>, <span class=\"string\">'o'</span> &#125;);</span><br><span class=\"line\">    put(<span class=\"string\">'7'</span>, <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[] &#123; <span class=\"string\">'p'</span>, <span class=\"string\">'q'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'s'</span> &#125;);</span><br><span class=\"line\">    put(<span class=\"string\">'8'</span>, <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[] &#123; <span class=\"string\">'t'</span>, <span class=\"string\">'u'</span>, <span class=\"string\">'v'</span> &#125;);</span><br><span class=\"line\">    put(<span class=\"string\">'9'</span>, <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[] &#123; <span class=\"string\">'w'</span>, <span class=\"string\">'x'</span>, <span class=\"string\">'y'</span>, <span class=\"string\">'z'</span> &#125;);</span><br><span class=\"line\">&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">letterCombinations</span><span class=\"params\">(String digits)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;String&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (digits == <span class=\"keyword\">null</span> || digits.length() &lt; <span class=\"number\">1</span>) </span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    </span><br><span class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    combinationHelper(result, digits, sb);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">combinationHelper</span><span class=\"params\">(List&lt;String&gt; result, String digits, StringBuilder sb)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sb.length() == digits.length()) &#123;</span><br><span class=\"line\">        result.add(sb.toString());</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : map.get(digits.charAt(sb.length()))) &#123;</span><br><span class=\"line\">        sb.append(c);</span><br><span class=\"line\">        combinationHelper(result, digits, sb);</span><br><span class=\"line\">        sb.deleteCharAt(sb.length() - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 771 - Jewels and Stones","url":"http://yoursite.com/2019/02/21/LeetCode-Problem-771-Jewels-and-Stones/","content":"<p>You’re given strings J representing the types of stones that are jewels, and S representing the stones you have.  Each character in S is a type of stone you have.  You want to know how many of the stones you have are also jewels.</p>\n<p>The letters in J are guaranteed distinct, and all characters in J and S are letters. Letters are case sensitive, so “a” is considered a different type of stone from “A”.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: J = “aA”, S = “aAAbbbb”</p>\n<p>Output: 3</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: J = “z”, S = “ZZ”</p>\n<p>Output: 0</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>S and J will consist of letters and have length at most 50.</p>\n<p>The characters in J are distinct.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">numJewelsInStones</span><span class=\"params\">(String J, String S)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    Set set = <span class=\"keyword\">new</span> HashSet();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> j : J.toCharArray()) &#123;</span><br><span class=\"line\">        set.add(j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> s : S.toCharArray()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (set.contains(s)) &#123;</span><br><span class=\"line\">            result++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"clone方法和java.lang.Cloneable接口","url":"http://yoursite.com/2019/02/19/clone方法和java-lang-Cloneable接口/","content":"<p>Java语言准备了用于复制实例的clone方法。要想调用clone方法，被复制对象的类必须实现java.lang.Cloneable接口，不论是被复制对象的类实现java.lang.Cloneable接口还是其某个父类实现Cloneable接口，亦或是被复制对象的类实现了Cloneable接口的子接口都可以。</p>\n<p>实现了Cloneable接口的类的实例可以调用clone方法进行复制，clone方法的返回值是复制出的新的实例（clone方法内部所进行的处理是分配与要复制的实例同样大小的内存空间，接着将要复制的实例中的字段的值复制到所分配的内存空间中去）。</p>\n<p>如果没有实现Cloneable接口的类的实例调用了clone方法，则会在运行时抛出CloneNotSupportedException异常。</p>\n<h2 id=\"clone方法是在哪里定义的\"><a href=\"#clone方法是在哪里定义的\" class=\"headerlink\" title=\"clone方法是在哪里定义的\"></a>clone方法是在哪里定义的</h2><p>clone方法定义在java.lang.Object中。因为Object类是所有Java类的父类，因此所有的Java类都继承了clone方法。</p>\n<h2 id=\"需要实现Cloneable的哪些方法\"><a href=\"#需要实现Cloneable的哪些方法\" class=\"headerlink\" title=\"需要实现Cloneable的哪些方法\"></a>需要实现Cloneable的哪些方法</h2><p>提到Cloneable接口，很容易让人误以为Cloneable接口中声明了clone方法。其实这是错误的。在Cloneable接口中并没有声明任何方法。它只是被用来标记“可以使用clone方法进行复制”的。这样的接口被称为标记接口。</p>\n<h2 id=\"clone方法进行的是浅复制\"><a href=\"#clone方法进行的是浅复制\" class=\"headerlink\" title=\"clone方法进行的是浅复制\"></a>clone方法进行的是浅复制</h2><p>clone方法所进行的复制只是将被复制实例的字段值直接复制到新的实例中。换言之，它并没有考虑字段中所保存的实例的内容。例如，当字段中保存的是数组时，如果使用clone方法进行复制，则只会复制该数组的引用，并不会一一复制数组中的元素。</p>\n<p>像这样的字段对字段的复制被称为浅复制（shallow copy）。clone方法所进行的复制就是浅复制。</p>\n<p>当使用clone方法进行浅复制无法满足需求时，类的设计者可以实现重写clone方法，实现自己需要的复制功能（重写clone方法时，别忘了使用super.clone()来调用父类的clone方法）。</p>\n<p>需要注意的是，clone方法只会进行复制，并不会调用被复制实例的构造函数。此外，对于在生成实例时需要进行特殊的初始化处理的类，需要自己去实现clone方法，在其内部进行这些初始化处理。</p>\n","categories":["Design Pattern"],"tags":["Java","Design Pattern"]},{"title":"【图解设计模式】Prototype模式","url":"http://yoursite.com/2019/02/18/【图解设计模式】Prototype模式/","content":"<p>不根据类来生成实例，而是根据实例来生成新实例。</p>\n<p>在开发过程中，有时候也会有“在不指定类名的前提下生成实例”的需求。例如，在以下情况下，就不能根据类来生成实例，而要根据现有的实例来生成新的实例。</p>\n<p>(1) 对象种类繁多，无法将它们整合到一个类中时<br>(2) 难以根据类生成实例时<br>(3) 想解耦框架与生成的实例时</p>\n<p>在Java语言中，可以使用clone创建出实例的副本。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>将字符串放入方框中显示出来或是加上下划线显示出来。</p>\n<h3 id=\"Product接口\"><a href=\"#Product接口\" class=\"headerlink\" title=\"Product接口\"></a>Product接口</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> framework;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Product</span> <span class=\"keyword\">extends</span> <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">use</span><span class=\"params\">(String s)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Product <span class=\"title\">createClone</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Manager类\"><a href=\"#Manager类\" class=\"headerlink\" title=\"Manager类\"></a>Manager类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> framework;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Manager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashMap showcase = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(String name, Product proto)</span> </span>&#123;</span><br><span class=\"line\">        showcase.put(name, proto);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Product <span class=\"title\">create</span><span class=\"params\">(String protoname)</span> </span>&#123;</span><br><span class=\"line\">        Product p = (Product) showcase.get(protoname);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p.createClone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MessageBox类\"><a href=\"#MessageBox类\" class=\"headerlink\" title=\"MessageBox类\"></a>MessageBox类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> framework.Product;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageBox</span> <span class=\"keyword\">implements</span> <span class=\"title\">Product</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">char</span> decochar;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MessageBox</span><span class=\"params\">(<span class=\"keyword\">char</span> decochar)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.decochar = decochar;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">use</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = s.getBytes().length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length + <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">            System.out.print(decochar);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        System.out.println(decochar + <span class=\"string\">\" \"</span> + s + <span class=\"string\">\" \"</span> + decochar);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length + <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">            System.out.print(decochar);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Product <span class=\"title\">createClone</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Product p = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            p = (Product) clone();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"UnderlinePen类\"><a href=\"#UnderlinePen类\" class=\"headerlink\" title=\"UnderlinePen类\"></a>UnderlinePen类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> framework.Product;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnderlinePen</span> <span class=\"keyword\">implements</span> <span class=\"title\">Product</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">char</span> ulchar;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UnderlinePen</span><span class=\"params\">(<span class=\"keyword\">char</span> ulchar)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ulchar = ulchar;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">use</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = s.getBytes().length;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"\\\"\"</span> + s + <span class=\"string\">\"\\\"\"</span>);</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            System.out.print(ulchar);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Product <span class=\"title\">createClone</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Product p = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            p = (Product) clone();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Main类\"><a href=\"#Main类\" class=\"headerlink\" title=\"Main类\"></a>Main类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> framework.Manager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> framework.Product;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Manager manager = <span class=\"keyword\">new</span> Manager();</span><br><span class=\"line\">        UnderlinePen upen = <span class=\"keyword\">new</span> UnderlinePen(<span class=\"string\">'~'</span>);</span><br><span class=\"line\">        MessageBox mbox = <span class=\"keyword\">new</span> MessageBox(<span class=\"string\">'*'</span>);</span><br><span class=\"line\">        MessageBox sbox = <span class=\"keyword\">new</span> MessageBox(<span class=\"string\">'/'</span>);</span><br><span class=\"line\">        manager.register(<span class=\"string\">\"strong message\"</span>, upen);</span><br><span class=\"line\">        manager.register(<span class=\"string\">\"warning box\"</span>, mbox);</span><br><span class=\"line\">        manager.register(<span class=\"string\">\"slash box\"</span>, sbox);</span><br><span class=\"line\"></span><br><span class=\"line\">        Product p1 = manager.create(<span class=\"string\">\"strong message\"</span>);</span><br><span class=\"line\">        p1.use(<span class=\"string\">\"Hello, world.\"</span>);</span><br><span class=\"line\">        Product p2 = manager.create(<span class=\"string\">\"warning box\"</span>);</span><br><span class=\"line\">        p2.use(<span class=\"string\">\"Hello, world.\"</span>);</span><br><span class=\"line\">        Product p3 = manager.create(<span class=\"string\">\"slash box\"</span>);</span><br><span class=\"line\">        p3.use(<span class=\"string\">\"Hello, world.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Hello, world.\"</span></span><br><span class=\"line\"> ~~~~~~~~~~~~~</span><br><span class=\"line\">*****************</span><br><span class=\"line\">* Hello, world. *</span><br><span class=\"line\">*****************</span><br><span class=\"line\">/////////////////</span><br><span class=\"line\">/ Hello, world. /</span><br><span class=\"line\">/////////////////</span><br></pre></td></tr></table></figure>\n<h2 id=\"登场角色\"><a href=\"#登场角色\" class=\"headerlink\" title=\"登场角色\"></a>登场角色</h2><h3 id=\"Prototype（原型）\"><a href=\"#Prototype（原型）\" class=\"headerlink\" title=\"Prototype（原型）\"></a>Prototype（原型）</h3><p>Prototype角色负责定义用于赋值现有实例来生成新实例的方法。在示例程序中，由Product接口扮演此角色。</p>\n<h3 id=\"ConcretePrototype（具体的原型）\"><a href=\"#ConcretePrototype（具体的原型）\" class=\"headerlink\" title=\"ConcretePrototype（具体的原型）\"></a>ConcretePrototype（具体的原型）</h3><p>ConcretePrototype角色负责实现复制现有实例并生成新实例的方法。在示例程序中，由MessageBox类和UnderlinePen类扮演此角色。</p>\n<h3 id=\"Client（使用者）\"><a href=\"#Client（使用者）\" class=\"headerlink\" title=\"Client（使用者）\"></a>Client（使用者）</h3><p>Client角色负责使用复制实例的方法生成新的实例。在示例程序中，由Manager类扮演此角色。</p>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><a href=\"https://imgchr.com/i/kc0FOg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/02/18/kc0FOg.png\" alt=\"kc0FOg.png\"></a></p>\n","categories":["Design Pattern"],"tags":["Java","Design Pattern"]},{"title":"java.util.concurrent包和Active Object模式","url":"http://yoursite.com/2019/02/17/java-util-concurrent包和Active-Object模式/","content":"<h2 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h2><p><img src=\"https://s2.ax1x.com/2019/02/16/kshiTS.png\" alt=\"kshiTS.png\"></p>\n<h2 id=\"Main-java\"><a href=\"#Main-java\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> activeobject.ActiveObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> activeobject.ActiveObjectFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ActiveObject activeObject = ActiveObjectFactory.createActiveObject();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> MakerClientThread(<span class=\"string\">\"Alice\"</span>, activeObject).start();</span><br><span class=\"line\">            <span class=\"keyword\">new</span> MakerClientThread(<span class=\"string\">\"Bobby\"</span>, activeObject).start();</span><br><span class=\"line\">            <span class=\"keyword\">new</span> DisplayClientThread(<span class=\"string\">\"Chris\"</span>, activeObject).start();</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">5000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"*** shutdown ***\"</span>);</span><br><span class=\"line\">            activeObject.shutdown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MakerClientThread-java\"><a href=\"#MakerClientThread-java\" class=\"headerlink\" title=\"MakerClientThread.java\"></a>MakerClientThread.java</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> activeobject.ActiveObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CancellationException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutionException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Future;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.RejectedExecutionException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MakerClientThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ActiveObject activeObject;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> fillchar;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MakerClientThread</span><span class=\"params\">(String name, ActiveObject activeObject)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.activeObject = activeObject;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fillchar = name.charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; <span class=\"keyword\">true</span>; i++) &#123;</span><br><span class=\"line\">                Future&lt;String&gt; future = activeObject.makeString(i, fillchar);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                String value = future.get();</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">\": value = \"</span> + value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> + e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ExecutionException e) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> + e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RejectedExecutionException e) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> + e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CancellationException e) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> + e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"DisplayClientThread-java\"><a href=\"#DisplayClientThread-java\" class=\"headerlink\" title=\"DisplayClientThread.java\"></a>DisplayClientThread.java</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> activeobject.ActiveObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CancellationException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.RejectedExecutionException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DisplayClientThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ActiveObject activeObject;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DisplayClientThread</span><span class=\"params\">(String name, ActiveObject activeObject)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.activeObject = activeObject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; <span class=\"keyword\">true</span>; i++) &#123;</span><br><span class=\"line\">                String string = Thread.currentThread().getName() + <span class=\"string\">\" \"</span> + i;</span><br><span class=\"line\">                activeObject.displayString(string);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> + e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RejectedExecutionException e) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> + e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CancellationException e) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> + e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ActiveObject-java\"><a href=\"#ActiveObject-java\" class=\"headerlink\" title=\"ActiveObject.java\"></a>ActiveObject.java</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> activeobject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Future;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ActiveObject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Future&lt;String&gt; <span class=\"title\">makeString</span><span class=\"params\">(<span class=\"keyword\">int</span> count, <span class=\"keyword\">char</span> fillchar)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">displayString</span><span class=\"params\">(String string)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ActiveObjectFactory-java\"><a href=\"#ActiveObjectFactory-java\" class=\"headerlink\" title=\"ActiveObjectFactory.java\"></a>ActiveObjectFactory.java</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> activeobject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActiveObjectFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ActiveObject <span class=\"title\">createActiveObject</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActiveObjectImpl();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ActiveObjectImpl-java\"><a href=\"#ActiveObjectImpl-java\" class=\"headerlink\" title=\"ActiveObjectImpl.java\"></a>ActiveObjectImpl.java</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> activeobject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Callable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Future;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActiveObjectImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">ActiveObject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ExecutorService service = Executors.newSingleThreadExecutor();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Future&lt;String&gt; <span class=\"title\">makeString</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count, <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> fillchar)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MakeStringRequest</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[count];</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">                    buffer[i] = fillchar;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(buffer);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> service.submit(<span class=\"keyword\">new</span> MakeStringRequest());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">displayString</span><span class=\"params\">(<span class=\"keyword\">final</span> String string)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DisplayStringRequest</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"displayString: \"</span> + string);</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        service.execute(<span class=\"keyword\">new</span> DisplayStringRequest());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        service.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">displayString: Chris 0</span><br><span class=\"line\">Alice: value = </span><br><span class=\"line\">Bobby: value = </span><br><span class=\"line\">Alice: value = A</span><br><span class=\"line\">Bobby: value = B</span><br><span class=\"line\">displayString: Chris 1</span><br><span class=\"line\">Alice: value = AA</span><br><span class=\"line\">displayString: Chris 2</span><br><span class=\"line\">Bobby: value = BB</span><br><span class=\"line\">Alice: value = AAA</span><br><span class=\"line\">displayString: Chris 3</span><br><span class=\"line\">Bobby: value = BBB</span><br><span class=\"line\">displayString: Chris 4</span><br><span class=\"line\">displayString: Chris 5</span><br><span class=\"line\">Alice: value = AAAA</span><br><span class=\"line\">displayString: Chris 6</span><br><span class=\"line\">Bobby: value = BBBB</span><br><span class=\"line\">displayString: Chris 7</span><br><span class=\"line\">displayString: Chris 8</span><br><span class=\"line\">Alice: value = AAAAA</span><br><span class=\"line\">displayString: Chris 9</span><br><span class=\"line\">displayString: Chris 10</span><br><span class=\"line\">Bobby: value = BBBBB</span><br><span class=\"line\">displayString: Chris 11</span><br><span class=\"line\">displayString: Chris 12</span><br><span class=\"line\">displayString: Chris 13</span><br><span class=\"line\">Alice: value = AAAAAA</span><br><span class=\"line\">displayString: Chris 14</span><br><span class=\"line\">displayString: Chris 15</span><br><span class=\"line\">displayString: Chris 16</span><br><span class=\"line\">Bobby: value = BBBBBB</span><br><span class=\"line\">displayString: Chris 17</span><br><span class=\"line\">displayString: Chris 18</span><br><span class=\"line\">displayString: Chris 19</span><br><span class=\"line\">*** shutdown ***</span><br><span class=\"line\">Chris:java.util.concurrent.RejectedExecutionException: Task activeobject.ActiveObjectImpl<span class=\"variable\">$1DisplayStringRequest</span>@16d7ece6 rejected from java.util.concurrent.ThreadPoolExecutor@1810004c[Shutting down, pool size = 1, active threads = 1, queued tasks = 6, completed tasks = 34]</span><br><span class=\"line\">Alice: value = AAAAAAA</span><br><span class=\"line\">displayString: Chris 20</span><br><span class=\"line\">Alice:java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@5ddf2842 rejected from java.util.concurrent.ThreadPoolExecutor@1810004c[Shutting down, pool size = 1, active threads = 1, queued tasks = 5, completed tasks = 35]</span><br><span class=\"line\">displayString: Chris 21</span><br><span class=\"line\">displayString: Chris 22</span><br><span class=\"line\">Bobby: value = BBBBBBB</span><br><span class=\"line\">displayString: Chris 23</span><br><span class=\"line\">Bobby:java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@5bfd5176 rejected from java.util.concurrent.ThreadPoolExecutor@1810004c[Shutting down, pool size = 1, active threads = 1, queued tasks = 1, completed tasks = 39]</span><br><span class=\"line\">displayString: Chris 24</span><br></pre></td></tr></table></figure>","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"【图解Java多线程设计模式】Active Object模式","url":"http://yoursite.com/2019/02/15/【图解Java多线程设计模式】Active-Object模式/","content":"<p>主动对象会通过自己特有的线程在合适的时机处理从外部接收到的异步消息。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>实现具有“生成字符串”（makeString）和“显示字符串”（displayString）这两种功能（可以处理两种异步消息）的主动对象。</p>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"https://s2.ax1x.com/2019/02/14/kD1UE9.png\" alt=\"kD1UE9.png\"></p>\n<h3 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h3><p><img src=\"https://s2.ax1x.com/2019/02/14/kD16De.png\" alt=\"kD16De.png\"></p>\n<h3 id=\"Main-java\"><a href=\"#Main-java\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> activeobject.ActiveObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> activeobject.ActiveObjectFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ActiveObject activeObject = ActiveObjectFactory.createActiveObject();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> MakerClientThread(<span class=\"string\">\"Alice\"</span>, activeObject).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> MakerClientThread(<span class=\"string\">\"Bobby\"</span>, activeObject).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> DisplayClientThread(<span class=\"string\">\"Chris\"</span>, activeObject).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MakerClientThread-java\"><a href=\"#MakerClientThread-java\" class=\"headerlink\" title=\"MakerClientThread.java\"></a>MakerClientThread.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> activeobject.ActiveObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> activeobject.Result;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MakerClientThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ActiveObject activeObject;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> fillchar;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MakerClientThread</span><span class=\"params\">(String name, ActiveObject activeObject)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.activeObject = activeObject;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fillchar = name.charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; <span class=\"keyword\">true</span>; i++) &#123;</span><br><span class=\"line\">                Result&lt;String&gt; result = activeObject.makeString(i, fillchar);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                String value = result.getResultValue();</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">\": value = \"</span> + value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"DisplayClientThread-java\"><a href=\"#DisplayClientThread-java\" class=\"headerlink\" title=\"DisplayClientThread.java\"></a>DisplayClientThread.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> activeobject.ActiveObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DisplayClientThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ActiveObject activeObject;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DisplayClientThread</span><span class=\"params\">(String name, ActiveObject activeObject)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.activeObject = activeObject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; <span class=\"keyword\">true</span>; i++) &#123;</span><br><span class=\"line\">                String string = Thread.currentThread().getName() + <span class=\"string\">\" \"</span> + i;</span><br><span class=\"line\">                activeObject.displayString(string);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ActiveObject-java\"><a href=\"#ActiveObject-java\" class=\"headerlink\" title=\"ActiveObject.java\"></a>ActiveObject.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> activeobject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ActiveObject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Result&lt;String&gt; <span class=\"title\">makeString</span><span class=\"params\">(<span class=\"keyword\">int</span> count, <span class=\"keyword\">char</span> fillchar)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">displayString</span><span class=\"params\">(String string)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ActiveObjectFactory-java\"><a href=\"#ActiveObjectFactory-java\" class=\"headerlink\" title=\"ActiveObjectFactory.java\"></a>ActiveObjectFactory.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> activeobject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActiveObjectFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ActiveObject <span class=\"title\">createActiveObject</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Servant servant = <span class=\"keyword\">new</span> Servant();</span><br><span class=\"line\">        ActivationQueue queue = <span class=\"keyword\">new</span> ActivationQueue();</span><br><span class=\"line\">        SchedulerThread scheduler = <span class=\"keyword\">new</span> SchedulerThread(queue);</span><br><span class=\"line\">        Proxy proxy = <span class=\"keyword\">new</span> Proxy(scheduler, servant);</span><br><span class=\"line\">        scheduler.start();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Proxy-java\"><a href=\"#Proxy-java\" class=\"headerlink\" title=\"Proxy.java\"></a>Proxy.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> activeobject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">ActiveObject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SchedulerThread scheduler;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Servant servant;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Proxy</span><span class=\"params\">(SchedulerThread scheduler, Servant servant)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.scheduler = scheduler;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.servant = servant;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Result&lt;String&gt; <span class=\"title\">makeString</span><span class=\"params\">(<span class=\"keyword\">int</span> count, <span class=\"keyword\">char</span> fillchar)</span> </span>&#123;</span><br><span class=\"line\">        FutureResult&lt;String&gt; future = <span class=\"keyword\">new</span> FutureResult&lt;String&gt;();</span><br><span class=\"line\">        scheduler.invoke(<span class=\"keyword\">new</span> MakeStringRequest(servant, future, count, fillchar));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> future;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">displayString</span><span class=\"params\">(String string)</span> </span>&#123;</span><br><span class=\"line\">        scheduler.invoke(<span class=\"keyword\">new</span> DisplayStringRequest(servant, string));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"SchedulerThread-java\"><a href=\"#SchedulerThread-java\" class=\"headerlink\" title=\"SchedulerThread.java\"></a>SchedulerThread.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> activeobject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SchedulerThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ActivationQueue queue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SchedulerThread</span><span class=\"params\">(ActivationQueue queue)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.queue = queue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">invoke</span><span class=\"params\">(MethodRequest request)</span> </span>&#123;</span><br><span class=\"line\">        queue.putRequest(request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            MethodRequest request = queue.takeRequest();</span><br><span class=\"line\">            request.execute();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ActivationQueue-java\"><a href=\"#ActivationQueue-java\" class=\"headerlink\" title=\"ActivationQueue.java\"></a>ActivationQueue.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> activeobject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivationQueue</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_METHOD_REQUEST = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MethodRequest[] requestQueue;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> head;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tail;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ActivationQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.requestQueue = <span class=\"keyword\">new</span> MethodRequest[MAX_METHOD_REQUEST];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.head = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tail = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">putRequest</span><span class=\"params\">(MethodRequest request)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (count &gt;= requestQueue.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        requestQueue[tail] = request;</span><br><span class=\"line\">        tail = (tail + <span class=\"number\">1</span>) % requestQueue.length;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> MethodRequest <span class=\"title\">takeRequest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (count &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        MethodRequest request = requestQueue[head];</span><br><span class=\"line\">        head = (head + <span class=\"number\">1</span>) % requestQueue.length;</span><br><span class=\"line\">        count--;</span><br><span class=\"line\">        notifyAll();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> request;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MethodRequest-java\"><a href=\"#MethodRequest-java\" class=\"headerlink\" title=\"MethodRequest.java\"></a>MethodRequest.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> activeobject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MethodRequest</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> Servant servant;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> FutureResult&lt;T&gt; future;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">MethodRequest</span><span class=\"params\">(Servant servant, FutureResult&lt;T&gt; future)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.servant = servant;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.future = future;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MakeStringRequest-java\"><a href=\"#MakeStringRequest-java\" class=\"headerlink\" title=\"MakeStringRequest.java\"></a>MakeStringRequest.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> activeobject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MakeStringRequest</span> <span class=\"keyword\">extends</span> <span class=\"title\">MethodRequest</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> fillchar;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MakeStringRequest</span><span class=\"params\">(Servant servant, FutureResult&lt;String&gt; future, <span class=\"keyword\">int</span> count, <span class=\"keyword\">char</span> fillchar)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(servant, future);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.count = count;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fillchar = fillchar;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Result&lt;String&gt; result = servant.makeString(count, fillchar);</span><br><span class=\"line\">        future.setResult(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"DisplayStringRequest-java\"><a href=\"#DisplayStringRequest-java\" class=\"headerlink\" title=\"DisplayStringRequest.java\"></a>DisplayStringRequest.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> activeobject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DisplayStringRequest</span> <span class=\"keyword\">extends</span> <span class=\"title\">MethodRequest</span>&lt;<span class=\"title\">Object</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String string;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DisplayStringRequest</span><span class=\"params\">(Servant servant, String string)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(servant, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.string = string;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        servant.displayString(string);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Result-java\"><a href=\"#Result-java\" class=\"headerlink\" title=\"Result.java\"></a>Result.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> activeobject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Result</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> T <span class=\"title\">getResultValue</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"FutureResult-java\"><a href=\"#FutureResult-java\" class=\"headerlink\" title=\"FutureResult.java\"></a>FutureResult.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> activeobject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FutureResult</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Result</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Result&lt;T&gt; result;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> ready = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">setResult</span><span class=\"params\">(Result&lt;T&gt; result)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.result = result;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ready = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> T <span class=\"title\">getResultValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!ready) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result.getResultValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"RealResult-java\"><a href=\"#RealResult-java\" class=\"headerlink\" title=\"RealResult.java\"></a>RealResult.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> activeobject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealResult</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Result</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> T resultValue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RealResult</span><span class=\"params\">(T resultValue)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.resultValue = resultValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getResultValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Servant-java\"><a href=\"#Servant-java\" class=\"headerlink\" title=\"Servant.java\"></a>Servant.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> activeobject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Servant</span> <span class=\"keyword\">implements</span> <span class=\"title\">ActiveObject</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Result&lt;String&gt; <span class=\"title\">makeString</span><span class=\"params\">(<span class=\"keyword\">int</span> count, <span class=\"keyword\">char</span> fillchar)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[count];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">            buffer[i] = fillchar;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RealResult&lt;String&gt;(<span class=\"keyword\">new</span> String(buffer));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">displayString</span><span class=\"params\">(String string)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"displayString: \"</span> + string);</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">displayString: Chris 0</span><br><span class=\"line\">Alice: value = </span><br><span class=\"line\">Bobby: value = </span><br><span class=\"line\">Alice: value = A</span><br><span class=\"line\">Bobby: value = B</span><br><span class=\"line\">displayString: Chris 1</span><br><span class=\"line\">Alice: value = AA</span><br><span class=\"line\">displayString: Chris 2</span><br><span class=\"line\">Bobby: value = BB</span><br><span class=\"line\">displayString: Chris 3</span><br><span class=\"line\">Alice: value = AAA</span><br><span class=\"line\">displayString: Chris 4</span><br><span class=\"line\">Bobby: value = BBB</span><br><span class=\"line\">displayString: Chris 5</span><br><span class=\"line\">Alice: value = AAAA</span><br><span class=\"line\">displayString: Chris 6</span><br><span class=\"line\">displayString: Chris 7</span><br><span class=\"line\">Bobby: value = BBBB</span><br><span class=\"line\">displayString: Chris 8</span><br><span class=\"line\">displayString: Chris 9</span><br><span class=\"line\">Alice: value = AAAAA</span><br><span class=\"line\">displayString: Chris 10</span><br><span class=\"line\">displayString: Chris 11</span><br><span class=\"line\">Bobby: value = BBBBB</span><br><span class=\"line\">displayString: Chris 12</span><br><span class=\"line\">displayString: Chris 13</span><br><span class=\"line\">displayString: Chris 14</span><br><span class=\"line\">Alice: value = AAAAAA</span><br><span class=\"line\">displayString: Chris 15</span><br><span class=\"line\">displayString: Chris 16</span><br><span class=\"line\">Bobby: value = BBBBBB</span><br><span class=\"line\">displayString: Chris 17</span><br><span class=\"line\">displayString: Chris 18</span><br><span class=\"line\">displayString: Chris 19</span><br><span class=\"line\">displayString: Chris 20</span><br></pre></td></tr></table></figure>\n<h2 id=\"登场角色\"><a href=\"#登场角色\" class=\"headerlink\" title=\"登场角色\"></a>登场角色</h2><h3 id=\"Client（委托者）\"><a href=\"#Client（委托者）\" class=\"headerlink\" title=\"Client（委托者）\"></a>Client（委托者）</h3><p>Client角色调用ActiveObject角色的方法来委托处理，它能够调用的只有ActiveObject角色提供的方法。调用这些方法后，（如果ActivationQueue角色没有满）程序控制权会立即返回。<br>虽然Client角色只知道ActiveObject角色，但它实际调用的是Proxy角色。<br>Client角色在获取处理结果时，会调用VirtualResult角色的getResultValue方法。这里使用了Future模式。<br>在示例程序中，由MakerClientThread类和DisplayClientThread类扮演此角色。</p>\n<h3 id=\"ActiveObject（主动对象）\"><a href=\"#ActiveObject（主动对象）\" class=\"headerlink\" title=\"ActiveObject（主动对象）\"></a>ActiveObject（主动对象）</h3><p>ActiveObject角色定义了主动对象向Client角色提供的接口。<br>在示例程序中，由ActiveObject接口扮演此角色。</p>\n<h3 id=\"Proxy（代理人）\"><a href=\"#Proxy（代理人）\" class=\"headerlink\" title=\"Proxy（代理人）\"></a>Proxy（代理人）</h3><p>Proxy角色负责将方法调用转换为MethodRequest角色的对象。转换后的MethodRequest角色会被传递给Scheduler角色。<br>Proxy角色实现了ActiveObject角色提供的接口。<br>调用Proxy角色的方法的是Client角色。将方法调用转换为MethodRequest角色，并传递给Scheduler角色的操作都是使用Client角色的线程进行的。<br>在示例程序中，由Proxy类扮演此角色。</p>\n<h3 id=\"Scheduler\"><a href=\"#Scheduler\" class=\"headerlink\" title=\"Scheduler\"></a>Scheduler</h3><p>Scheduler角色负责将Proxy角色传递来的MethodRequest传递给ActivationQueue角色，以及从ActivationQueue角色取出并执行MethodRequest角色这两项工作。<br>Client角色的线程负责将MethodRequest角色传递给ActivationQueue角色。<br>而从ActivationQueue角色取出并执行MethodRequest角色这项工作则是使用Scheduler角色自己的线程进行的。在ActiveObject模式中，只有使用Client角色和Scheduler角色时才会启动新线程。<br>Scheduler角色会把MethodRequest角色放入ActivationQueue角色或者从ActivationQueue角色取出MethodRequest角色。因此，Scheduler角色可以判断下次要执行哪个请求。<br>在示例程序中，由SchedulerThread类扮演此角色。SchedulerThread并没有进行特殊的调度，而只是执行FIFO（First In First Out，先进先出）处理。</p>\n<h3 id=\"MethodRequest\"><a href=\"#MethodRequest\" class=\"headerlink\" title=\"MethodRequest\"></a>MethodRequest</h3><p>MethodRequest角色是与来自Client角色的请求对应的角色。MethodRequest定义了负责执行处理的Servant角色，以及负责设置返回值的Future角色和负责执行请求的方法（execute）。<br>MethodRequest角色为主动对象的接口赋予了对象的表象形式。<br>在示例程序中，由MethodRequest类扮演此角色。</p>\n<h3 id=\"ConcreteMethodRequest\"><a href=\"#ConcreteMethodRequest\" class=\"headerlink\" title=\"ConcreteMethodRequest\"></a>ConcreteMethodRequest</h3><p>ConcreteMethodRequest角色是使MethodRequest角色与具体的方法相对应的角色。对于ActiveObject角色中定义的每个方法，会有各个类与之对应，比如MethodAlphaRequest、MethodBetaRequest…。<br>各个ConcreteMethodRequest角色中的字段分别与方法的参数相对应。<br>在示例程序中，由MakeStringRequest类和DisplayStringRequest类扮演此角色。其中，MakeStringRequest类对应makeString方法（生成字符串），DisplayStringRequest类对应displayString方法（显示字符串）。</p>\n<h3 id=\"Servant（仆人）\"><a href=\"#Servant（仆人）\" class=\"headerlink\" title=\"Servant（仆人）\"></a>Servant（仆人）</h3><p>Servant角色负责实际地处理请求。<br>调用Servant角色的是Scheduler角色的线程。Scheduler角色会从ActivationQueue角色取出一个MethodRequest角色（实际上是ConcreteMethodRequest角色）并执行它。此时，Scheduler角色调用的就是Servant角色的方法。<br>Servant角色实现了ActiveObject角色定义的接口。<br>Proxy角色会将请求转换为MethodRequest角色，而Servant角色则会实际地执行该请求。Scheduler角色介于Proxy角色和Servant角色之间，负责管理按照什么顺序执行请求。<br>在示例程序中，由Servant类扮演此角色。</p>\n<h3 id=\"ActivationQueue（主动队列）\"><a href=\"#ActivationQueue（主动队列）\" class=\"headerlink\" title=\"ActivationQueue（主动队列）\"></a>ActivationQueue（主动队列）</h3><p>ActivationQueue角色是保存MethodRequest角色的类。<br>调用putRequest方法的是Client角色的线程，而调用takeRequest方法的是Scheduler角色的线程。这里使用了Producer-Consumer模式。<br>在示例程序中，由ActivationQueue类扮演此角色。</p>\n<h3 id=\"VirtualResult（虚拟结果）\"><a href=\"#VirtualResult（虚拟结果）\" class=\"headerlink\" title=\"VirtualResult（虚拟结果）\"></a>VirtualResult（虚拟结果）</h3><p>VirtualResult角色与Future角色、RealResult角色共同构成了Future模式。<br>Client角色在获取处理结果时会调用VirtualResult角色（实际上是Future角色）的getResultValue方法。<br>在示例程序中，由Result类扮演此角色。</p>\n<h3 id=\"Future（期货）\"><a href=\"#Future（期货）\" class=\"headerlink\" title=\"Future（期货）\"></a>Future（期货）</h3><p>Future角色是Client角色在获取处理结果时实际调用的角色。当处理结果还没有出来的时候，它会使用Guarded Suspension模式让Client角色的线程等待结果出来。<br>在示例程序中，由FutureResult类扮演此角色。</p>\n<h3 id=\"RealResult（真实结果）\"><a href=\"#RealResult（真实结果）\" class=\"headerlink\" title=\"RealResult（真实结果）\"></a>RealResult（真实结果）</h3><p>RealResult角色是表示处理结果的角色。Servant角色会创建一个RealResult角色作为处理结果，然后调用Future角色的setRealResult方法将其设置到Future角色中。<br>在示例程序中，由RealResult类扮演此角色。</p>\n<h3 id=\"类图-1\"><a href=\"#类图-1\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"https://s2.ax1x.com/2019/02/16/kslR6f.png\" alt=\"kslR6f.png\"></p>\n<h3 id=\"时序图-1\"><a href=\"#时序图-1\" class=\"headerlink\" title=\"时序图\"></a>时序图</h3><p><img src=\"https://s2.ax1x.com/2019/02/16/ksl7hn.png\" alt=\"ksl7hn.png\"></p>\n<h3 id=\"Timethreads图\"><a href=\"#Timethreads图\" class=\"headerlink\" title=\"Timethreads图\"></a>Timethreads图</h3><p><img src=\"https://s2.ax1x.com/2019/02/16/kslvBF.png\" alt=\"kslvBF.png\"></p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"【图解Java多线程设计模式】Thread-Specific Storage模式","url":"http://yoursite.com/2019/02/13/【图解Java多线程设计模式】Thread-Specific-Storage模式/","content":"<p>即使只有一个入口，也会在内部为每个线程分配特有的存储空间。<br>在Java标准类库中，java.lang.ThreadLocal类实现了该模式。</p>\n<h2 id=\"关于java-lang-ThreadLocal类\"><a href=\"#关于java-lang-ThreadLocal类\" class=\"headerlink\" title=\"关于java.lang.ThreadLocal类\"></a>关于java.lang.ThreadLocal类</h2><h3 id=\"ThreadLocal的实例会管理多个对象\"><a href=\"#ThreadLocal的实例会管理多个对象\" class=\"headerlink\" title=\"ThreadLocal的实例会管理多个对象\"></a>ThreadLocal的实例会管理多个对象</h3><p>由于一个ThreadLocal的实例可以管理多个对象，所以ThreadLocal定义了可以“存储”（set）和“获取”（get）对象的方法。</p>\n<p><em>set方法</em></p>\n<p>ThreadLocal类的set方法用于将通过参数接收的实例与调用该方法的线程（当前线程）对应并存储起来。这里存储的对象可以通过get方法获取。set方法中没有表示线程的参数。set方法会先查询当前线程（即表达式Thread.currentThread()的值），然后以它作为键来存储实例。</p>\n<p><em>get方法</em></p>\n<p>ThreadLocal类的get方法用于获取与调用get方法的线程（当前线程）对应的实例。该线程之前通过set方法存储的实例就是get方法的返回值。如果之前一次都还没有调用过set方法，则get方法的返回值为null。</p>\n<p>与set方法一样，get方法中也没有表示线程的参数。这是因为，get方法也会去查询当前线程。即get方法会以当前线程自身作为健去获取对象。</p>\n<h3 id=\"java-lang-ThreadLocal与泛型\"><a href=\"#java-lang-ThreadLocal与泛型\" class=\"headerlink\" title=\"java.lang.ThreadLocal与泛型\"></a>java.lang.ThreadLocal与泛型</h3><p>java.lang.ThreadLocal是一个泛型类，可以通过参数的类型来指定要存储的对象的类型。ThreadLocal类的声明大致如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadLocal</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>即，通过ThreadLocal<t>的T指定的类型就是set方法的参数的类型以及get方法的返回值的类型。</t></p>\n<h2 id=\"示例1：不使用Thread-Specific-Storage模式\"><a href=\"#示例1：不使用Thread-Specific-Storage模式\" class=\"headerlink\" title=\"示例1：不使用Thread-Specific Storage模式\"></a>示例1：不使用Thread-Specific Storage模式</h2><p>使用Log类的静态方法将日志记录在文件中。</p>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"https://s2.ax1x.com/2019/02/13/k0hTkd.png\" alt=\"k0hTkd.png\"></p>\n<h3 id=\"Log-java\"><a href=\"#Log-java\" class=\"headerlink\" title=\"Log.java\"></a>Log.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Log</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> PrintWriter writer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            writer = <span class=\"keyword\">new</span> PrintWriter(<span class=\"keyword\">new</span> FileWriter(<span class=\"string\">\"log.txt\"</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        writer.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        writer.println(<span class=\"string\">\"==== End of log ====\"</span>);</span><br><span class=\"line\">        writer.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Main-java\"><a href=\"#Main-java\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"BEGIN\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            Log.println(<span class=\"string\">\"main: i = \"</span> + i);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.close();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"END\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BEGIN</span><br><span class=\"line\">END</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># log.txt</span></span><br><span class=\"line\">main: i = 0</span><br><span class=\"line\">main: i = 1</span><br><span class=\"line\">main: i = 2</span><br><span class=\"line\">main: i = 3</span><br><span class=\"line\">main: i = 4</span><br><span class=\"line\">main: i = 5</span><br><span class=\"line\">main: i = 6</span><br><span class=\"line\">main: i = 7</span><br><span class=\"line\">main: i = 8</span><br><span class=\"line\">main: i = 9</span><br><span class=\"line\">==== End of <span class=\"built_in\">log</span> ====</span><br></pre></td></tr></table></figure>\n<h3 id=\"Timethreads图\"><a href=\"#Timethreads图\" class=\"headerlink\" title=\"Timethreads图\"></a>Timethreads图</h3><p><img src=\"https://s2.ax1x.com/2019/02/13/k046Hg.png\" alt=\"k046Hg.png\"></p>\n<h2 id=\"示例2：使用了Thread-Specific-Storage模式\"><a href=\"#示例2：使用了Thread-Specific-Storage模式\" class=\"headerlink\" title=\"示例2：使用了Thread-Specific Storage模式\"></a>示例2：使用了Thread-Specific Storage模式</h2><p>制作一种程序结构，在其中编写一个继承了Thread的类，但是并不在它的字段中保存PrintWriter的实例，而只是机械地在方法中调用Log.println。仅仅这样就可以实现自动地将字符串分配到各个线程的日志文件中。</p>\n<h3 id=\"类图-1\"><a href=\"#类图-1\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"https://s2.ax1x.com/2019/02/13/k04R4s.png\" alt=\"k04R4s.png\"></p>\n<h3 id=\"TSLog-java\"><a href=\"#TSLog-java\" class=\"headerlink\" title=\"TSLog.java\"></a>TSLog.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TSLog</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PrintWriter writer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TSLog</span><span class=\"params\">(String filename)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            writer = <span class=\"keyword\">new</span> PrintWriter(<span class=\"keyword\">new</span> FileWriter(filename));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        writer.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        writer.println(<span class=\"string\">\"==== End of log ====\"</span>);</span><br><span class=\"line\">        writer.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Log-java-1\"><a href=\"#Log-java-1\" class=\"headerlink\" title=\"Log.java\"></a>Log.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Log</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;TSLog&gt; tsLogCollection = <span class=\"keyword\">new</span> ThreadLocal&lt;TSLog&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        getTSLog().println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        getTSLog().close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> TSLog <span class=\"title\">getTSLog</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        TSLog tsLog = tsLogCollection.get();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tsLog == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            tsLog = <span class=\"keyword\">new</span> TSLog(Thread.currentThread().getName() + <span class=\"string\">\"-log.txt\"</span>);</span><br><span class=\"line\">            tsLogCollection.set(tsLog);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> tsLog;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ClientThread-java\"><a href=\"#ClientThread-java\" class=\"headerlink\" title=\"ClientThread.java\"></a>ClientThread.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClientThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClientThread</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(getName() + <span class=\"string\">\" BEGIN\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            Log.println(<span class=\"string\">\"i = \"</span> + i);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.close();</span><br><span class=\"line\">        System.out.println(getName() + <span class=\"string\">\" END\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Main-java-1\"><a href=\"#Main-java-1\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ClientThread(<span class=\"string\">\"Alice\"</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ClientThread(<span class=\"string\">\"Bobby\"</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ClientThread(<span class=\"string\">\"Chris\"</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行结果-1\"><a href=\"#运行结果-1\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bobby BEGIN</span><br><span class=\"line\">Chris BEGIN</span><br><span class=\"line\">Alice BEGIN</span><br><span class=\"line\">Bobby END</span><br><span class=\"line\">Chris END</span><br><span class=\"line\">Alice END</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Alice-log.txt、Bobby-log.txt、Chris-log.txt</span></span><br><span class=\"line\">i = 0</span><br><span class=\"line\">i = 1</span><br><span class=\"line\">i = 2</span><br><span class=\"line\">i = 3</span><br><span class=\"line\">i = 4</span><br><span class=\"line\">i = 5</span><br><span class=\"line\">i = 6</span><br><span class=\"line\">i = 7</span><br><span class=\"line\">i = 8</span><br><span class=\"line\">i = 9</span><br><span class=\"line\">==== End of <span class=\"built_in\">log</span> ====</span><br></pre></td></tr></table></figure>\n<h3 id=\"Timethreads图-1\"><a href=\"#Timethreads图-1\" class=\"headerlink\" title=\"Timethreads图\"></a>Timethreads图</h3><p><img src=\"https://s2.ax1x.com/2019/02/13/k0qOcd.png\" alt=\"k0qOcd.png\"></p>\n<h2 id=\"登场角色\"><a href=\"#登场角色\" class=\"headerlink\" title=\"登场角色\"></a>登场角色</h2><h3 id=\"Client（委托者）\"><a href=\"#Client（委托者）\" class=\"headerlink\" title=\"Client（委托者）\"></a>Client（委托者）</h3><p>Client角色将处理委托给TSObjectProxy角色。一个TSObjectProxy角色会被多个Client角色使用。<br>在示例程序中，由ClientThread类扮演此角色。</p>\n<h3 id=\"TSObjectProxy（线程特有的对象的代理人）\"><a href=\"#TSObjectProxy（线程特有的对象的代理人）\" class=\"headerlink\" title=\"TSObjectProxy（线程特有的对象的代理人）\"></a>TSObjectProxy（线程特有的对象的代理人）</h3><p>TSObjectProxy角色会执行多个Client角色委托给它的处理。<br>首先，TSObjectProxy角色使用TSObjectCollection角色获取与Client角色对应的TSObject角色。接着，它将处理委托给TSObject角色。<br>在示例程序中，由Log类扮演此角色。</p>\n<h3 id=\"TSObjectCollection（线程特有的对象的集合）\"><a href=\"#TSObjectCollection（线程特有的对象的集合）\" class=\"headerlink\" title=\"TSObjectCollection（线程特有的对象的集合）\"></a>TSObjectCollection（线程特有的对象的集合）</h3><p>TSObjectCollection角色有一张Client角色与TSObject角色之间的对应表。<br>当getTSObject方法被调用后，它会去查看对应表，返回与Client角色相对应的TSObject角色。另外，当setTSObject方法被调用后，它会将Client角色与TSObject角色之间的键值对应关系设置到对应表中。<br>在示例程序中，由java.lang.ThreadLocal类扮演此角色。</p>\n<h3 id=\"TSObject（线程特有的对象）\"><a href=\"#TSObject（线程特有的对象）\" class=\"headerlink\" title=\"TSObject（线程特有的对象）\"></a>TSObject（线程特有的对象）</h3><p>TSObject角色中保存着线程特有的信息。<br>TSObject角色由TSObjectCollection角色管理。TSObject角色的方法只会被单线程调用。<br>在示例程序中，由TSLog类扮演此角色。</p>\n<h3 id=\"类图-2\"><a href=\"#类图-2\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"https://s2.ax1x.com/2019/02/13/kBSlon.png\" alt=\"kBSlon.png\"></p>\n<h3 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h3><p>新创建TSObject角色</p>\n<p><img src=\"https://s2.ax1x.com/2019/02/13/kBStQU.png\" alt=\"kBStQU.png\"></p>\n<p>多个Client角色访问各自的TSObject角色</p>\n<p><img src=\"https://s2.ax1x.com/2019/02/13/kBS3iq.png\" alt=\"kBS3iq.png\"></p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"Double-Checked Locking模式的危险性","url":"http://yoursite.com/2019/02/13/Double-Checked-Locking模式的危险性/","content":"<p>Double-Checked Locking模式原本是用于改善Single Threaded Execution模式的性能的方法之一。不过在Java中使用Double-Checked Locking模式是很危险的。</p>\n<h2 id=\"Single-Threaded-Execution模式\"><a href=\"#Single-Threaded-Execution模式\" class=\"headerlink\" title=\"Single Threaded Execution模式\"></a>Single Threaded Execution模式</h2><p>getInstance是synchronized的，因此性能并不好。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySystem</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> MySystem instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date date = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">MySystem</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> MySystem <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> MySystem();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Date <span class=\"title\">getDate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> date;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Double-Checked-Locking模式\"><a href=\"#Double-Checked-Locking模式\" class=\"headerlink\" title=\"Double-Checked Locking模式\"></a>Double-Checked Locking模式</h2><p>getInstance方法不再是synchronized方法。取而代之的是if语句中编写的一段synchronized代码块。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySystem</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> MySystem instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date date = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">MySystem</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> MySystem <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;                 <span class=\"comment\">//(a)</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (MySystem.class) &#123;     <span class=\"comment\">//(b)</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;         <span class=\"comment\">//(c)</span></span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> MySystem();  <span class=\"comment\">//(d)</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;                                   <span class=\"comment\">//(e)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;                        <span class=\"comment\">//(f)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Date <span class=\"title\">getDate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> date;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不能正确地运行的一个原因是，当调用getInstance的返回值的getDate方法时，date字段可能还没有被初始化。</p>\n<p><img src=\"https://s2.ax1x.com/2019/02/12/kwXAbt.png\" alt=\"kwXAbt.png\"></p>\n<p>这里创建了一个MySystem的实例。在创建MySystem的实例时，new Date()的值会被赋给实例字段date。如果线程A从synchronized代码块退出后，线程B才进入synchronized代码块，那么线程B也可以看见date的值。但是在(A-4)这个阶段，无法确保线程B可以看见A写入的date字段的值。</p>\n<p>接下来，再假设线程B在(B-1)这个阶段的判断结果是instance != null。这样的话，线程B将不进入synchronized代码块，而是立即将instance的值作为返回值return出来。这之后，线程B会在(B-3)这个阶段调用getInstance的返回值的getDate方法。getDate方法的返回值就是date字段的值，因此线程B会引用date字段的值。但是，线程A还没有从synchronized代码块中退出，线程B也没有进入synchronized代码块。因此，无法确保date字段的值对线程B可见。</p>\n<h3 id=\"为什么能够看到instance字段\"><a href=\"#为什么能够看到instance字段\" class=\"headerlink\" title=\"为什么能够看到instance字段\"></a>为什么能够看到instance字段</h3><p>由于重排序的存在，的确可能会在看到date字段的值之前先看到instance字段的值。</p>\n<h3 id=\"使用volatile会怎样\"><a href=\"#使用volatile会怎样\" class=\"headerlink\" title=\"使用volatile会怎样\"></a>使用volatile会怎样</h3><p>将instance字段设置为volatile字段后，Double-Checked Locking模式就可以正常工作了。但是，volatile字段的读写性能开销与synchronized几乎相同。本来Double-Checked Locking模式就是用于避免synchronized引起的性能下降的，如果使用了volatile就无法改善性能了。</p>\n<h2 id=\"Initialization-On-Demand-Holder模式\"><a href=\"#Initialization-On-Demand-Holder模式\" class=\"headerlink\" title=\"Initialization On Demand Holder模式\"></a>Initialization On Demand Holder模式</h2><p>Initialization On Demand Holder模式既不会像Single Threaded Execution模式那样降低性能，也不会带来像Double-Checked Locking模式那样的危险性。</p>\n<p>这段程序会使用Holder的“类的初始化”来创建唯一的实例，并确保线程安全。这是因为在Java规范中，类的初始化是线程安全的。</p>\n<p>在代码中，并没有使用synchronized和volatile来进行同步，因此性能不会下降。</p>\n<p>而且，还使用了嵌套类的延迟初始化。Holder类的初始化在线程刚刚要使用该类时才会开始进行。也就是说，在调用MySystem.getInstance方法前，Holder类不会被初始化，甚至连MySystem的实例都不会创建。因此，使用Initialization On Demand Holder模式可以避免内存浪费。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySystem</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Holder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MySystem instance = <span class=\"keyword\">new</span> MySystem();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date date = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">MySystem</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> MySystem <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Holder.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Date <span class=\"title\">getDate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> date;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"final","url":"http://yoursite.com/2019/02/12/final/","content":"<h2 id=\"final字段与构建线程安全的实例\"><a href=\"#final字段与构建线程安全的实例\" class=\"headerlink\" title=\"final字段与构建线程安全的实例\"></a>final字段与构建线程安全的实例</h2><p>使用final关键字声明的字段只能被初始化一次。final字段在创建不允许被改变的对象时起到了非常重要的作用。</p>\n<p>final字段的初始化只能在“字段声明时”或是“构造函数中”进行。那么，当final字段的初始化结束后，无论在任何时候，它的值对其他线程都是可见的。Java内存模型可以确保被初始化后的final字段在构造函数的处理结束后是可见的。也就是说，可以确保以下事情：</p>\n<ul>\n<li>如果构造函数的处理结束了</li>\n</ul>\n<p><em>final字段初始化后的值对所有线程都是可见的</em><br><em>在final字段可以追溯到的所有范围内都可以看到正确的值</em></p>\n<ul>\n<li>在构造函数的处理结束前</li>\n</ul>\n<p><em>可能会看到final字段的值是默认的初始值（0、false或是null）</em></p>\n<p>java.util.concurrent.ConcurrentHashMap类使用final和volatile特性实现了无阻塞的Map。</p>\n<h2 id=\"将常量字段设置为final\"><a href=\"#将常量字段设置为final\" class=\"headerlink\" title=\"将常量字段设置为final\"></a>将常量字段设置为final</h2><p>Java内存模型可以确保final字段在构造函数执行结束后可以正确地被看到。这样就不再需要通过synchronized和volatile进行同步了。因此，将不希望被改变的字段设为final。</p>\n<h2 id=\"不要从构造函数中泄露this\"><a href=\"#不要从构造函数中泄露this\" class=\"headerlink\" title=\"不要从构造函数中泄露this\"></a>不要从构造函数中泄露this</h2><p>在构造函数执行结束前，可能会看到final字段的值发生变化。也就是说，存在首先看到“默认初始值”，然后看到“显示地初始化的值”的可能性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可能会显示出0</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> Something();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Something.print();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Something</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Something last = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Something</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        x = <span class=\"number\">123</span>;</span><br><span class=\"line\">        last = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (last != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            System.out.println(last.x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据Java内存模型，这时看到的last.x的值可能会是0。因为线程B在print方法中看到的last的值，是在构造函数处理结束前获取的this。</p>\n<p>Java内存模型可以确保构造函数处理结束时final字段的值被正确地初始化，对其他线程是可见的。总而言之，如果使用通过new Something()获取的实例，final字段是不会发生可见性问题的。但是，如果在构造函数的处理过程中this还没有创建完毕，就无法确保final字段的正确的值对其他线程是可见的。</p>\n<p>代码修改后，就不可能会显示出0了。这里进行的具体修改如下：</p>\n<ul>\n<li>将构造函数修改为private，让外部无法调用</li>\n<li>编写一个名为create的静态方法，在其中使用new关键字创建实例</li>\n<li>将静态字段last赋值为上面使用new关键字创建的实例</li>\n</ul>\n<p>这样修改后，只有当构造函数处理结束后静态字段last才会被赋值，因此可以确保final字段被正确地初始化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不会显示出0</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Something.create();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Something.print();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Something</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Something last = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Something</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        x = <span class=\"number\">123</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Something <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        last = <span class=\"keyword\">new</span> Something();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> last;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (last != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            System.out.println(last.x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在构造函数中将静态字段赋值为this是非常危险的。因为其他线程可能会通过这个静态字段访问正在创建中的实例。同样地，向静态字段中保存的数组和集合中保存this也是非常危险的。</p>\n<p>另外，在构造函数中进行方法调用时，以this为参数的方法调用也是非常危险的。因为该方法可能会将this放在其他线程可以访问到的地方。</p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"volatile","url":"http://yoursite.com/2019/02/12/volatile/","content":"<p>volatile具有“同步处理”和“对long和double的原子操作”这两种功能。</p>\n<h2 id=\"同步处理\"><a href=\"#同步处理\" class=\"headerlink\" title=\"同步处理\"></a>同步处理</h2><p>某个线程对volatile字段进行的写操作的结果对其他线程立即可见。换言之，对volatile字段的写入处理并不会被缓存起来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不可能出现无限while循环</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Runner runner = <span class=\"keyword\">new</span> Runner();</span><br><span class=\"line\">        runner.start();</span><br><span class=\"line\">        runner.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Runner</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> quit = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!quit) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Done\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        quit = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>volatile字段并非只是不缓存读取和写入。如果线程A向volatile字段写入的值对线程B可见，那么之前向其他字段写入的所有值都对线程B可见。此外，在向volatile字段读取和写入前后不会发生重排序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Something obj = <span class=\"keyword\">new</span> Something();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                obj.write();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                obj.read();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Something</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> valid = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        x = <span class=\"number\">123</span>;</span><br><span class=\"line\">        valid = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (valid) &#123;</span><br><span class=\"line\">            System.out.println(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从volatile的使用目的来看，volatile阻止重排序是理所当然的。如代码所示，volatile字段多被用作判断实例是否变为了特定状态的标志。因此，当要确认volatile字段的值是否发生了变化时，必须先确保非volatile的其他字段的值已经被更新了。</p>\n<p><img src=\"https://s2.ax1x.com/2019/02/12/kdET5d.png\" alt=\"kdET5d.png\"></p>\n<p>在进行如下处理时，线程A向x以及valid写入的值对线程B是可见的。</p>\n<ul>\n<li>线程A向字段x写值（normal write）</li>\n<li>线程A向volatile字段valid写值（volatile write）</li>\n<li>线程B读取volatile字段valid的值（volatile read）</li>\n<li>线程B读取字段x的值（normal read）</li>\n</ul>\n<h3 id=\"volatile不会进行线程的互斥处理\"><a href=\"#volatile不会进行线程的互斥处理\" class=\"headerlink\" title=\"volatile不会进行线程的互斥处理\"></a>volatile不会进行线程的互斥处理</h3><p>关于重排序和可见性这两点，volatile的作用与synchronized的作用非常相似。但是，volatile不进行线程的互斥处理。也就是说，访问volatile字段的线程不会进入等待队列。</p>\n<h3 id=\"访问volatile字段会产生性能开销\"><a href=\"#访问volatile字段会产生性能开销\" class=\"headerlink\" title=\"访问volatile字段会产生性能开销\"></a>访问volatile字段会产生性能开销</h3><p>“向volatile字段写入的值如果对线程B可见，那么之前写入的所有值就都是可见的”是新增加的内容之一。由于增加了这项内容，向volatile字段读取和写入数据的性能开销就增大了很多。实际上，可以认为访问volatile字段与synchronized的处理耗费的时间几乎相同。</p>\n<h2 id=\"对long和double的原子操作\"><a href=\"#对long和double的原子操作\" class=\"headerlink\" title=\"对long和double的原子操作\"></a>对long和double的原子操作</h2><p>Java规范无法确保对long和double的赋值操作的原子性。但是，即使是long和double的字段，只要它是volatile字段，就可以确保赋值操作的原子性。</p>\n<h3 id=\"java-util-concurrent-atomic包\"><a href=\"#java-util-concurrent-atomic包\" class=\"headerlink\" title=\"java.util.concurrent.atomic包\"></a>java.util.concurrent.atomic包</h3><p>在java.util.concurrent.atomic包中有AtomicInteger和AtomicLong等用于进行原子操作的类。这些类可以确保值的比较和加减等操作的原子性。可以认为java.util.concurrent.atomic包是volatile字段的一种通用化形式。</p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"synchronized","url":"http://yoursite.com/2019/02/12/synchronized/","content":"<p>synchronized具有“线程的互斥处理”和“同步处理”两种功能。</p>\n<h2 id=\"线程的互斥处理\"><a href=\"#线程的互斥处理\" class=\"headerlink\" title=\"线程的互斥处理\"></a>线程的互斥处理</h2><p>如果程序中有synchronized关键字，线程就会进行lock/unlock操作。线程会在synchronized开始时获取锁（lock），在synchronized终止时释放锁（unlock）。</p>\n<p>进行lock/unlock的部分并不仅仅是程序中写有synchronized的部分。当线程在wait方法内部等待的时候也会释放锁。此外，当线程从wait方法中出来的时候还必须先重新获取锁后才能继续运行。</p>\n<p>只有一个线程能够获取某个实例的锁。因此，当线程A正准备获取锁时，如果其他线程已经获取了锁，那么线程A就会进入等待队列（或入口队列）。这样就实现了线程的互斥（mutal exclusion）。</p>\n<p>synchronized的互斥处理如下图所示。这幅图展示了当线程A执行了unlock操作但是还没有从中出来时，线程B就无法执行lock操作的情形。图中的unlock M和lock M中都写了一个M，这表示unlock操作和lock操作是对同一个实例的监视器进行的操作。</p>\n<p><img src=\"https://s2.ax1x.com/2019/02/11/kdFXKU.png\" alt=\"kdFXKU.png\"></p>\n<h2 id=\"同步处理\"><a href=\"#同步处理\" class=\"headerlink\" title=\"同步处理\"></a>同步处理</h2><p>synchronized（lock/unlock操作）并不仅仅进行线程的互斥处理。Java内存模型确保了某个线程在进行unlock M操作前进行的所有写入操作对进行lock M操作的线程都是可见的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不可能显示出x&lt;y</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Something obj = <span class=\"keyword\">new</span> Something();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                obj.write();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                obj.read();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Something</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> y = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        x = <span class=\"number\">100</span>;</span><br><span class=\"line\">        y = <span class=\"number\">50</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; y) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"x &lt; y\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://s2.ax1x.com/2019/02/11/kdAy1P.png\" alt=\"kdAy1P.png\"></p>\n<p>在进行如下处理时，线程A的写操作对线程B是可见的：</p>\n<ul>\n<li>线程A对字段x和y写值（normal write操作）</li>\n<li>线程A进行unlock操作</li>\n<li>线程B对同一个监视器M进行lock操作</li>\n<li>线程B读取字段x和y的值（normal read）</li>\n</ul>\n<p>大体来说就是，</p>\n<ul>\n<li>进行unlock操作后，写入缓存中的内容会被强制地写入共享内存中</li>\n<li>进行lock操作后，缓存中的内容会先失效，然后共享内存中的最新内容会被强制重新读取到缓存中</li>\n</ul>\n<p>代码不可能显示出x&lt;y的原因有以下两个：</p>\n<p>(1) 互斥处理可以防止read方法中断write方法的处理。虽然在write方法内部会发生重排序，但是该重排序不会对read方法产生任何影响。<br>(2) 同步处理可以确保write方法向字段x、y写入的值对运行read方法的线程B是可见的。</p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"可见性","url":"http://yoursite.com/2019/02/12/可见性/","content":"<p>假设线程A将某个值写入到了字段x中，而线程B读取到了该值。称其为“线程A向x的写值对线程B是可见的”。“是否是可见的”这个性质就称为可见性。<br>在单线程程序中，无需在意可见性。这是因为，线程总是可以看见自己写入到字段中的值。<br>但是，在多线程程序中必须注意可见性。这是因为，如果没有使用synchronized或volatile正确地进行同步，线程A写入到字段中的值可能并不会立即对线程B可见。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>Java内存模型可能会导致Runner线程永远在while循环中不停地循环。也就是说，代码中的程序可能会失去生存性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Runner runner = <span class=\"keyword\">new</span> Runner();</span><br><span class=\"line\">        runner.start();</span><br><span class=\"line\">        runner.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Runner</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> quit = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!quit) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Done\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        quit = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>原因是，向字段quit写值的线程（主线程）与读取字段quit的线程（Runner）是不同的线程。主线程向quit写入的true这个值可能对Runner线程永远不可见。<br>如果以“缓存”的思路来理解不可见的原因可能会有助于理解。主线程向quit写入的这个true值可能只是被保存在主线程的缓存中。而Runner线程从quit读取到的值，仍然是在Runner线程的缓存中保存着的值false，并没有任何变化。</p>\n<p>代码是未正确同步的程序。不过如果将quit声明为volatile字段，就可以实现正确同步的程序。</p>\n<h2 id=\"共享内存与操作\"><a href=\"#共享内存与操作\" class=\"headerlink\" title=\"共享内存与操作\"></a>共享内存与操作</h2><p>在Java内存模型中，线程A写入的值并不一定会立即对线程B可见。下图展示了线程A和线程B通过字段进行数据交互的情形。</p>\n<p><img src=\"https://s2.ax1x.com/2019/02/11/kdiawj.png\" alt=\"kdiawj.png\"></p>\n<p>共享内存（shared memory）是所有线程共享的存储空间，也被称为堆内存（heap memory）。因为实例会被全部保存在共享内存中，所以实例中的字段也存在于共享内存中。此外，数组的元素也被保存在共享内存中。也就是说，可以使用new在共享内存中分配存储空间。</p>\n<p>局部变量不会被保存在共享内存中。通常，除局部变量外，方法的形参、catch语句块中编写的异常处理器的参数等也不会被保存在共享内存中，而是被保存在各个线程持有的栈中。正是由于它们没有被保存在共享内存中，所以其他线程不会访问它们。</p>\n<p>在Java内存模型中，只有可以被多个线程访问的共享内存才会发生问题。</p>\n<p>上图一共展示了以下6种操作：</p>\n<p>(1) normal read操作<br>(2) normal write操作<br>(3) volatile read操作<br>(4) volatile write操作<br>(5) lock操作<br>(6) unlock操作</p>\n<p>这里，(3)～(6)的操作是进行同步的同步操作。进行同步的操作具有防止重排序，控制可见性的效果。</p>\n<p>normal read/normal write操作表示的是对普通字段（volatile以外的字段）的读写。这些操作是通过缓存来执行的。因此，通过normal read读取到的值并不一定是最新的值，通过normal write写入的值也不一定会立即对其他线程可见。</p>\n<p>volatile read/volatile write操作表示的是对volatile字段的读写。由于这些操作并不是涌过缓存来执行的，所以通过volatile read读取到的值一定是最新的值，通过volatile write写入的值也会立即对其他线程可见。</p>\n<p>lock/unlock操作是当程序中使用了synchronized关键字时进行互斥处理的操作，lock操作可以获取实例的锁，unlock操作可以释放实例的锁。</p>\n<p>之所以在normal read/normal write操作中使用缓存，是为了提高性能。</p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"重排序","url":"http://yoursite.com/2019/02/12/重排序/","content":"<p>所谓重排序，是指编译器和Java虚拟机通过改变程序的处理顺序来优化程序。实际上，在运行单线程程序时无法判断是否进行了重排序。这是因为，虽然处理顺序改变了，但是规范上有很多限制可以避免程序出现运行错误。<br>但是，在多线程程序中，有时就会发生明显是由重排序导致的运行错误。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>在Java内存模型中，是有可能显示出x&lt;y的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Something obj = <span class=\"keyword\">new</span> Something();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                obj.write();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                obj.read();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Something</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> y = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        x = <span class=\"number\">100</span>;</span><br><span class=\"line\">        y = <span class=\"number\">50</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; y) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"x &lt; y\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>原因就在于重排序。<br>在write方法中，由于对x的赋值和对y的赋值之间不存在任何依赖关系，编译器可能会改变赋值顺序。而且，在线程A已经为y赋值，但是尚未为x赋值之前，线程B也可能会去查询x和y的值并执行if语句进行判断。这时，x&lt;y的关系成立。</p>\n<p><img src=\"https://s2.ax1x.com/2019/02/11/kdPFxS.png\" alt=\"kdPFxS.png\"></p>\n<p>虽然代码是未正确同步的程序，但是如果将write和read都声明为synchronized方法，就可以实现正确同步的程序。</p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"java.util.concurrent包与线程同步","url":"http://yoursite.com/2019/02/03/java-util-concurrent包与线程同步/","content":"<h2 id=\"java-util-concurrent-CountDownLatch类\"><a href=\"#java-util-concurrent-CountDownLatch类\" class=\"headerlink\" title=\"java.util.concurrent.CountDownLatch类\"></a>java.util.concurrent.CountDownLatch类</h2><p>当想让某个线程等待指定的线程终止时，可以使用java.lang.Thread类的join方法。但是，由于join方法可以等待的只是“线程终止”这个一次性的操作，所以无法使用它实现“等待指定次数的某种操作发生”。<br>使用java.util.concurrent.CountDownLatch类可以实现“等待指定次数的CountDown方法被调用”这一功能。</p>\n<h3 id=\"Main-java\"><a href=\"#Main-java\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TASKS = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"BEGIN\"</span>);</span><br><span class=\"line\">        ExecutorService service = Executors.newFixedThreadPool(<span class=\"number\">5</span>);</span><br><span class=\"line\">        CountDownLatch doneLatch = <span class=\"keyword\">new</span> CountDownLatch(TASKS);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t = <span class=\"number\">0</span>; t &lt; TASKS; t++) &#123;</span><br><span class=\"line\">                service.execute(<span class=\"keyword\">new</span> MyTask(doneLatch, t));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"AWAIT\"</span>);</span><br><span class=\"line\">            doneLatch.await();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            service.shutdown();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"END\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyTask-java\"><a href=\"#MyTask-java\" class=\"headerlink\" title=\"MyTask.java\"></a>MyTask.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTask</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> CountDownLatch doneLatch;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> context;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Random random = <span class=\"keyword\">new</span> Random(<span class=\"number\">314159</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyTask</span><span class=\"params\">(CountDownLatch doneLatch, <span class=\"keyword\">int</span> context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.doneLatch = doneLatch;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        doTask();</span><br><span class=\"line\">        doneLatch.countDown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doTask</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String name = Thread.currentThread().getName();</span><br><span class=\"line\">        System.out.println(name + <span class=\"string\">\":MyTask:BEGIN:context = \"</span> + context);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(random.nextInt(<span class=\"number\">3000</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(name + <span class=\"string\">\":MyTask:END:context = \"</span> + context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BEGIN</span><br><span class=\"line\">pool-1-thread-2:MyTask:BEGIN:context = 1</span><br><span class=\"line\">pool-1-thread-1:MyTask:BEGIN:context = 0</span><br><span class=\"line\">pool-1-thread-3:MyTask:BEGIN:context = 2</span><br><span class=\"line\">pool-1-thread-4:MyTask:BEGIN:context = 3</span><br><span class=\"line\">AWAIT</span><br><span class=\"line\">pool-1-thread-5:MyTask:BEGIN:context = 4</span><br><span class=\"line\">pool-1-thread-4:MyTask:END:context = 3</span><br><span class=\"line\">pool-1-thread-4:MyTask:BEGIN:context = 5</span><br><span class=\"line\">pool-1-thread-1:MyTask:END:context = 0</span><br><span class=\"line\">pool-1-thread-1:MyTask:BEGIN:context = 6</span><br><span class=\"line\">pool-1-thread-1:MyTask:END:context = 6</span><br><span class=\"line\">pool-1-thread-1:MyTask:BEGIN:context = 7</span><br><span class=\"line\">pool-1-thread-4:MyTask:END:context = 5</span><br><span class=\"line\">pool-1-thread-4:MyTask:BEGIN:context = 8</span><br><span class=\"line\">pool-1-thread-2:MyTask:END:context = 1</span><br><span class=\"line\">pool-1-thread-2:MyTask:BEGIN:context = 9</span><br><span class=\"line\">pool-1-thread-1:MyTask:END:context = 7</span><br><span class=\"line\">pool-1-thread-5:MyTask:END:context = 4</span><br><span class=\"line\">pool-1-thread-3:MyTask:END:context = 2</span><br><span class=\"line\">pool-1-thread-4:MyTask:END:context = 8</span><br><span class=\"line\">pool-1-thread-2:MyTask:END:context = 9</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<h3 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h3><p><img src=\"https://s2.ax1x.com/2019/02/02/k8OsKg.png\" alt=\"k8OsKg.png\"></p>\n<h2 id=\"java-util-concurrent-CyclicBarrier类\"><a href=\"#java-util-concurrent-CyclicBarrier类\" class=\"headerlink\" title=\"java.util.concurrent.CyclicBarrier类\"></a>java.util.concurrent.CyclicBarrier类</h2><p>CountDownLatch类只能进行倒数计数。也就是说，一旦计数值变为0后，即使调用await方法，主线程也会立即返回。<br>当想多次重复进行线程同步时，使用java.util.concurrent.CyclicBarrier类会很方便。<br>CyclicBarrier可以周期性地（cyclic）创建出屏障（barrier）。在屏障解除之前，碰到屏障的线程是无法继续前进的。屏障的解除条件是到达屏障处的线程个数达到了构造函数指定的个数。也就是说，当指定个数的线程到达屏障处后，屏障就会被解除，然后这些线程就会一起冲出去。</p>\n<h3 id=\"Main-java-1\"><a href=\"#Main-java-1\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\">        <span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THREADS = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"BEGIN\"</span>);</span><br><span class=\"line\">        ExecutorService service = Executors.newFixedThreadPool(THREADS);</span><br><span class=\"line\"></span><br><span class=\"line\">        Runnable barrierAction = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"Barrier Action!\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        CyclicBarrier phaseBarrier = <span class=\"keyword\">new</span> CyclicBarrier(THREADS, barrierAction);</span><br><span class=\"line\">        CountDownLatch doneLatch = <span class=\"keyword\">new</span> CountDownLatch(THREADS);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t = <span class=\"number\">0</span>; t &lt; THREADS; t++) &#123;</span><br><span class=\"line\">                service.execute(<span class=\"keyword\">new</span> MyTask(phaseBarrier, doneLatch, t));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"AWAIT\"</span>);</span><br><span class=\"line\">            doneLatch.await();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            service.shutdown();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"END\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyTask-java-1\"><a href=\"#MyTask-java-1\" class=\"headerlink\" title=\"MyTask.java\"></a>MyTask.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTask</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PHASE = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> CyclicBarrier phaseBarrier;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> CountDownLatch doneLatch;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> context;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Random random = <span class=\"keyword\">new</span> Random(<span class=\"number\">314159</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyTask</span><span class=\"params\">(CyclicBarrier phaseBarrier, CountDownLatch doneLatch, <span class=\"keyword\">int</span> context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.phaseBarrier = phaseBarrier;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.doneLatch = doneLatch;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> phase = <span class=\"number\">0</span>; phase &lt; PHASE; phase++) &#123;</span><br><span class=\"line\">                doPhase(phase);</span><br><span class=\"line\">                phaseBarrier.await();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (BrokenBarrierException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            doneLatch.countDown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPhase</span><span class=\"params\">(<span class=\"keyword\">int</span> phase)</span> </span>&#123;</span><br><span class=\"line\">        String name = Thread.currentThread().getName();</span><br><span class=\"line\">        System.out.println(name + <span class=\"string\">\":MyTask:BEGIN:context = \"</span> + context + <span class=\"string\">\", phase = \"</span> + phase);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(random.nextInt(<span class=\"number\">3000</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(name + <span class=\"string\">\":MyTask:END:context = \"</span> + context + <span class=\"string\">\", phase = \"</span> + phase);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行结果-1\"><a href=\"#运行结果-1\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BEGIN</span><br><span class=\"line\">AWAIT</span><br><span class=\"line\">pool-1-thread-2:MyTask:BEGIN:context = 1, phase = 0</span><br><span class=\"line\">pool-1-thread-1:MyTask:BEGIN:context = 0, phase = 0</span><br><span class=\"line\">pool-1-thread-3:MyTask:BEGIN:context = 2, phase = 0</span><br><span class=\"line\">pool-1-thread-1:MyTask:END:context = 0, phase = 0</span><br><span class=\"line\">pool-1-thread-2:MyTask:END:context = 1, phase = 0</span><br><span class=\"line\">pool-1-thread-3:MyTask:END:context = 2, phase = 0</span><br><span class=\"line\">Barrier Action!</span><br><span class=\"line\">pool-1-thread-3:MyTask:BEGIN:context = 2, phase = 1</span><br><span class=\"line\">pool-1-thread-1:MyTask:BEGIN:context = 0, phase = 1</span><br><span class=\"line\">pool-1-thread-2:MyTask:BEGIN:context = 1, phase = 1</span><br><span class=\"line\">pool-1-thread-3:MyTask:END:context = 2, phase = 1</span><br><span class=\"line\">pool-1-thread-2:MyTask:END:context = 1, phase = 1</span><br><span class=\"line\">pool-1-thread-1:MyTask:END:context = 0, phase = 1</span><br><span class=\"line\">Barrier Action!</span><br><span class=\"line\">pool-1-thread-1:MyTask:BEGIN:context = 0, phase = 2</span><br><span class=\"line\">pool-1-thread-3:MyTask:BEGIN:context = 2, phase = 2</span><br><span class=\"line\">pool-1-thread-2:MyTask:BEGIN:context = 1, phase = 2</span><br><span class=\"line\">pool-1-thread-1:MyTask:END:context = 0, phase = 2</span><br><span class=\"line\">pool-1-thread-3:MyTask:END:context = 2, phase = 2</span><br><span class=\"line\">pool-1-thread-2:MyTask:END:context = 1, phase = 2</span><br><span class=\"line\">Barrier Action!</span><br><span class=\"line\">pool-1-thread-2:MyTask:BEGIN:context = 1, phase = 3</span><br><span class=\"line\">pool-1-thread-1:MyTask:BEGIN:context = 0, phase = 3</span><br><span class=\"line\">pool-1-thread-3:MyTask:BEGIN:context = 2, phase = 3</span><br><span class=\"line\">pool-1-thread-1:MyTask:END:context = 0, phase = 3</span><br><span class=\"line\">pool-1-thread-3:MyTask:END:context = 2, phase = 3</span><br><span class=\"line\">pool-1-thread-2:MyTask:END:context = 1, phase = 3</span><br><span class=\"line\">Barrier Action!</span><br><span class=\"line\">pool-1-thread-2:MyTask:BEGIN:context = 1, phase = 4</span><br><span class=\"line\">pool-1-thread-1:MyTask:BEGIN:context = 0, phase = 4</span><br><span class=\"line\">pool-1-thread-3:MyTask:BEGIN:context = 2, phase = 4</span><br><span class=\"line\">pool-1-thread-3:MyTask:END:context = 2, phase = 4</span><br><span class=\"line\">pool-1-thread-1:MyTask:END:context = 0, phase = 4</span><br><span class=\"line\">pool-1-thread-2:MyTask:END:context = 1, phase = 4</span><br><span class=\"line\">Barrier Action!</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<h3 id=\"Timethreads图\"><a href=\"#Timethreads图\" class=\"headerlink\" title=\"Timethreads图\"></a>Timethreads图</h3><p><img src=\"https://s2.ax1x.com/2019/02/02/k8XdeJ.png\" alt=\"k8XdeJ.png\"></p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"中断状态与InterruptedException异常的相互转换","url":"http://yoursite.com/2019/02/03/中断状态与InterruptedException异常的相互转换/","content":"<p>当interrupt方法被调用后，线程就可以被中断了。中断线程这个行为会带来一下结果之一。</p>\n<p>(1) 线程变为“中断状态”：反映为“状态”<br>(2) 抛出“InterruptedException异常”：反映为“控制”</p>\n<p>通常情况下会是结果(1)；当线程正在sleep、wait、join时会是结果(2)（这时线程不会变为中断状态）。<br>但是，上面的(1)和(2)是可以相互转换的。即，可以将(1)变为(2)，也可以将(2)变为(1)。可以根据程序需要——大多是为了防止代码忘记线程已经被中断的实施——进行转换。</p>\n<h2 id=\"中断状态-gt-InterruptedException异常的转换\"><a href=\"#中断状态-gt-InterruptedException异常的转换\" class=\"headerlink\" title=\"中断状态-&gt;InterruptedException异常的转换\"></a>中断状态-&gt;InterruptedException异常的转换</h2><p>可以像下面这样编写代码，以实现“如果线程处于中断状态就抛出异常InterruptedException”。其中的interrupted方法是java.lang.Thread类的静态方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (Thread.interrupted()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InterruptedException();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将这段if语句写在长时间处理之前可以提高线程对中断的响应性。因为这样可以防止线程因没注意到自己被中断而进入长时间处理的情况发生，</p>\n<h3 id=\"interrupt方法检查的是哪个线程\"><a href=\"#interrupt方法检查的是哪个线程\" class=\"headerlink\" title=\"interrupt方法检查的是哪个线程\"></a>interrupt方法检查的是哪个线程</h3><p>Thread.interrupt方法会去检查Thread.currentThread()的中断状态。也就是说，无论上面的if语句写在哪个类的哪个方法中，它总是会去检查执行if语句的线程的中断状态。</p>\n<h3 id=\"不想清除中断状态时\"><a href=\"#不想清除中断状态时\" class=\"headerlink\" title=\"不想清除中断状态时\"></a>不想清除中断状态时</h3><p>当Thread.interrupt方法被调用后，线程将不再处于中断状态。也就是说，一旦调用一次Thread.interrupt方法，中断状态将被清除。<br>如果想在不清除中断状态的前提下检查当前线程的中断状态，可以使用isInterrupted这个实例方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (Thread.currentThread().isInterrupted()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//中断状态下的处理（中断状态不会被清除）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"InterruptedException异常-gt-中断状态的转换\"><a href=\"#InterruptedException异常-gt-中断状态的转换\" class=\"headerlink\" title=\"InterruptedException异常-&gt;中断状态的转换\"></a>InterruptedException异常-&gt;中断状态的转换</h2><p>要想只在指定的时间内让线程停止运行，可以使用Thread.sleep方法。由于Thread.sleep会抛出InterruptedException异常，因此有时会像下面这样编写代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是，这样编写代码的话，被抛出的InterruptedException异常将会被忽略。如果某个线程正在sleep时被其他线程中断了，则“已经被中断”这个信息将会遗失。<br>如果想要防止“已经被中断”这个信息遗失，线程可以像下面这样再次中断自己。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">    Thread.currentThread().interrupt();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这就相当于将当前捕获到的InterruptedException转换为了中断状态。</p>\n<h2 id=\"InterruptedException异常-gt-InterruptedException异常的转换\"><a href=\"#InterruptedException异常-gt-InterruptedException异常的转换\" class=\"headerlink\" title=\"InterruptedException异常-&gt;InterruptedException异常的转换\"></a>InterruptedException异常-&gt;InterruptedException异常的转换</h2><p>还有不将捕获到的InterruptedException异常立即抛出，而是稍后再抛出的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InterruptedException savedException = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">    savedException = e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">if</span> (savedException != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> savedException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里，捕获到的InterruptedException异常会先保存在名为savedException的变量中，稍后再被throw出去。</p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"捕获程序整体的终止时","url":"http://yoursite.com/2019/02/02/捕获程序整体的终止时/","content":"<h2 id=\"未捕获的异常的处理器\"><a href=\"#未捕获的异常的处理器\" class=\"headerlink\" title=\"未捕获的异常的处理器\"></a>未捕获的异常的处理器</h2><p>假设程序抛出异常时，并没有编写捕获该异常的catch语句块。通常情况下，这么做会导致程序在输出线程的调用堆栈信息后终止。<br>如果使用Thread类的setDefaultUncaughtedExceptionHandler静态方法，可以设置未捕获的异常的处理器（Uncaught Exception Handler）。该处理器是Thread.UncaughtExceptionHandler接口类型的对象，实际的处理编写在uncaughtException方法中。设置了未捕获的异常的处理器后，程序将不会输出调用堆栈而是直接终止。</p>\n<h2 id=\"退出钩子\"><a href=\"#退出钩子\" class=\"headerlink\" title=\"退出钩子\"></a>退出钩子</h2><p>退出钩子（Shutdown Hook）是指在Java虚拟机退出时启动的线程。“Java虚拟机退出时”指的是System.exit()被调用或是全部非守护线程终止时。这时可以使用退出钩子来编写程序完全终止时的终止处理。<br>可以使用java.lang.Runtime类的实例方法addShutdownHook来设置退出钩子。</p>\n<h3 id=\"Main-java\"><a href=\"#Main-java\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main:BEGIN\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.setDefaultUncaughtExceptionHandler(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread.UncaughtExceptionHandler() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">uncaughtException</span><span class=\"params\">(Thread thread, Throwable exception)</span> </span>&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"****\"</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"UncaughtExceptionHandler:BEGIN\"</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"currentThread = \"</span> + Thread.currentThread());</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"thread = \"</span> + thread);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"exception = \"</span> + exception);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"UncaughtExceptionHandler:END\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        Runtime.getRuntime().addShutdownHook(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"****\"</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"shutdown hook:BEGIN\"</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"currentThread = \"</span> + Thread.currentThread());</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"shutdown hook:END\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"string\">\"MyThread\"</span>) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"MyThread:BEGIN\"</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"MyThread:SLEEP...\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"MyThread:DIVIDE\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">int</span> x = <span class=\"number\">1</span> / <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"MyThread:END\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main:END\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main:BEGIN</span><br><span class=\"line\">main:END</span><br><span class=\"line\">MyThread:BEGIN</span><br><span class=\"line\">MyThread:SLEEP...</span><br><span class=\"line\">MyThread:DIVIDE</span><br><span class=\"line\">****</span><br><span class=\"line\">UncaughtExceptionHandler:BEGIN</span><br><span class=\"line\">currentThread = Thread[MyThread,5,main]</span><br><span class=\"line\">thread = Thread[MyThread,5,main]</span><br><span class=\"line\">exception = java.lang.ArithmeticException: / by zero</span><br><span class=\"line\">UncaughtExceptionHandler:END</span><br><span class=\"line\">****</span><br><span class=\"line\">shutdown hook:BEGIN</span><br><span class=\"line\">currentThread = Thread[Thread-0,5,main]</span><br><span class=\"line\">shutdown hook:END</span><br></pre></td></tr></table></figure>","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"java.util.concurrent.ExecutorService接口与Two-Phase Termination模式","url":"http://yoursite.com/2019/02/02/java-util-concurrent-ExecutorService接口与Two-Phase-Termination模式/","content":"<p>通常，线程都会在ExecutorService接口背后运行。为了优雅地终止运行中的线程，ExecutorService接口准备了shutdown方法。</p>\n<p>ExecutorService接口还提供了用于确认终止处理已执行到哪个阶段的方法。</p>\n<p>isShutdown方法是用于确认shutdown方法是否已经被调用的方法。如果shutdown方法已经被调用，那么isShutdown会返回true。但是，即使isShutdown为true，也并不表示线程已经实际停止了。</p>\n<p>isTerminated方法是用于确认线程是否已经实际停止了的方法。如果线程已经停止了，isTerminated会返回true。</p>\n<p><img src=\"https://s2.ax1x.com/2019/02/02/k8m5aq.png\" alt=\"k8m5aq.png\"></p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"【图解Java多线程设计模式】Two-Phase Termination模式","url":"http://yoursite.com/2019/02/02/【图解Java多线程设计模式】Two-Phase-Termination模式/","content":"<p>先执行完终止处理再终止线程。</p>\n<p><img src=\"https://s2.ax1x.com/2019/02/01/k3qJ9U.png\" alt=\"k3qJ9U.png\"></p>\n<p>该模式的要点如下：</p>\n<ul>\n<li>安全地终止线程（安全性）</li>\n<li>必定会进行终止处理（生存性）</li>\n<li>发出终止请求后尽快进行终止处理（响应性）</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>首先会启动一个线程，该线程每隔约500毫秒进行一次计数。接着，在大约10秒后程序就会终止该线程。</p>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"https://s2.ax1x.com/2019/02/01/k3qODs.png\" alt=\"k3qODs.png\"></p>\n<h3 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h3><p><img src=\"https://s2.ax1x.com/2019/02/01/k3j3qJ.png\" alt=\"k3j3qJ.png\"></p>\n<h3 id=\"CountupThread-java\"><a href=\"#CountupThread-java\" class=\"headerlink\" title=\"CountupThread.java\"></a>CountupThread.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CountupThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> shutdownRequested = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdownRequest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        shutdownRequested = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isShutdownRequested</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> shutdownRequested;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!isShutdownRequested()) &#123;</span><br><span class=\"line\">                doWork();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            doShutdown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doWork</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        counter++;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"doWork: counter = \"</span> + counter);</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doShutdown</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"doShutdown: counter = \"</span> + counter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Main-java\"><a href=\"#Main-java\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main: BEGIN\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            CountupThread t = <span class=\"keyword\">new</span> CountupThread();</span><br><span class=\"line\">            t.start();</span><br><span class=\"line\"></span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">10000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"main: shutdownRequest\"</span>);</span><br><span class=\"line\">            t.shutdownRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"main: join\"</span>);</span><br><span class=\"line\">            t.join();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main: END\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main: BEGIN</span><br><span class=\"line\"><span class=\"keyword\">do</span>Work: counter = 1</span><br><span class=\"line\"><span class=\"keyword\">do</span>Work: counter = 2</span><br><span class=\"line\"><span class=\"keyword\">do</span>Work: counter = 3</span><br><span class=\"line\"><span class=\"keyword\">do</span>Work: counter = 4</span><br><span class=\"line\"><span class=\"keyword\">do</span>Work: counter = 5</span><br><span class=\"line\"><span class=\"keyword\">do</span>Work: counter = 6</span><br><span class=\"line\"><span class=\"keyword\">do</span>Work: counter = 7</span><br><span class=\"line\"><span class=\"keyword\">do</span>Work: counter = 8</span><br><span class=\"line\"><span class=\"keyword\">do</span>Work: counter = 9</span><br><span class=\"line\"><span class=\"keyword\">do</span>Work: counter = 10</span><br><span class=\"line\"><span class=\"keyword\">do</span>Work: counter = 11</span><br><span class=\"line\"><span class=\"keyword\">do</span>Work: counter = 12</span><br><span class=\"line\"><span class=\"keyword\">do</span>Work: counter = 13</span><br><span class=\"line\"><span class=\"keyword\">do</span>Work: counter = 14</span><br><span class=\"line\"><span class=\"keyword\">do</span>Work: counter = 15</span><br><span class=\"line\"><span class=\"keyword\">do</span>Work: counter = 16</span><br><span class=\"line\"><span class=\"keyword\">do</span>Work: counter = 17</span><br><span class=\"line\"><span class=\"keyword\">do</span>Work: counter = 18</span><br><span class=\"line\"><span class=\"keyword\">do</span>Work: counter = 19</span><br><span class=\"line\"><span class=\"keyword\">do</span>Work: counter = 20</span><br><span class=\"line\">main: shutdownRequest</span><br><span class=\"line\">main: join</span><br><span class=\"line\"><span class=\"keyword\">do</span>Shutdown: counter = 20</span><br><span class=\"line\">main: END</span><br></pre></td></tr></table></figure>\n<h2 id=\"登场角色\"><a href=\"#登场角色\" class=\"headerlink\" title=\"登场角色\"></a>登场角色</h2><h3 id=\"TerminationRequester（终止请求发出者）\"><a href=\"#TerminationRequester（终止请求发出者）\" class=\"headerlink\" title=\"TerminationRequester（终止请求发出者）\"></a>TerminationRequester（终止请求发出者）</h3><p>TerminationRequester角色负责向Terminator角色发出终止请求。在示例程序中，由Main类扮演此角色。</p>\n<h3 id=\"Terminator（终止者）\"><a href=\"#Terminator（终止者）\" class=\"headerlink\" title=\"Terminator（终止者）\"></a>Terminator（终止者）</h3><p>Terminator角色负责接收终止请求，并实际执行终止处理。它提供了表示终止请求的shutdownRequest方法。shutdownRequest方法不需要使用Single Threaded Execution模式。<br>当shutdownRequest方法被调用后，Terminator角色会在考虑了安全性的基础上，自己进入“终止处理中”状态。接着当终止处理结束后，Terminator角色就会终止自己。<br>Terminator角色带有一个表示自己是否已经接收到终止请求的标志，在需要安全地开始终止处理时，会检查这个标志。如果能够频繁地检查该标志，就可以缩短接收到终止请求后变为“终止处理中”状态所需的时间。<br>在示例程序中，由CountupThread类扮演此角色。</p>\n<h3 id=\"类图-1\"><a href=\"#类图-1\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"https://s2.ax1x.com/2019/02/01/k3vFW6.png\" alt=\"k3vFW6.png\"></p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"java.util.concurrent包和Future模式","url":"http://yoursite.com/2019/02/01/java-util-concurrent包和Future模式/","content":"<h2 id=\"java-util-concurrent包\"><a href=\"#java-util-concurrent包\" class=\"headerlink\" title=\"java.util.concurrent包\"></a>java.util.concurrent包</h2><p>java.util.concurrent包提供了用于支持Future模式的类和接口。</p>\n<p>java.util.concurrent.Callable接口将“返回值的某种处理的调用”抽象化了。Callable接口声明了call方法。call方法与Runnable接口的run方法相似，不同的是call方法有返回值。</p>\n<p>java.util.concurrent.Future接口相当于Future角色。Future接口声明了用于获取值的get方法，但并没有声明设置值的方法。设置值的方法需要在实现Future接口的类中声明。除了get方法外，Future接口还声明了用于中断运行的cancel方法。</p>\n<p>java.util.concurrent.FutureTask类是实现了Future接口的标准类。FutureTask类声明了用于获取值的get方法、用于中断运行的cancel方法、用于设置值的set方法，以及用于设置异常的setException方法。此外，由于FutureTask类还实现了Runnable接口，所以它还声明了run方法。</p>\n<p><img src=\"https://s2.ax1x.com/2019/01/31/k3C82t.png\" alt=\"k3C82t.png\"></p>\n<p>在创建FutureTask类的实例时，Callable对象会被传递给构造函数的参数。之后，如果线程调用FutureTask的run方法，那么在构造函数中接收到的参数——Callable对象的call方法就会被执行。换言之，调用FutureTask的run方法的线程也会调用call方法。<br>调用call方法的线程会同步地获取call方法的返回值，然后通过FutureTask的set方法来设置该返回值。如果call方法中发生了异常，则调用call方法的线程就会调用FutureTask的setException方法设置异常。<br>再然后，只要根据需要，调用FutureTask的get方法去获取值，就可以获取call方法的返回值。其中，get方法无论由哪个线程调用都可以。</p>\n<h2 id=\"使用java-util-concurrent包\"><a href=\"#使用java-util-concurrent包\" class=\"headerlink\" title=\"使用java.util.concurrent包\"></a>使用java.util.concurrent包</h2><h3 id=\"Host-java\"><a href=\"#Host-java\" class=\"headerlink\" title=\"Host.java\"></a>Host.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Callable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Host</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Data <span class=\"title\">request</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count, <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"    request(\"</span> + count + <span class=\"string\">\", \"</span> + c + <span class=\"string\">\") BEGIN\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        FutureData future = <span class=\"keyword\">new</span> FutureData(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Callable&lt;RealData&gt;() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> RealData <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RealData(count, c);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(future).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"    request(\"</span> + count + <span class=\"string\">\", \"</span> + c + <span class=\"string\">\") END\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> future;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"FutureData-java\"><a href=\"#FutureData-java\" class=\"headerlink\" title=\"FutureData.java\"></a>FutureData.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Callable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutionException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.FutureTask;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FutureData</span> <span class=\"keyword\">extends</span> <span class=\"title\">FutureTask</span>&lt;<span class=\"title\">RealData</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Data</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FutureData</span><span class=\"params\">(Callable&lt;RealData&gt; callable)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(callable);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getContent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String string = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            string = get().getContent();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ExecutionException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> string;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h3><p><img src=\"https://s2.ax1x.com/2019/01/31/k3PMLT.png\" alt=\"k3PMLT.png\"></p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"【图解Java多线程设计模式】Future模式","url":"http://yoursite.com/2019/01/29/【图解Java多线程设计模式】Future模式/","content":"<p>获取Future角色的线程会在稍后使用Future角色来获取运行结果。如果运行结果已经出来了，那么直接领取即可；如果运行结果还没有出来，那么需要等待结果出来。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>在每次发出请求时都创建一个线程。程序一旦发出请求，就会立即获取返回值。也就是说，会有下面这样的返回值（data）。</p>\n<p><em>Data data = host.request(10, ‘A’);</em></p>\n<p>但是，这里的返回值data并非请求的运行结果。为了获取请求的运行结果，刚刚启动了其他线程去进行计算。</p>\n<p>如下所示，过了\b一段时间后，线程会调用data的getContent方法去获取运行结果。</p>\n<p><em>data.getContent</em></p>\n<p>如果其他线程处理完了请求，那么调用getContent的线程会立即从该方法返回；而如果其他线程还没有处理完请求，那么调用getContent的线程会继续等待运行结果。</p>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"https://s2.ax1x.com/2019/01/28/kMRQOJ.png\" alt=\"kMRQOJ.png\"></p>\n<h3 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h3><p><img src=\"https://s2.ax1x.com/2019/01/28/kMR8T1.png\" alt=\"kMR8T1.png\"></p>\n<h3 id=\"Main-java\"><a href=\"#Main-java\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main BEGIN\"</span>);</span><br><span class=\"line\">        Host host = <span class=\"keyword\">new</span> Host();</span><br><span class=\"line\">        Data data1 = host.request(<span class=\"number\">10</span>, <span class=\"string\">'A'</span>);</span><br><span class=\"line\">        Data data2 = host.request(<span class=\"number\">20</span>, <span class=\"string\">'B'</span>);</span><br><span class=\"line\">        Data data3 = host.request(<span class=\"number\">30</span>, <span class=\"string\">'C'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main otherJob BEGIN\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main otherJob END\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"data1 = \"</span> + data1.getContent());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"data2 = \"</span> + data2.getContent());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"data3 = \"</span> + data3.getContent());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main END\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Host-java\"><a href=\"#Host-java\" class=\"headerlink\" title=\"Host.java\"></a>Host.java</h3><p>执行request的线程会做以下三件事情。</p>\n<ul>\n<li>创建FutureData的实例</li>\n<li>启动一个新线程，用于创建RealData的实例</li>\n<li>将FutureData的实例作为返回值返回给调用者</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Host</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Data <span class=\"title\">request</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count, <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"    request(\"</span> + count + <span class=\"string\">\", \"</span> + c + <span class=\"string\">\") BEGIN\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> FutureData future = <span class=\"keyword\">new</span> FutureData();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                RealData realdata = <span class=\"keyword\">new</span> RealData(count, c);</span><br><span class=\"line\">                future.setRealData(realdata);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"    request(\"</span> + count + <span class=\"string\">\", \"</span> + c + <span class=\"string\">\") END\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> future;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Data-java\"><a href=\"#Data-java\" class=\"headerlink\" title=\"Data.java\"></a>Data.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Data</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title\">getContent</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"FutureData-java\"><a href=\"#FutureData-java\" class=\"headerlink\" title=\"FutureData.java\"></a>FutureData.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FutureData</span> <span class=\"keyword\">implements</span> <span class=\"title\">Data</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> ready = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> RealData realdata = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">setRealData</span><span class=\"params\">(RealData realdata)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ready)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ready = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.realdata = realdata;</span><br><span class=\"line\">        notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> String <span class=\"title\">getContent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!ready) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> realdata.getContent();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"RealData-java\"><a href=\"#RealData-java\" class=\"headerlink\" title=\"RealData.java\"></a>RealData.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealData</span> <span class=\"keyword\">implements</span> <span class=\"title\">Data</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String content;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RealData</span><span class=\"params\">(<span class=\"keyword\">int</span> count, <span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"        making RealData(\"</span> + count + <span class=\"string\">\", \"</span> + c + <span class=\"string\">\") BEGIN\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[count];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">            buffer[i] = c;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.content = <span class=\"keyword\">new</span> String(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"        making RealData(\"</span> + count + <span class=\"string\">\", \"</span> + c + <span class=\"string\">\") END\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getContent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main BEGIN</span><br><span class=\"line\">    request(10, A) BEGIN</span><br><span class=\"line\">    request(10, A) END</span><br><span class=\"line\">    request(20, B) BEGIN</span><br><span class=\"line\">    request(20, B) END</span><br><span class=\"line\">    request(30, C) BEGIN</span><br><span class=\"line\">    request(30, C) END</span><br><span class=\"line\">main otherJob BEGIN</span><br><span class=\"line\">        making RealData(30, C) BEGIN</span><br><span class=\"line\">        making RealData(10, A) BEGIN</span><br><span class=\"line\">        making RealData(20, B) BEGIN</span><br><span class=\"line\">        making RealData(10, A) END</span><br><span class=\"line\">main otherJob END</span><br><span class=\"line\">data1 = AAAAAAAAAA</span><br><span class=\"line\">        making RealData(20, B) END</span><br><span class=\"line\">data2 = BBBBBBBBBBBBBBBBBBBB</span><br><span class=\"line\">        making RealData(30, C) END</span><br><span class=\"line\">data3 = CCCCCCCCCCCCCCCCCCCCCCCCCCCCCC</span><br><span class=\"line\">main END</span><br></pre></td></tr></table></figure>\n<h2 id=\"登场角色\"><a href=\"#登场角色\" class=\"headerlink\" title=\"登场角色\"></a>登场角色</h2><h3 id=\"Client（请求者）\"><a href=\"#Client（请求者）\" class=\"headerlink\" title=\"Client（请求者）\"></a>Client（请求者）</h3><p>Client角色向Host角色发出请求（request），并会立即接收到请求的处理结果（返回值）——VirtualData角色。<br>不过，这里接收到的VirtualData角色实际上是Future角色。Client角色没有必要知道返回值究竟是RealData角色还是Future角色。稍后，Client角色会通过VirtualData角色来进行操作。<br>在示例程序中，由Main类扮演此角色。</p>\n<h3 id=\"Host\"><a href=\"#Host\" class=\"headerlink\" title=\"Host\"></a>Host</h3><p>Host角色会创建新的线程，并开始在新线程中创建RealData角色。同时，它会将Future角色（当作VirtualData角色）返回给Client角色。在示例程序中，由Host类扮演此角色。<br>新线程在创建了RealData角色后，会将其设置到Future角色中。</p>\n<h3 id=\"VirtualData（虚拟数据）\"><a href=\"#VirtualData（虚拟数据）\" class=\"headerlink\" title=\"VirtualData（虚拟数据）\"></a>VirtualData（虚拟数据）</h3><p>VirtualData角色是让Future角色与RealData角色具有一致性的角色。在示例程序中，由Data接口扮演此角色。</p>\n<h3 id=\"RealData（真实数据）\"><a href=\"#RealData（真实数据）\" class=\"headerlink\" title=\"RealData（真实数据）\"></a>RealData（真实数据）</h3><p>RealData角色是表示真实数据的角色。创建该对象需要花费很多时间。在示例程序中，由RealData类扮演此角色。</p>\n<h3 id=\"Future（期货）\"><a href=\"#Future（期货）\" class=\"headerlink\" title=\"Future（期货）\"></a>Future（期货）</h3><p>Future角色由Host角色传递给Client角色。从程序行为上看，对Client角色而言，Future角色就是VirtualData角色。实际上，当Client角色操作Future角色时，线程会调用wait方法等待，直至RealData角色创建完成。但是，一旦RealData角色创建完成，线程就不会再继续等待。Future角色会将Client角色的操作委托给RealData角色。<br>在示例程序中，由FutureData类扮演此角色。</p>\n<h3 id=\"类图-1\"><a href=\"#类图-1\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"https://s2.ax1x.com/2019/01/29/kQO0UK.png\" alt=\"kQO0UK.png\"></p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"java.util.concurrent包和Worker Thread模式","url":"http://yoursite.com/2019/01/27/java-util-concurrent包和Worker-Thread模式/","content":"<h2 id=\"ThreadPoolExecutor类\"><a href=\"#ThreadPoolExecutor类\" class=\"headerlink\" title=\"ThreadPoolExecutor类\"></a>ThreadPoolExecutor类</h2><p>java.util.concurrent.ThreadPoolExecutor类是管理工人线程的类。ThreadPoolExecutor可以轻松地实现Worker Thread模式。ThreadPoolExecutor类可以对线程池（保存和管理工人线程的场所）进行以下设置。</p>\n<ul>\n<li>指定线程池的大小</li>\n<li>指定提前创建线程还是按需创建线程</li>\n<li>指定创建线程的工厂（java.util.concurrent.ThreadFactory）</li>\n<li>指定多长时间终止不需要的线程</li>\n<li>指定传递要执行的工作时的排队方式</li>\n<li>指定拒绝工作的方式</li>\n<li>指定执行工作前和执行工作后的处理</li>\n</ul>\n<h2 id=\"通过java-util-concurrent包创建线程池\"><a href=\"#通过java-util-concurrent包创建线程池\" class=\"headerlink\" title=\"通过java.util.concurrent包创建线程池\"></a>通过java.util.concurrent包创建线程池</h2><p>java.util.concurrent.Executors类是用于创建线程池的工具类。</p>\n<h3 id=\"Executors-newFixedThreadPool方法\"><a href=\"#Executors-newFixedThreadPool方法\" class=\"headerlink\" title=\"Executors.newFixedThreadPool方法\"></a>Executors.newFixedThreadPool方法</h3><p>Executors.newFixedThreadPool方法会创建一个线程池，该线程池会创建个数由参数指定的工人线程，而且创建出的线程会被重复利用。如果在这个方法的参数中加上ThreadFactory对象，则线程池会使用该ThreadFactory来创建新的工人线程。</p>\n<h3 id=\"Executors-newCachedThreadPool方法\"><a href=\"#Executors-newCachedThreadPool方法\" class=\"headerlink\" title=\"Executors.newCachedThreadPool方法\"></a>Executors.newCachedThreadPool方法</h3><p>Executors.newCachedThreadPool方法会创建一个线程池，该线程池可以根据需要自动创建工人线程，而且工人线程会被重复利用。没有工作的工人线程会在缓存约60秒后自动终止。如果向这个方法的参数中传入ThreadFactory对象，则线程池会使用这个ThreadFactory来创建新的工人线程。</p>\n<h3 id=\"Executors-newScheduledThreadPool方法\"><a href=\"#Executors-newScheduledThreadPool方法\" class=\"headerlink\" title=\"Executors.newScheduledThreadPool方法\"></a>Executors.newScheduledThreadPool方法</h3><p>Executors.newScheduledThreadPool方法会创建一个线程池，该线程池可以在一定时间后执行请求或是反复执行请求。即使在没有请求时也需要保存的线程数量可以通过参数指定。此外，如果在这个方法的参数中加上ThreadFactory对象，则线程池会使用这个ThreadFactory来创建新的工人线程。</p>\n<h3 id=\"Main-java\"><a href=\"#Main-java\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ExecutorService executorService = Executors.newFixedThreadPool(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> ClientThread(<span class=\"string\">\"Alice\"</span>, executorService).start();</span><br><span class=\"line\">            <span class=\"keyword\">new</span> ClientThread(<span class=\"string\">\"Bobby\"</span>, executorService).start();</span><br><span class=\"line\">            <span class=\"keyword\">new</span> ClientThread(<span class=\"string\">\"Chris\"</span>, executorService).start();</span><br><span class=\"line\"></span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">5000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            executorService.shutdown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ClientThread-java\"><a href=\"#ClientThread-java\" class=\"headerlink\" title=\"ClientThread.java\"></a>ClientThread.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.RejectedExecutionException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClientThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ExecutorService executorService;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClientThread</span><span class=\"params\">(String name, ExecutorService executorService)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.executorService = executorService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; ; i++) &#123;</span><br><span class=\"line\">                Request request = <span class=\"keyword\">new</span> Request(getName(), i);</span><br><span class=\"line\">                executorService.execute(request);</span><br><span class=\"line\">                Thread.sleep(random.nextInt(<span class=\"number\">1000</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RejectedExecutionException e) &#123;</span><br><span class=\"line\">            System.out.println(getName() + <span class=\"string\">\" : \"</span> + e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Request-java\"><a href=\"#Request-java\" class=\"headerlink\" title=\"Request.java\"></a>Request.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Request</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> number;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Request</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> number)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.number = number;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" executes \"</span> + <span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(random.nextInt(<span class=\"number\">1000</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"[ Request from \"</span> + name + <span class=\"string\">\" No.\"</span> + number + <span class=\"string\">\" ]\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pool-1-thread-1 executes [ Request from Chris No.0 ]</span><br><span class=\"line\">pool-1-thread-2 executes [ Request from Bobby No.0 ]</span><br><span class=\"line\">pool-1-thread-3 executes [ Request from Alice No.0 ]</span><br><span class=\"line\">pool-1-thread-4 executes [ Request from Bobby No.1 ]</span><br><span class=\"line\">pool-1-thread-5 executes [ Request from Chris No.1 ]</span><br><span class=\"line\">pool-1-thread-3 executes [ Request from Bobby No.2 ]</span><br><span class=\"line\">pool-1-thread-5 executes [ Request from Bobby No.3 ]</span><br><span class=\"line\">pool-1-thread-2 executes [ Request from Alice No.1 ]</span><br><span class=\"line\">pool-1-thread-1 executes [ Request from Chris No.2 ]</span><br><span class=\"line\">pool-1-thread-3 executes [ Request from Chris No.3 ]</span><br><span class=\"line\">pool-1-thread-4 executes [ Request from Alice No.2 ]</span><br><span class=\"line\">...</span><br><span class=\"line\">pool-1-thread-1 executes [ Request from Chris No.8 ]</span><br><span class=\"line\">pool-1-thread-2 executes [ Request from Alice No.6 ]</span><br><span class=\"line\">pool-1-thread-5 executes [ Request from Bobby No.8 ]</span><br><span class=\"line\">pool-1-thread-4 executes [ Request from Alice No.7 ]</span><br><span class=\"line\">pool-1-thread-3 executes [ Request from Alice No.8 ]</span><br><span class=\"line\">pool-1-thread-1 executes [ Request from Chris No.9 ]</span><br><span class=\"line\">pool-1-thread-4 executes [ Request from Bobby No.9 ]</span><br><span class=\"line\">Bobby : java.util.concurrent.RejectedExecutionException: Task [ Request from Bobby No.10 ] rejected from java.util.concurrent.ThreadPoolExecutor@442f5c95[Shutting down, pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 28]</span><br><span class=\"line\">Alice : java.util.concurrent.RejectedExecutionException: Task [ Request from Alice No.9 ] rejected from java.util.concurrent.ThreadPoolExecutor@442f5c95[Shutting down, pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 28]</span><br><span class=\"line\">Chris : java.util.concurrent.RejectedExecutionException: Task [ Request from Chris No.10 ] rejected from java.util.concurrent.ThreadPoolExecutor@442f5c95[Shutting down, pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 28]</span><br></pre></td></tr></table></figure>","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"【图解Java多线程设计模式】Worker Thread模式","url":"http://yoursite.com/2019/01/13/【图解Java多线程设计模式】Worker-Thread模式/","content":"<p>工人线程（worker thread）会逐个取回工作并进行处理。当所有工作全部完成后，工人线程会等待新的工作到来。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>ClientThread类的线程会向Channel类发送工作请求（委托）。<br>Channel类的实例雇用了五个工人线程（WorkerThread）进行工作。所有工人线程都在等待工作请求的到来。<br>工作请求到来后，工人线程会从Channel那里获取一项工作请求并开始工作。工作完成后，工人线程会回到Channel那里等待下一项工作请求。</p>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"https://s2.ax1x.com/2019/01/13/Fvr1mQ.png\" alt=\"Fvr1mQ.png\"></p>\n<h3 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h3><p><img src=\"https://s2.ax1x.com/2019/01/13/Fvr2p6.png\" alt=\"Fvr2p6.png\"></p>\n<h3 id=\"Main-java\"><a href=\"#Main-java\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Channel channel = <span class=\"keyword\">new</span> Channel(<span class=\"number\">5</span>);</span><br><span class=\"line\">        channel.startWorkers();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ClientThread(<span class=\"string\">\"Alice\"</span>, channel).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ClientThread(<span class=\"string\">\"Bobby\"</span>, channel).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ClientThread(<span class=\"string\">\"Chris\"</span>, channel).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ClientThread-java\"><a href=\"#ClientThread-java\" class=\"headerlink\" title=\"ClientThread.java\"></a>ClientThread.java</h3><ul>\n<li>创建Request的实例</li>\n<li>将该实例传递给Channel类的putRequest方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClientThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Channel channel;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClientThread</span><span class=\"params\">(String name, Channel channel)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.channel = channel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; ; i++) &#123;</span><br><span class=\"line\">                Request request = <span class=\"keyword\">new</span> Request(getName(), i);</span><br><span class=\"line\">                channel.putRequest(request);</span><br><span class=\"line\">                Thread.sleep(random.nextInt(<span class=\"number\">1000</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Request-java\"><a href=\"#Request-java\" class=\"headerlink\" title=\"Request.java\"></a>Request.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Request</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> number;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Request</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> number)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.number = number;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" executes \"</span> + <span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(random.nextInt(<span class=\"number\">1000</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"[ Request from \"</span> + name + <span class=\"string\">\" No.\"</span> + number + <span class=\"string\">\" ]\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Channel-java\"><a href=\"#Channel-java\" class=\"headerlink\" title=\"Channel.java\"></a>Channel.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Channel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_REQUEST = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Request[] requestQueue;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WorkerThread[] threadPool;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> head;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tail;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Channel</span><span class=\"params\">(<span class=\"keyword\">int</span> threads)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.requestQueue = <span class=\"keyword\">new</span> Request[MAX_REQUEST];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.threadPool = <span class=\"keyword\">new</span> WorkerThread[threads];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.head = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tail = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; threadPool.length; i++) &#123;</span><br><span class=\"line\">            threadPool[i] = <span class=\"keyword\">new</span> WorkerThread(<span class=\"string\">\"Worker-\"</span> + i, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startWorkers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; threadPool.length; i++) &#123;</span><br><span class=\"line\">            threadPool[i].start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">putRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (count &gt;= requestQueue.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        requestQueue[tail] = request;</span><br><span class=\"line\">        tail = (tail + <span class=\"number\">1</span>) % requestQueue.length;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> Request <span class=\"title\">takeRequest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (count &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Request request = requestQueue[head];</span><br><span class=\"line\">        head = (head + <span class=\"number\">1</span>) % requestQueue.length;</span><br><span class=\"line\">        count--;</span><br><span class=\"line\">        notifyAll();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> request;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"WorkerThread-java\"><a href=\"#WorkerThread-java\" class=\"headerlink\" title=\"WorkerThread.java\"></a>WorkerThread.java</h3><ul>\n<li>调用takeRequest方法从Channel的实例中获取一个Request的实例</li>\n<li>调用Request的实例的execute方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorkerThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Channel channel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WorkerThread</span><span class=\"params\">(String name, Channel channel)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.channel = channel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            Request request = channel.takeRequest();</span><br><span class=\"line\">            request.execute();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Worker-3 executes [ Request from Bobby No.0 ]</span><br><span class=\"line\">Worker-0 executes [ Request from Chris No.0 ]</span><br><span class=\"line\">Worker-4 executes [ Request from Alice No.0 ]</span><br><span class=\"line\">Worker-0 executes [ Request from Chris No.1 ]</span><br><span class=\"line\">Worker-4 executes [ Request from Chris No.2 ]</span><br><span class=\"line\">Worker-3 executes [ Request from Bobby No.1 ]</span><br><span class=\"line\">Worker-1 executes [ Request from Alice No.1 ]</span><br><span class=\"line\">Worker-1 executes [ Request from Bobby No.2 ]</span><br><span class=\"line\">Worker-4 executes [ Request from Chris No.3 ]</span><br></pre></td></tr></table></figure>\n<h2 id=\"登场角色\"><a href=\"#登场角色\" class=\"headerlink\" title=\"登场角色\"></a>登场角色</h2><h3 id=\"Client（委托者）\"><a href=\"#Client（委托者）\" class=\"headerlink\" title=\"Client（委托者）\"></a>Client（委托者）</h3><p>Client角色创建表示工作请求的Request角色并将其传递给Channel角色。在示例程序中，由ClientThread类扮演此角色。</p>\n<h3 id=\"Channel（通信线路）\"><a href=\"#Channel（通信线路）\" class=\"headerlink\" title=\"Channel（通信线路）\"></a>Channel（通信线路）</h3><p>Channel角色接收来自于Client角色的Request角色，并将其传递给Worker角色。在示例程序中，由Channel类扮演此角色。</p>\n<h3 id=\"Worker（工人）\"><a href=\"#Worker（工人）\" class=\"headerlink\" title=\"Worker（工人）\"></a>Worker（工人）</h3><p>Worker角色从Channel角色中获取Request角色，并进行工作。当一项工作完成后，它会继续去获取另外的Request角色。在示例程序中，由WorkerThread类扮演此角色。</p>\n<h3 id=\"Request（请求）\"><a href=\"#Request（请求）\" class=\"headerlink\" title=\"Request（请求）\"></a>Request（请求）</h3><p>Request角色是表示工作的角色。Request角色中保存了进行工作所必需的信息。在示例程序中，由Request类扮演此角色。</p>\n<h3 id=\"类图-1\"><a href=\"#类图-1\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"https://s2.ax1x.com/2019/01/23/kVgqQP.png\" alt=\"kVgqQP.png\"></p>\n<h3 id=\"Timethreads图\"><a href=\"#Timethreads图\" class=\"headerlink\" title=\"Timethreads图\"></a>Timethreads图</h3><p><img src=\"https://s2.ax1x.com/2019/01/23/kV2Zo4.png\" alt=\"kV2Zo4.png\"></p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"java.util.concurrent包和Thread-Per-Message模式","url":"http://yoursite.com/2019/01/03/java-util-concurrent包和Thread-Per-Message模式/","content":"<h2 id=\"Thread-Per-Message模式的七种实现方式\"><a href=\"#Thread-Per-Message模式的七种实现方式\" class=\"headerlink\" title=\"Thread-Per-Message模式的七种实现方式\"></a>Thread-Per-Message模式的七种实现方式</h2><ul>\n<li><p>java.lang.Thread类</p>\n<p>  最基本的创建、启动线程的类</p>\n</li>\n<li><p>java.lang.Runnable接口</p>\n<p>  表示线程所执行的“工作”的接口</p>\n</li>\n<li><p>java.util.concurrent.ThreadFactory接口</p>\n<p>  将线程创建抽象化了的接口</p>\n</li>\n<li><p>java.util.concurrent.Executor接口</p>\n<p>  将线程执行抽象化了的接口</p>\n</li>\n<li><p>java.util.concurrent.ExecutorService接口</p>\n<p>  将被复用的线程抽象化了的接口</p>\n</li>\n<li><p>java.util.concurrent.ScheduledExecutorService接口</p>\n<p>  将被调度的线程的执行抽象化了的接口</p>\n</li>\n<li><p>java.util.concurrent.Executors类</p>\n<p>  用于创建实例的工具类</p>\n</li>\n</ul>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"https://s2.ax1x.com/2019/01/06/FbP0ne.png\" alt=\"FbP0ne.png\"></p>\n<h2 id=\"java-lang-Thread类\"><a href=\"#java-lang-Thread类\" class=\"headerlink\" title=\"java.lang.Thread类\"></a>java.lang.Thread类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Host</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Helper helper = <span class=\"keyword\">new</span> Helper();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count, <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"    request(\"</span> + count + <span class=\"string\">\", \"</span> + c + <span class=\"string\">\") BEGIN\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                helper.handle(count, c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"    request(\"</span> + count + <span class=\"string\">\", \"</span> + c + <span class=\"string\">\") END\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"java-lang-Runnable接口\"><a href=\"#java-lang-Runnable接口\" class=\"headerlink\" title=\"java.lang.Runnable接口\"></a>java.lang.Runnable接口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Host</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Helper helper = <span class=\"keyword\">new</span> Helper();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count, <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"    request(\"</span> + count + <span class=\"string\">\", \"</span> + c + <span class=\"string\">\") BEGIN\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    helper.handle(count, c);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"    request(\"</span> + count + <span class=\"string\">\", \"</span> + c + <span class=\"string\">\") END\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"java-util-concurrent-ThreadFactory接口\"><a href=\"#java-util-concurrent-ThreadFactory接口\" class=\"headerlink\" title=\"java.util.concurrent.ThreadFactory接口\"></a>java.util.concurrent.ThreadFactory接口</h2><p>java.util.concurrent.ThreadFactory接口声明了如下所示的一个newThread方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable r)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>ThreadFactory是将线程创建抽象化了的接口，参数中的Runnable对象表示线程执行的操作内容。</p>\n<h3 id=\"Host-java\"><a href=\"#Host-java\" class=\"headerlink\" title=\"Host.java\"></a>Host.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Host</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Helper helper = <span class=\"keyword\">new</span> Helper();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ThreadFactory threadFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Host</span><span class=\"params\">(ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.threadFactory = threadFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count, <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"    request(\"</span> + count + <span class=\"string\">\", \"</span> + c + <span class=\"string\">\") BEGIN\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        threadFactory.newThread(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    helper.handle(count, c);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"    request(\"</span> + count + <span class=\"string\">\", \"</span> + c + <span class=\"string\">\") END\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Main-java\"><a href=\"#Main-java\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main BEGIN\"</span>);</span><br><span class=\"line\">        Host host = <span class=\"keyword\">new</span> Host(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> ThreadFactory() &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable r)</span> </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Thread(r);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">        host.request(<span class=\"number\">10</span>, <span class=\"string\">'A'</span>);</span><br><span class=\"line\">        host.request(<span class=\"number\">20</span>, <span class=\"string\">'B'</span>);</span><br><span class=\"line\">        host.request(<span class=\"number\">30</span>, <span class=\"string\">'C'</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main END\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"java-util-concurrent-Executors类获取的ThreadFactory\"><a href=\"#java-util-concurrent-Executors类获取的ThreadFactory\" class=\"headerlink\" title=\"java.util.concurrent.Executors类获取的ThreadFactory\"></a>java.util.concurrent.Executors类获取的ThreadFactory</h2><p>java.util.concurrent.Executors类提供了许多的静态方法。Executors.defaultThreadFactory()表达式可以获取当前默认设置的ThreadFactory对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main BEGIN\"</span>);</span><br><span class=\"line\">        Host host = <span class=\"keyword\">new</span> Host(</span><br><span class=\"line\">            Executors.defaultThreadFactory()</span><br><span class=\"line\">        );</span><br><span class=\"line\">        host.request(<span class=\"number\">10</span>, <span class=\"string\">'A'</span>);</span><br><span class=\"line\">        host.request(<span class=\"number\">20</span>, <span class=\"string\">'B'</span>);</span><br><span class=\"line\">        host.request(<span class=\"number\">30</span>, <span class=\"string\">'C'</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main END\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"java-util-concurrent-Executor接口\"><a href=\"#java-util-concurrent-Executor接口\" class=\"headerlink\" title=\"java.util.concurrent.Executor接口\"></a>java.util.concurrent.Executor接口</h2><p>java.util.concurrent.Executor接口声明了如下所示的一个execute方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable r)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>Executor接口将某些“处理的执行”抽象化了，参数传入的Runnable对象表示“执行的处理”的内容。</p>\n<h3 id=\"Host-java-1\"><a href=\"#Host-java-1\" class=\"headerlink\" title=\"Host.java\"></a>Host.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Host</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Helper helper = <span class=\"keyword\">new</span> Helper();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Executor executor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Host</span><span class=\"params\">(Executor executor)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.executor = executor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count, <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"    request(\"</span> + count + <span class=\"string\">\", \"</span> + c + <span class=\"string\">\") BEGIN\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        executor.execute(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Runnable()&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    helper.handle(count, c);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"    request(\"</span> + count + <span class=\"string\">\", \"</span> + c + <span class=\"string\">\") END\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Main-java-1\"><a href=\"#Main-java-1\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main BEGIN\"</span>);</span><br><span class=\"line\">        Host host = <span class=\"keyword\">new</span> Host(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Executor() &#123;</span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable r)</span> </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> Thread(r).start();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">        host.request(<span class=\"number\">10</span>, <span class=\"string\">'A'</span>);</span><br><span class=\"line\">        host.request(<span class=\"number\">20</span>, <span class=\"string\">'B'</span>);</span><br><span class=\"line\">        host.request(<span class=\"number\">30</span>, <span class=\"string\">'C'</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main END\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"java-util-concurrent-ExecutorService接口\"><a href=\"#java-util-concurrent-ExecutorService接口\" class=\"headerlink\" title=\"java.util.concurrent.ExecutorService接口\"></a>java.util.concurrent.ExecutorService接口</h2><p>java.util.concurrent.ExecutorService接口对可以反复execute的服务进行了抽象化。线程一直在后台运行着，每当调用execute方法时，线程就会执行Runnable对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main BEGIN\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">        Host host = <span class=\"keyword\">new</span> Host(executorService);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            host.request(<span class=\"number\">10</span>, <span class=\"string\">'A'</span>);</span><br><span class=\"line\">            host.request(<span class=\"number\">20</span>, <span class=\"string\">'B'</span>);</span><br><span class=\"line\">            host.request(<span class=\"number\">30</span>, <span class=\"string\">'C'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            executorService.shutdown();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"main END\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"java-util-concurrent-ScheduledExecutorService接口\"><a href=\"#java-util-concurrent-ScheduledExecutorService接口\" class=\"headerlink\" title=\"java.util.concurrent.ScheduledExecutorService接口\"></a>java.util.concurrent.ScheduledExecutorService接口</h2><p>java.util.concurrent.ScheduledExecutorService接口是ExecutorService的子接口，用于推迟操作的执行。schedule方法位于ScheduledExecutorService接口中，可以用于设置Runnable对象（r）和延迟时间（delay、unit）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schedule(Runnable r, <span class=\"keyword\">long</span> delay, TimeUnit unit);</span><br></pre></td></tr></table></figure>\n<p>long类型的delay表示的是延迟时间，TimeUnit类型的unit表示的则是指定延迟时间的单位（NANOSECONDS、MICROSECONDS、MILLISECONDS或SECONDS）。</p>\n<h3 id=\"Host-java-2\"><a href=\"#Host-java-2\" class=\"headerlink\" title=\"Host.java\"></a>Host.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Host</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Helper helper = <span class=\"keyword\">new</span> Helper();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ScheduledExecutorService scheduledExecutorService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Host</span><span class=\"params\">(ScheduledExecutorService scheduledExecutorService)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.scheduledExecutorService = scheduledExecutorService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count, <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"    request(\"</span> + count + <span class=\"string\">\", \"</span> + c + <span class=\"string\">\") BEGIN\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        scheduledExecutorService.schedule(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Runnable()&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    helper.handle(count, c);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            , <span class=\"number\">3L</span>, TimeUnit.SECONDS</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"    request(\"</span> + count + <span class=\"string\">\", \"</span> + c + <span class=\"string\">\") END\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Main-java-2\"><a href=\"#Main-java-2\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main BEGIN\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(<span class=\"number\">5</span>);</span><br><span class=\"line\">        Host host = <span class=\"keyword\">new</span> Host(scheduledExecutorService);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            host.request(<span class=\"number\">10</span>, <span class=\"string\">'A'</span>);</span><br><span class=\"line\">            host.request(<span class=\"number\">20</span>, <span class=\"string\">'B'</span>);</span><br><span class=\"line\">            host.request(<span class=\"number\">30</span>, <span class=\"string\">'C'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            scheduledExecutorService.shutdown();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"main END\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"进程与线程","url":"http://yoursite.com/2019/01/03/进程与线程/","content":"<p>一般来说，一个进程可以包含多个线程。</p>\n<h2 id=\"线程之间共享内存\"><a href=\"#线程之间共享内存\" class=\"headerlink\" title=\"线程之间共享内存\"></a>线程之间共享内存</h2><p>进程与线程之间最大的区别就是内存是否共享。<br>通常，每个进程都拥有彼此独立的内存空间。一个进程不可以擅自读取、写入其他进程的内存。由于进程的内存空间是彼此独立的，所以一个进程无须担心被其他进程破坏。<br>线程之间共享内存。经常让一个线程向内存中写入内容，来供其他线程读取。所谓“共享内存”，在Java中就是“共享实例”的意思。Java的实例分配在内存上，可由多个线程进行读写。<br>由于线程之间共享内存，所以线程之间的通信可以很自然、简单地实现。一个线程向实例中写入内容，其他线程就可以读取该实例的内容。而由于多个线程可以访问同一个实例，所以必须正确执行互斥处理。</p>\n<h2 id=\"线程的上下文切换快\"><a href=\"#线程的上下文切换快\" class=\"headerlink\" title=\"线程的上下文切换快\"></a>线程的上下文切换快</h2><p>进程和线程之间的另一个区别就是上下文切换的繁重程度。<br>当运行中的进程进行切换时，进程要暂时保存自身的当前状态（上下文信息）。而接着开始运行的进程需要恢复之前保存的自身的上下文信息。这种信息切换（context-switch）比较花费时间。<br>当运行中的线程进行切换时，与进程一样，也会进行上下文切换。但由于线程管理的上下文信息比进程少，，所以一般来说，\b线程的上下文切换要比进程快。<br>因此，当执行紧密关联的多项工作时，通常线程比进程更加合适。</p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"【图解Java多线程设计模式】Thread-Per-Message模式","url":"http://yoursite.com/2018/12/30/【图解Java多线程设计模式】Thread-Per-Message模式/","content":"<p>为每个命令或请求新分配一个线程，由这个线程来执行处理。在Thread-Per-Message模式中，消息的“委托端”和“执行端”是不同的线程。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>Main类委托Host类来显示字符。Host类会创建并启动一个线程，来处理该委托。启动的线程使用Helper类来执行实际的显示。</p>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><a href=\"https://imgchr.com/i/F5NEe1\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/01/01/F5NEe1.md.png\" alt=\"F5NEe1.md.png\"></a></p>\n<h3 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h3><p><a href=\"https://imgchr.com/i/F5NVdx\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/01/01/F5NVdx.md.png\" alt=\"F5NVdx.md.png\"></a></p>\n<h3 id=\"Timethreads图\"><a href=\"#Timethreads图\" class=\"headerlink\" title=\"Timethreads图\"></a>Timethreads图</h3><p><a href=\"https://imgchr.com/i/F5NGwt\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/01/01/F5NGwt.md.png\" alt=\"F5NGwt.md.png\"></a></p>\n<h3 id=\"Main-java\"><a href=\"#Main-java\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main BEGIN\"</span>);</span><br><span class=\"line\">        Host host = <span class=\"keyword\">new</span> Host();</span><br><span class=\"line\">        host.request(<span class=\"number\">10</span>, <span class=\"string\">'A'</span>);</span><br><span class=\"line\">        host.request(<span class=\"number\">20</span>, <span class=\"string\">'B'</span>);</span><br><span class=\"line\">        host.request(<span class=\"number\">30</span>, <span class=\"string\">'C'</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main END\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Host-java\"><a href=\"#Host-java\" class=\"headerlink\" title=\"Host.java\"></a>Host.java</h3><p>匿名内部类用于执行如下操作：</p>\n<ul>\n<li>声明Thread的子类，并重写run方法</li>\n<li>创建该类的实例</li>\n<li>调用该实例的start方法启动线程</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Host</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Helper helper = <span class=\"keyword\">new</span> Helper();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count, <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"    request(\"</span> + count + <span class=\"string\">\", \"</span> + c + <span class=\"string\">\") BEGIN\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                helper.handle(count, c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"    request(\"</span> + count + <span class=\"string\">\", \"</span> + c + <span class=\"string\">\") END\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Helper-java\"><a href=\"#Helper-java\" class=\"headerlink\" title=\"Helper.java\"></a>Helper.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Helper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(<span class=\"keyword\">int</span> count, <span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"        handle(\"</span> + count + <span class=\"string\">\", \"</span> + c + <span class=\"string\">\") BEGIN\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">            slowly();</span><br><span class=\"line\">            System.out.print(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"        handle(\"</span> + count + <span class=\"string\">\", \"</span> + c + <span class=\"string\">\") END\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">slowly</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main BEGIN</span><br><span class=\"line\">    request(10, A) BEGIN</span><br><span class=\"line\">    request(10, A) END</span><br><span class=\"line\">    request(20, B) BEGIN</span><br><span class=\"line\">        handle(10, A) BEGIN</span><br><span class=\"line\">    request(20, B) END</span><br><span class=\"line\">    request(30, C) BEGIN</span><br><span class=\"line\">        handle(20, B) BEGIN</span><br><span class=\"line\">    request(30, C) END</span><br><span class=\"line\">main END</span><br><span class=\"line\">        handle(30, C) BEGIN</span><br><span class=\"line\">CABACBACBABCBCAACBACBACBABCCBA</span><br><span class=\"line\">        handle(10, A) END</span><br><span class=\"line\">CBCBCBBCBCBCCBCBBCCB</span><br><span class=\"line\">        handle(20, B) END</span><br><span class=\"line\">CCCCCCCCCC</span><br><span class=\"line\">        handle(30, C) END</span><br></pre></td></tr></table></figure>\n<h2 id=\"登场角色\"><a href=\"#登场角色\" class=\"headerlink\" title=\"登场角色\"></a>登场角色</h2><h3 id=\"Client（委托人）\"><a href=\"#Client（委托人）\" class=\"headerlink\" title=\"Client（委托人）\"></a>Client（委托人）</h3><p>Client角色会向Host角色发出请求（request），但是并不知道Host角色是如何实现该请求的。在示例程序中，由Main类扮演此角色。</p>\n<h3 id=\"Host\"><a href=\"#Host\" class=\"headerlink\" title=\"Host\"></a>Host</h3><p>Host角色收到Client角色的请求（request）之后，会创建并启动一个线程。新创建的线程将使用Helper角色来“处理”（handle）请求。在示例程序中，由Host类扮演此角色。</p>\n<h3 id=\"Helper（助手）\"><a href=\"#Helper（助手）\" class=\"headerlink\" title=\"Helper（助手）\"></a>Helper（助手）</h3><p>Helper角色为Host角色提供请求处理的功能。Host角色创建的新线程会利用Helper角色。在示例程序中，由Helper类扮演此角色。</p>\n<h3 id=\"类图-1\"><a href=\"#类图-1\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"https://s2.ax1x.com/2019/01/01/F5dkLj.png\" alt=\"F5dkLj.png\"></p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"java.util.concurrent.locks包和Read-Write Lock模式","url":"http://yoursite.com/2018/12/28/java-util-concurrent-locks包和Read-Write-Lock模式/","content":"<p>java.util.concurrent.locks包提供了已实现Read-Write Lock模式的ReadWriteLock接口和ReentrantReadWriteLock类。</p>\n<p>java.util.concurrent.locks.ReadWriteLock接口的“用于读取的锁”和“用于写入的锁”是通过其他对象来实现的。获取锁和释放锁的方法：</p>\n<ul>\n<li>readLock.lock()</li>\n<li>readLock.unlock()</li>\n<li>writeLock.lock()</li>\n<li>writeLock.unlock()</li>\n</ul>\n<p>java.util.concurrent.locks.ReentrantReadWriteLock类实现了ReadWriteLock接口。ReentrantReadWriteLock类的主要特征如下：</p>\n<p><strong>公平性</strong></p>\n<p>当创建ReentrantReadWriteLock类的实例时，可以选择锁的获取顺序是否要设为公平（fair）的。如果创建的实例是公平的，那么等待时间久的线程将可以优先获取锁。</p>\n<p><strong>可重入性</strong></p>\n<p>ReentrantReadWriteLock类的锁是可重入的（reentrant）。也就是说，Reader角色的线程可以获取“用于写入的锁”，Writer角色的线程也可以获取“用于读取的锁”。</p>\n<p><strong>锁降级</strong></p>\n<p>ReentrantReadWriteLock类可以按如下顺序将“用于写入的锁”降级为“用于读取的锁”：<br>获取用于写入的锁-&gt;获取用于读取的锁-&gt;释放用于写入的锁<br>但是，“用于读取的锁”不可以升级为“用于写入的锁”。</p>\n<p><strong>便捷方法</strong></p>\n<p>ReentrantReadWriteLock类提供了获取等待中的线程的个数的方法getQueueLength，以及检查是否获取了用于写入的锁的方法isWriteLocked等便捷方法。</p>\n<h2 id=\"使用java-util-concurrent-locks\"><a href=\"#使用java-util-concurrent-locks\" class=\"headerlink\" title=\"使用java.util.concurrent.locks\"></a>使用java.util.concurrent.locks</h2><h3 id=\"Data-java\"><a href=\"#Data-java\" class=\"headerlink\" title=\"Data.java\"></a>Data.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Data</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">char</span>[] buffer;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ReentrantReadWriteLock lock = <span class=\"keyword\">new</span> ReentrantReadWriteLock(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ReadLock readLock = lock.readLock();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> WriteLock writeLock = lock.writeLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Data</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[size];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; buffer.length; i++) &#123;</span><br><span class=\"line\">            buffer[i] = <span class=\"string\">'*'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">char</span>[] read() <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        readLock.lock();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> doRead();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            readLock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        writeLock.lock();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            doWrite(c);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            writeLock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">char</span>[] doRead() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] newbuf = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[buffer.length];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; buffer.length; i++) &#123;</span><br><span class=\"line\">            newbuf[i] = buffer[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        slowly();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newbuf;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doWrite</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; buffer.length; i++) &#123;</span><br><span class=\"line\">            buffer[i] = c;</span><br><span class=\"line\">            slowly();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">slowly</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">50</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"【图解Java多线程设计模式】Read-Write Lock模式","url":"http://yoursite.com/2018/12/27/【图解Java多线程设计模式】Read-Write-Lock模式/","content":"<p>在Read-Write Lock模式中，读取操作和写入操作是分开考虑的。在执行读取操作之前，线程必须获取用于读取的锁。而在执行写入操作之前，线程必须获取用于写入的锁。<br>由于当线程执行读取操作时，实例的状态不会发生变化，所以多个线程可以同时读取。但在读取时，不可以写入。<br>当线程执行写入操作时，实例的状态就会发生变化。因此，当有一个线程正在写入时，其他线程不可以读取或写入。<br>一般来说，执行互斥处理会降低程序性能。但如果把针对写入的互斥处理和针对读取的互斥处理分开来考虑，则可以提高程序性能。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>多个线程对Data类的实例执行读写操作。</p>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"https://s1.ax1x.com/2018/12/26/F2rQ2Q.png\" alt=\"F2rQ2Q.png\"></p>\n<h3 id=\"Main-java\"><a href=\"#Main-java\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Data data = <span class=\"keyword\">new</span> Data(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ReaderThread(data).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ReaderThread(data).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ReaderThread(data).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ReaderThread(data).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ReaderThread(data).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ReaderThread(data).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> WriterThread(data, <span class=\"string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> WriterThread(data, <span class=\"string\">\"abcdefghijklmnopqrstuvwxyz\"</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Data-java\"><a href=\"#Data-java\" class=\"headerlink\" title=\"Data.java\"></a>Data.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Data</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">char</span>[] buffer;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ReadWriteLock lock = <span class=\"keyword\">new</span> ReadWriteLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Data</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[size];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; buffer.length; i++) &#123;</span><br><span class=\"line\">            buffer[i] = <span class=\"string\">'*'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">char</span>[] read() <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        lock.readLock();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> doRead();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.readUnlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        lock.writeLock();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            doWrite(c);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.writeUnlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">char</span>[] doRead() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] newbuf = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[buffer.length];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; buffer.length; i++) &#123;</span><br><span class=\"line\">            newbuf[i] = buffer[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        slowly();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newbuf;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doWrite</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; buffer.length; i++) &#123;</span><br><span class=\"line\">            buffer[i] = c;</span><br><span class=\"line\">            slowly();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">slowly</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">50</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"WriterThread-java\"><a href=\"#WriterThread-java\" class=\"headerlink\" title=\"WriterThread.java\"></a>WriterThread.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WriterThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Data data;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String filler;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WriterThread</span><span class=\"params\">(Data data, String filler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.filler = filler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> c = nextchar();</span><br><span class=\"line\">                data.write(c);</span><br><span class=\"line\">                Thread.sleep(random.nextInt(<span class=\"number\">3000</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">char</span> <span class=\"title\">nextchar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c = filler.charAt(index);</span><br><span class=\"line\">        index++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt;= filler.length()) &#123;</span><br><span class=\"line\">            index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ReaderThread-java\"><a href=\"#ReaderThread-java\" class=\"headerlink\" title=\"ReaderThread.java\"></a>ReaderThread.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReaderThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Data data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReaderThread</span><span class=\"params\">(Data data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span>[] readbuf = data.read();</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" reads \"</span> + String.valueOf(readbuf));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ReadWriteLock-java\"><a href=\"#ReadWriteLock-java\" class=\"headerlink\" title=\"ReadWriteLock.java\"></a>ReadWriteLock.java</h3><p>为了确保安全性，必须防止如下两种冲突。</p>\n<ul>\n<li>\b“读取”和“写入”的冲突（read-write conflict）</li>\n<li>“写入”和“写入”的冲突（write-write conflict）</li>\n</ul>\n<p><em>当线程想要获取用于读取的锁时：</em></p>\n<ul>\n<li>如果有线程正在执行写入，则等待。否则，会引起read-write conflict。</li>\n<li>如果有线程正在执行读取，则无需等待。read-read不会引起conflict。</li>\n</ul>\n<p><em>当线程想要获取用于写入的锁时：</em></p>\n<ul>\n<li>如果有线程正在执行写入，则等待。否则\b，会引起write-write conflict。</li>\n<li>如果有线程正在执行读取，则等待。否则，会引起read-write conflict。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReadWriteLock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> readingReaders = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> waitingWriters = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> writingWriters = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> preferWriter = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">readLock</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (writingWriters &gt; <span class=\"number\">0</span> || (preferWriter &amp;&amp; waitingWriters &gt; <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">            wait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        readingReaders++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">readUnlock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        readingReaders--;</span><br><span class=\"line\">        preferWriter = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">writeLock</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        waitingWriters++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (readingReaders &gt; <span class=\"number\">0</span> || writingWriters &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                wait();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            waitingWriters--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        writingWriters++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">writeUnlock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        writingWriters--;</span><br><span class=\"line\">        preferWriter = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread-0 reads **********</span><br><span class=\"line\">Thread-4 reads **********</span><br><span class=\"line\">Thread-5 reads **********</span><br><span class=\"line\">Thread-2 reads **********</span><br><span class=\"line\">Thread-1 reads **********</span><br><span class=\"line\">Thread-3 reads **********</span><br><span class=\"line\">Thread-2 reads AAAAAAAAAA</span><br><span class=\"line\">Thread-4 reads AAAAAAAAAA</span><br><span class=\"line\">Thread-3 reads AAAAAAAAAA</span><br><span class=\"line\">Thread-5 reads AAAAAAAAAA</span><br><span class=\"line\">Thread-0 reads AAAAAAAAAA</span><br><span class=\"line\">Thread-1 reads AAAAAAAAAA</span><br><span class=\"line\">Thread-0 reads aaaaaaaaaa</span><br><span class=\"line\">Thread-2 reads aaaaaaaaaa</span><br><span class=\"line\">Thread-1 reads aaaaaaaaaa</span><br><span class=\"line\">Thread-3 reads aaaaaaaaaa</span><br><span class=\"line\">Thread-5 reads aaaaaaaaaa</span><br><span class=\"line\">Thread-4 reads aaaaaaaaaa</span><br><span class=\"line\">Thread-0 reads aaaaaaaaaa</span><br><span class=\"line\">Thread-2 reads aaaaaaaaaa</span><br><span class=\"line\">Thread-5 reads aaaaaaaaaa</span><br><span class=\"line\">...</span><br><span class=\"line\">Thread-3 reads BBBBBBBBBB</span><br><span class=\"line\">Thread-5 reads BBBBBBBBBB</span><br><span class=\"line\">Thread-4 reads BBBBBBBBBB</span><br><span class=\"line\">Thread-2 reads BBBBBBBBBB</span><br><span class=\"line\">Thread-1 reads BBBBBBBBBB</span><br><span class=\"line\">Thread-0 reads BBBBBBBBBB</span><br><span class=\"line\">Thread-2 reads CCCCCCCCCC</span><br><span class=\"line\">Thread-0 reads CCCCCCCCCC</span><br><span class=\"line\">Thread-5 reads CCCCCCCCCC</span><br><span class=\"line\">Thread-1 reads CCCCCCCCCC</span><br><span class=\"line\">Thread-4 reads CCCCCCCCCC</span><br><span class=\"line\">Thread-3 reads CCCCCCCCCC</span><br><span class=\"line\">Thread-4 reads CCCCCCCCCC</span><br><span class=\"line\">Thread-2 reads CCCCCCCCCC</span><br><span class=\"line\">Thread-3 reads CCCCCCCCCC</span><br></pre></td></tr></table></figure>\n<h2 id=\"登场角色\"><a href=\"#登场角色\" class=\"headerlink\" title=\"登场角色\"></a>登场角色</h2><h3 id=\"Reader（读者）\"><a href=\"#Reader（读者）\" class=\"headerlink\" title=\"Reader（读者）\"></a>Reader（读者）</h3><p>Reader角色对SharedResource角色执行\bread操作。在示例程序中，由ReaderThread类扮演此角色。</p>\n<h3 id=\"Writer（写者）\"><a href=\"#Writer（写者）\" class=\"headerlink\" title=\"Writer（写者）\"></a>Writer（写者）</h3><p>Writer角色对SharedResource角色执行write操作。在示例程序中，由WriterThread类扮演此角色。</p>\n<h3 id=\"SharedResource（共享资源）\"><a href=\"#SharedResource（共享资源）\" class=\"headerlink\" title=\"SharedResource（共享资源）\"></a>SharedResource（共享资源）</h3><p>SharedResource角色表示的是Reader角色和Writer角色\b二者共享的资源。SharedResource角色提供不修改内部状态的操作（read）和修改内部状态的操作（write）。在示例程序中，由Data类扮演此角色。</p>\n<h3 id=\"ReadWriteLock（读写锁）\"><a href=\"#ReadWriteLock（读写锁）\" class=\"headerlink\" title=\"ReadWriteLock（读写锁）\"></a>ReadWriteLock（读写锁）</h3><p>ReadWriteLock角色提供了SharedResource角色实现read操作和write操作时所需的锁。即实现read操作时所需的readLock和readUnlock，以及实现write操作时所需的writeLock和writeUnlock。在示例程序中，由\bReadWriteLock类扮演此角色。</p>\n<h3 id=\"类图-1\"><a href=\"#类图-1\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"https://s1.ax1x.com/2018/12/26/F2s3WD.png\" alt=\"F2s3WD.png\"></p>\n<h3 id=\"Timethreads图\"><a href=\"#Timethreads图\" class=\"headerlink\" title=\"Timethreads图\"></a>Timethreads图</h3><h4 id=\"Reader角色正在读取，Writer角色正在等待\"><a href=\"#Reader角色正在读取，Writer角色正在等待\" class=\"headerlink\" title=\"Reader角色正在读取，Writer角色正在等待\"></a>Reader角色正在读取，Writer角色正在等待</h4><p><img src=\"https://s1.ax1x.com/2018/12/26/F2sBY8.png\" alt=\"F2sBY8.png\"></p>\n<h4 id=\"一个Writer角色正在写入，Reader角色和其他Writer角色正在等待\"><a href=\"#一个Writer角色正在写入，Reader角色和其他Writer角色正在等待\" class=\"headerlink\" title=\"一个Writer角色正在写入，Reader角色和其他Writer角色正在等待\"></a>一个Writer角色正在写入，Reader角色和其他Writer角色正在等待</h4><p><img src=\"https://s1.ax1x.com/2018/12/26/F2sDfS.png\" alt=\"F2sDfS.png\"></p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"【图解Java多线程设计模式】总结","url":"http://yoursite.com/2018/12/23/【图解Java多线程设计模式】总结/","content":"<h2 id=\"Single-Threaded-Execution模式\"><a href=\"#Single-Threaded-Execution模式\" class=\"headerlink\" title=\"Single Threaded Execution模式\"></a>Single Threaded Execution模式</h2><p><img src=\"https://s1.ax1x.com/2018/11/21/FPp6Hg.png\" alt=\"FPp6Hg.png\"></p>\n<h3 id=\"语境\"><a href=\"#语境\" class=\"headerlink\" title=\"语境\"></a>语境</h3><p>多个线程共享实例时。</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>如果各个线程都随意地改变实例状态，实例会失去安全性。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>首先，严格地规定实例的不稳定状态的范围（临界区）。接着，施加保护，确保临界区只能被一个线程执行。这样就可以确保实例的安全性。</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>Java可以使用synchronized来实现临界区。</p>\n<h2 id=\"Immutable模式\"><a href=\"#Immutable模式\" class=\"headerlink\" title=\"Immutable模式\"></a>Immutable模式</h2><p><a href=\"https://imgchr.com/i/FPpfCn\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/11/21/FPpfCn.md.png\" alt=\"FPpfCn.md.png\"></a></p>\n<h3 id=\"语境-1\"><a href=\"#语境-1\" class=\"headerlink\" title=\"语境\"></a>语境</h3><p>虽然多个线程共享了实例，但是实例的状态不会发生变化。</p>\n<h3 id=\"问题-1\"><a href=\"#问题-1\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>如果使用Single Threaded Execution模式，吞吐量会下降。</p>\n<h3 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>如果实例被创建后，状态不会发生变化，建议不要使用Single Threaded Execution模式。<br>为了防止不小心编写出改变实例状态的代码，修改代码，让线程无法改变表示实例状态的字段。另外，如果代码中有改变实例状态的方法（setter），删除它们。获取实例状态的方法（getter）则没有影响，可以存在于代码中。<br>使用Immutable模式可以提高吞吐量。但是，在整个项目周期内持续地保持类的不可变性（immutability）是非常困难的。</p>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>Java可以使用private来隐藏字段。另外，还可以使用final来确保字段无法改变。</p>\n<h2 id=\"Guarded-Suspension模式\"><a href=\"#Guarded-Suspension模式\" class=\"headerlink\" title=\"Guarded Suspension模式\"></a>Guarded Suspension模式</h2><p><img src=\"https://s1.ax1x.com/2018/11/22/FPpj81.png\" alt=\"FPpj81.png\"></p>\n<h3 id=\"语境-2\"><a href=\"#语境-2\" class=\"headerlink\" title=\"语境\"></a>语境</h3><p>多个线程共享实例时。</p>\n<h3 id=\"问题-2\"><a href=\"#问题-2\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>如果各个线程都随意地访问实例，实例会失去安全性。</p>\n<h3 id=\"解决方案-2\"><a href=\"#解决方案-2\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>如果实例的状态不正确，就让线程等待实例恢复至正确的状态。首先，用“守护条件”表示实例的“正确状态”。接着，在执行可能会导致实例失去安全性的处理之前，检查是否满足守护条件。如果不满足守护条件，则让线程等待，直至满足守护条件为止。<br>使用Guarded Suspension模式时，可以通过守护条件来控制方法的执行。但是，如果永远无法满足守护条件，那么线程会永远等待，所以可能会失去生存性。</p>\n<h3 id=\"实现-2\"><a href=\"#实现-2\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>在Java中，可以使用while语句来检查守护条件，调用wait方法来让线程等待。接着，调用notify/notifyAll方法来发送守护条件发生变化的通知。而检查和改变守护条件则可以使用Single Threaded Execution模式来实现。</p>\n<h2 id=\"Balking模式\"><a href=\"#Balking模式\" class=\"headerlink\" title=\"Balking模式\"></a>Balking模式</h2><p><img src=\"https://s1.ax1x.com/2018/11/22/FPpxv6.png\" alt=\"FPpxv6.png\"></p>\n<h3 id=\"语境-3\"><a href=\"#语境-3\" class=\"headerlink\" title=\"语境\"></a>语境</h3><p>多个线程共享实例时。</p>\n<h3 id=\"问题-3\"><a href=\"#问题-3\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>如果各个线程都随意地访问实例，实例会失去安全性。但是，如果要等待安全的时机，响应性又会下降。</p>\n<h3 id=\"解决方案-3\"><a href=\"#解决方案-3\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>当实例状态不正确时就中断处理。首先，用“守护条件”表示实例的“正确状态”。接着，在执行可能会导致实例失去安全性的处理之前，检查是否满足守护条件。只有满足守护条件时才让程序继续执行。如果不满足守护条件就中断执行，立即返回。</p>\n<h3 id=\"实现-3\"><a href=\"#实现-3\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>Java可以使用if语句来检查守护条件。这里可以使用return语句从方法中返回或是通过throw语句抛出异常来进行中断。而检查和改变守护条件则可以使用Single Threaded Execution模式来实现。</p>\n<h2 id=\"Producer-Consumer模式\"><a href=\"#Producer-Consumer模式\" class=\"headerlink\" title=\"Producer-Consumer模式\"></a>Producer-Consumer模式</h2><p><img src=\"https://s1.ax1x.com/2018/12/22/FyNsit.png\" alt=\"FyNsit.png\"></p>\n<h3 id=\"语境-4\"><a href=\"#语境-4\" class=\"headerlink\" title=\"语境\"></a>语境</h3><p>想从某个线程（Producer角色）向其他线程（Consumer角色）传递数据时。</p>\n<h3 id=\"问题-4\"><a href=\"#问题-4\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>\b如果Producer角色和Consumer角色的处理速度不一致，那么处理速度快的角色会被处理速度慢的角色拖后腿，从而导致吞吐量的下降。  另外，如果在Producer角色写数据的同时，Consumer角色去读取数据，又会失去安全性。</p>\n<h3 id=\"解决方案-4\"><a href=\"#解决方案-4\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>在Producer角色和Consumer角色之间准备一个中转站——Channel角色。接着，\b让Channel角色持有多个数据。这样，就可以缓解Producer角色与Consumer角色之间的\b处理速度差异。另外，如果在Channel角色中进行线程互斥，就不会失去数据的安全性。这样就可以既不降低吞吐量，又可以在多个线程之间安全地传递数据。</p>\n<h2 id=\"Read-Write-Lock模式\"><a href=\"#Read-Write-Lock模式\" class=\"headerlink\" title=\"Read-Write Lock模式\"></a>Read-Write Lock模式</h2><p><img src=\"https://s1.ax1x.com/2018/12/28/FW0WxH.png\" alt=\"FW0WxH.png\"></p>\n<h3 id=\"语境-5\"><a href=\"#语境-5\" class=\"headerlink\" title=\"语境\"></a>语境</h3><p>当多个线程共享了实例，且存在读取实例状态的线程（Reader角色）和改变实例状态的线程（Writer角色）时。</p>\n<h3 id=\"问题-5\"><a href=\"#问题-5\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>如果不进行线程的互斥处理将会失去安全性。但是，如果使用Single Threaded Execution模式，吞吐量又会下降。</p>\n<h3 id=\"解决方案-5\"><a href=\"#解决方案-5\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>首先将“控制Reader角色的锁”与“控制Writer角色的锁”分开，引入一个提供这两种锁的ReadWriteLock角色。ReadWriteLock角色会进行Writer角色之间的互斥处理，以及Reader角色与Writer角色之间的互斥处理。Reader角色之间即使发生冲突也不会有影响，因此无需进行互斥处理。这样，就可以既不失去安全性，又提高吞吐量。</p>\n<h3 id=\"实现-4\"><a href=\"#实现-4\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>Java可以使用finally语句块来防止忘记释放锁。</p>\n<h2 id=\"Thread-Per-Message模式\"><a href=\"#Thread-Per-Message模式\" class=\"headerlink\" title=\"Thread-Per-Message模式\"></a>Thread-Per-Message模式</h2><p><img src=\"https://s2.ax1x.com/2019/01/06/FbP7hq.png\" alt=\"FbP7hq.png\"></p>\n<h3 id=\"语境-6\"><a href=\"#语境-6\" class=\"headerlink\" title=\"语境\"></a>语境</h3><p>当线程（Client角色）要调用实例（Host角色）的方法时。</p>\n<h3 id=\"问题-6\"><a href=\"#问题-6\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>在方法的处理结束前，程序的控制权无法从Host角色中返回。如果方法的处理需要花费很长时间，响应性会下降。</p>\n<h3 id=\"解决方案-6\"><a href=\"#解决方案-6\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>在Host角色中启动一个新线程。接着，将方法需要执行的实际处理交给这个新启动的线程负责。这样，Client角色的线程就可以继续向前处理。这样修改后，可以在不改变Client角色的前提下提高响应性。</p>\n<h3 id=\"实现-5\"><a href=\"#实现-5\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>Java可以使用匿名内部类来轻松地启动新线程。</p>\n<h2 id=\"Worker-Thread模式\"><a href=\"#Worker-Thread模式\" class=\"headerlink\" title=\"Worker Thread模式\"></a>Worker Thread模式</h2><p><img src=\"https://s2.ax1x.com/2019/01/26/kulCFS.png\" alt=\"kulCFS.png\"></p>\n<h3 id=\"语境-7\"><a href=\"#语境-7\" class=\"headerlink\" title=\"语境\"></a>语境</h3><p>当线程（Client角色）要调用实例（Host角色）的方法时。</p>\n<h3 id=\"问题-7\"><a href=\"#问题-7\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>如果方法的处理需要花费很长时间，响应性会下降。如果为了提高响应性而启动了一个新的线程并让它负责方法的处理，那么吞吐量会随线程的启动时间相应下降。另外，当要发出许多请求时，许多线程会启动，容量会因此下降。</p>\n<h3 id=\"解决方案-7\"><a href=\"#解决方案-7\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>首先，启动执行处理的线程（工人线程）。接着，将代表请求的实例传递给工人线程。这样，就无需每次都启动新线程了。</p>\n<h2 id=\"Future模式\"><a href=\"#Future模式\" class=\"headerlink\" title=\"Future模式\"></a>Future模式</h2><p><img src=\"https://s2.ax1x.com/2019/01/30/k1iDQP.png\" alt=\"k1iDQP.png\"></p>\n<h3 id=\"语境-8\"><a href=\"#语境-8\" class=\"headerlink\" title=\"语境\"></a>语境</h3><p>当一个线程（Client角色）向其他线程委托了处理，而Client角色也想要获取处理结果时。</p>\n<h3 id=\"问题-8\"><a href=\"#问题-8\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>如果在委托处理时等待执行结果，响应性会下降。</p>\n<h3 id=\"解决方案-8\"><a href=\"#解决方案-8\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>首先，编写一个与处理结果具有相同接口（API）的Future角色。接着，在处理开始时返回Future角色，稍后再将处理结果设置到Future角色中。这样，Client角色就可以通过Future角色在自己觉得合适的时机获取（等待）处理结果。</p>\n<h2 id=\"Two-Phase-Termination模式\"><a href=\"#Two-Phase-Termination模式\" class=\"headerlink\" title=\"Two-Phase Termination模式\"></a>Two-Phase Termination模式</h2><p><img src=\"https://s2.ax1x.com/2019/02/02/k82GnO.png\" alt=\"k82GnO.png\"></p>\n<h3 id=\"语境-9\"><a href=\"#语境-9\" class=\"headerlink\" title=\"语境\"></a>语境</h3><p>当想要终止正在运行的线程时。</p>\n<h3 id=\"问题-9\"><a href=\"#问题-9\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>如果因为外部的原因紧急终止了线程，就会失去安全性。</p>\n<h3 id=\"解决方案-9\"><a href=\"#解决方案-9\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>首先，让即将被终止的线程自己去判断开始终止处理的时间点。为此，需要准备一个方法，来表示让该线程终止的“终止请求”。该方法执行的处理仅仅是设置“终止请求已经到来”这个闭锁。线程会在可以安全地开始终止处理之前检查该闭锁。如果检查结果是终止请求已经到来，线程就会开始执行终止处理。</p>\n<h3 id=\"实现-6\"><a href=\"#实现-6\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>Java不仅仅要设置终止请求的标志，还要使用interrupt方法来中断wait方法、sleep方法和join方法。由于线程在wait方法、sleep方法和join方法中抛出InterruptedException异常时会清除中断状态，所以在使用isInterrupted方法检查终止请求是否到来时需要格外注意。<br>当想要实现即使在运行时发生异常也能进行终止处理时，可以使用finally语句块。</p>\n<h2 id=\"Thread-Specific-Storage模式\"><a href=\"#Thread-Specific-Storage模式\" class=\"headerlink\" title=\"Thread-Specific Storage模式\"></a>Thread-Specific Storage模式</h2><p><img src=\"https://s2.ax1x.com/2019/02/13/kBSzYq.png\" alt=\"kBSzYq.png\"></p>\n<h3 id=\"语境-10\"><a href=\"#语境-10\" class=\"headerlink\" title=\"语境\"></a>语境</h3><p>当想让原本为单线程环境设计的对象（TSObject角色）运行于多线程环境时。</p>\n<h3 id=\"问题-10\"><a href=\"#问题-10\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>复用TSObject角色是非常困难的。即使是修改TSObject角色，让其可以运行于多线程环境，稍不注意还是会失去安全性和生存性。而且，可能根本就无法修改TSObject角色。另外，由于不想修改使用TSObject角色的对象（Client角色）的代码，所以也不想改变TSObject角色的接口。</p>\n<h3 id=\"解决方案-10\"><a href=\"#解决方案-10\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>创建每个线程所特有的存储空间，让存储空间与线程一一对应并进行管理。<br>首先，编写一个与TSObject角色具有相同接口的TSObjectProxy角色。另外，为了能够管理“Client角色-&gt;TSObject角色”之间的对应表，还需要编写一个TSObjectCollection角色。<br>TSObjectProxy角色使用TSObjectCollection角色来获取与当前线程对应的TSObject角色，并将处理委托给该TSObject角色。Client角色不再直接使用TSObject角色，取而代之的是TSObjectProxy角色。<br>这样修改后，一个TSObject角色一定只会被一个线程调用，因此无需在TSObject角色中进行互斥处理。关于多线程的部分被全部隐藏在了TSObjectCollection角色内部。另外，也无需改变TSObject角色的接口。<br>不过，在使用Thread-Specific Storage模式后，上下文会被隐式地引入到程序中，这会导致难以彻底地理解整体代码。</p>\n<h3 id=\"实现-7\"><a href=\"#实现-7\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>Java可以使用java.lang.ThreadLocal类来扮演TSObjectCollection角色。</p>\n<h2 id=\"Active-Object模式\"><a href=\"#Active-Object模式\" class=\"headerlink\" title=\"Active Object模式\"></a>Active Object模式</h2><p><img src=\"https://s2.ax1x.com/2019/02/16/ksR5tJ.png\" alt=\"ksR5tJ.png\"></p>\n<h3 id=\"语境-11\"><a href=\"#语境-11\" class=\"headerlink\" title=\"语境\"></a>语境</h3><p>假设现在有处理请求的线程（Client角色）和包含了处理内容的对象（Servant角色），而且Servant角色只能运行于单线程环境。</p>\n<h3 id=\"问题-11\"><a href=\"#问题-11\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>虽然多个Client角色都想要调用Servant角色，但是Servant角色并不是线程安全的。希望，即使Servant角色的处理需要很长时间，它对Client角色的响应性也不会下降。<br>处理的请求顺序和执行顺序并不一定相同。<br>处理的结果需要返回给Client角色。</p>\n<h3 id=\"解决方案-11\"><a href=\"#解决方案-11\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>需要构建一个可以接收异步消息，而且与Client运行于不同线程的主动对象。<br>首先，引入一个Scheduler角色的线程。调用Servant角色的只能是这个Scheduler角色。这是一种只有一个工人线程的Worker Thread模式。这样修改后，就可以既不用修改Servant角色去对应多线程，又可以让其可以被多个Client处理。<br>接下来需要将来自Client角色的请求实现为对Proxy角色的方法调用。Proxy角色将一个请求转换为一个对象，使用Producer-Consumer模式将其传递给Scheduler角色。这样修改后，即使Servant角色的处理需要花费很长时间，Client角色的响应性也不会下降。<br>选出下一个要执行的请求并执行——这是Scheduler角色的工作。这样修改后，Scheduler角色就可以决定请求的执行顺序了。<br>最后，使用Future模式将执行结果返回给Client角色。</p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"java.util.concurrent包和Producer-Consumer模式","url":"http://yoursite.com/2018/12/21/java-util-concurrent包和Producer-Consumer模式/","content":"<h2 id=\"java-util-concurrent包中的队列\"><a href=\"#java-util-concurrent包中的队列\" class=\"headerlink\" title=\"java.util.concurrent包中的队列\"></a>java.util.concurrent包中的队列</h2><p>java.util.concurrent包提供了BlockingQueue接口及其实现类，它们相当于Producer-Consumer模式中的Channel角色。</p>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"https://s1.ax1x.com/2018/12/21/FrTQVs.png\" alt=\"FrTQVs.png\"></p>\n<h3 id=\"BlockingQueue接口——阻塞队列\"><a href=\"#BlockingQueue接口——阻塞队列\" class=\"headerlink\" title=\"BlockingQueue接口——阻塞队列\"></a>BlockingQueue接口——阻塞队列</h3><p>BlockingQueue接口表示的是在达到合适的状态之前线程一直阻塞（wait）的队列。BlockingQueue是java.util.Queue接口的子接口，拥有offer方法和poll方法等。但实际上，实现“阻塞”功能的方法是BlockingQueue接口固有的put方法和take方法。</p>\n<h3 id=\"ArrayBlockingQueue类——基于数组的BlockingQueue\"><a href=\"#ArrayBlockingQueue类——基于数组的BlockingQueue\" class=\"headerlink\" title=\"ArrayBlockingQueue类——基于数组的BlockingQueue\"></a>ArrayBlockingQueue类——基于数组的BlockingQueue</h3><p>ArrayBlockingQueue类表示的是元素个数有最大限制的BlockingQueue。该类基于数组，当数组满了但仍要put数据时，或者数组为空但仍要take数据时，线程就会阻塞。</p>\n<h3 id=\"LinkedBlockingQueue类——基于链表的BlockingQueue\"><a href=\"#LinkedBlockingQueue类——基于链表的BlockingQueue\" class=\"headerlink\" title=\"LinkedBlockingQueue类——基于链表的BlockingQueue\"></a>LinkedBlockingQueue类——基于链表的BlockingQueue</h3><p>LinkedBlockingQueue类表示的是元素个数没有最大限制的BlockingQueue。该类基于链表，如果没有特别指定，元素个数将没有最大限制。只要还有内存，就可以put数据。</p>\n<h3 id=\"PriorityBlockingQueue类——带有优先级的BlockingQueue\"><a href=\"#PriorityBlockingQueue类——带有优先级的BlockingQueue\" class=\"headerlink\" title=\"PriorityBlockingQueue类——带有优先级的BlockingQueue\"></a>PriorityBlockingQueue类——带有优先级的BlockingQueue</h3><p>PriorityBlockingQueue类表示的是带有优先级的BlockingQueue。数据的“优先级”是依据Comparable接口的自然排序，或者构造函数的Comparator接口决定的顺序指定的。</p>\n<h3 id=\"DelayQueue类——一定时间之后才可以take的BlockingQueue\"><a href=\"#DelayQueue类——一定时间之后才可以take的BlockingQueue\" class=\"headerlink\" title=\"DelayQueue类——一定时间之后才可以take的BlockingQueue\"></a>DelayQueue类——一定时间之后才可以take的BlockingQueue</h3><p>DelayQueue类表示的是用于存储java.util.concurrent.Delayed对象的队列。当从该队列take时，只有在各元素指定的时间到期后才可以take。另外，到期时间最长的元素将先被take。</p>\n<h3 id=\"SynchronousQueue类——直接传递的BlockingQueue\"><a href=\"#SynchronousQueue类——直接传递的BlockingQueue\" class=\"headerlink\" title=\"SynchronousQueue类——直接传递的BlockingQueue\"></a>SynchronousQueue类——直接传递的BlockingQueue</h3><p>SynchronousQueue类表示的是BlockingQueue，该BlockingQueue用于执行由Producer角色到Consumer角色的“直接传递”。如果Producer角色先put，在Consumer角色take之前，Producer角色的线程将一直阻塞。相反，如果Consumer角色先take，在Producer角色put之前，Consumer角色的线程将一直阻塞。</p>\n<h3 id=\"ConcurrentLinkedQueue类——元素个数没有最大限制的线程安全队列\"><a href=\"#ConcurrentLinkedQueue类——元素个数没有最大限制的线程安全队列\" class=\"headerlink\" title=\"ConcurrentLinkedQueue类——元素个数没有最大限制的线程安全队列\"></a>ConcurrentLinkedQueue类——元素个数没有最大限制的线程安全队列</h3><p>ConcurrentLinkedQueue类并不是BlockingQueue的实现类，它表示的是元素个数没有最大限制的线程安全队列。在ConcurrentLinkedQueue中，内部的数据结构是分开的，线程之间互不影响，所以也就无需执行互斥处理。根据线程情况的不同，有时程序的性能也会有所提高。</p>\n<h2 id=\"使用java-util-concurrent-ArrayBlockingQueue\"><a href=\"#使用java-util-concurrent-ArrayBlockingQueue\" class=\"headerlink\" title=\"使用java.util.concurrent.ArrayBlockingQueue\"></a>使用java.util.concurrent.ArrayBlockingQueue</h2><p>ArrayBlockingQueue是一个泛型类，可以通过参数类型来指定队列中添加的元素类型。</p>\n<h3 id=\"Table-java\"><a href=\"#Table-java\" class=\"headerlink\" title=\"Table.java\"></a>Table.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Table</span> <span class=\"keyword\">extends</span> <span class=\"title\">ArrayBlockingQueue</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Table</span><span class=\"params\">(<span class=\"keyword\">int</span> count)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(String cake)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" puts \"</span> + cake);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.put(cake);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">take</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        String cake = <span class=\"keyword\">super</span>.take();</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" takes \"</span> + cake);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cake;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用java-util-concurrent-Exchanger类交换缓冲区\"><a href=\"#使用java-util-concurrent-Exchanger类交换缓冲区\" class=\"headerlink\" title=\"使用java.util.concurrent.Exchanger类交换缓冲区\"></a>使用java.util.concurrent.Exchanger类交换缓冲区</h2><p>使用java.util.concurrent.Exchanger类用于让两个线程安全地交换对象。</p>\n<h3 id=\"Main-java\"><a href=\"#Main-java\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Exchanger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Exchanger&lt;<span class=\"keyword\">char</span>[]&gt; exchanger = <span class=\"keyword\">new</span> Exchanger&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] buffer1 = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] buffer2 = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ProducerThread(exchanger, buffer1, <span class=\"number\">314159</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ConsumerThread(exchanger, buffer2, <span class=\"number\">265358</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ProducerThread-java\"><a href=\"#ProducerThread-java\" class=\"headerlink\" title=\"ProducerThread.java\"></a>ProducerThread.java</h3><p>ProducerThread循环执行如下操作：</p>\n<ul>\n<li>填充字符，直至缓冲区被填满</li>\n<li>使用exchange方法将填满的缓冲区传递给ConsumerThread</li>\n<li>传递缓冲区后，作为交换，接收空的缓冲区</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Exchanger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducerThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Exchanger&lt;<span class=\"keyword\">char</span>[]&gt; exchanger;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">char</span>[] buffer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">char</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Random random;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProducerThread</span><span class=\"params\">(Exchanger&lt;<span class=\"keyword\">char</span>[]&gt; exchanger, <span class=\"keyword\">char</span>[] buffer, <span class=\"keyword\">long</span> seed)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">\"ProducerThread\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.exchanger = exchanger;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.buffer = buffer;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.random = <span class=\"keyword\">new</span> Random(seed);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; buffer.length; i++) &#123;</span><br><span class=\"line\">                    buffer[i] = nextChar();</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName() + <span class=\"string\">\": \"</span> + buffer[i] + <span class=\"string\">\" -&gt; \"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">\": BEFORE exchange\"</span>);</span><br><span class=\"line\">                buffer = exchanger.exchange(buffer);</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">\": AFTER exchange\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">char</span> <span class=\"title\">nextChar</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c = (<span class=\"keyword\">char</span>)(<span class=\"string\">'A'</span> + index % <span class=\"number\">26</span>);</span><br><span class=\"line\">        index++;</span><br><span class=\"line\">        Thread.sleep(random.nextInt(<span class=\"number\">1000</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ConsumerThread-java\"><a href=\"#ConsumerThread-java\" class=\"headerlink\" title=\"ConsumerThread.java\"></a>ConsumerThread.java</h3><p>ConsumerThread循环执行如下操作：</p>\n<ul>\n<li>使用exchange方法将空的缓冲区传递给ProducerThread</li>\n<li>传递空的缓冲区后，作为交换，接收被填满字符的缓冲区</li>\n<li>使用缓冲区中的字符</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Exchanger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumerThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Exchanger&lt;<span class=\"keyword\">char</span>[]&gt; exchanger;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">char</span>[] buffer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Random random;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConsumerThread</span><span class=\"params\">(Exchanger&lt;<span class=\"keyword\">char</span>[]&gt; exchanger, <span class=\"keyword\">char</span>[] buffer, <span class=\"keyword\">long</span> seed)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">\"ConsumerThread\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.exchanger = exchanger;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.buffer = buffer;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.random = <span class=\"keyword\">new</span> Random(seed);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">\": BEFORE exchange\"</span>);</span><br><span class=\"line\">                buffer = exchanger.exchange(buffer);</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">\": AFTER exchange\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; buffer.length; i++) &#123;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName() + <span class=\"string\">\": -&gt; \"</span> + buffer[i]);</span><br><span class=\"line\">                    Thread.sleep(random.nextInt(<span class=\"number\">1000</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Timethreads图\"><a href=\"#Timethreads图\" class=\"headerlink\" title=\"Timethreads图\"></a>Timethreads图</h3><p><img src=\"https://s1.ax1x.com/2018/12/22/FyNGPx.png\" alt=\"FyNGPx.png\"></p>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ConsumerThread: BEFORE exchange</span><br><span class=\"line\">ProducerThread: A -&gt; </span><br><span class=\"line\">ProducerThread: B -&gt; </span><br><span class=\"line\">ProducerThread: C -&gt; </span><br><span class=\"line\">ProducerThread: D -&gt; </span><br><span class=\"line\">ProducerThread: E -&gt; </span><br><span class=\"line\">ProducerThread: F -&gt; </span><br><span class=\"line\">ProducerThread: G -&gt; </span><br><span class=\"line\">ProducerThread: H -&gt; </span><br><span class=\"line\">ProducerThread: I -&gt; </span><br><span class=\"line\">ProducerThread: J -&gt; </span><br><span class=\"line\">ProducerThread: BEFORE exchange</span><br><span class=\"line\">ProducerThread: AFTER exchange</span><br><span class=\"line\">ConsumerThread: AFTER exchange</span><br><span class=\"line\">ConsumerThread: -&gt; A</span><br><span class=\"line\">ConsumerThread: -&gt; B</span><br><span class=\"line\">ProducerThread: K -&gt; </span><br><span class=\"line\">ConsumerThread: -&gt; C</span><br><span class=\"line\">ProducerThread: L -&gt; </span><br><span class=\"line\">ProducerThread: M -&gt; </span><br><span class=\"line\">ConsumerThread: -&gt; D</span><br><span class=\"line\">ProducerThread: N -&gt; </span><br><span class=\"line\">ConsumerThread: -&gt; E</span><br><span class=\"line\">ProducerThread: O -&gt; </span><br><span class=\"line\">ConsumerThread: -&gt; F</span><br><span class=\"line\">ProducerThread: P -&gt; </span><br><span class=\"line\">ConsumerThread: -&gt; G</span><br><span class=\"line\">ProducerThread: Q -&gt; </span><br><span class=\"line\">ConsumerThread: -&gt; H</span><br><span class=\"line\">ProducerThread: R -&gt; </span><br><span class=\"line\">ConsumerThread: -&gt; I</span><br><span class=\"line\">ConsumerThread: -&gt; J</span><br><span class=\"line\">ConsumerThread: BEFORE exchange</span><br><span class=\"line\">ProducerThread: S -&gt; </span><br><span class=\"line\">ProducerThread: T -&gt; </span><br><span class=\"line\">ProducerThread: BEFORE exchange</span><br><span class=\"line\">ProducerThread: AFTER exchange</span><br><span class=\"line\">ConsumerThread: AFTER exchange</span><br><span class=\"line\">ConsumerThread: -&gt; K</span><br><span class=\"line\">ConsumerThread: -&gt; L</span><br><span class=\"line\">ConsumerThread: -&gt; M</span><br><span class=\"line\">ProducerThread: U -&gt; </span><br><span class=\"line\">ProducerThread: V -&gt;</span><br></pre></td></tr></table></figure>","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"Map与JavaBean之间相互转化","url":"http://yoursite.com/2018/12/17/Map与JavaBean之间相互转化/","content":"<p>反射可以操作各种不同的Java类，而内省只是通过反射来操作JavaBean的。</p>\n<p><img src=\"https://s1.ax1x.com/2018/12/17/FwoFk8.png\" alt=\"FwoFk8.png\"></p>\n<h2 id=\"内省\"><a href=\"#内省\" class=\"headerlink\" title=\"内省\"></a>内省</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">beanToMap</span><span class=\"params\">(Object bean)</span> </span>&#123;</span><br><span class=\"line\">    Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        BeanInfo beanInfo = Introspector.getBeanInfo(bean.getClass(), Object.class);</span><br><span class=\"line\">        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (PropertyDescriptor propertyDescriptor : propertyDescriptors) &#123;</span><br><span class=\"line\">            String key = propertyDescriptor.getName();</span><br><span class=\"line\">            Object value = propertyDescriptor.getReadMethod().invoke(bean);</span><br><span class=\"line\">            map.put(key, value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">mapToBean</span><span class=\"params\">(Map&lt;String, Object&gt; map, Class&lt;T&gt; beanType)</span> </span>&#123;</span><br><span class=\"line\">    T bean = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        bean = beanType.newInstance();</span><br><span class=\"line\">        BeanInfo beanInfo = Introspector.getBeanInfo(beanType, Object.class);</span><br><span class=\"line\">        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (PropertyDescriptor propertyDescriptor : propertyDescriptors) &#123;</span><br><span class=\"line\">            String key = propertyDescriptor.getName();</span><br><span class=\"line\">            Object value = map.get(key);</span><br><span class=\"line\">            propertyDescriptor.getWriteMethod().invoke(bean, value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">beanToMap</span><span class=\"params\">(Object bean)</span> </span>&#123;</span><br><span class=\"line\">    Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Class cls = bean.getClass();</span><br><span class=\"line\">        Field[] fields = cls.getDeclaredFields();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Field field : fields) &#123;</span><br><span class=\"line\">            field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            String key = field.getName();</span><br><span class=\"line\">            Object value = field.get(bean);</span><br><span class=\"line\">            map.put(key, value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">mapToBean</span><span class=\"params\">(Map&lt;String, Object&gt; map, Class&lt;T&gt; beanType)</span> </span>&#123;</span><br><span class=\"line\">    T bean = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        bean = beanType.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : map.keySet()) &#123;</span><br><span class=\"line\">            Object value = map.get(key);</span><br><span class=\"line\">            Field field = beanType.getDeclaredField(key);</span><br><span class=\"line\">            field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            field.set(bean, value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Java"],"tags":["Java"]},{"title":"InterruptedException异常","url":"http://yoursite.com/2018/12/14/InterruptedException异常/","content":"<p>如果方法后面加了throws InterruptedException，则表明该方法中（或者该方法进一步调用的方法中）可能会抛出InterruptedException异常。</p>\n<h2 id=\"加了throws-InterruptedException的方法\"><a href=\"#加了throws-InterruptedException的方法\" class=\"headerlink\" title=\"加了throws InterruptedException的方法\"></a>加了throws InterruptedException的方法</h2><p>在Java的标准类库中，加了throws InterruptedException的典型方法有如下三个：</p>\n<ul>\n<li>java.lang.Object类的wait方法</li>\n<li>java.lang.Thread类的sleep方法</li>\n<li>java.lang.Thread类的join方法</li>\n</ul>\n<h3 id=\"花费时间的方法\"><a href=\"#花费时间的方法\" class=\"headerlink\" title=\"花费时间的方法\"></a>花费时间的方法</h3><p>线程执行wait方法后，会进入等待队列，等待被notify/notifyAll。在等待期间，线程是不运行的，但需要花费时间来等待被notify/notifyAll。<br>线程执行sleep方法后，会暂停执行（暂停多长时间由参数指定）。这也是花费时间的方法。<br>线程执行join方法后，会等待指定线程终止。该方法需要花费时间，来等待指定线程终止。</p>\n<h3 id=\"可以取消的方法\"><a href=\"#可以取消的方法\" class=\"headerlink\" title=\"可以取消的方法\"></a>可以取消的方法</h3><p>花费时间的处理会降低程序的响应性，所以如果存在像下面这样可以中途停止执行（取消）的方法，就非常方便了。</p>\n<ul>\n<li>取消“wait方法等待notify/notifyAll”的处理</li>\n<li>取消“在sleep方法指定的时间内停止执行”的处理</li>\n<li>取消“join方法等待其他线程终止”的处理</li>\n</ul>\n<h2 id=\"sleep方法和interrupt方法\"><a href=\"#sleep方法和interrupt方法\" class=\"headerlink\" title=\"sleep方法和interrupt方法\"></a>sleep方法和interrupt方法</h2><p>使用的interrupt方法是Thread类的实例方法。当执行interrupt时，线程并不需要获取Thread实例的锁。无论何时，任何线程都可以调用其他线程的interrupt方法。<br>interrupt方法被调用后，正在sleep的线程会终止暂停状态，抛出InterruptedException异常。<br>这样，线程的控制权就会转移到捕捉该异常的catch语句块中。</p>\n<h2 id=\"wait方法和interrupt方法\"><a href=\"#wait方法和interrupt方法\" class=\"headerlink\" title=\"wait方法和interrupt方法\"></a>wait方法和interrupt方法</h2><p>当使用interrupt方法时，该操作意即告诉正在wait的线程“不用再等待notify/notifyAll了，从等待队列出来吧”。<br>但在wait的情况下，需要注意锁的问题。线程在进入等待队列时，已经释放了锁。当正在wait的线程被调用interrupt方法时（即线程被取消执行时），该线程会在重新获取锁之后，抛出InterruptedException异常。在获取锁之前，线程不会抛出InterruptedException异常。</p>\n<h2 id=\"join方法和interrupt方法\"><a href=\"#join方法和interrupt方法\" class=\"headerlink\" title=\"join方法和interrupt方法\"></a>join方法和interrupt方法</h2><p>由于调用join方法时无需获取锁，所以与使用sleep暂停运行时一样，线程的控制权也会立即跳到catch语句块中。</p>\n<h2 id=\"interrupt方法只是改变中断状态\"><a href=\"#interrupt方法只是改变中断状态\" class=\"headerlink\" title=\"interrupt方法只是改变中断状态\"></a>interrupt方法只是改变中断状态</h2><p>所谓中断状态（interrupted status），是一种用于表示线程是否被中断的状态。<br>interrupt方法只是改变了线程的中断状态而已。<br>当线程A执行了sleep、wait、join而停止运行时，线程B调用了A的interrupt方法。这时，线程A的确会抛出InterruptedException异常。但这其实是因为sleep、wait、join方法内部对线程的中断状态进行了检查，进而抛出了InterruptedException异常。<br>如果没有调用sleep、wait、join等方法，或者没有编写检查线程的中断状态并抛出InterruptedException异常的代码，那么InterruptedException异常就不会被抛出。</p>\n<p><img src=\"https://s1.ax1x.com/2018/12/17/F0oE24.png\" alt=\"F0oE24.png\"></p>\n<h2 id=\"isInterrupted方法——检查中断状态\"><a href=\"#isInterrupted方法——检查中断状态\" class=\"headerlink\" title=\"isInterrupted方法——检查中断状态\"></a>isInterrupted方法——检查中断状态</h2><p>isInterrupted是Thread类的实例方法，用于检查指定线程的中断状态。若指定线程处于中断状态，则返回true；若指定线程未处于中断状态（即处于非中断状态），则返回false。isInterrupted并不会改变中断状态。</p>\n<h2 id=\"Thread-interrupted方法——检查并清除中断状态\"><a href=\"#Thread-interrupted方法——检查并清除中断状态\" class=\"headerlink\" title=\"Thread.interrupted方法——检查并清除中断状态\"></a>Thread.interrupted方法——检查并清除中断状态</h2><p>Thread.interrupted是Thread类的静态方法，用于检查并清除当前线程的中断状态。若当前线程处于中断状态，则返回true；若当前线程未处于中断状态，则返回false。调用Thread.interrupted后，中断状态会被清除（线程变为非中断状态）。<br>只有这个方法才可以清除中断状态。Thread.interrupted的操作对象是当前线程（即线程本身），所以该方法并不能用于清除其他线程的中断状态。</p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"【图解Java多线程设计模式】Producer-Consumer模式","url":"http://yoursite.com/2018/11/29/【图解Java多线程设计模式】Producer-Consumer模式/","content":"<p>生产者安全地将数据交给消费者。Producer-Consumer模式在生产者和消费者之间加入了一个“桥梁角色”。该桥梁角色用于消除线程间处理速度的差异。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>有3位糕点师制作蛋糕并将其放到桌子上，然后有3位客人来吃这些蛋糕。</p>\n<h3 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h3><p><a href=\"https://imgchr.com/i/FZ98BR\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/11/28/FZ98BR.md.png\" alt=\"FZ98BR.md.png\"></a></p>\n<h3 id=\"Main-java\"><a href=\"#Main-java\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Table table = <span class=\"keyword\">new</span> Table(<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> MakerThread(<span class=\"string\">\"MakerThread-1\"</span>, table, <span class=\"number\">31415</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> MakerThread(<span class=\"string\">\"MakerThread-2\"</span>, table, <span class=\"number\">92653</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> MakerThread(<span class=\"string\">\"MakerThread-3\"</span>, table, <span class=\"number\">58979</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> EaterThread(<span class=\"string\">\"EaterThread-1\"</span>, table, <span class=\"number\">32384</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> EaterThread(<span class=\"string\">\"EaterThread-2\"</span>, table, <span class=\"number\">62643</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> EaterThread(<span class=\"string\">\"EaterThread-3\"</span>, table, <span class=\"number\">38327</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MakerThread-java\"><a href=\"#MakerThread-java\" class=\"headerlink\" title=\"MakerThread.java\"></a>MakerThread.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MakerThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Table table;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> id = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Random random;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MakerThread</span><span class=\"params\">(String name, Table table, <span class=\"keyword\">long</span> seed)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.table = table;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.random = <span class=\"keyword\">new</span> Random(seed);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                Thread.sleep(random.nextInt(<span class=\"number\">1000</span>));</span><br><span class=\"line\">                String cake = <span class=\"string\">\"[ Cake No.\"</span> + nextId() + <span class=\"string\">\" by \"</span> + getName() + <span class=\"string\">\" ]\"</span>;</span><br><span class=\"line\">                table.put(cake);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">nextId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"EaterThread-java\"><a href=\"#EaterThread-java\" class=\"headerlink\" title=\"EaterThread.java\"></a>EaterThread.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EaterThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Table table;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Random random;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EaterThread</span><span class=\"params\">(String name, Table table, <span class=\"keyword\">long</span> seed)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.table = table;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.random = <span class=\"keyword\">new</span> Random(seed);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                String cake = table.take();</span><br><span class=\"line\">                Thread.sleep(random.nextInt(<span class=\"number\">1000</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Table-java\"><a href=\"#Table-java\" class=\"headerlink\" title=\"Table.java\"></a>Table.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Table</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String[] buffer;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> head;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tail;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Table</span><span class=\"params\">(<span class=\"keyword\">int</span> count)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.buffer = <span class=\"keyword\">new</span> String[count];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.head = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tail = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(String cake)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (count &gt;= buffer.length) &#123;</span><br><span class=\"line\">            wait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" puts \"</span> + cake);</span><br><span class=\"line\">        buffer[tail] = cake;</span><br><span class=\"line\">        tail = (tail + <span class=\"number\">1</span>) % buffer.length;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> String <span class=\"title\">take</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (count &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            wait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        String cake = buffer[head];</span><br><span class=\"line\">        head = (head + <span class=\"number\">1</span>) % buffer.length;</span><br><span class=\"line\">        count--;</span><br><span class=\"line\">        notifyAll();</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" takes \"</span> + cake);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cake;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MakerThread-3 puts [ Cake No.20 by MakerThread-3 ]</span><br><span class=\"line\">EaterThread-3 takes [ Cake No.20 by MakerThread-3 ]</span><br><span class=\"line\">MakerThread-2 puts [ Cake No.21 by MakerThread-2 ]</span><br><span class=\"line\">MakerThread-1 puts [ Cake No.22 by MakerThread-1 ]</span><br><span class=\"line\">EaterThread-3 takes [ Cake No.21 by MakerThread-2 ]</span><br><span class=\"line\">EaterThread-1 takes [ Cake No.22 by MakerThread-1 ]</span><br><span class=\"line\">MakerThread-3 puts [ Cake No.23 by MakerThread-3 ]</span><br><span class=\"line\">EaterThread-2 takes [ Cake No.23 by MakerThread-3 ]</span><br><span class=\"line\">MakerThread-1 puts [ Cake No.24 by MakerThread-1 ]</span><br><span class=\"line\">MakerThread-2 puts [ Cake No.25 by MakerThread-2 ]</span><br><span class=\"line\">EaterThread-3 takes [ Cake No.24 by MakerThread-1 ]</span><br><span class=\"line\">EaterThread-3 takes [ Cake No.25 by MakerThread-2 ]</span><br><span class=\"line\">MakerThread-2 puts [ Cake No.26 by MakerThread-2 ]</span><br><span class=\"line\">MakerThread-1 puts [ Cake No.27 by MakerThread-1 ]</span><br><span class=\"line\">EaterThread-1 takes [ Cake No.26 by MakerThread-2 ]</span><br><span class=\"line\">EaterThread-2 takes [ Cake No.27 by MakerThread-1 ]</span><br><span class=\"line\">MakerThread-2 puts [ Cake No.28 by MakerThread-2 ]</span><br><span class=\"line\">EaterThread-2 takes [ Cake No.28 by MakerThread-2 ]</span><br><span class=\"line\">MakerThread-3 puts [ Cake No.29 by MakerThread-3 ]</span><br><span class=\"line\">EaterThread-3 takes [ Cake No.29 by MakerThread-3 ]</span><br><span class=\"line\">MakerThread-2 puts [ Cake No.30 by MakerThread-2 ]</span><br><span class=\"line\">EaterThread-1 takes [ Cake No.30 by MakerThread-2 ]</span><br><span class=\"line\">MakerThread-2 puts [ Cake No.31 by MakerThread-2 ]</span><br><span class=\"line\">MakerThread-1 puts [ Cake No.32 by MakerThread-1 ]</span><br><span class=\"line\">MakerThread-3 puts [ Cake No.33 by MakerThread-3 ]</span><br><span class=\"line\">EaterThread-1 takes [ Cake No.31 by MakerThread-2 ]</span><br><span class=\"line\">MakerThread-1 puts [ Cake No.34 by MakerThread-1 ]</span><br><span class=\"line\">EaterThread-2 takes [ Cake No.32 by MakerThread-1 ]</span><br><span class=\"line\">EaterThread-3 takes [ Cake No.33 by MakerThread-3 ]</span><br><span class=\"line\">MakerThread-1 puts [ Cake No.35 by MakerThread-1 ]</span><br><span class=\"line\">EaterThread-2 takes [ Cake No.34 by MakerThread-1 ]</span><br><span class=\"line\">EaterThread-1 takes [ Cake No.35 by MakerThread-1 ]</span><br><span class=\"line\">MakerThread-2 puts [ Cake No.36 by MakerThread-2 ]</span><br><span class=\"line\">EaterThread-1 takes [ Cake No.36 by MakerThread-2 ]</span><br></pre></td></tr></table></figure>\n<h2 id=\"登场角色\"><a href=\"#登场角色\" class=\"headerlink\" title=\"登场角色\"></a>登场角色</h2><h3 id=\"Data\"><a href=\"#Data\" class=\"headerlink\" title=\"Data\"></a>Data</h3><p>Data角色由Producer角色生成，供Consumer角色使用。在示例程序中，由String类扮演此角色。</p>\n<h3 id=\"Producer（生产者）\"><a href=\"#Producer（生产者）\" class=\"headerlink\" title=\"Producer（生产者）\"></a>Producer（生产者）</h3><p>Producer角色生成Data角色，并将其传递给Channel角色。在示例程序中，由MakerThread扮演此角色。</p>\n<h3 id=\"Consumer（消费者）\"><a href=\"#Consumer（消费者）\" class=\"headerlink\" title=\"Consumer（消费者）\"></a>Consumer（消费者）</h3><p>Consumer角色从Channel角色获取Data角色并使用。在示例程序中，由EaterThread扮演此角色。</p>\n<h3 id=\"Channel（通道）\"><a href=\"#Channel（通道）\" class=\"headerlink\" title=\"Channel（通道）\"></a>Channel（通道）</h3><p>Channel角色保管从Producer角色获取的Data角色，还会响应Consumer角色的请求，传递Data角色。为了确保安全性，Channel角色会对Producer角色和Consumer角色的访问执行互斥处理。<br>当Producer角色将Data角色传递给Channel角色时，如果Channel角色的状态不适合接收Data角色，那么Producer角色将一直等待，直至Channel角色的状态变为可以接收为止。<br>当Consumer角色从Channel角色获取Data角色时，如果Channel角色中没有可以传递的Data角色，那么Consumer角色将一直等待，直至Channel的状态变为可以传递Data角色为止。<br>在示例程序中，由Table类扮演此角色。</p>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><a href=\"https://imgchr.com/i/Fu1WQS\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/12/02/Fu1WQS.md.png\" alt=\"Fu1WQS.md.png\"></a></p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"超时","url":"http://yoursite.com/2018/11/22/超时/","content":"<p>介于“直接balk并返回”和“等待到守护条件成立为止”这两种极端的处理方法之间，还有一种处理方法，那就是“在守护条件成立之前等待一段时间”。在守护条件成立之前等待一段时间，如果到时条件还未成立，则直接balk。将这种处理称为guarded timed或timeout。</p>\n<h2 id=\"wait何时终止\"><a href=\"#wait何时终止\" class=\"headerlink\" title=\"wait何时终止\"></a>wait何时终止</h2><p>在调用Java的wait方法时，可以传入参数，以指定超过时间。<br>线程进入obj的等待队列，停止运行，并释放持有的obj锁。当下列情况发生时，线程便会退出等待队列。</p>\n<h3 id=\"notify方法执行时\"><a href=\"#notify方法执行时\" class=\"headerlink\" title=\"notify方法执行时\"></a>notify方法执行时</h3><p>即obj的notify方法被执行后，线程被唤醒了的情况。<br>但当等待队列中有多个等待线程时，只能有一个线程被唤醒。到底唤醒哪一个线程，Java规范中并没有明确规定。</p>\n<h3 id=\"notifyAll方法执行时\"><a href=\"#notifyAll方法执行时\" class=\"headerlink\" title=\"notifyAll方法执行时\"></a>notifyAll方法执行时</h3><p>即obj的notifyAll方法被执行了的情况。<br>notifyAll会唤醒实例的等待队列中的所有线程。不管是notify，还是notifyAll，线程被唤醒后，都必须重新获取obj的锁。</p>\n<h3 id=\"interrupt方法执行时\"><a href=\"#interrupt方法执行时\" class=\"headerlink\" title=\"interrupt方法执行时\"></a>interrupt方法执行时</h3><p>即线程的interrupt方法被执行了的情况。<br>当被interrupt时，等待队列中的线程（与被notify、notifyAll时一样）会重新获取obj的锁，然后抛出InterruptedException异常。<br>notify和notifyAll这两个方法是用于调用实例的，而interrupt方法是用于调用线程的。</p>\n<h3 id=\"超时发生时\"><a href=\"#超时发生时\" class=\"headerlink\" title=\"超时发生时\"></a>超时发生时</h3><p>即wait方法的参数中指定的超时时间到期的情况。<br>与被notify、notifyAll时一样，这时也要重新获取obj的锁。</p>\n<h2 id=\"guarded-timed的实现\"><a href=\"#guarded-timed的实现\" class=\"headerlink\" title=\"guarded timed的实现\"></a>guarded timed的实现</h2><p>使用wait方法来实现guarded timed。超时异常使用java.util.concurrent.TimeoutException。</p>\n<h3 id=\"Host-java\"><a href=\"#Host-java\" class=\"headerlink\" title=\"Host.java\"></a>Host.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeoutException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Host</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> ready = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Host</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.timeout = timeout;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">setExecutable</span><span class=\"params\">(<span class=\"keyword\">boolean</span> on)</span> </span>&#123;</span><br><span class=\"line\">        ready = on;</span><br><span class=\"line\">        notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException, TimeoutException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!ready) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> now = System.currentTimeMillis();</span><br><span class=\"line\">            <span class=\"keyword\">long</span> rest = timeout - (now - start);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rest &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> TimeoutException(<span class=\"string\">\"now - start = \"</span> + (now - start) + <span class=\"string\">\", timeout = \"</span> + timeout);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            wait(rest);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        doExecute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doExecute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" calls doExecute\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Main-java\"><a href=\"#Main-java\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeoutException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Host host = <span class=\"keyword\">new</span> Host(<span class=\"number\">10000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"execute BEGIN\"</span>);</span><br><span class=\"line\">            host.execute();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (TimeoutException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execute BEGIN</span><br><span class=\"line\">java.util.concurrent.TimeoutException: now - start = 10004, timeout = 10000</span><br><span class=\"line\">\tat Host.execute(Host.java:24)</span><br><span class=\"line\">\tat Main.main(Main.java:10)</span><br></pre></td></tr></table></figure>\n<h2 id=\"java-util-concurrent中的超时\"><a href=\"#java-util-concurrent中的超时\" class=\"headerlink\" title=\"java.util.concurrent中的超时\"></a>java.util.concurrent中的超时</h2><p>java.util.concurrent包中提供了如下两个用于超时处理的方法。</p>\n<h3 id=\"通过异常通知超时\"><a href=\"#通过异常通知超时\" class=\"headerlink\" title=\"通过异常通知超时\"></a>通过异常通知超时</h3><p>当发生超时抛出异常时，返回值并不适合用于表示超时，需要使用java.util.concurrent.TimeoutException异常。</p>\n<ol>\n<li>java.util.concurrent.Future接口的get方法</li>\n<li>java.util.concurrent.Exchanger类的exchange方法</li>\n<li>java.util.concurrent.Cyclicarrier类的await方法</li>\n<li>java.util.concurrent.CountDownLatch类的await方法</li>\n</ol>\n<h3 id=\"通过返回值通知超时\"><a href=\"#通过返回值通知超时\" class=\"headerlink\" title=\"通过返回值通知超时\"></a>通过返回值通知超时</h3><p>当执行多次try时，则不使用异常，而是使用返回值来表示超时。</p>\n<ol>\n<li>java.util.concurrent.BlockingQueue接口</li>\n<li>java.util.concurrent.Semaphore类</li>\n<li>java.util.concurrent.locks.lock接口</li>\n</ol>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"【图解Java多线程设计模式】Balking模式","url":"http://yoursite.com/2018/11/21/【图解Java多线程设计模式】Balking模式/","content":"<p>如果现在不适合执行这个操作，或者没必要执行这个操作，就停止处理，直接返回。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>定期将当前数据内容写入文件中。当数据内容被写入时，会完全覆盖上次写入的内容，只有最新的内容才会被保存。</p>\n<h3 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h3><p><a href=\"https://imgchr.com/i/F9dQ39\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/11/20/F9dQ39.md.png\" alt=\"F9dQ39.md.png\"></a></p>\n<h3 id=\"Data-java\"><a href=\"#Data-java\" class=\"headerlink\" title=\"Data.java\"></a>Data.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Writer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Data</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String filename;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String content;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> changed;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Data</span><span class=\"params\">(String filename, String content)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.filename = filename;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.content = content;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.changed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">change</span><span class=\"params\">(String newContent)</span> </span>&#123;</span><br><span class=\"line\">        content = newContent;</span><br><span class=\"line\">        changed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!changed) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        doSave();</span><br><span class=\"line\">        changed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doSave</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" calls doSave, content = \"</span> + content);</span><br><span class=\"line\">        Writer writer = <span class=\"keyword\">new</span> FileWriter(filename);</span><br><span class=\"line\">        writer.write(content);</span><br><span class=\"line\">        writer.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"SaverThread-java\"><a href=\"#SaverThread-java\" class=\"headerlink\" title=\"SaverThread.java\"></a>SaverThread.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SaverThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Data data;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SaverThread</span><span class=\"params\">(String name, Data data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                data.save();</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ChangerThread-java\"><a href=\"#ChangerThread-java\" class=\"headerlink\" title=\"ChangerThread.java\"></a>ChangerThread.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChangerThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Data data;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChangerThread</span><span class=\"params\">(String name, Data data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; ; i++) &#123;</span><br><span class=\"line\">                data.change(<span class=\"string\">\"No.\"</span> + i);</span><br><span class=\"line\">                Thread.sleep(random.nextInt(<span class=\"number\">1000</span>));</span><br><span class=\"line\">                data.save();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Main-java\"><a href=\"#Main-java\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Data data = <span class=\"keyword\">new</span> Data(<span class=\"string\">\"data.txt\"</span>, <span class=\"string\">\"(empty)\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ChangerThread(<span class=\"string\">\"ChangerThread\"</span>, data).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> SaverThread(<span class=\"string\">\"SaverThread\"</span>, data).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SaverThread calls <span class=\"keyword\">do</span>Save, content = No.0</span><br><span class=\"line\">SaverThread calls <span class=\"keyword\">do</span>Save, content = No.1</span><br><span class=\"line\">ChangerThread calls <span class=\"keyword\">do</span>Save, content = No.2</span><br><span class=\"line\">SaverThread calls <span class=\"keyword\">do</span>Save, content = No.3</span><br><span class=\"line\">ChangerThread calls <span class=\"keyword\">do</span>Save, content = No.4</span><br><span class=\"line\">SaverThread calls <span class=\"keyword\">do</span>Save, content = No.5</span><br><span class=\"line\">ChangerThread calls <span class=\"keyword\">do</span>Save, content = No.6</span><br><span class=\"line\">SaverThread calls <span class=\"keyword\">do</span>Save, content = No.7</span><br><span class=\"line\">ChangerThread calls <span class=\"keyword\">do</span>Save, content = No.8</span><br><span class=\"line\">SaverThread calls <span class=\"keyword\">do</span>Save, content = No.9</span><br><span class=\"line\">ChangerThread calls <span class=\"keyword\">do</span>Save, content = No.10</span><br><span class=\"line\">SaverThread calls <span class=\"keyword\">do</span>Save, content = No.11</span><br></pre></td></tr></table></figure>\n<h2 id=\"登场角色\"><a href=\"#登场角色\" class=\"headerlink\" title=\"登场角色\"></a>登场角色</h2><h3 id=\"GuardedObject（被防护的对象）\"><a href=\"#GuardedObject（被防护的对象）\" class=\"headerlink\" title=\"GuardedObject（被防护的对象）\"></a>GuardedObject（被防护的对象）</h3><p>GuardedObject角色是一个拥有被防护的方法（guardedMethod）的类。当线程执行guardedMethod方法时，若守护条件成立，则执行实际的处理。而当守护条件不成立时，则不执行实际的处理，直接返回。守护条件的成立与否，会随着GuardedObject角色的状态变化而发生变化。<br>除了guardedMethod之外，GuardedObject角色还有可能有其他来改变状态的方法（stateChangingMethod）。<br>在示例程序中，由Data类扮演此角色。save方法对应的是guardedMethod，change方法对应的则是stateChangingMethod。</p>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><a href=\"https://imgchr.com/i/F9wA8H\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/11/20/F9wA8H.md.png\" alt=\"F9wA8H.md.png\"></a></p>\n<h3 id=\"Timethreads图\"><a href=\"#Timethreads图\" class=\"headerlink\" title=\"Timethreads图\"></a>Timethreads图</h3><p><a href=\"https://imgchr.com/i/F9wE2d\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/11/20/F9wE2d.md.png\" alt=\"F9wE2d.md.png\"></a></p>\n<h2 id=\"balk结果的表示方式\"><a href=\"#balk结果的表示方式\" class=\"headerlink\" title=\"balk结果的表示方式\"></a>balk结果的表示方式</h2><p>当从guardedMethod方法中balk并返回时，balk结果的表示方式有如下几种。</p>\n<h3 id=\"忽略balk\"><a href=\"#忽略balk\" class=\"headerlink\" title=\"忽略balk\"></a>忽略balk</h3><p>最简单的方式就是不通知调用端“发生了balk”。</p>\n<h3 id=\"通过返回值来表示balk\"><a href=\"#通过返回值来表示balk\" class=\"headerlink\" title=\"通过返回值来表示balk\"></a>通过返回值来表示balk</h3><p>有时会通过boolean类型的值来表示balk。例如，若返回值为true，则表明未发生balk，处理被执行了，而如果为false，则表明发生了balk，处理并未被执行。<br>返回值为引用类型的方法有时也会用null来表示“发生了balk”。</p>\n<h3 id=\"通过异常来表示balk的发生\"><a href=\"#通过异常来表示balk的发生\" class=\"headerlink\" title=\"通过异常来表示balk的发生\"></a>通过异常来表示balk的发生</h3><p>有时也可以通过异常来表示“发生了balk”。即，当balk发生时，程序并不是从方法中return，而是抛出异常。</p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"【图解Java多线程设计模式】Guarded Suspension模式","url":"http://yoursite.com/2018/11/15/【图解Java多线程设计模式】Guarded-Suspension模式/","content":"<p>如果执行现在的处理会造成问题，就让执行处理的线程进行等待。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>一个线程（ClientThread）会将请求（Request）的实例传递给另一个线程（ServerThread），这是一种最简单的线程间通信。</p>\n<h3 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h3><p><a href=\"https://imgchr.com/i/ijy1bT\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/11/14/ijy1bT.md.png\" alt=\"ijy1bT.md.png\"></a></p>\n<h3 id=\"Request-java\"><a href=\"#Request-java\" class=\"headerlink\" title=\"Request.java\"></a>Request.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Request</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Request</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"[ Request \"</span> + name + <span class=\"string\">\" ]\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"RequestQueue-java\"><a href=\"#RequestQueue-java\" class=\"headerlink\" title=\"RequestQueue.java\"></a>RequestQueue.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Queue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestQueue</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Queue&lt;Request&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">putRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</span><br><span class=\"line\">        queue.offer(request);</span><br><span class=\"line\">        notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> Request <span class=\"title\">getRequest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (queue.peek() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> queue.remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ClientThread-java\"><a href=\"#ClientThread-java\" class=\"headerlink\" title=\"ClientThread.java\"></a>ClientThread.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClientThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RequestQueue requestQueue;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Random random;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClientThread</span><span class=\"params\">(RequestQueue requestQueue, String name, <span class=\"keyword\">long</span> seed)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.requestQueue = requestQueue;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.random = <span class=\"keyword\">new</span> Random(seed);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">            Request request = <span class=\"keyword\">new</span> Request(<span class=\"string\">\"No.\"</span> + i);</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" requests \"</span> + request);</span><br><span class=\"line\">            requestQueue.putRequest(request);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(random.nextInt(<span class=\"number\">1000</span>));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ServerThread-java\"><a href=\"#ServerThread-java\" class=\"headerlink\" title=\"ServerThread.java\"></a>ServerThread.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServerThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RequestQueue requestQueue;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Random random;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ServerThread</span><span class=\"params\">(RequestQueue requestQueue, String name, <span class=\"keyword\">long</span> seed)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.requestQueue = requestQueue;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.random = <span class=\"keyword\">new</span> Random(seed);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">            Request request = requestQueue.getRequest();</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" handles \"</span> + request);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(random.nextInt(<span class=\"number\">1000</span>));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Main-java\"><a href=\"#Main-java\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        RequestQueue requestQueue = <span class=\"keyword\">new</span> RequestQueue();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ClientThread(requestQueue, <span class=\"string\">\"Alice\"</span>, <span class=\"number\">3141592L</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ServerThread(requestQueue, <span class=\"string\">\"Bobby\"</span>, <span class=\"number\">6535897L</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Alice requests [ Request No.0 ]</span><br><span class=\"line\">Bobby handles [ Request No.0 ]</span><br><span class=\"line\">Alice requests [ Request No.1 ]</span><br><span class=\"line\">Alice requests [ Request No.2 ]</span><br><span class=\"line\">Bobby handles [ Request No.1 ]</span><br><span class=\"line\">Bobby handles [ Request No.2 ]</span><br><span class=\"line\">Alice requests [ Request No.3 ]</span><br><span class=\"line\">Bobby handles [ Request No.3 ]</span><br><span class=\"line\">Alice requests [ Request No.4 ]</span><br><span class=\"line\">Bobby handles [ Request No.4 ]</span><br><span class=\"line\">Alice requests [ Request No.5 ]</span><br><span class=\"line\">Alice requests [ Request No.6 ]</span><br><span class=\"line\">Bobby handles [ Request No.5 ]</span><br><span class=\"line\">Bobby handles [ Request No.6 ]</span><br></pre></td></tr></table></figure>\n<h2 id=\"登场角色\"><a href=\"#登场角色\" class=\"headerlink\" title=\"登场角色\"></a>登场角色</h2><h3 id=\"GuardedObject（被守护的对象）\"><a href=\"#GuardedObject（被守护的对象）\" class=\"headerlink\" title=\"GuardedObject（被守护的对象）\"></a>GuardedObject（被守护的对象）</h3><p>GuardedObject角色是一个持有被守护的方法（guardedMethod）的类。当线程执行guardedMethod方法时，若守护条件成立，则可以立即执行；当守护条件不成立时，就要进行等待。守护条件的成立与否会随着GuardedObject角色的状态不同而发生变化。<br>除了guardedMethod之外，GuardedObject角色还有可能持有其他改变实例状态（特别是改变守护条件）的方法（stateChangingMethod）。<br>在Java中，guardedMethod通过while语句和wait方法来实现，stateChangingMethod则通过notify/notifyAll方法来实现。<br>在示例程序中，由RequestQueue类扮演此角色。getRequest方法对应guardedMethod，putRequest方法则对应stateChangingMethod。</p>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><a href=\"https://imgchr.com/i/ivXEWj\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/11/15/ivXEWj.md.png\" alt=\"ivXEWj.md.png\"></a></p>\n<h3 id=\"Timethreads图\"><a href=\"#Timethreads图\" class=\"headerlink\" title=\"Timethreads图\"></a>Timethreads图</h3><p><a href=\"https://imgchr.com/i/ivXeln\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/11/15/ivXeln.md.png\" alt=\"ivXeln.md.png\"></a></p>\n<h2 id=\"使用java-util-concurrent-LinkedBlockingQueue\"><a href=\"#使用java-util-concurrent-LinkedBlockingQueue\" class=\"headerlink\" title=\"使用java.util.concurrent.LinkedBlockingQueue\"></a>使用java.util.concurrent.LinkedBlockingQueue</h2><h3 id=\"RequestQueue-java-1\"><a href=\"#RequestQueue-java-1\" class=\"headerlink\" title=\"RequestQueue.java\"></a>RequestQueue.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.BlockingQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.LinkedBlockingQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestQueue</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> BlockingQueue&lt;Request&gt; queue = <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">putRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            queue.put(request);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Request <span class=\"title\">getRequest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Request request = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            request = queue.take();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> request;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"类图-1\"><a href=\"#类图-1\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><a href=\"https://imgchr.com/i/izCUNq\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/11/17/izCUNq.md.png\" alt=\"izCUNq.md.png\"></a></p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"集合类与多线程","url":"http://yoursite.com/2018/11/13/集合类与多线程/","content":"<h2 id=\"非线程安全的java-util-ArrayList类\"><a href=\"#非线程安全的java-util-ArrayList类\" class=\"headerlink\" title=\"非线程安全的java.util.ArrayList类\"></a>非线程安全的java.util.ArrayList类</h2><h3 id=\"Main-java\"><a href=\"#Main-java\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> WriterThread(list).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ReaderThread(list).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"WriterThread-java\"><a href=\"#WriterThread-java\" class=\"headerlink\" title=\"WriterThread.java\"></a>WriterThread.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WriterThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;Integer&gt; list;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WriterThread</span><span class=\"params\">(List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">\"WriterThread\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.list = list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; ; i++) &#123;</span><br><span class=\"line\">            list.add(i);</span><br><span class=\"line\">            list.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ReaderThread-java\"><a href=\"#ReaderThread-java\" class=\"headerlink\" title=\"ReaderThread.java\"></a>ReaderThread.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReaderThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;Integer&gt; list;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReaderThread</span><span class=\"params\">(List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">\"ReaderThread\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.list = list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> n : list) &#123;</span><br><span class=\"line\">                System.out.println(n);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"result\"><a href=\"#result\" class=\"headerlink\" title=\"result\"></a>result</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">\"ReaderThread\"</span> java.util.ConcurrentModificationException</span><br><span class=\"line\">\tat java.util.ArrayList<span class=\"variable\">$Itr</span>.checkForComodification(ArrayList.java:901)</span><br><span class=\"line\">\tat java.util.ArrayList<span class=\"variable\">$Itr</span>.next(ArrayList.java:851)</span><br><span class=\"line\">\tat ReaderThread.run(ReaderThread.java:13)</span><br></pre></td></tr></table></figure>\n<h2 id=\"利用Collections-synchronizedList方法所进行的同步\"><a href=\"#利用Collections-synchronizedList方法所进行的同步\" class=\"headerlink\" title=\"利用Collections.synchronizedList方法所进行的同步\"></a>利用Collections.synchronizedList方法所进行的同步</h2><h3 id=\"Main-java-1\"><a href=\"#Main-java-1\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> List&lt;Integer&gt; list = Collections.synchronizedList(<span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">        <span class=\"keyword\">new</span> WriterThread(list).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ReaderThread(list).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ReaderThread-java-1\"><a href=\"#ReaderThread-java-1\" class=\"headerlink\" title=\"ReaderThread.java\"></a>ReaderThread.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReaderThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;Integer&gt; list;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReaderThread</span><span class=\"params\">(List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">\"ReaderThread\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.list = list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>(list) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> n : list) &#123;</span><br><span class=\"line\">                    System.out.println(n);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用copy-on-write的java-util-concurrent-CopyOnWriteArrayList类\"><a href=\"#使用copy-on-write的java-util-concurrent-CopyOnWriteArrayList类\" class=\"headerlink\" title=\"使用copy-on-write的java.util.concurrent.CopyOnWriteArrayList类\"></a>使用copy-on-write的java.util.concurrent.CopyOnWriteArrayList类</h2><h3 id=\"Main-java-2\"><a href=\"#Main-java-2\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> List&lt;Integer&gt; list = <span class=\"keyword\">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> WriterThread(list).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ReaderThread(list).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h3><p>使用copy-on-write时，每次执行“写”操作都会执行复制。因此，程序频繁执行“写”操作时，如果使用CopyOnWriteArrayList，会比较花费时间。但如果写操作比较少，而读操作频率非常高时，使用CopyOnWriteArrayList是非常棒的。</p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"【图解Java多线程设计模式】Immutable模式","url":"http://yoursite.com/2018/11/12/【图解Java多线程设计模式】Immutable模式/","content":"<p>Immutable模式中存在着确保实例状态不发生改变的类（immutable类）。在访问这些实例时并不需要执行耗时的互斥处理，能提高程序性能。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"Person-java\"><a href=\"#Person-java\" class=\"headerlink\" title=\"Person.java\"></a>Person.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String address;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, String address)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.address = address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAddress</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"[ Person: name = \"</span> + name + <span class=\"string\">\", address = \"</span> + address + <span class=\"string\">\" ]\"</span>;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Main-java\"><a href=\"#Main-java\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Person alice = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Alice\"</span>, <span class=\"string\">\"Alaska\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> PrintPersonThread(alice).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> PrintPersonThread(alice).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> PrintPersonThread(alice).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"PrintPersonThread-java\"><a href=\"#PrintPersonThread-java\" class=\"headerlink\" title=\"PrintPersonThread.java\"></a>PrintPersonThread.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintPersonThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Person person;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PrintPersonThread</span><span class=\"params\">(Person person)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.person = person;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" prints \"</span> + person);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"登场角色\"><a href=\"#登场角色\" class=\"headerlink\" title=\"登场角色\"></a>登场角色</h2><h3 id=\"Immutable（不可变的）\"><a href=\"#Immutable（不可变的）\" class=\"headerlink\" title=\"Immutable（不可变的）\"></a>Immutable（不可变的）</h3><p>Immutable角色是一个类，在这个角色中，字段的值不可以修改，也不存在修改字段内容的方法。Immutable角色的实例被创建后，状态将不再发生变化。这时，无需对Immutable角色应用Single Threaded Execution模式。也就是说，无需将Immutable角色的方法声明为synchronized。在示例程序中，由Person类扮演此角色。</p>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><a href=\"https://imgchr.com/i/iOAuUP\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/11/12/iOAuUP.md.png\" alt=\"iOAuUP.md.png\"></a></p>\n<h3 id=\"Timethreads图\"><a href=\"#Timethreads图\" class=\"headerlink\" title=\"Timethreads图\"></a>Timethreads图</h3><p><a href=\"https://imgchr.com/i/iOAK4f\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/11/12/iOAK4f.md.png\" alt=\"iOAK4f.md.png\"></a></p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"计数信号量","url":"http://yoursite.com/2018/11/06/计数信号量/","content":"<p>Semaphore的acquire方法用于确保存在可用资源。当存在可用资源时，线程会立即从acquire方法返回，同时信号量内部的资源个数会减1.如无可用资源，线程则阻塞在acquire方法内，直至出现可用资源。<br>Semaphore的release方法用于释放资源。释放资源后，信号量内部的资源个数会增加1。另外，如果acquire中存在等待的线程，</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>多个线程使用数量有限的资源。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Semaphore;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        BoundedResource resource = <span class=\"keyword\">new</span> BoundedResource(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> UserThread(resource).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> BoundedResource resource;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Random random = <span class=\"keyword\">new</span> Random(<span class=\"number\">26535</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserThread</span><span class=\"params\">(BoundedResource resource)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.resource = resource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                resource.use();</span><br><span class=\"line\">                Thread.sleep(random.nextInt(<span class=\"number\">3000</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BoundedResource</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> permits;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Semaphore semaphore;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Random random = <span class=\"keyword\">new</span> Random(<span class=\"number\">314159</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BoundedResource</span><span class=\"params\">(<span class=\"keyword\">int</span> permits)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.semaphore = <span class=\"keyword\">new</span> Semaphore(permits);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.permits = permits;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">use</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        semaphore.acquire();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            doUse();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            semaphore.release();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doUse</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Log.println(<span class=\"string\">\"BEGIN: used = \"</span> + (permits - semaphore.availablePermits()));</span><br><span class=\"line\">        Thread.sleep(random.nextInt(<span class=\"number\">500</span>));</span><br><span class=\"line\">        Log.println(<span class=\"string\">\"END: used = \"</span> + (permits - semaphore.availablePermits()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Log</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">\": \"</span> + s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread-0: BEGIN: used = 1</span><br><span class=\"line\">Thread-1: BEGIN: used = 2</span><br><span class=\"line\">Thread-2: BEGIN: used = 3</span><br><span class=\"line\">Thread-1: END: used = 3</span><br><span class=\"line\">Thread-3: BEGIN: used = 3</span><br><span class=\"line\">Thread-3: END: used = 3</span><br><span class=\"line\">Thread-4: BEGIN: used = 3</span><br><span class=\"line\">Thread-2: END: used = 3</span><br><span class=\"line\">Thread-5: BEGIN: used = 3</span><br><span class=\"line\">Thread-4: END: used = 3</span><br><span class=\"line\">Thread-6: BEGIN: used = 3</span><br><span class=\"line\">Thread-6: END: used = 3</span><br><span class=\"line\">Thread-7: BEGIN: used = 3</span><br><span class=\"line\">Thread-0: END: used = 3</span><br><span class=\"line\">Thread-8: BEGIN: used = 3</span><br><span class=\"line\">Thread-5: END: used = 3</span><br><span class=\"line\">Thread-9: BEGIN: used = 3</span><br><span class=\"line\">Thread-8: END: used = 3</span><br><span class=\"line\">Thread-9: END: used = 2</span><br><span class=\"line\">Thread-1: BEGIN: used = 2</span><br></pre></td></tr></table></figure>","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"【图解Java多线程设计模式】Single Threaded Execution模式","url":"http://yoursite.com/2018/11/01/【图解Java多线程设计模式】Single-Threaded-Execution模式/","content":"<p>所谓Single Threaded Execution模式，意即“以一个线程执行”。该模式用于设置限制，以确保同一时间内只能让一个线程执行处理。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>模拟三个人频繁地通过一个只允许一个人经过的门的情形。当人们通过门的时候，统计人数便会递增。另外，还会记录通行者的“姓名与出生地”。</p>\n<h3 id=\"Main-java\"><a href=\"#Main-java\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Testing Gate, hit CTRL+C to exit.\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        Gate gate = <span class=\"keyword\">new</span> Gate();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> UserThread(gate, <span class=\"string\">\"Alice\"</span>, <span class=\"string\">\"Alaska\"</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> UserThread(gate, <span class=\"string\">\"Bobby\"</span>, <span class=\"string\">\"Brazil\"</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> UserThread(gate, <span class=\"string\">\"Chris\"</span>, <span class=\"string\">\"Canada\"</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"UserThread-java\"><a href=\"#UserThread-java\" class=\"headerlink\" title=\"UserThread.java\"></a>UserThread.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Gate gate;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String myname;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String myaddress;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserThread</span><span class=\"params\">(Gate gate, String name, String address)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.gate = gate;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.myname = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.myaddress = address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(myname + <span class=\"string\">\" BEGIN\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            gate.pass(myname, myaddress);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Gate-java\"><a href=\"#Gate-java\" class=\"headerlink\" title=\"Gate.java\"></a>Gate.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gate</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name = <span class=\"string\">\"Nobody\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String address = <span class=\"string\">\"Nowhere\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">pass</span><span class=\"params\">(String name, String address)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.counter++;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.address = address;</span><br><span class=\"line\">        check();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">check</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name.charAt(<span class=\"number\">0</span>) != address.charAt(<span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"***** BROKEN ***** \"</span> + toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"No.\"</span> + counter + <span class=\"string\">\": \"</span> + name + <span class=\"string\">\", \"</span> + address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"登场角色\"><a href=\"#登场角色\" class=\"headerlink\" title=\"登场角色\"></a>登场角色</h2><h3 id=\"SharedResource（共享资源）\"><a href=\"#SharedResource（共享资源）\" class=\"headerlink\" title=\"SharedResource（共享资源）\"></a>SharedResource（共享资源）</h3><p>Single Threaded Execution模式中出现了一个发挥SharedResource（共享资源）作用的类。在示例中，由Gate类扮演SharedResource角色。</p>\n<p>SharedResource角色是可被多个线程访问的类，包含很多方法，但这些方法主要分为如下两类。</p>\n<ol>\n<li>safeMethod：多个线程同时调用也不会发生问题的方法。</li>\n<li>unsafeMethod：多个线程同时调用会发生问题，因此必须加以保护的方法。</li>\n</ol>\n<p>Single Threaded Execution模式会保护unsafeMethod，使其同时只能由一个线程访问。Java则是通过将unsafeMethod声明为synchronized方法来进行保护。</p>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><a href=\"https://imgchr.com/i/iW8HPg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/10/31/iW8HPg.md.png\" alt=\"iW8HPg.md.png\"></a></p>\n<h3 id=\"Timethreads图\"><a href=\"#Timethreads图\" class=\"headerlink\" title=\"Timethreads图\"></a>Timethreads图</h3><p><a href=\"https://imgchr.com/i/iW8Lxs\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/10/31/iW8Lxs.md.png\" alt=\"iW8Lxs.md.png\"></a></p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"线程的协作","url":"http://yoursite.com/2018/10/30/线程的协作/","content":"<h2 id=\"等待队列\"><a href=\"#等待队列\" class=\"headerlink\" title=\"等待队列\"></a>等待队列</h2><p>所有实例都拥有一个等待队列，它是在实例的wait方法执行后停止操作的线程的队列。当下列任意一种情况发生时，线程便会退出等待队列。</p>\n<ol>\n<li>有其他线程的notify方法来唤醒线程</li>\n<li>有其他线程的notifyAll方法来唤醒线程</li>\n<li>有其他线程的interrupt方法来唤醒线程</li>\n<li>wait方法超时</li>\n</ol>\n<h2 id=\"wait方法——将线程放入等待队列\"><a href=\"#wait方法——将线程放入等待队列\" class=\"headerlink\" title=\"wait方法——将线程放入等待队列\"></a>wait方法——将线程放入等待队列</h2><p>获取了锁的线程A执行wait方法。</p>\n<p><a href=\"https://imgchr.com/i/iRmHYt\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/10/30/iRmHYt.md.png\" alt=\"iRmHYt.md.png\"></a></p>\n<p>线程A进入等待队列，释放锁。</p>\n<p><a href=\"https://imgchr.com/i/iRmLSf\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/10/30/iRmLSf.md.png\" alt=\"iRmLSf.md.png\"></a></p>\n<p>线程B能够获取锁。</p>\n<p><a href=\"https://imgchr.com/i/iRmOl8\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/10/30/iRmOl8.md.png\" alt=\"iRmOl8.md.png\"></a></p>\n<h2 id=\"notify方法——从等待队列中取出线程\"><a href=\"#notify方法——从等待队列中取出线程\" class=\"headerlink\" title=\"notify方法——从等待队列中取出线程\"></a>notify方法——从等待队列中取出线程</h2><p>获取了锁的线程B执行notify方法。</p>\n<p><a href=\"https://imgchr.com/i/iRmzwj\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/10/30/iRmzwj.md.png\" alt=\"iRmzwj.md.png\"></a></p>\n<p>线程A退出等待队列，想要进入wait的下一个操作，但刚才执行notify的线程B仍持有着锁。</p>\n<p><a href=\"https://imgchr.com/i/iRnSTs\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/10/30/iRnSTs.md.png\" alt=\"iRnSTs.md.png\"></a></p>\n<p>刚才执行notify的线程B释放了锁。</p>\n<p><a href=\"https://imgchr.com/i/iRnFpV\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/10/30/iRnFpV.md.png\" alt=\"iRnFpV.md.png\"></a></p>\n<p>退出等待队列的线程A获取锁，执行wait的下一个操作。</p>\n<p><a href=\"https://imgchr.com/i/iRnEXF\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/10/30/iRnEXF.md.png\" alt=\"iRnEXF.md.png\"></a></p>\n<h2 id=\"notifyAll方法——从等待队列中取出所有线程\"><a href=\"#notifyAll方法——从等待队列中取出所有线程\" class=\"headerlink\" title=\"notifyAll方法——从等待队列中取出所有线程\"></a>notifyAll方法——从等待队列中取出所有线程</h2><p>notifyAll方法唤醒所有线程，并让所有线程都退出等待队列。</p>\n<p><a href=\"https://imgchr.com/i/iRnukR\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/10/30/iRnukR.md.png\" alt=\"iRnukR.md.png\"></a></p>\n<p>由于notify唤醒的线程较少，所以处理速度要比使用notifyAll时快。<br>但使用notify时，如果处理不好，程序便可能会停止。一般来说，使用notifyAll时的代码要比使用notify时的更为健壮。</p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"线程的互斥","url":"http://yoursite.com/2018/10/30/线程的互斥/","content":"<p>Java使用关键字synchronized来执行线程的互斥处理。</p>\n<h2 id=\"synchronized方法\"><a href=\"#synchronized方法\" class=\"headerlink\" title=\"synchronized方法\"></a>synchronized方法</h2><p>如果声明一个方法时，在前面加上关键字synchronized，那么这个方法就只能由一个线程运行。这种方法称为synchronized方法，有时也成为同步方法。</p>\n<h3 id=\"Bank-java\"><a href=\"#Bank-java\" class=\"headerlink\" title=\"Bank.java\"></a>Bank.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bank</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> money;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Bank</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> money)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.money = money;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">deposit</span><span class=\"params\">(<span class=\"keyword\">int</span> m)</span> </span>&#123;</span><br><span class=\"line\">        money += m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">boolean</span> <span class=\"title\">withdraw</span><span class=\"params\">(<span class=\"keyword\">int</span> m)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (money &gt;= m) &#123;</span><br><span class=\"line\">            money -= m;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>synchronized方法每次只能由一个线程运行。</p>\n<p><a href=\"https://imgchr.com/i/i2UK8e\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/10/29/i2UK8e.md.png\" alt=\"i2UK8e.md.png\"></a></p>\n<p>线程运行完synchronized方法deposit后，释放锁。</p>\n<p><a href=\"https://imgchr.com/i/i2U8bt\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/10/29/i2U8bt.md.png\" alt=\"i2U8bt.md.png\"></a></p>\n<p>获取锁的另一个线程开始运行synchronized方法。</p>\n<p><a href=\"https://imgchr.com/i/i2Ud2Q\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/10/29/i2Ud2Q.md.png\" alt=\"i2Ud2Q.md.png\"></a></p>\n<h2 id=\"synchronized实例方法和synchronized代码块\"><a href=\"#synchronized实例方法和synchronized代码块\" class=\"headerlink\" title=\"synchronized实例方法和synchronized代码块\"></a>synchronized实例方法和synchronized代码块</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//synchronized实例方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//synchronized代码块</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>synchronized实例方法是使用this的锁来执行线程的互斥处理的。</p>\n<h2 id=\"synchronized静态方法和synchronized代码块\"><a href=\"#synchronized静态方法和synchronized代码块\" class=\"headerlink\" title=\"synchronized静态方法和synchronized代码块\"></a>synchronized静态方法和synchronized代码块</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//synchronized静态方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Something</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//synchronized代码块</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Something</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(Something.class) &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>synchronized静态方法是使用该类的类对象的锁来执行线程的互斥处理的。</p>\n","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"线程的启动","url":"http://yoursite.com/2018/10/29/线程的启动/","content":"<h2 id=\"利用Thread类的子类\"><a href=\"#利用Thread类的子类\" class=\"headerlink\" title=\"利用Thread类的子类\"></a>利用Thread类的子类</h2><p>创建Thread类的子类，创建子类的实例，调用start方法。</p>\n<h3 id=\"PrintThread-java\"><a href=\"#PrintThread-java\" class=\"headerlink\" title=\"PrintThread.java\"></a>PrintThread.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String message;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PrintThread</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">            System.out.print(message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Main-java\"><a href=\"#Main-java\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> PrintThread(<span class=\"string\">\"Good!\"</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> PrintThread(<span class=\"string\">\"Nice!\"</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"利用Runnable接口\"><a href=\"#利用Runnable接口\" class=\"headerlink\" title=\"利用Runnable接口\"></a>利用Runnable接口</h2><p>创建Runnable接口的实现类，将实现类的实例作为参数传给Thread的构造函数，调用start方法。</p>\n<h3 id=\"Printer-java\"><a href=\"#Printer-java\" class=\"headerlink\" title=\"Printer.java\"></a>Printer.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Printer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String message;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Printer</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">            System.out.print(message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Main-java-1\"><a href=\"#Main-java-1\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Printer(<span class=\"string\">\"Good!\"</span>)).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Printer(<span class=\"string\">\"Nice!\"</span>)).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>java.util.concurrent包中包含一个将线程创建抽象化的ThreadFactory接口。利用该接口，可以将以Runnable作为传入参数并通过new创建Thread实例的处理隐藏在ThreadFactory内部。</p>\n<h3 id=\"Main-java-2\"><a href=\"#Main-java-2\" class=\"headerlink\" title=\"Main.java\"></a>Main.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ThreadFactory factory = Executors.defaultThreadFactory();</span><br><span class=\"line\">        factory.newThread(<span class=\"keyword\">new</span> Printer(<span class=\"string\">\"Good!\"</span>)).start();</span><br><span class=\"line\">        factory.newThread(<span class=\"keyword\">new</span> Printer(<span class=\"string\">\"Nice!\"</span>)).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Multithread"],"tags":["Java","Multithread"]},{"title":"Downloader Middleware Demo","url":"http://yoursite.com/2018/10/12/Downloader-Middleware-Demo/","content":"<h2 id=\"核心方法\"><a href=\"#核心方法\" class=\"headerlink\" title=\"核心方法\"></a>核心方法</h2><p>每个Downloader Middleware都定义了一个或多个方法的类，核心的方法有如下三个。</p>\n<ol>\n<li>process_request(request, spider)</li>\n<li>process_response(request, response, spider)</li>\n<li>process_exception(request, exception, spider)</li>\n</ol>\n<h3 id=\"process-request\"><a href=\"#process-request\" class=\"headerlink\" title=\"process_request\"></a>process_request</h3><p>Request被Scrapy引擎调度给Downloader之前，process_request()方法就会被调用，也就是在Request从队列里调度出来到Downloader下载执行之前，我们都可以用process_request()方法对Request进行处理。方法的返回值必须为None、Response对象、Request对象之一，或者抛出IgnoreRequest异常。</p>\n<p>process_request()方法的参数有如下两个。</p>\n<ol>\n<li>request，是Request对象，即被处理的Request。</li>\n<li>spider，是Spider对象，即此Request对应的Spider。</li>\n</ol>\n<h3 id=\"process-response\"><a href=\"#process-response\" class=\"headerlink\" title=\"process_response\"></a>process_response</h3><p>Downloader执行Request下载之后，会得到对应的Response。Scrapy引擎便会将Response发送给Spider进行解析。在发送之前，我们都可以用process_response()方法来对Response进行处理。方法的返回值必须为Request对象、Response对象之一，或者抛出IgnoreRequest异常。</p>\n<p>process_response()方法的参数有如下三个。</p>\n<ol>\n<li>request，是Request对象，即此Response对应的Request。</li>\n<li>response，是Response对象，即此被处理的Response。</li>\n<li>spider，是Spider对象，即此Response对应的Spider。</li>\n</ol>\n<h3 id=\"process-exception\"><a href=\"#process-exception\" class=\"headerlink\" title=\"process_exception\"></a>process_exception</h3><p>当Downloader或process_request()方法抛出异常时，例如抛出IgnoreRequest异常，process_exception()方法就会被调用。方法的返回值必须为None、Response对象、Request对象之一。 </p>\n<p>process_exception()方法的参数有如下三个。</p>\n<ol>\n<li>request，是Request对象，即产生异常的Request。</li>\n<li>exception，是Exception对象，即抛出的异常。</li>\n<li>spider，是Spider对象，即Request对应的Spider。</li>\n</ol>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>利用process_request()方法设置随机的User-Agent，使用process_response()方法修改Response的状态码。</p>\n<h3 id=\"Httpbin-py\"><a href=\"#Httpbin-py\" class=\"headerlink\" title=\"Httpbin.py\"></a>Httpbin.py</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpbinSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></span><br><span class=\"line\">    name = <span class=\"string\">'Httpbin'</span></span><br><span class=\"line\">    allowed_domains = [<span class=\"string\">'httpbin.org'</span>]</span><br><span class=\"line\">    start_urls = [<span class=\"string\">'http://httpbin.org/get'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></span><br><span class=\"line\">        self.logger.debug(response.text)</span><br><span class=\"line\">        self.logger.debug(<span class=\"string\">'Status Code: '</span> + str(response.status))</span><br></pre></td></tr></table></figure>\n<h3 id=\"middlewares-py\"><a href=\"#middlewares-py\" class=\"headerlink\" title=\"middlewares.py\"></a>middlewares.py</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomUserAgentMiddleware</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.user_agents = [</span><br><span class=\"line\">            <span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.1.1 Safari/605.1.15\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_request</span><span class=\"params\">(self, request, spider)</span>:</span></span><br><span class=\"line\">        request.headers[<span class=\"string\">'User-Agent'</span>] = random.choice(self.user_agents)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_response</span><span class=\"params\">(self, request, response, spider)</span>:</span></span><br><span class=\"line\">        response.status = <span class=\"number\">201</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br></pre></td></tr></table></figure>\n<h3 id=\"settings-py\"><a href=\"#settings-py\" class=\"headerlink\" title=\"settings.py\"></a>settings.py</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class=\"line\">    <span class=\"string\">'httpbin.middlewares.RandomUserAgentMiddleware'</span>: <span class=\"number\">543</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"result\"><a href=\"#result\" class=\"headerlink\" title=\"result\"></a>result</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"args\"</span>: &#123;&#125;, </span><br><span class=\"line\">  <span class=\"string\">\"headers\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"Accept\"</span>: <span class=\"string\">\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\"</span>, </span><br><span class=\"line\">    <span class=\"string\">\"Accept-Encoding\"</span>: <span class=\"string\">\"gzip,deflate\"</span>, </span><br><span class=\"line\">    <span class=\"string\">\"Accept-Language\"</span>: <span class=\"string\">\"en\"</span>, </span><br><span class=\"line\">    <span class=\"string\">\"Connection\"</span>: <span class=\"string\">\"close\"</span>, </span><br><span class=\"line\">    <span class=\"string\">\"Host\"</span>: <span class=\"string\">\"httpbin.org\"</span>, </span><br><span class=\"line\">    <span class=\"comment\"># \"User-Agent\": \"Scrapy/1.5.0 (+https://scrapy.org)\"</span></span><br><span class=\"line\">    <span class=\"string\">\"User-Agent\"</span>: <span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36\"</span></span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  <span class=\"string\">\"origin\"</span>: <span class=\"string\">\"218.82.103.201\"</span>, </span><br><span class=\"line\">  <span class=\"string\">\"url\"</span>: <span class=\"string\">\"http://httpbin.org/get\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Status Code: 201</span><br></pre></td></tr></table></figure>","categories":["Web Crawler"],"tags":["Python","Web Crawler"]},{"title":"Scrapy","url":"http://yoursite.com/2018/10/09/Scrapy/","content":"<h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><ol>\n<li>Engine: 引擎，处理整个系统的数据流处理、触发事务，是整个框架的核心。</li>\n<li>Item: 项目，它定义了爬取结果的数据结构，爬取的数据会被赋值成该Item对象。</li>\n<li>Scheduler: 调度器，接受引擎发过来的请求并将其加入队列中，在引擎再次请求的时候将请求提供给引擎。</li>\n<li>Downloader: 下载器，下载网页内容，并将网页内容返回给蜘蛛。</li>\n<li>Spiders: 蜘蛛，其内定义了爬取的逻辑和网页的解析规则，它主要负责解析响应并生成提取结果和新的请求。</li>\n<li>Item Pipeline: 项目管道，负责处理由蜘蛛从网页中抽取的项目，它的主要任务是清洗、验证和存储数据。</li>\n<li>Downloader Middlewares: 下载器中间件，位于引擎和下载器之间的钩子框架，主要处理引擎与下载器之间的请求及响应。</li>\n<li>Spider Middlewares: 蜘蛛中间件，位于引擎和蜘蛛之间的钩子框架，主要处理蜘蛛输入的响应和输出的结果及新的请求。</li>\n</ol>\n<p><a href=\"https://imgchr.com/i/iJWWFA\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/10/08/iJWWFA.png\" alt=\"iJWWFA.png\"></a></p>\n<h2 id=\"数据流\"><a href=\"#数据流\" class=\"headerlink\" title=\"数据流\"></a>数据流</h2><p>Scrapy中的数据流由引擎控制，数据流的过程如下:</p>\n<ol>\n<li>Engine首先打开一个网站，找到处理该网站的Spider，并向该Spider请求第一个要爬取的URL。 </li>\n<li>Engine从Spider中获取到第一个要爬取的URL，并通过Scheduler以Request的形式调度。</li>\n<li>Engine向Scheduler请求下一个要爬取的URL。</li>\n<li>Scheduler返回下一个要爬取的URL给Engine，Engine将URL通过Downloader Middlewares转发给Downloader下载。</li>\n<li>一旦页面下载完毕，Downloader生成该页面的Response，并将其通过Downloader Middlewares发送给Engine。</li>\n<li>Engine从下载器中接收到Response，并将其通过Spider Middlewares发送给Spider处理。</li>\n<li>Spider处理Response，并返回爬取到的Item及新的Request给Engine。</li>\n<li>Engine将Spider返回的Item给Item Pipeline，将新的Request给Scheduler。</li>\n<li>重复第2步到第8步，直到Scheduler中没有更多的Request，Engine关闭该网站，爬取结束。<br>通过多个组件的相互协作、不同组件完成工作的不同、组件对异步处理的支持，Scrapy最大限度地利用了网络带宽，大大提高了数据爬取和处理的效率。</li>\n</ol>\n<h2 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h2><ol>\n<li>scrapy.cfg: 它是Scrapy项目的配置文件，其内定义了项目的配置文件路径、部署相关信息等内容。</li>\n<li>items.py: 它定义Item数据结构，所有的Item的定义都可以放这里。</li>\n<li>pipelines.py: 它定义Item Pipeline的实现，所有的Item Pipeline的实现都可以放这里。 </li>\n<li>settings.py: 它定义项目的全局配置。</li>\n<li>middlewares.py: 它定义Spider Middlewares和Downloader Middlewares的实现。</li>\n<li>spiders: 其内包含一个个Spider的实现，每个Spider都有一个文件。</li>\n</ol>\n","categories":["Web Crawler"],"tags":["Python","Web Crawler"]},{"title":"Pyspider","url":"http://yoursite.com/2018/09/30/Pyspider/","content":"<p>pyspider的架构主要分为Scheduler(调度器)、Fetcher(抓取器)、Processer(处理器)三个部分，整个爬取过程受到Monitor(监控器)的监控，抓取的结果被Result Worker(结果处理器)处理.</p>\n<p>Scheduler发起任务调度，Fetcher负责抓取网页内容，Processer负责解析网页内容，然后将新生成的Request发给Scheduler进行调度，将生成的提取结果输出保存。</p>\n<p><a href=\"https://imgchr.com/i/ilsPPJ\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/09/29/ilsPPJ.png\" alt=\"ilsPPJ.png\"></a></p>\n<p>pyspider的任务执行流程的逻辑很清晰，具体过程如下所示。</p>\n<ol>\n<li>每个pyspider的项目对应一个Python脚本，该脚本中定义了一个Handler类，它有一个on_start()方法。爬取首先调用on_start()方法生成最初的抓取任务，然后发送给 Scheduler进行调度。</li>\n<li>Scheduler将抓取任务分发给Fetcher进行抓取，Fetcher执行并得到响应，随后将响应发送给Processer。</li>\n<li>Processer处理响应并提取出新的URL生成新的抓取任务，然后通过消息队列的方式通知Scheduler当前抓取任务执行情况，并将新生成的抓取任务发送给Scheduler。如果生成了新的提取结果，则将其发送到结果队列等待Result Worker处理。</li>\n<li>Scheduler接收到新的抓取任务，然后查询数据库，判断其如果是新的抓取任务或者是需要重试的任务就继续进行调度，然后将其发送回Fetcher进行抓取。</li>\n<li>不断重复以上工作，直到所有的任务都执行完毕，抓取结束。</li>\n<li>抓取结束后，程序会回调on_finished()方法，这里可以定义后处理过程。</li>\n</ol>\n","categories":["Web Crawler"],"tags":["Python","Web Crawler"]},{"title":"Proxy","url":"http://yoursite.com/2018/09/15/Proxy/","content":"<p>设置代理后测试的网址是：<a href=\"http://httpbin.org/get\" target=\"_blank\" rel=\"noopener\">httpbin.org/get</a>，访问该网址可以得到请求的相关信息，其中origin宇段就是客户端的IP，可以根据它来判断代理是否设置成功，即是否成功伪装了IP。</p>\n<h2 id=\"urllib\"><a href=\"#urllib\" class=\"headerlink\" title=\"urllib\"></a>urllib</h2><h3 id=\"HTTP代理\"><a href=\"#HTTP代理\" class=\"headerlink\" title=\"HTTP代理\"></a>HTTP代理</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> urllib.request <span class=\"keyword\">import</span> ProxyHandler, build_opener</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib.error <span class=\"keyword\">import</span> URLError</span><br><span class=\"line\"></span><br><span class=\"line\">proxy = <span class=\"string\">\"127.0.0.1:1087\"</span></span><br><span class=\"line\">proxy_handler = ProxyHandler(&#123;</span><br><span class=\"line\">    <span class=\"string\">'http'</span>: <span class=\"string\">\"http://\"</span> + proxy,</span><br><span class=\"line\">    <span class=\"string\">'https'</span>: <span class=\"string\">\"https://\"</span> + proxy</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">opener = build_opener(proxy_handler)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    response = opener.open(<span class=\"string\">\"http://httpbin.org/get\"</span>)</span><br><span class=\"line\">    print(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"><span class=\"keyword\">except</span> URLError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    print(e.reason)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#   \"args\": &#123;&#125;, </span></span><br><span class=\"line\"><span class=\"comment\">#   \"headers\": &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#     \"Accept-Encoding\": \"identity\", </span></span><br><span class=\"line\"><span class=\"comment\">#     \"Connection\": \"close\", </span></span><br><span class=\"line\"><span class=\"comment\">#     \"Host\": \"httpbin.org\", </span></span><br><span class=\"line\"><span class=\"comment\">#     \"User-Agent\": \"Python-urllib/3.7\"</span></span><br><span class=\"line\"><span class=\"comment\">#   &#125;, </span></span><br><span class=\"line\"><span class=\"comment\">#   \"origin\": \"38.141.44.98\", </span></span><br><span class=\"line\"><span class=\"comment\">#   \"url\": \"http://httpbin.org/get\"</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"SOCKS5代理\"><a href=\"#SOCKS5代理\" class=\"headerlink\" title=\"SOCKS5代理\"></a>SOCKS5代理</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib.error <span class=\"keyword\">import</span> URLError</span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> socks</span><br><span class=\"line\"></span><br><span class=\"line\">socks.set_default_proxy(socks.SOCKS5, <span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">1086</span>)</span><br><span class=\"line\">socket.socket = socks.socksocket</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    response = request.urlopen(<span class=\"string\">\"http://httpbin.org/get\"</span>)</span><br><span class=\"line\">    print(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"><span class=\"keyword\">except</span> URLError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    print(e.reason)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#   \"args\": &#123;&#125;, </span></span><br><span class=\"line\"><span class=\"comment\">#   \"headers\": &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#     \"Accept-Encoding\": \"identity\", </span></span><br><span class=\"line\"><span class=\"comment\">#     \"Connection\": \"close\", </span></span><br><span class=\"line\"><span class=\"comment\">#     \"Host\": \"httpbin.org\", </span></span><br><span class=\"line\"><span class=\"comment\">#     \"User-Agent\": \"Python-urllib/3.7\"</span></span><br><span class=\"line\"><span class=\"comment\">#   &#125;, </span></span><br><span class=\"line\"><span class=\"comment\">#   \"origin\": \"38.141.44.98\", </span></span><br><span class=\"line\"><span class=\"comment\">#   \"url\": \"http://httpbin.org/get\"</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"requests\"><a href=\"#requests\" class=\"headerlink\" title=\"requests\"></a>requests</h2><h3 id=\"HTTP代理-1\"><a href=\"#HTTP代理-1\" class=\"headerlink\" title=\"HTTP代理\"></a>HTTP代理</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">proxy = <span class=\"string\">\"127.0.0.1:1087\"</span></span><br><span class=\"line\">proxies = &#123;</span><br><span class=\"line\">    <span class=\"string\">'http'</span>: <span class=\"string\">\"http://\"</span> + proxy,</span><br><span class=\"line\">    <span class=\"string\">'https'</span>: <span class=\"string\">\"https://\"</span> + proxy</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    response = requests.get(<span class=\"string\">\"http://httpbin.org/get\"</span>, proxies=proxies)</span><br><span class=\"line\">    print(response.text)</span><br><span class=\"line\"><span class=\"keyword\">except</span> requests.ConnectionError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    print(<span class=\"string\">\"Error\"</span>, e.args)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#   \"args\": &#123;&#125;, </span></span><br><span class=\"line\"><span class=\"comment\">#   \"headers\": &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#     \"Accept\": \"*/*\", </span></span><br><span class=\"line\"><span class=\"comment\">#     \"Accept-Encoding\": \"gzip, deflate\", </span></span><br><span class=\"line\"><span class=\"comment\">#     \"Connection\": \"close\", </span></span><br><span class=\"line\"><span class=\"comment\">#     \"Host\": \"httpbin.org\", </span></span><br><span class=\"line\"><span class=\"comment\">#     \"User-Agent\": \"python-requests/2.19.1\"</span></span><br><span class=\"line\"><span class=\"comment\">#   &#125;, </span></span><br><span class=\"line\"><span class=\"comment\">#   \"origin\": \"38.141.44.98\", </span></span><br><span class=\"line\"><span class=\"comment\">#   \"url\": \"http://httpbin.org/get\"</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"SOCKS5代理-1\"><a href=\"#SOCKS5代理-1\" class=\"headerlink\" title=\"SOCKS5代理\"></a>SOCKS5代理</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">proxy = <span class=\"string\">\"127.0.0.1:1086\"</span></span><br><span class=\"line\">proxies = &#123;</span><br><span class=\"line\">    <span class=\"string\">'http'</span>: <span class=\"string\">\"socks5://\"</span> + proxy,</span><br><span class=\"line\">    <span class=\"string\">'https'</span>: <span class=\"string\">\"socks5://\"</span> + proxy</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    response = requests.get(<span class=\"string\">\"http://httpbin.org/get\"</span>, proxies=proxies)</span><br><span class=\"line\">    print(response.text)</span><br><span class=\"line\"><span class=\"keyword\">except</span> requests.ConnectionError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    print(<span class=\"string\">\"Error\"</span>, e.args)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#   \"args\": &#123;&#125;, </span></span><br><span class=\"line\"><span class=\"comment\">#   \"headers\": &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#     \"Accept\": \"*/*\", </span></span><br><span class=\"line\"><span class=\"comment\">#     \"Accept-Encoding\": \"gzip, deflate\", </span></span><br><span class=\"line\"><span class=\"comment\">#     \"Connection\": \"close\", </span></span><br><span class=\"line\"><span class=\"comment\">#     \"Host\": \"httpbin.org\", </span></span><br><span class=\"line\"><span class=\"comment\">#     \"User-Agent\": \"python-requests/2.19.1\"</span></span><br><span class=\"line\"><span class=\"comment\">#   &#125;, </span></span><br><span class=\"line\"><span class=\"comment\">#   \"origin\": \"38.141.44.98\", </span></span><br><span class=\"line\"><span class=\"comment\">#   \"url\": \"http://httpbin.org/get\"</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Selenium\"><a href=\"#Selenium\" class=\"headerlink\" title=\"Selenium\"></a>Selenium</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"></span><br><span class=\"line\">proxy = <span class=\"string\">\"127.0.0.1:1087\"</span></span><br><span class=\"line\">chrome_options = webdriver.ChromeOptions()</span><br><span class=\"line\">chrome_options.add_argument(<span class=\"string\">\"--proxy-server=http://\"</span> + proxy)</span><br><span class=\"line\">browser = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class=\"line\">browser.get(<span class=\"string\">\"http://httpbin.org/get\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#   \"args\": &#123;&#125;, </span></span><br><span class=\"line\"><span class=\"comment\">#   \"headers\": &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#     \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\", </span></span><br><span class=\"line\"><span class=\"comment\">#     \"Accept-Encoding\": \"gzip, deflate\", </span></span><br><span class=\"line\"><span class=\"comment\">#     \"Accept-Language\": \"en-us\", </span></span><br><span class=\"line\"><span class=\"comment\">#     \"Connection\": \"close\", </span></span><br><span class=\"line\"><span class=\"comment\">#     \"Cookie\": \"aaa=111; undefined=undefined; _gauges_unique=1; _gauges_unique_month=1; _gauges_unique_year=1\", </span></span><br><span class=\"line\"><span class=\"comment\">#     \"Dnt\": \"1\", </span></span><br><span class=\"line\"><span class=\"comment\">#     \"Host\": \"httpbin.org\", </span></span><br><span class=\"line\"><span class=\"comment\">#     \"Upgrade-Insecure-Requests\": \"1\", </span></span><br><span class=\"line\"><span class=\"comment\">#     \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.1.1 Safari/605.1.15\"</span></span><br><span class=\"line\"><span class=\"comment\">#   &#125;, </span></span><br><span class=\"line\"><span class=\"comment\">#   \"origin\": \"218.82.103.201\", </span></span><br><span class=\"line\"><span class=\"comment\">#   \"url\": \"http://httpbin.org/get\"</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br></pre></td></tr></table></figure>","categories":["Web Crawler"],"tags":["Python","Web Crawler"]},{"title":"Cookiejar Demo","url":"http://yoursite.com/2018/08/15/Cookiejar-Demo/","content":"<p>如果希望登录状态一直保持，则需要进行Cookie处理。进行Cookie处理的一种常用思路如下：</p>\n<ol>\n<li>导入Cookie处理模块http.cookiejar</li>\n<li>使用http.cookiejar.CookieJar()创建CookieJar对象</li>\n<li>使用HTTPCookieProcessor创建cookie处理器，并以其为参数构建opener对象</li>\n<li>创建全局默认的opener对象</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.parse</span><br><span class=\"line\"><span class=\"keyword\">import</span> http.cookiejar</span><br><span class=\"line\"></span><br><span class=\"line\">url1 = <span class=\"string\">\"http://bbs.chinaunix.net/member.php?mod=logging&amp;action=login&amp;loginsubmit=yes&amp;loginhash=LhGEr\"</span></span><br><span class=\"line\">postdata = urllib.parse.urlencode(&#123;</span><br><span class=\"line\">    <span class=\"string\">\"username\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"password\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">&#125;).encode(<span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\">req = urllib.request.Request(url1, postdata)</span><br><span class=\"line\">req.add_header(<span class=\"string\">\"User-Agent\"</span>, <span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/604.4.7 (KHTML, like Gecko) Version/11.0.2 Safari/604.4.7\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用http.cookiejar.CookieJar()创建CookieJar对象</span></span><br><span class=\"line\">cjar = http.cookiejar.CookieJar()</span><br><span class=\"line\"><span class=\"comment\"># 使用HTTPCookieProcessor创建cookie处理器，并以其为参数构建opener对象</span></span><br><span class=\"line\">cookie = urllib.request.HTTPCookieProcessor(cjar)</span><br><span class=\"line\">opener = urllib.request.build_opener(cookie)</span><br><span class=\"line\"><span class=\"comment\"># 将opener安装为全局</span></span><br><span class=\"line\">urllib.request.install_opener(opener)</span><br><span class=\"line\"></span><br><span class=\"line\">data1 = opener.open(req).read()</span><br><span class=\"line\">file1 = open(<span class=\"string\">\"/Users/matianyao/Desktop/login.html\"</span>, <span class=\"string\">\"wb\"</span>)</span><br><span class=\"line\">file1.write(data1)</span><br><span class=\"line\">file1.close()</span><br><span class=\"line\"></span><br><span class=\"line\">url2 = <span class=\"string\">\"http://bbs.chinaunix.net\"</span></span><br><span class=\"line\">data2 = urllib.request.urlopen(url2).read()</span><br><span class=\"line\">file2 = open(<span class=\"string\">\"/Users/matianyao/Desktop/crawler.html\"</span>, <span class=\"string\">\"wb\"</span>)</span><br><span class=\"line\">file2.write(data2)</span><br><span class=\"line\">file2.close()</span><br></pre></td></tr></table></figure>","categories":["Web Crawler"],"tags":["Python","Web Crawler"]},{"title":"Regular Expression","url":"http://yoursite.com/2018/08/14/Regular-Expression/","content":"<p>正则表达式就是描述字符串排列的一套规则。</p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"原子\"><a href=\"#原子\" class=\"headerlink\" title=\"原子\"></a>原子</h3><p>原子是正则表达式中最基本的组成单位，每个正则表达式中至少要包含一个原子，常见的原子有以下几类：</p>\n<ol>\n<li>普通字符</li>\n<li>非打印字符</li>\n<li>通用字符</li>\n<li>原子表</li>\n</ol>\n<h4 id=\"普通字符\"><a href=\"#普通字符\" class=\"headerlink\" title=\"普通字符\"></a>普通字符</h4><p>可以使用一些普通的字符，比如数字、大小写字母、下划线等都可以作为原子使用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">pattern = <span class=\"string\">\"yue\"</span></span><br><span class=\"line\">string = <span class=\"string\">\"http://yum.iqianyue.com\"</span></span><br><span class=\"line\">result = re.search(pattern, string)</span><br><span class=\"line\">print(result)</span><br><span class=\"line\"><span class=\"comment\"># &lt;re.Match object; span=(16, 19), match='yue'&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"非打印字符\"><a href=\"#非打印字符\" class=\"headerlink\" title=\"非打印字符\"></a>非打印字符</h4><p>所谓的非打印字符，指的是一些在字符串中用于格式控制的符号，比如换行符等。<br><a href=\"https://imgchr.com/i/Pgf3o6\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/08/13/Pgf3o6.png\" alt=\"Pgf3o6.png\"></a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">pattern = <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">string1 = <span class=\"string\">'''http://yum.iqianyue.com</span></span><br><span class=\"line\"><span class=\"string\">http://baidu.com'''</span></span><br><span class=\"line\">result1 = re.search(pattern, string1)</span><br><span class=\"line\">print(result1)</span><br><span class=\"line\"><span class=\"comment\"># &lt;re.Match object; span=(23, 24), match='\\n'&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">string2 = <span class=\"string\">\"http://yum.iqianyue.comhttp://baidu.com\"</span></span><br><span class=\"line\">result2 = re.search(pattern, string2)</span><br><span class=\"line\">print(result2)</span><br><span class=\"line\"><span class=\"comment\"># None</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"通用字符\"><a href=\"#通用字符\" class=\"headerlink\" title=\"通用字符\"></a>通用字符</h4><p>所谓的通用字符，即一个原子可以匹配一类字符。<br><a href=\"https://imgchr.com/i/PgfBwt\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/08/13/PgfBwt.png\" alt=\"PgfBwt.png\"></a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">pattern = <span class=\"string\">\"\\w\\dpython\\w\"</span></span><br><span class=\"line\">string = <span class=\"string\">\"abcdfphp345pythony_py\"</span></span><br><span class=\"line\">result = re.search(pattern, string)</span><br><span class=\"line\">print(result)</span><br><span class=\"line\"><span class=\"comment\"># &lt;re.Match object; span=(9, 18), match='45pythony'&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"原子表\"><a href=\"#原子表\" class=\"headerlink\" title=\"原子表\"></a>原子表</h4><p>使用原子表，可以定义一组地位平等的原子，然后匹配的时候会取该原子表中的任意一个原子进行匹配，在Python中，原子表由[]表示。类似的，[^]代表的是除了中括号里面的原子均可以匹配。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">\"abcdfphp345pythony_py\"</span></span><br><span class=\"line\">pattern1 = <span class=\"string\">\"\\w\\dpython[xyz]\\w\"</span></span><br><span class=\"line\">result1 = re.search(pattern1, string)</span><br><span class=\"line\">print(result1)</span><br><span class=\"line\"><span class=\"comment\"># &lt;re.Match object; span=(9, 19), match='45pythony_'&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">pattern2 = <span class=\"string\">\"\\w\\dpython[^xyz]\\w\"</span></span><br><span class=\"line\">result2 = re.search(pattern2, string)</span><br><span class=\"line\">print(result2)</span><br><span class=\"line\"><span class=\"comment\"># None</span></span><br><span class=\"line\"></span><br><span class=\"line\">pattern3 = <span class=\"string\">\"\\w\\dpython[xyz]\\W\"</span></span><br><span class=\"line\">result3 = re.search(pattern3, string)</span><br><span class=\"line\">print(result3)</span><br><span class=\"line\"><span class=\"comment\"># None</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h3><p>所谓的元字符，就是正则表达式中具有一些特殊含义的字符。具体来说，元字符可以分为：任意匹配元字符、边界限制元字符、限定符、模式选择符、模式单元等。<br><a href=\"https://imgchr.com/i/PgfL6J\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/08/13/PgfL6J.png\" alt=\"PgfL6J.png\"></a></p>\n<h4 id=\"任意匹配元字符\"><a href=\"#任意匹配元字符\" class=\"headerlink\" title=\"任意匹配元字符\"></a>任意匹配元字符</h4><p>可以使用”.”匹配一个除换行符以外的任意字符。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">pattern = <span class=\"string\">\".python...\"</span></span><br><span class=\"line\">string = <span class=\"string\">\"abcdfphp345pythony_py\"</span></span><br><span class=\"line\">result = re.search(pattern, string)</span><br><span class=\"line\">print(result)</span><br><span class=\"line\"><span class=\"comment\"># &lt;re.Match object; span=(10, 20), match='5pythony_p'&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"边界限制元字符\"><a href=\"#边界限制元字符\" class=\"headerlink\" title=\"边界限制元字符\"></a>边界限制元字符</h4><p>可以使用”^”匹配字符串的开始，使用”$”匹配字符串的结束。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">\"abcdfphp345pythony_py\"</span></span><br><span class=\"line\">pattern1 = <span class=\"string\">\"^abd\"</span></span><br><span class=\"line\">result1 = re.search(pattern1, string)</span><br><span class=\"line\">print(result1)</span><br><span class=\"line\"><span class=\"comment\"># None</span></span><br><span class=\"line\"></span><br><span class=\"line\">pattern2 = <span class=\"string\">\"^abc\"</span></span><br><span class=\"line\">result2 = re.search(pattern2, string)</span><br><span class=\"line\">print(result2)</span><br><span class=\"line\"><span class=\"comment\"># &lt;re.Match object; span=(0, 3), match='abc'&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">pattern3 = <span class=\"string\">\"py$\"</span></span><br><span class=\"line\">result3 = re.search(pattern3, string)</span><br><span class=\"line\">print(result3)</span><br><span class=\"line\"><span class=\"comment\"># &lt;re.Match object; span=(19, 21), match='py'&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">pattern4 = <span class=\"string\">\"ay$\"</span></span><br><span class=\"line\">result4 = re.search(pattern4, string)</span><br><span class=\"line\">print(result4)</span><br><span class=\"line\"><span class=\"comment\"># None</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"限定符\"><a href=\"#限定符\" class=\"headerlink\" title=\"限定符\"></a>限定符</h4><p>常见的限定符包括*、?、+、{n}、{n,}、{n, m}。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">\"abcdddfphp345pythony_py\"</span></span><br><span class=\"line\">pattern1 = <span class=\"string\">\"py.*n\"</span></span><br><span class=\"line\">result1 = re.search(pattern1, string)</span><br><span class=\"line\">print(result1)</span><br><span class=\"line\"><span class=\"comment\"># &lt;re.Match object; span=(13, 19), match='python'&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">pattern2 = <span class=\"string\">\"cd&#123;2&#125;\"</span></span><br><span class=\"line\">result2 = re.search(pattern2, string)</span><br><span class=\"line\">print(result2)</span><br><span class=\"line\"><span class=\"comment\"># &lt;re.Match object; span=(2, 5), match='cdd'&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">pattern3 = <span class=\"string\">\"cd&#123;3&#125;\"</span></span><br><span class=\"line\">result3 = re.search(pattern3, string)</span><br><span class=\"line\">print(result3)</span><br><span class=\"line\"><span class=\"comment\"># &lt;re.Match object; span=(2, 6), match='cddd'&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">pattern4 = <span class=\"string\">\"cd&#123;2,&#125;\"</span></span><br><span class=\"line\">result4 = re.search(pattern4, string)</span><br><span class=\"line\">print(result4)</span><br><span class=\"line\"><span class=\"comment\"># &lt;re.Match object; span=(2, 6), match='cddd'&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"模式选择符\"><a href=\"#模式选择符\" class=\"headerlink\" title=\"模式选择符\"></a>模式选择符</h4><p>使用模式选择符，可以设置多个模式，匹配时，可以从中选择任意一个模式匹配。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">pattern = <span class=\"string\">\"python|php\"</span></span><br><span class=\"line\">string = <span class=\"string\">\"abcdfphp345pythony_py\"</span></span><br><span class=\"line\">result = re.search(pattern, string)</span><br><span class=\"line\">print(result)</span><br><span class=\"line\"><span class=\"comment\"># &lt;re.Match object; span=(5, 8), match='php'&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"模式单元\"><a href=\"#模式单元\" class=\"headerlink\" title=\"模式单元\"></a>模式单元</h4><p>可以使用”()”将一些原子组合成一个大原子使用，小括号括起来的部分会被当做一个整体去使用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">\"abcdcdcdcdfphp345pythony_py\"</span></span><br><span class=\"line\">pattern1 = <span class=\"string\">\"(cd)&#123;1,&#125;\"</span></span><br><span class=\"line\">result1 = re.search(pattern1, string)</span><br><span class=\"line\">print(result1)</span><br><span class=\"line\"><span class=\"comment\"># &lt;re.Match object; span=(2, 10), match='cdcdcdcd'&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">pattern2 = <span class=\"string\">\"cd&#123;1,&#125;\"</span></span><br><span class=\"line\">result2 = re.search(pattern2, string)</span><br><span class=\"line\">print(result2)</span><br><span class=\"line\"><span class=\"comment\"># &lt;re.Match object; span=(2, 4), match='cd'&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"模式修正\"><a href=\"#模式修正\" class=\"headerlink\" title=\"模式修正\"></a>模式修正</h3><p>所谓模式修正符，即可以在不改变正则表达式的情况下，通过模式修正符改变正则表达式的含义，从而实现一些匹配结果的调整等功能。<br><a href=\"https://imgchr.com/i/Pgh1Xj\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/08/13/Pgh1Xj.png\" alt=\"Pgh1Xj.png\"></a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">\"abcdfphp345Pythony_py\"</span></span><br><span class=\"line\">pattern = <span class=\"string\">\"python\"</span></span><br><span class=\"line\">result1 = re.search(pattern, string)</span><br><span class=\"line\">print(result1)</span><br><span class=\"line\"><span class=\"comment\"># None</span></span><br><span class=\"line\"></span><br><span class=\"line\">result2 = re.search(pattern, string, re.I)</span><br><span class=\"line\">print(result2)</span><br><span class=\"line\"><span class=\"comment\"># &lt;re.Match object; span=(11, 17), match='Python'&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"贪婪模式与懒惰模式\"><a href=\"#贪婪模式与懒惰模式\" class=\"headerlink\" title=\"贪婪模式与懒惰模式\"></a>贪婪模式与懒惰模式</h3><p>在某些字符间匹配任意字符，贪婪模式的核心点就是尽可能多地匹配，而懒惰模式的核心点就是尽可能少地匹配。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">\"abcdfphp345pythony_py\"</span></span><br><span class=\"line\">pattern1 = <span class=\"string\">\"p.*y\"</span> <span class=\"comment\">#贪婪模式</span></span><br><span class=\"line\">result1 = re.search(pattern1, string)</span><br><span class=\"line\">print(result1)</span><br><span class=\"line\"><span class=\"comment\"># &lt;re.Match object; span=(5, 21), match='php345pythony_py'&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">pattern2 = <span class=\"string\">\"p.*?y\"</span> <span class=\"comment\">#懒惰模式</span></span><br><span class=\"line\">result2 = re.search(pattern2, string)</span><br><span class=\"line\">print(result2)</span><br><span class=\"line\"><span class=\"comment\"># &lt;re.Match object; span=(5, 13), match='php345py'&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"常见函数\"><a href=\"#常见函数\" class=\"headerlink\" title=\"常见函数\"></a>常见函数</h2><h3 id=\"re-match-函数\"><a href=\"#re-match-函数\" class=\"headerlink\" title=\"re.match()函数\"></a>re.match()函数</h3><p>如果想要从源字符串的起始位置匹配一个模式，可以使用re.match()函数，使用格式是：<br><em>re.match(pattern, string, flag)</em><br>第一个参数代表对应的正确表达式，第二个参数代表对应的源字符，第三个参数是可选参数，代表对应的标志位，可以放模式修正符等信息。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">\"apythonhellomypythonhispythonourpythonend\"</span></span><br><span class=\"line\">pattern = <span class=\"string\">\".python.\"</span></span><br><span class=\"line\">result1 = re.match(pattern, string)</span><br><span class=\"line\">print(result1)</span><br><span class=\"line\"><span class=\"comment\"># &lt;re.Match object; span=(0, 8), match='apythonh'&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">result2 = re.match(pattern, string).span()</span><br><span class=\"line\">print(result2)</span><br><span class=\"line\"><span class=\"comment\"># (0, 8)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"re-search-函数\"><a href=\"#re-search-函数\" class=\"headerlink\" title=\"re.search()函数\"></a>re.search()函数</h3><p>使用该函数进行匹配，会扫描整个字符串并进行对应的匹配。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">\"hellomypythonhispythonourpythonend\"</span></span><br><span class=\"line\">pattern = <span class=\"string\">\".python.\"</span></span><br><span class=\"line\">result1 = re.match(pattern, string)</span><br><span class=\"line\">print(result1)</span><br><span class=\"line\"><span class=\"comment\"># None</span></span><br><span class=\"line\"></span><br><span class=\"line\">result2 = re.search(pattern, string)</span><br><span class=\"line\">print(result2)</span><br><span class=\"line\"><span class=\"comment\"># &lt;re.Match object; span=(6, 14), match='ypythonh'&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"全局匹配函数\"><a href=\"#全局匹配函数\" class=\"headerlink\" title=\"全局匹配函数\"></a>全局匹配函数</h3><p>将符合模式的内容全部都匹配出来。思路如下：</p>\n<ol>\n<li>使用re.compile()对正则表达式进行预编译。</li>\n<li>编译后，使用findall()根据正则表达式从源字符串中将匹配的结果全部找出。</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">\"hellomypythonhispythonourpythonend\"</span></span><br><span class=\"line\">pattern = re.compile(<span class=\"string\">\".python.\"</span>) <span class=\"comment\">#预编译</span></span><br><span class=\"line\">result = pattern.findall(string) <span class=\"comment\">#找出符合模式的所有结果</span></span><br><span class=\"line\">print(result)</span><br><span class=\"line\"><span class=\"comment\"># ['ypythonh', 'spythono', 'rpythone']</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"re-sub-函数\"><a href=\"#re-sub-函数\" class=\"headerlink\" title=\"re.sub()函数\"></a>re.sub()函数</h3><p>如果想根据正则表达式来实现替换某些字符串的功能，可以使用re.sub()韩式实现。<br><em>re.sub(pattern, rep, string, max)</em><br>其中，第一个参数为对应的正则表达式，第二个参数为要替换成的字符串，第三个参数为源字符串，第四个参数为可选项，代表最多替换的次数，如果忽略不写，则会将符合模式的结果全部替换。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">\"hellomypythonhispythonourpythonend\"</span></span><br><span class=\"line\">pattern = re.compile(<span class=\"string\">\".python\"</span>) </span><br><span class=\"line\">result1 = re.sub(pattern, <span class=\"string\">\"php\"</span>, string) <span class=\"comment\">#全部替换</span></span><br><span class=\"line\">print(result1)</span><br><span class=\"line\"><span class=\"comment\"># hellomphphiphpouphpend</span></span><br><span class=\"line\"></span><br><span class=\"line\">result2 = re.sub(pattern, <span class=\"string\">\"php\"</span>, string, <span class=\"number\">2</span>) <span class=\"comment\">#最多替换两次</span></span><br><span class=\"line\">print(result2)</span><br><span class=\"line\"><span class=\"comment\"># hellomphphiphpourpythonend</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"常见实例解析\"><a href=\"#常见实例解析\" class=\"headerlink\" title=\"常见实例解析\"></a>常见实例解析</h2><h3 id=\"匹配-com或-cn后缀的URL网址\"><a href=\"#匹配-com或-cn后缀的URL网址\" class=\"headerlink\" title=\"匹配.com或.cn后缀的URL网址\"></a>匹配.com或.cn后缀的URL网址</h3><p>将一串字符串里面以.com或.cn为域名后缀的URL网址匹配出来，过滤掉其他的无关信息。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">pattern = <span class=\"string\">\"[a-zA-Z]+://[^\\s]*[.com|.cn]\"</span></span><br><span class=\"line\">string = <span class=\"string\">\"&lt;a href='http://www.baidu.com'&gt;百度首页&lt;/a&gt;\"</span></span><br><span class=\"line\">result = re.search(pattern, string)</span><br><span class=\"line\">print(result)</span><br><span class=\"line\"><span class=\"comment\"># &lt;re.Match object; span=(9, 29), match='http://www.baidu.com'&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"匹配电话号码\"><a href=\"#匹配电话号码\" class=\"headerlink\" title=\"匹配电话号码\"></a>匹配电话号码</h3><p>将一串字符串里面出现的电话号码信息提取出来，过滤掉其他无关信息。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">pattern = <span class=\"string\">\"\\d&#123;4&#125;-\\d&#123;7&#125;|\\d&#123;3&#125;-\\d&#123;8&#125;\"</span></span><br><span class=\"line\">string = <span class=\"string\">\"021-6728263653682382265236\"</span></span><br><span class=\"line\">result = re.search(pattern, string)</span><br><span class=\"line\">print(result)</span><br><span class=\"line\"><span class=\"comment\"># &lt;re.Match object; span=(0, 12), match='021-67282636'&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"匹配电子邮件地址\"><a href=\"#匹配电子邮件地址\" class=\"headerlink\" title=\"匹配电子邮件地址\"></a>匹配电子邮件地址</h3><p>将一串字符串里面出现的电子邮件信息提取出来，过滤掉其他无关信息。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">pattern = <span class=\"string\">\"\\w+([.+-]\\w+)*@\\w+([.-]\\w+)*\\.\\w+([.-]\\w+)*\"</span></span><br><span class=\"line\">string = <span class=\"string\">\"&lt;a href='http://www.baidu.com'&gt;百度首页&lt;/a&gt;&lt;br&gt;&lt;a href='mailto:c-e+o@iqi-anyue.com.cn'&gt;电子邮件地址&lt;/a&gt;\"</span></span><br><span class=\"line\">result = re.search(pattern, string)</span><br><span class=\"line\">print(result)</span><br><span class=\"line\"><span class=\"comment\"># &lt;re.Match object; span=(59, 81), match='c-e+o@iqi-anyue.com.cn'&gt;</span></span><br></pre></td></tr></table></figure>","categories":["Web Crawler"],"tags":["Python","Web Crawler"]},{"title":"【图解设计模式】Singleton模式","url":"http://yoursite.com/2018/05/31/【图解设计模式】Singleton模式/","content":"<p>确保只能生成一个实例。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><a href=\"https://imgchr.com/i/C5ohRO\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/05/30/C5ohRO.png\" alt=\"C5ohRO.png\"></a></p>\n<h3 id=\"Singleton类\"><a href=\"#Singleton类\" class=\"headerlink\" title=\"Singleton类\"></a>Singleton类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton singleton = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"生成了一个实例\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Main类\"><a href=\"#Main类\" class=\"headerlink\" title=\"Main类\"></a>Main类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Start.\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Singleton obj1 = Singleton.getInstance();</span><br><span class=\"line\">        Singleton obj2 = Singleton.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj1 == obj2)</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"obj1与obj2是相同的实例。\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"obj1与obj2是不同的实例。\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"End.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Start.</span><br><span class=\"line\">生成了一个实例</span><br><span class=\"line\">obj1与obj2是相同的实例。</span><br><span class=\"line\">End.</span><br></pre></td></tr></table></figure>\n<h2 id=\"登场角色\"><a href=\"#登场角色\" class=\"headerlink\" title=\"登场角色\"></a>登场角色</h2><h3 id=\"Singleton\"><a href=\"#Singleton\" class=\"headerlink\" title=\"Singleton\"></a>Singleton</h3><p>在Singleton模式中，只有Singleton这一个角色。Singleton角色中有一个返回唯一实例的static方法。该方法总是会返回同一个实例。</p>\n<h3 id=\"类图-1\"><a href=\"#类图-1\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><a href=\"https://imgchr.com/i/C5ohRO\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/05/30/C5ohRO.png\" alt=\"C5ohRO.png\"></a></p>\n","categories":["Design Pattern"],"tags":["Java","Design Pattern"]},{"title":"【图解设计模式】Factory Method模式","url":"http://yoursite.com/2018/05/30/【图解设计模式】Factory-Method模式/","content":"<p>使用Template Method模式来构建生成实例的工厂。</p>\n<p>父类决定实例的生成方式，但并不决定所要生成的具体的类，具体的处理全部交给子类负责。这样就可以将生成实例的框架和实际负责生成实例的类解耦。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>制作身份证（ID卡）。</p>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><a href=\"https://imgchr.com/i/C5Qx7F\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/05/29/C5Qx7F.png\" alt=\"C5Qx7F.png\"></a></p>\n<h3 id=\"Product类\"><a href=\"#Product类\" class=\"headerlink\" title=\"Product类\"></a>Product类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> framework;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">use</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Factory类\"><a href=\"#Factory类\" class=\"headerlink\" title=\"Factory类\"></a>Factory类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> framework;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Product <span class=\"title\">create</span><span class=\"params\">(String owner)</span> </span>&#123;</span><br><span class=\"line\">        Product p = createProduct(owner);</span><br><span class=\"line\">        registerProduct(p);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Product <span class=\"title\">createProduct</span><span class=\"params\">(String owner)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">registerProduct</span><span class=\"params\">(Product product)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"IDCard类\"><a href=\"#IDCard类\" class=\"headerlink\" title=\"IDCard类\"></a>IDCard类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> idcard;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> framework.Product;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IDCard</span> <span class=\"keyword\">extends</span> <span class=\"title\">Product</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String owner;</span><br><span class=\"line\"></span><br><span class=\"line\">    IDCard(String owner) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.owner = owner;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"制作\"</span> + owner + <span class=\"string\">\"的ID卡。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">use</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"使用\"</span> + owner + <span class=\"string\">\"的ID卡。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getOwner</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> owner;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"IDCardFactory类\"><a href=\"#IDCardFactory类\" class=\"headerlink\" title=\"IDCardFactory类\"></a>IDCardFactory类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> idcard;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> framework.Factory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> framework.Product;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IDCardFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List owners = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Product <span class=\"title\">createProduct</span><span class=\"params\">(String owner)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> IDCard(owner);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">registerProduct</span><span class=\"params\">(Product product)</span> </span>&#123;</span><br><span class=\"line\">        owners.add(((IDCard)product).getOwner());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List <span class=\"title\">getOwners</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> owners;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Main类\"><a href=\"#Main类\" class=\"headerlink\" title=\"Main类\"></a>Main类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> framework.Factory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> framework.Product;</span><br><span class=\"line\"><span class=\"keyword\">import</span> idcard.IDCardFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Factory factory = <span class=\"keyword\">new</span> IDCardFactory();</span><br><span class=\"line\">        Product card1 = factory.create(<span class=\"string\">\"小明\"</span>);</span><br><span class=\"line\">        Product card2 = factory.create(<span class=\"string\">\"小红\"</span>);</span><br><span class=\"line\">        Product card3 = factory.create(<span class=\"string\">\"小刚\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        card1.use();</span><br><span class=\"line\">        card2.use();</span><br><span class=\"line\">        card3.use();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">制作小明的ID卡。</span><br><span class=\"line\">制作小红的ID卡。</span><br><span class=\"line\">制作小刚的ID卡。</span><br><span class=\"line\">使用小明的ID卡。</span><br><span class=\"line\">使用小红的ID卡。</span><br><span class=\"line\">使用小刚的ID卡。</span><br></pre></td></tr></table></figure>\n<h2 id=\"登场角色\"><a href=\"#登场角色\" class=\"headerlink\" title=\"登场角色\"></a>登场角色</h2><h3 id=\"Product（产品）\"><a href=\"#Product（产品）\" class=\"headerlink\" title=\"Product（产品）\"></a>Product（产品）</h3><p>Product角色属于框架这一方，是一个抽象类。它定义了在Factory Method模式中生成的那些实例所持有的接口（API），但具体的处理由子类ConcreteProduct角色决定，在示例程序中，由Product类扮演此角色。</p>\n<h3 id=\"Creator（创建者）\"><a href=\"#Creator（创建者）\" class=\"headerlink\" title=\"Creator（创建者）\"></a>Creator（创建者）</h3><p>Creator角色属于框架这一方，它是负责生成Product角色的抽象类，但具体的处理则由子类ConcreteCreator角色决定。在示例程序中，由Factory类扮演此角色。Creator角色对于实际负责生成实例的ConcreteCreator角色一无所知，它唯一知道的就是，只要调用Product角色和生成实例的方法，就可以生成Product的实例。在示例程序中，createProduct方法是用于生成实例的方法。</p>\n<h3 id=\"ConcreteProduct（具体的产品）\"><a href=\"#ConcreteProduct（具体的产品）\" class=\"headerlink\" title=\"ConcreteProduct（具体的产品）\"></a>ConcreteProduct（具体的产品）</h3><p>ConcreteProduct角色属于具体加工这一方，它决定了具体的产品。在示例程序中，由IDCard类扮演此角色。</p>\n<h3 id=\"ConcreteCreator（具体的创建者）\"><a href=\"#ConcreteCreator（具体的创建者）\" class=\"headerlink\" title=\"ConcreteCreator（具体的创建者）\"></a>ConcreteCreator（具体的创建者）</h3><p>ConcreteCreator角色属于具体加工这一方，它负责生成具体的产品。在示例程序中，由IDCardFactory类扮演此角色。</p>\n<h3 id=\"类图-1\"><a href=\"#类图-1\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><a href=\"https://imgchr.com/i/C5lF6x\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/05/29/C5lF6x.png\" alt=\"C5lF6x.png\"></a></p>\n","categories":["Design Pattern"],"tags":["Java","Design Pattern"]},{"title":"【图解设计模式】Template Method模式","url":"http://yoursite.com/2018/05/30/【图解设计模式】Template-Method模式/","content":"<p>在父类中定义处理流程的框架，在子类中实现具体处理。</p>\n<p>组成模板的方法被定义在父类中。由于这些方法是抽象方法，所以只查看父类的代码是无法知道这些方法最终会进行何种具体处理的，唯一能知道的就是父类是如何调用这些方法的。</p>\n<p>实现上述这些抽象方法的是子类。在子类中实现了抽象方法也就决定了具体的处理。也就是说，只要在不同的子类中实现不同的具体处理，当父类的模板方法被调用时程序行为也会不同。但是不论子类中的具体实现如何，处理的流程都会按照父类中所定义的那样进行。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>将字符和字符串循环显示5次。</p>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><a href=\"https://imgchr.com/i/C5MmDO\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/05/29/C5MmDO.png\" alt=\"C5MmDO.png\"></a></p>\n<h3 id=\"AbstractDisplay类\"><a href=\"#AbstractDisplay类\" class=\"headerlink\" title=\"AbstractDisplay类\"></a>AbstractDisplay类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractDisplay</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        open();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">            print();</span><br><span class=\"line\"></span><br><span class=\"line\">        close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"CharDisplay类\"><a href=\"#CharDisplay类\" class=\"headerlink\" title=\"CharDisplay类\"></a>CharDisplay类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CharDisplay</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractDisplay</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CharDisplay</span><span class=\"params\">(<span class=\"keyword\">char</span> ch)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ch = ch;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"&lt;&lt;\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.print(ch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&gt;&gt;\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"StringDisplay类\"><a href=\"#StringDisplay类\" class=\"headerlink\" title=\"StringDisplay类\"></a>StringDisplay类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringDisplay</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractDisplay</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String string;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> width;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StringDisplay</span><span class=\"params\">(String string)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.string = string;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.width = string.getBytes().length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        printLine();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"|\"</span> + string + <span class=\"string\">\"|\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        printLine();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">printLine</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"+\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; width; i++)</span><br><span class=\"line\">            System.out.print(<span class=\"string\">\"-\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"+\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Main类\"><a href=\"#Main类\" class=\"headerlink\" title=\"Main类\"></a>Main类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AbstractDisplay d1 = <span class=\"keyword\">new</span> CharDisplay(<span class=\"string\">'H'</span>);</span><br><span class=\"line\">        AbstractDisplay d2 = <span class=\"keyword\">new</span> StringDisplay(<span class=\"string\">\"Hello, world.\"</span>);</span><br><span class=\"line\">        AbstractDisplay d3 = <span class=\"keyword\">new</span> StringDisplay(<span class=\"string\">\"你好，世界。\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        d1.display();</span><br><span class=\"line\">        d2.display();</span><br><span class=\"line\">        d3.display();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;&lt;HHHHH&gt;&gt;</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">|Hello, world.|</span><br><span class=\"line\">|Hello, world.|</span><br><span class=\"line\">|Hello, world.|</span><br><span class=\"line\">|Hello, world.|</span><br><span class=\"line\">|Hello, world.|</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">|你好，世界。|</span><br><span class=\"line\">|你好，世界。|</span><br><span class=\"line\">|你好，世界。|</span><br><span class=\"line\">|你好，世界。|</span><br><span class=\"line\">|你好，世界。|</span><br><span class=\"line\">+------------------+</span><br></pre></td></tr></table></figure>\n<h2 id=\"登场角色\"><a href=\"#登场角色\" class=\"headerlink\" title=\"登场角色\"></a>登场角色</h2><h3 id=\"AbstractClass（抽象类）\"><a href=\"#AbstractClass（抽象类）\" class=\"headerlink\" title=\"AbstractClass（抽象类）\"></a>AbstractClass（抽象类）</h3><p>AbstractClass角色不仅负责实现模板方法，还负责声明在模板方法中所使用到的抽象方法。这些抽象方法由子类ConcreteClass角色负责实现。在示例程序中，由AbstractDisplay类扮演此角色。</p>\n<h3 id=\"ConcreteClass（具体类）\"><a href=\"#ConcreteClass（具体类）\" class=\"headerlink\" title=\"ConcreteClass（具体类）\"></a>ConcreteClass（具体类）</h3><p>该角色负责具体实现AbstractClass角色中定义的抽象方法。这里实现的方法将会在AbstractClass角色的模板方法中被调用。在示例程序中，由CharDisplay类和StringDisplay类扮演此角色。</p>\n<h3 id=\"类图-1\"><a href=\"#类图-1\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><a href=\"https://imgchr.com/i/C5QR6P\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/05/29/C5QR6P.png\" alt=\"C5QR6P.png\"></a></p>\n","categories":["Design Pattern"],"tags":["Java","Design Pattern"]},{"title":"【图解设计模式】Adapter模式","url":"http://yoursite.com/2018/05/29/【图解设计模式】Adapter模式/","content":"<p>用于填补“现有的程序”和“所需的程序”之间差异。</p>\n<p>Adapter模式有以下两种：</p>\n<ul>\n<li>类适配器模式（使用继承的适配器）</li>\n<li>对象适配器模式（使用委托的适配器）</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>将输入的字符串显示为（Hello）或是*Hello*。</p>\n<h3 id=\"类适配器模式（使用继承）\"><a href=\"#类适配器模式（使用继承）\" class=\"headerlink\" title=\"类适配器模式（使用继承）\"></a>类适配器模式（使用继承）</h3><h4 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h4><p><a href=\"https://imgchr.com/i/C4drVI\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/05/28/C4drVI.png\" alt=\"C4drVI.png\"></a></p>\n<h4 id=\"Banner类\"><a href=\"#Banner类\" class=\"headerlink\" title=\"Banner类\"></a>Banner类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Banner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String string;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Banner</span><span class=\"params\">(String string)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.string = string;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showWithParen</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"(\"</span> + string + <span class=\"string\">\")\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showWithAster</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"*\"</span> + string + <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Print接口\"><a href=\"#Print接口\" class=\"headerlink\" title=\"Print接口\"></a>Print接口</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Print</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printWeak</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printStrong</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"PrintBanner类\"><a href=\"#PrintBanner类\" class=\"headerlink\" title=\"PrintBanner类\"></a>PrintBanner类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintBanner</span> <span class=\"keyword\">extends</span> <span class=\"title\">Banner</span> <span class=\"keyword\">implements</span> <span class=\"title\">Print</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PrintBanner</span><span class=\"params\">(String string)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(string);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printWeak</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        showWithParen();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printStrong</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        showWithAster();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Main类\"><a href=\"#Main类\" class=\"headerlink\" title=\"Main类\"></a>Main类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Print p = <span class=\"keyword\">new</span> PrintBanner(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">        p.printWeak();</span><br><span class=\"line\">        p.printStrong();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(Hello)</span><br><span class=\"line\">*Hello*</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象适配器模式（使用委托）\"><a href=\"#对象适配器模式（使用委托）\" class=\"headerlink\" title=\"对象适配器模式（使用委托）\"></a>对象适配器模式（使用委托）</h3><h4 id=\"类图-1\"><a href=\"#类图-1\" class=\"headerlink\" title=\"类图\"></a>类图</h4><p><a href=\"https://imgchr.com/i/C4wiRO\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/05/28/C4wiRO.png\" alt=\"C4wiRO.png\"></a></p>\n<h4 id=\"Print类\"><a href=\"#Print类\" class=\"headerlink\" title=\"Print类\"></a>Print类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Print</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">printWeak</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">printStrong</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"PrintBanner类-1\"><a href=\"#PrintBanner类-1\" class=\"headerlink\" title=\"PrintBanner类\"></a>PrintBanner类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintBanner</span> <span class=\"keyword\">extends</span> <span class=\"title\">Print</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Banner banner;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PrintBanner</span><span class=\"params\">(String string)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.banner = <span class=\"keyword\">new</span> Banner(string);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printWeak</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        banner.showWithParen();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printStrong</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        banner.showWithAster();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"登场角色\"><a href=\"#登场角色\" class=\"headerlink\" title=\"登场角色\"></a>登场角色</h2><p>在类适配器模式中，Adapter角色通过继承来使用Adaptee角色，而在对象适配器模式中，Adapter角色通过委托来使用Adaptee角色。</p>\n<h3 id=\"Targer（对象）\"><a href=\"#Targer（对象）\" class=\"headerlink\" title=\"Targer（对象）\"></a>Targer（对象）</h3><p>该角色负责定义所需的方法。在示例程序中，由Print接口（使用继承时）和Print类（使用委托时）扮演此角色。</p>\n<h3 id=\"Client（请求者）\"><a href=\"#Client（请求者）\" class=\"headerlink\" title=\"Client（请求者）\"></a>Client（请求者）</h3><p>该角色负责使用Target角色所定义的方法进行具体处理。在示例程序中，由Main类扮演此角色。</p>\n<h3 id=\"Adaptee（被适配）\"><a href=\"#Adaptee（被适配）\" class=\"headerlink\" title=\"Adaptee（被适配）\"></a>Adaptee（被适配）</h3><p>Adaptee是一个持有既定方法的角色。在示例程序中，由Banner类扮演此角色。</p>\n<h3 id=\"Adapter-适配\"><a href=\"#Adapter-适配\" class=\"headerlink\" title=\"Adapter(适配)\"></a>Adapter(适配)</h3><p>Adapter模式的主人公。使用Adaptee角色的方法来满足Target角色的需求，这是Adapter模式的目的，也是Adapter角色的作用。在示例程序中，由PrintBanner类扮演这个角色。</p>\n<h3 id=\"类适配器模式的类图（使用继承）\"><a href=\"#类适配器模式的类图（使用继承）\" class=\"headerlink\" title=\"类适配器模式的类图（使用继承）\"></a>类适配器模式的类图（使用继承）</h3><p><a href=\"https://imgchr.com/i/C40tje\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/05/28/C40tje.png\" alt=\"C40tje.png\"></a></p>\n<h3 id=\"对象适配器模式的类图（使用委托）\"><a href=\"#对象适配器模式的类图（使用委托）\" class=\"headerlink\" title=\"对象适配器模式的类图（使用委托）\"></a>对象适配器模式的类图（使用委托）</h3><p><a href=\"https://imgchr.com/i/C40aBd\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/05/28/C40aBd.png\" alt=\"C40aBd.png\"></a></p>\n","categories":["Design Pattern"],"tags":["Java","Design Pattern"]},{"title":"【图解设计模式】Iterator模式","url":"http://yoursite.com/2018/03/30/【图解设计模式】Iterator模式/","content":"<p>按照统一的方法遍历集合中的元素。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>将书（Book）放置到书架（BookShelf）中，并将书的名字按顺序显示出来。</p>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><a href=\"https://imgchr.com/i/9zl4fO\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/04/01/9zl4fO.png\" alt=\"9zl4fO.png\"></a></p>\n<h3 id=\"Aggregate接口\"><a href=\"#Aggregate接口\" class=\"headerlink\" title=\"Aggregate接口\"></a>Aggregate接口</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Aggregate</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Iterator <span class=\"title\">iterator</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Iterator接口\"><a href=\"#Iterator接口\" class=\"headerlink\" title=\"Iterator接口\"></a>Iterator接口</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Object <span class=\"title\">next</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Book类\"><a href=\"#Book类\" class=\"headerlink\" title=\"Book类\"></a>Book类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Book</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"BookShelf类\"><a href=\"#BookShelf类\" class=\"headerlink\" title=\"BookShelf类\"></a>BookShelf类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookShelf</span> <span class=\"keyword\">implements</span> <span class=\"title\">Aggregate</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Book[] books;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> last;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BookShelf</span><span class=\"params\">(<span class=\"keyword\">int</span> maxsize)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.books = <span class=\"keyword\">new</span> Book[maxsize];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.last = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Book <span class=\"title\">getBookAt</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> books[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">appendBook</span><span class=\"params\">(Book book)</span> </span>&#123;</span><br><span class=\"line\">        books[last++] = book;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> last;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BookShelfIterator(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"BookShelfIterator类\"><a href=\"#BookShelfIterator类\" class=\"headerlink\" title=\"BookShelfIterator类\"></a>BookShelfIterator类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookShelfIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookShelf bookShelf;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> index;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BookShelfIterator</span><span class=\"params\">(BookShelf bookShelf)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bookShelf = bookShelf;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> index &lt; bookShelf.getLength() ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookShelf.getBookAt(index++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Main类\"><a href=\"#Main类\" class=\"headerlink\" title=\"Main类\"></a>Main类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        BookShelf bookShelf = <span class=\"keyword\">new</span> BookShelf(<span class=\"number\">4</span>);</span><br><span class=\"line\">        bookShelf.appendBook(<span class=\"keyword\">new</span> Book(<span class=\"string\">\"Around the World in 80 Days\"</span>));</span><br><span class=\"line\">        bookShelf.appendBook(<span class=\"keyword\">new</span> Book(<span class=\"string\">\"Bible\"</span>));</span><br><span class=\"line\">        bookShelf.appendBook(<span class=\"keyword\">new</span> Book(<span class=\"string\">\"Cinderella\"</span>));</span><br><span class=\"line\">        bookShelf.appendBook(<span class=\"keyword\">new</span> Book(<span class=\"string\">\"Daddy-Long-Legs\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        Iterator it = <span class=\"keyword\">new</span> BookShelfIterator(bookShelf);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">            Book book = (Book) it.next();</span><br><span class=\"line\">            System.out.println(book.getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Around the World <span class=\"keyword\">in</span> 80 Days</span><br><span class=\"line\">Bible</span><br><span class=\"line\">Cinderella</span><br><span class=\"line\">Daddy-Long-Legs</span><br></pre></td></tr></table></figure>\n<h2 id=\"登场角色\"><a href=\"#登场角色\" class=\"headerlink\" title=\"登场角色\"></a>登场角色</h2><h3 id=\"Iterator（迭代器）\"><a href=\"#Iterator（迭代器）\" class=\"headerlink\" title=\"Iterator（迭代器）\"></a>Iterator（迭代器）</h3><p>该角色负责定义按顺序逐个遍历元素的接口（API）。在示例程序中，由Iterator接口扮演这个角色，它定义了hasNext和next两个方法。其中，hasNext方法用于判断是否存在下一个元素，next方法则用于获取该元素。</p>\n<h3 id=\"ConcreteIterator（具体的迭代器）\"><a href=\"#ConcreteIterator（具体的迭代器）\" class=\"headerlink\" title=\"ConcreteIterator（具体的迭代器）\"></a>ConcreteIterator（具体的迭代器）</h3><p>该角色负责实现Iterator角色所定义的接口（API）。在示例程序中，由BookShelfIterator类扮演这个角色。该角色中包含了遍历集合所必需的信息。在示例程序中，BookShelf类的实例保存在bookShelf字段中，被指向的书的下标保存在index字段中。</p>\n<h3 id=\"Aggregate（集合）\"><a href=\"#Aggregate（集合）\" class=\"headerlink\" title=\"Aggregate（集合）\"></a>Aggregate（集合）</h3><p>该角色负责定义创建Iterator角色的接口（API）。这个接口（API）是一个方法，会创建出“按顺序访问保存在我内部元素的人”。在示例程序中，由Aggregate接口扮演这个角色，它里面定义了iterator方法。</p>\n<h3 id=\"ConcreteAggregate（具体的集合）\"><a href=\"#ConcreteAggregate（具体的集合）\" class=\"headerlink\" title=\"ConcreteAggregate（具体的集合）\"></a>ConcreteAggregate（具体的集合）</h3><p>该角色负责实现Aggregate角色所定义的接口（API）。它会创建出具体的Iterator角色，即ConcreteIterator角色。在示例程序中，由BookShelf类扮演这个角色，它实现了iterator方法。</p>\n<h3 id=\"类图-1\"><a href=\"#类图-1\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><a href=\"https://imgchr.com/i/9z19Xj\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2018/04/01/9z19Xj.png\" alt=\"9z19Xj.png\"></a></p>\n","categories":["Design Pattern"],"tags":["Java","Design Pattern"]},{"title":"Slang","url":"http://yoursite.com/2018/03/06/Slang/","content":"<h2 id=\"ring-a-bell\"><a href=\"#ring-a-bell\" class=\"headerlink\" title=\"ring a bell\"></a>ring a bell</h2><p>to arouse an often indistinct memory，唤起模糊的记忆<br>多以否定形式出现：It/That/Sth does not ring a bell.记不得，想不起来了。尤其强调完全没有印象。</p>\n<h2 id=\"tell-me-about-it\"><a href=\"#tell-me-about-it\" class=\"headerlink\" title=\"tell me about it\"></a>tell me about it</h2><p>告诉我吧，跟我说说，引申为（1）I have had the same experience.我也有相同经历。（2）a way of saying you agree with someone我同意你的观点。<br>有时并不是出于不了解，想让对方再说些什么，而是表示深有同感，你懂的！</p>\n<h2 id=\"on-the-house\"><a href=\"#on-the-house\" class=\"headerlink\" title=\"on the house\"></a>on the house</h2><p>（1）given away free免费赠送（2）without asking for money不用钱<br>It’s on the house.常用于酒店、饭馆和酒吧免费招待的酒水、食物或服务。现在也更多地用于其他表达“请客”的语境中。</p>\n<h2 id=\"cold-feet\"><a href=\"#cold-feet\" class=\"headerlink\" title=\"cold feet\"></a>cold feet</h2><p>fearfulness or timidity preventing the completion of a course of action，因害怕胆怯临阵退缩<br>突然缺乏自信或勇气，临阵退缩。常与动词get连用，即：get cold feet。</p>\n<h2 id=\"silver-lining\"><a href=\"#silver-lining\" class=\"headerlink\" title=\"silver lining\"></a>silver lining</h2><p>a hopeful or comforting prospect in the midst of difficulty，困境中的希望或安慰，出自一则西方谚语：Every cloud has a silver lining.每一朵乌云都镶着银色的边。<br>用于在一切糟糕不幸的境遇中，看到的希望与生机，不幸中的万幸。</p>\n<h2 id=\"second-thoughts\"><a href=\"#second-thoughts\" class=\"headerlink\" title=\"second thoughts\"></a>second thoughts</h2><p>a reconsideration of a decision or opinion previously made，重新考虑已经做出的决定或意见<br>惯用复数形式。通常表示后悔了，有了与之前不同的想法，做出了与之前不同的决定。</p>\n<h2 id=\"off-the-wagon\"><a href=\"#off-the-wagon\" class=\"headerlink\" title=\"off the wagon\"></a>off the wagon</h2><p>no longer abstaining from alcoholic beverages，不再戒酒<br>on the wagon戒酒中；(fall) off the wagon酒瘾复发。</p>\n<h2 id=\"break-a-leg\"><a href=\"#break-a-leg\" class=\"headerlink\" title=\"break a leg\"></a>break a leg</h2><p>used to wish someone, such as an actor, success in a performance，预祝演出成功<br>预祝表演成功。与good luck意思相近，但语境仅限于演出、表演等场合使用。</p>\n<h2 id=\"I’m-all-ears\"><a href=\"#I’m-all-ears\" class=\"headerlink\" title=\"I’m all ears.\"></a>I’m all ears.</h2><p>acutely attentive，全神贯注<br>全神贯注，集中注意力倾听。愿闻其详，洗耳恭听。</p>\n<h2 id=\"look-over-one’s-shoulder\"><a href=\"#look-over-one’s-shoulder\" class=\"headerlink\" title=\"look over one’s shoulder\"></a>look over one’s shoulder</h2><p>往回看，回头看，引申为：keep watching for danger or threats to oneself，对危险或威胁时刻警惕<br>可表示动作上的往后看，向后瞧；其引申义为时刻小心警惕。</p>\n<h2 id=\"put-down-roots\"><a href=\"#put-down-roots\" class=\"headerlink\" title=\"put down roots\"></a>put down roots</h2><p>播种扎根，引申为：to settle down somewhere; to make a place one’s permanent home，安顿下来，定居<br>表示愿意在某地长久居住，定居，购置房产，在当地结交朋友等。</p>\n<h2 id=\"call-the-shots\"><a href=\"#call-the-shots\" class=\"headerlink\" title=\"call the shots\"></a>call the shots</h2><p>to decide on the course of action; to be in charge，做重大决定、负责<br>做得了主，说了算，也可以表示发号施令。</p>\n<h2 id=\"up-one’s-sleeve\"><a href=\"#up-one’s-sleeve\" class=\"headerlink\" title=\"up one’s sleeve\"></a>up one’s sleeve</h2><p>在袖子里，引申为：hidden but ready to be used，隐藏备用<br>具有双重含义，直译为在袖子里，也可引申为备有锦囊妙招。</p>\n<h2 id=\"pull-yourself-together\"><a href=\"#pull-yourself-together\" class=\"headerlink\" title=\"pull yourself together\"></a>pull yourself together</h2><p>to regain one’s composure，重新镇定<br>从字面解释，就是把“四分五裂”的自己拼凑在一起。重整精神，振作起来。</p>\n<h2 id=\"kiss-the-ring\"><a href=\"#kiss-the-ring\" class=\"headerlink\" title=\"kiss the ring\"></a>kiss the ring</h2><p>to show respect, often used in the imperative tense，不可免地表示尊重<br>起源于传统宗教仪式中，亲吻罗马教皇手上戴的戒指，以表敬意和忠诚，引申为奉承讨好之意。</p>\n<h2 id=\"hang-by-a-thread\"><a href=\"#hang-by-a-thread\" class=\"headerlink\" title=\"hang by a thread\"></a>hang by a thread</h2><p>to be in danger of having something unlucky or bad happen，即将遭遇不幸或厄运<br>形容千钧一发，朝不保夕，岌岌可危。</p>\n<h2 id=\"pull-some-strings\"><a href=\"#pull-some-strings\" class=\"headerlink\" title=\"pull some strings\"></a>pull some strings</h2><p>to use influence (with someone to get something done)，利用某人的影响力把事情搞定<br>起源于木偶戏，演员在背后操作木偶身上的线。引申为通过非常规渠道，调动可利用的关系，达到目的，走后门。</p>\n<h2 id=\"tight-ship\"><a href=\"#tight-ship\" class=\"headerlink\" title=\"tight ship\"></a>tight ship</h2><p>to run a ship or an organization in an orderly and disciplined manner，有秩序，有纪律地管理组织<br>原指不漏水的船，形容一艘船上纪律严明，管理井然有序。广泛地用来形容其他组织或团体。惯用动词run来搭配，run a tight ship。</p>\n<h2 id=\"turn-over-a-new-leaf\"><a href=\"#turn-over-a-new-leaf\" class=\"headerlink\" title=\"turn over a new leaf\"></a>turn over a new leaf</h2><p>to start behaving in a better way，重新开始好好表现<br>16世纪时，人们把书本的页面称为“leaf”。翻到新的一页，也就是俗话说的“翻篇”，引申为改过自新，洗心革面。</p>\n<h2 id=\"get-off-on-the-wrong-foot\"><a href=\"#get-off-on-the-wrong-foot\" class=\"headerlink\" title=\"get off on the wrong foot\"></a>get off on the wrong foot</h2><p>to begin doing something in a way that is likely to fail，失败的开局<br>也作start off on the wrong foot，刚开始就进展不顺，开局不好。反义词get off on the right foot，开局良好，开了个好头。</p>\n<h2 id=\"beat-a-dead-horse\"><a href=\"#beat-a-dead-horse\" class=\"headerlink\" title=\"beat a dead horse\"></a>beat a dead horse</h2><p>to persist in persuing or trying to revive interest in a project or subject that has lost its usefulness or relevance，在已无意义的事情上白费功夫<br>做无用功，再怎么做也是徒劳，无济于事。搭配的动词有flog a dead horse。</p>\n<h2 id=\"jaw-drops\"><a href=\"#jaw-drops\" class=\"headerlink\" title=\"jaw drops\"></a>jaw drops</h2><p>下巴掉下来，引申为：to show great surprise，惊叹不已<br>one’s jaw drops/drop one’s jaw吃惊不已，目瞪口呆。</p>\n<h2 id=\"get-one’s-head-around\"><a href=\"#get-one’s-head-around\" class=\"headerlink\" title=\"get one’s head around\"></a>get one’s head around</h2><p>to be able to understand something (usually negative)，能够理解某事（通常以否定形式出现）<br>绞尽脑汁努力想明白。常与动词wrap搭配，wrap one’s head around。</p>\n<h2 id=\"water-under-the-bridge\"><a href=\"#water-under-the-bridge\" class=\"headerlink\" title=\"water under the bridge\"></a>water under the bridge</h2><p>a past occurrence, especially something unfortunate, that cannot be undone or rectified，无法改变的过去的不幸<br>桥下匆匆过去的流水，有覆水难收之意。尤其指不好的事，已经发生了，已经过去了。</p>\n<h2 id=\"my-hands-are-tied\"><a href=\"#my-hands-are-tied\" class=\"headerlink\" title=\"my hands are tied\"></a>my hands are tied</h2><p>绑住的双手，引申为：someone is not able to help or intervene，帮不上忙或无法介入（婉拒他人请求）<br>无能为力，束手无策。常用于必须按照规矩办事，不能通融。</p>\n<h2 id=\"open-book\"><a href=\"#open-book\" class=\"headerlink\" title=\"open book\"></a>open book</h2><p>a person or thing without secrecy or concealment that can be easily known or interpreted，没有秘密或容易被看穿的人或事<br>一本开启的书。指一个人坦率直言，没有秘密，没有城府。</p>\n<h2 id=\"walk-on-eggshells\"><a href=\"#walk-on-eggshells\" class=\"headerlink\" title=\"walk on eggshells\"></a>walk on eggshells</h2><p>走在蛋壳上，引申为：to walk carefully, to take steps gingerly, to be very diplomatic and in offensive，步步小心谨慎，礼数周全，不冒犯<br>“走在鸡蛋壳上”般小心翼翼，与“如履薄冰”如出一辙，形容对待某人或某事谨小慎微。</p>\n<h2 id=\"not-see-the-forest-for-the-trees\"><a href=\"#not-see-the-forest-for-the-trees\" class=\"headerlink\" title=\"not see the forest for the trees\"></a>not see the forest for the trees</h2><p>cannot perceive the overview or important things because of concentrating too much on details，太关注细节而无法领悟整体或重点<br>常以否定形式出现，cannot/not able to see the forest for the trees。眼光不能放长远，看不到大局，也就是“一叶障目，不见泰山”。</p>\n<h2 id=\"speak-of-the-devil\"><a href=\"#speak-of-the-devil\" class=\"headerlink\" title=\"speak of the devil\"></a>speak of the devil</h2><p>talk about a certain person, and that person appears，说到某个人，那个人就出现了<br>Speak of the devil, and in he walks.是一句古老的西方谚语，提醒大家不要再在聊天中提起魔鬼的名字，否则魔鬼就会立刻现身。现在专指某人不经念叨，说曹操曹操到。</p>\n<h2 id=\"cats-and-dogs\"><a href=\"#cats-and-dogs\" class=\"headerlink\" title=\"cats and dogs\"></a>cats and dogs</h2><p>very heavily or steadily，非常强烈，严重<br>最早只用于形容倾盆大雨，暴风骤雨。据说早年伦敦一遇到暴雨，街上的下水道堵塞，第二天街头就会漂浮很多被淹死的猫猫狗狗。现在也用于争吵中，形容吵得不可开交。</p>\n<h2 id=\"dodge-a-bullet\"><a href=\"#dodge-a-bullet\" class=\"headerlink\" title=\"dodge a bullet\"></a>dodge a bullet</h2><p>躲过一颗子弹，引申为：having successfully avoided a sticky situation，成功避免了棘手的情况<br>省去了麻烦，躲过一劫。</p>\n<h2 id=\"clear-the-air\"><a href=\"#clear-the-air\" class=\"headerlink\" title=\"clear the air\"></a>clear the air</h2><p>净化空气，引申为：to get rid of doubts or hard feelings，摆脱怀疑或不满<br>直译为净化空气，引申义为讲清楚，澄清事实，消除误会。</p>\n<h2 id=\"get-ducks-in-a-row\"><a href=\"#get-ducks-in-a-row\" class=\"headerlink\" title=\"get ducks in a row\"></a>get ducks in a row</h2><p>to organize things well，打理有序<br>把一切打理妥当，有条不紊。常见的搭配还有have one’s ducks in a row。</p>\n<h2 id=\"elephant-in-the-room\"><a href=\"#elephant-in-the-room\" class=\"headerlink\" title=\"elephant in the room\"></a>elephant in the room</h2><p>a question, problem, or controversial issue which is obvious to everyone who knows about the situation, but which is deliberately ignored，人人心知肚明却故意不提的问题或话题<br>形容无法忽视的，明摆着的事实。</p>\n<h2 id=\"take-the-high-road\"><a href=\"#take-the-high-road\" class=\"headerlink\" title=\"take the high road\"></a>take the high road</h2><p>to do the right thing even if it’s not popular or easy，即使不易或不受欢迎，也要做正确的事<br>采取高风亮节的做法，通常用于自己站上道德制高点，把别人比下去。</p>\n<h2 id=\"red-tape\"><a href=\"#red-tape\" class=\"headerlink\" title=\"red tape\"></a>red tape</h2><p>红色的布带，引申为：obstructive official routine or procedure; time-consuming bureaucracy，碍事的官方规定或程序、费时的官僚机构<br>起源于17世纪官方用于捆绑文案文书的红色布条，形容繁复的手续或冗杂的程序，有繁文缛节之意。</p>\n<h2 id=\"twist-one’s-arm\"><a href=\"#twist-one’s-arm\" class=\"headerlink\" title=\"twist one’s arm\"></a>twist one’s arm</h2><p>拧折胳膊，引申为：to persuade someone to do something that they do not want to do，说服某人做不想做的事<br>向对方施压，强迫对方做某事。也常用于“并不是真的不愿意，只是表示客气”，出于客套，说话人并不是真的不愿意，盛情难却。</p>\n<h2 id=\"on-a-silver-platter\"><a href=\"#on-a-silver-platter\" class=\"headerlink\" title=\"on a silver platter\"></a>on a silver platter</h2><p>于银盘之上，引申为：provide with something valuable for nothing，无条件提供有价值的东西<br>双手奉上，拱手相送。说话人常常有点并不心甘情愿，或者有点后悔。可搭配的动词有hand/deliver to someone on a silver platter。</p>\n<h2 id=\"blow-off-steam\"><a href=\"#blow-off-steam\" class=\"headerlink\" title=\"blow off steam\"></a>blow off steam</h2><p>释放蒸汽，引申为：to do or say something that helps you get rid of strong feeling or energy，做或说一些能摆脱负面情绪的事<br>用法出自老式蒸汽锅。喷出蒸汽有助于释放蒸汽锅内的压力，从而避免爆炸的危险。运用到人身上，释放压力，发泄，减压。</p>\n<h2 id=\"go-south\"><a href=\"#go-south\" class=\"headerlink\" title=\"go south\"></a>go south</h2><p>to lose value or quality, to stop working，失去价值，失效<br>起源于地图中上北下南的方位。往南从图上看，就是往下走，走下坡路。引申为往不好的局面发展，事情败露，计划泡汤，关系闹僵。同义的搭配还有head south。</p>\n<h2 id=\"steal-one’s-thunder\"><a href=\"#steal-one’s-thunder\" class=\"headerlink\" title=\"steal one’s thunder\"></a>steal one’s thunder</h2><p>to use, appropriate, or preempt the use of another’s idea, especially to one’s own advantage and without consent by the originator，在未经允许的情况下，为了自己的利益，窃取占用别人的主意<br>抢风头。该典故起源于17世纪，英国一位剧作家John Dennis发明了在舞台剧演出中制造雷声音效的方法。后来当他创作的舞台剧被叫停后，他发现其他正在上演的舞台剧盗用了他制造雷声的办法。John愤怒不已，抱怨道：“They will not let me play run, but they steal my thunder!“。</p>\n<h2 id=\"once-in-a-blue-moon\"><a href=\"#once-in-a-blue-moon\" class=\"headerlink\" title=\"once in a blue moon\"></a>once in a blue moon</h2><p>very rarely, almost never，极其罕见，几乎从不<br>形容比sometimes还要罕见，绝无仅有。</p>\n<h2 id=\"nail-in-the-coffin\"><a href=\"#nail-in-the-coffin\" class=\"headerlink\" title=\"nail in the coffin\"></a>nail in the coffin</h2><p>棺材上的钉子，引申为：an action that will cause something to end，指示终结的举动<br>棺材上的钉子，颇有板上钉钉，死定了的意味。指最后致命的一击，最强补刀。搭配的用法有the final/another nail in the coffin (of…)。</p>\n<h2 id=\"flash-in-the-pan\"><a href=\"#flash-in-the-pan\" class=\"headerlink\" title=\"flash in the pan\"></a>flash in the pan</h2><p>锅里的一道光，引申为：someone or something that draws a lot of attention for a very brief time，短暂地吸引过关注的人或事<br>出处说法不一，最普及的说法是来自于美国淘金热的年代。当时淘金使用的工具类似平底锅，把挖来的泥沙放在锅里浸上水，如果有金子的话，能在阳光下看到金光。flash in the pan说的是徒有一道光线，并没有真金，指空欢喜一场，昙花一现。</p>\n<h2 id=\"peas-in-a-pod\"><a href=\"#peas-in-a-pod\" class=\"headerlink\" title=\"peas in a pod\"></a>peas in a pod</h2><p>在同一颗豆荚中的豆子，引申为：very similar; two of a kind，非常相近，同一类<br>同一颗豆荚里的豆子。既可以用来形容两人关系亲密到难舍难分，也可以用来形容两人当下的境遇相同，或志同道合。亲如兄弟（姐妹）。</p>\n<h2 id=\"ball-and-chain\"><a href=\"#ball-and-chain\" class=\"headerlink\" title=\"ball and chain\"></a>ball and chain</h2><p>拴犯人用的枷锁，引申为：a heavy restraint, a wife，强烈的束缚，妻子<br>枷锁，引申为牵绊，束缚，也常常用来代指妻子。</p>\n<h2 id=\"get-under-one’s-skin\"><a href=\"#get-under-one’s-skin\" class=\"headerlink\" title=\"get under one’s skin\"></a>get under one’s skin</h2><p>深入皮肤底层，引申为：to bother or irritate someone，打扰或激怒某人<br>用于被惹恼，被激怒，被强烈地影响了情绪。</p>\n<h2 id=\"poker-face\"><a href=\"#poker-face\" class=\"headerlink\" title=\"poker face\"></a>poker face</h2><p>扑克脸，引申为：a face that show no emotion or intention，没有任何情感或意图的表情<br>起源于职业扑克牌手在竞技中，为了不让对方看穿自己的牌面，要始终保持面无表情，也就是“扑克脸”。引申为板着脸，一本正经。可搭配的动词有give/lose/practise poker face。</p>\n<h2 id=\"smell-blood\"><a href=\"#smell-blood\" class=\"headerlink\" title=\"smell blood\"></a>smell blood</h2><p>to recognise an opportunity to be more successful, especially by taking advantage or someone who is in a difficult situation，发掘能更成功的机会，通常要通过趁人之危<br>原指鲨鱼在海中嗅到血腥味，就会发动攻击。现在多用来形容找准机会，随时准备行动，发动攻势，伺机而动。</p>\n<h2 id=\"push-one’s-luck\"><a href=\"#push-one’s-luck\" class=\"headerlink\" title=\"push one’s luck\"></a>push one’s luck</h2><p>把运气“推一推”，引申为：to try too hard to get a particular result and risk losing what you have achieved，为达到目的努力过头，冒着失去已有成就的风险<br>过于希望好运延续，而很有可能得不偿失，即得寸进尺。经常用于否定句中，善意地提醒对方——Don’t push your luck。</p>\n<h2 id=\"cold-shoulder\"><a href=\"#cold-shoulder\" class=\"headerlink\" title=\"cold shoulder\"></a>cold shoulder</h2><p>deliberate coldness or disregard, a slight or a snub，故意冷淡忽视、怠慢或斥责<br>最早用来形容待客冷淡的房东或寄宿主人。如今指故意漠视冷落某人，不理不睬。</p>\n<h2 id=\"white-lie\"><a href=\"#white-lie\" class=\"headerlink\" title=\"white lie\"></a>white lie</h2><p>an often trivial, diplomatic or well-intended untruth，微不足道，高明或出于好意的假话<br>在英语传统中，white与good，pure近义，象征着好的初衷。意味着善意的谎言，而现在也用于并非出于好意，而只是耍了耍小聪明，自以为高明的小谎言。</p>\n<h2 id=\"penny-for-your-thoughts\"><a href=\"#penny-for-your-thoughts\" class=\"headerlink\" title=\"penny for your thoughts\"></a>penny for your thoughts</h2><p>一便士买你的想法，引申为：what are you thinking about?你在想什么？<br>据说已经流传了四百多年。在四百年前，一便士还是非常值钱的银币。专门针对身边突然心不在焉的人，就是说“你走神了”。现在则用于询问身边人的想法。</p>\n<h2 id=\"high-time\"><a href=\"#high-time\" class=\"headerlink\" title=\"high time\"></a>high time</h2><p>the latest possible time, a time that is almost too late，最后可能的时间，几乎太迟的时候<br>最后的紧要关头，再不…就迟了。比It’s time to更紧急，更刻不容缓。</p>\n<h2 id=\"loose-ends\"><a href=\"#loose-ends\" class=\"headerlink\" title=\"loose ends\"></a>loose ends</h2><p>绳子毛糙脱线的一端，引申为：a detail that is left unsettled, unexplained or incomplete，遗留未解决、未解释或未完成的细节<br>本义是松开的线头。在罪案剧中，常看到杀手在灭口之前对对方说：“You’re a loose end”，指把柄、遗留问题。常搭配的动词短语是tie up。tie up loose ends解决遗留问题，扫尾。</p>\n<h2 id=\"hold-your-horses\"><a href=\"#hold-your-horses\" class=\"headerlink\" title=\"hold your horses\"></a>hold your horses</h2><p>骑马的时候，勒紧缰绳，让马儿慢下来，引申为：stop, slow down，停下，慢点<br>原指勒马，现在用于让对方等等，慢点说，是wait, hold on等的另一种形式。</p>\n<h2 id=\"a-taste-of-your-own-medicine\"><a href=\"#a-taste-of-your-own-medicine\" class=\"headerlink\" title=\"a taste of your own medicine\"></a>a taste of your own medicine</h2><p>自己药的味道，引申为：a sample of the unpleasantness that one has been giving other people，复制一个人给其他人带来的不快<br>你自己的苦药，自食其果。可搭配动词get/have a taste of your own medicine, give someone a taste of one’s own medicine。</p>\n<h2 id=\"humble-pie\"><a href=\"#humble-pie\" class=\"headerlink\" title=\"humble pie\"></a>humble pie</h2><p>用猪牛羊的内脏做的馅饼，引申为：to be forced to admit that you are wrong and to say you are sorry，被迫承认错误并道歉<br>原指用动物内脏制作的馅饼，西方人认为动物内脏是低等的肉质，因为只有穷人才吃。吃动物内脏制作的馅饼，就是低人一等。现在则引申为被迫认识到自己的错误，屈辱地认错或自取其辱，“被打脸”。</p>\n<h2 id=\"lion’s-share\"><a href=\"#lion’s-share\" class=\"headerlink\" title=\"lion’s share\"></a>lion’s share</h2><p>狮子的那份，引申为：the largest portion，最大份额<br>出自《伊索寓言》中的一则故事。一头狮子与另外三头野兽去打猎。它们猎到了一头鹿，把鹿分成了四份，准备平分。谁料狮子拿了自己应得的那份后，说：“我是森林之王，所以还得再分一份。我的勇气与力量无人能及，所以还得再拿一块。至于第四块的归属，如果你们想跟我挑战的话，我们就来比试比试吧。”最后，狮子把整只鹿独吞了。用来形容占据最大份额或绝大多数。</p>\n<h2 id=\"sinking-ship\"><a href=\"#sinking-ship\" class=\"headerlink\" title=\"sinking ship\"></a>sinking ship</h2><p>一艘将沉没的船，引申为：a company or other organization that is failing，即将衰败的公司或组织<br>tight ship形容纪律严明、管理有序的组织。sinking ship指大势已去，每况愈下的组织。西方人很喜欢用ship来代指一个团队或组织。搭配的动词有desert/leave/jump a sinking ship。</p>\n<h2 id=\"make-ends-meet\"><a href=\"#make-ends-meet\" class=\"headerlink\" title=\"make ends meet\"></a>make ends meet</h2><p>将两端接上，引申为：to earn and spend equal amounts of money，收入与支出持平<br>最早起源于航海船上，系在桅杆上的绳子如果断了，船长为了节省开销，就会让人把断掉的两端重新系在一起。现在则引申为量入为出，精打细算。</p>\n<h2 id=\"a-pretty-penny\"><a href=\"#a-pretty-penny\" class=\"headerlink\" title=\"a pretty penny\"></a>a pretty penny</h2><p>to be expensive; to cost a lot of money，昂贵的，花一大笔钱<br>一大笔钱。这里pretty不是指“漂亮好看”，而是取“数额可观”之意。</p>\n<h2 id=\"hold-a-candle\"><a href=\"#hold-a-candle\" class=\"headerlink\" title=\"hold a candle\"></a>hold a candle</h2><p>to be equal to someone; to measure up to someone，与某人平等，比得上某人<br>当年，持烛人这份工作，因为没有任何技术含量，几乎只要长了眼睛的人都能干，所以被视为没有技术含量的低等工作。于是，人们用can’t hold a candle to来形容一个人没本事，连持烛人都不配，也就相当于“连提鞋都不配”。词条沿用到今天，便常常用于什么比不上什么，或配不上什么。</p>\n<h2 id=\"elbow-grease\"><a href=\"#elbow-grease\" class=\"headerlink\" title=\"elbow grease\"></a>elbow grease</h2><p>hard work or effort, human energy，辛苦的劳作或努力，人的精力<br>直译为在胳膊肘抹油，用于俚语中，指的是要花功夫，费力气，尤其是指体力活。</p>\n<h2 id=\"take-a-beat\"><a href=\"#take-a-beat\" class=\"headerlink\" title=\"take a beat\"></a>take a beat</h2><p>stop for a moment to relax; pause and think about what you are doing，停下来歇会儿；停下来想想自己打算怎么做<br>表意是“休息一个节拍的时间”，实则引申为暂缓，从长计议，适用于各种想“等等再说”的语境中。</p>\n<h2 id=\"take-off-gloves\"><a href=\"#take-off-gloves\" class=\"headerlink\" title=\"take off gloves\"></a>take off gloves</h2><p>to stop being calm or civil and show an intention of winning a dispute by any means，不再保持冷静或礼貌，表达出为赢得争执不惜一切的意图<br>表义是摘掉手套，现多引申为为达目的，采取强硬手段，不惜一切，放手一搏。</p>\n<h2 id=\"face-the-music\"><a href=\"#face-the-music\" class=\"headerlink\" title=\"face the music\"></a>face the music</h2><p>to receive punishment; to accept the unpleasant results of one’s actions，接受惩罚，接受自身行为造成的不良后果<br>Let’s face the music,起源于军队驱逐劣迹士兵的仪式。现用于日常对话中，包含两层含义：一是面对不好的结果；二是接受随之而来的惩罚。</p>\n<h2 id=\"late-bloomer\"><a href=\"#late-bloomer\" class=\"headerlink\" title=\"late bloomer\"></a>late bloomer</h2><p>a person who finally develops a useful or superior skill or talents later than expected or desired，某人比预期中晚得开发出有用或优异的技能<br>原指晚于花季盛开的花朵，直译即迟开的花。后来便广泛地引申为较晚掌握技能或展现杰出的才能，“大器晚成”。</p>\n<h2 id=\"glass-ceiling\"><a href=\"#glass-ceiling\" class=\"headerlink\" title=\"glass ceiling\"></a>glass ceiling</h2><p>an unacknowledged discriminatory barrier that prevents women and minorities from rising to positions of power or responsibility, as within a corporation，阻止女性和少数民族在一个集团内，拥有更高权利或责任的不可言说的歧视性障碍<br>glass ceiling就是一层看似无物，却又真实存在着的“玻璃天花板”，成为很多女性和少数民族或种族的上升瓶颈、升职障碍。</p>\n<h2 id=\"in-one’s-shoes\"><a href=\"#in-one’s-shoes\" class=\"headerlink\" title=\"in one’s shoes\"></a>in one’s shoes</h2><p>to allow oneself to see or experience something from someone else’s point of view，从其他人的角度看待或经历<br>西方人借“穿别人的鞋”来比喻设身处地，站在他人的立场上考虑问题。常用的有If I was in your shoes，如果我是你。</p>\n<h2 id=\"dust-settles\"><a href=\"#dust-settles\" class=\"headerlink\" title=\"dust settles\"></a>dust settles</h2><p>When the dust falls out of the air; When things have calmed down，当灰尘从空气中落下；当事情缓和下来<br>尘埃落定。常见的搭配有：When dust settles/Let the dust settle first。</p>\n<h2 id=\"icing-on-the-cake\"><a href=\"#icing-on-the-cake\" class=\"headerlink\" title=\"icing on the cake\"></a>icing on the cake</h2><p>something good that is added to another good thing，好事相继发生<br>蛋糕上的装饰，指锦上添花。也用于反讽，指雪上加霜。</p>\n<h2 id=\"nest-egg\"><a href=\"#nest-egg\" class=\"headerlink\" title=\"nest egg\"></a>nest egg</h2><p>仿制的假蛋，留在鸡窝里，不拿走的蛋，引申为：money saved and held as a reserve for emergencies, retirement, etc，存下来的钱，用于应急或退休等等的储蓄<br>始终留在鸡窝里的一颗蛋，如今已引申为私房钱，养老金。常用的搭配有sit on a nest egg拥有一份储蓄金。</p>\n<h2 id=\"arm’s-length\"><a href=\"#arm’s-length\" class=\"headerlink\" title=\"arm’s length\"></a>arm’s length</h2><p>a distance, avoiding intimacy or familiarity，一段避免亲密或熟悉的距离<br>指的不只是一只胳膊的距离。相隔一只胳膊，说的是保持一段不可逾越的距离。可搭配的词组有keep at arm’s length/stay with arm’s length。</p>\n<h2 id=\"old-chestnut\"><a href=\"#old-chestnut\" class=\"headerlink\" title=\"old chestnut\"></a>old chestnut</h2><p>something that has been repeated so many times that it has lost its impact，重复太多，以致失去效力<br>戏剧已被遗忘，而“老栗子”的说法沿用至今，用来指代一切过时的、老套的、陈旧的人与事。<br>起源：19世纪英国作家William Dimond写过一出情景剧（The Broken Sword），剧中有一位爱聊天的西维尔船长，总爱反复再三地跟大家讲重复的段子。讲着讲着，后来的版本也不免与最初的版本有了出入。一天，他又讲到一个反复多遍的笑话，里面提到一棵树，这次他说是皮栎树。话音刚落，立刻被朋友博布罗打脸：“这个故事我听你讲了27遍了，我肯定你之前说的是栗子树！”</p>\n<h2 id=\"no-good-deed-goes-unpunished\"><a href=\"#no-good-deed-goes-unpunished\" class=\"headerlink\" title=\"no good deed goes unpunished\"></a>no good deed goes unpunished</h2><p>life is unfair and people can do or try to do good things and still end up in a lot of trouble，抱怨生活不公，试图做好事却惹来麻烦<br>好心没好报，说话人往往有一点挖苦或自嘲的小无奈。也常用于“初衷是好的，结果却适得其反”的对话中。</p>\n<h2 id=\"keep-nose-clean\"><a href=\"#keep-nose-clean\" class=\"headerlink\" title=\"keep nose clean\"></a>keep nose clean</h2><p>to keep out of trouble, especially trouble with the law，不惹麻烦，尤其是触犯法律<br>曾经是妈妈提醒宝贝要讲究卫生的一句叮嘱，现在用于成人世界，是警告闯祸精们，要洁身自好，不要惹麻烦。尤其在罪案剧中，是训诫有前科的犯人，不要干坏事。</p>\n<h2 id=\"safety-in-numbers\"><a href=\"#safety-in-numbers\" class=\"headerlink\" title=\"safety in numbers\"></a>safety in numbers</h2><p>safety achieved by being concealed in or united with large numbers of people or other creatures，通过联合或隐藏在很多人或物中达到安全的目的<br>人越多，越能减少可能的风险，保证安全，也可以理解为常说的“人多势众”，“人多力量大”。常用的句型是There’s safety in numbers。</p>\n<h2 id=\"pins-and-needles\"><a href=\"#pins-and-needles\" class=\"headerlink\" title=\"pins and needles\"></a>pins and needles</h2><p>图钉与针，引申为：a tingling feeling in some part of one’s body, especially the arms and legs，身体某部位发麻<br>形容身体发麻。也可以用来表达焦虑不安的情绪，只需与介词on连用，on pins and needles，坐如针毡。</p>\n<h2 id=\"peanut-gallery\"><a href=\"#peanut-gallery\" class=\"headerlink\" title=\"peanut gallery\"></a>peanut gallery</h2><p>the hind most or uppermost position section of seating in a theatre balcony; a group of people whose opinions are considered unimportant，剧场观众席最后或最高的位子；最无关紧要的人<br>原指剧场演出的观众席中，最便宜的座位。从台上遥望这些座位，会有一颗颗花生的既视感，因此得名。如今，这个词组广泛地用来形容各色路人甲及围观群众。</p>\n<h2 id=\"fishing-expedition\"><a href=\"#fishing-expedition\" class=\"headerlink\" title=\"fishing expedition\"></a>fishing expedition</h2><p>a search for information without knowledge of whether such information exists，在不知道信息是否存在的前提下搜查信息<br>现如今这则词条已经不光用来指代捕鱼。更多地用于司法行业，指在没有嫌疑或情报指向的情况下，盘查对方的各项信息，以期找到有利的线索。而在美国，也会出现为了打击对手，蓄意组织对对方的调查，一旦找到蛛丝马迹就能抹黑对方的情况，这从法律意义上说就是非法调查。因此，既可以指撒网式盘查，也可以直接指代“非法调查”。</p>\n<h2 id=\"take-the-fifth\"><a href=\"#take-the-fifth\" class=\"headerlink\" title=\"take the fifth\"></a>take the fifth</h2><p>refuse to testify by invoking the fifth Amendment, which states that nobody may be forced to testify as a witness against himself ot herself，通过援引《第五修正案》中，证人不可被强迫作出对他人不利的证词，来拒绝作证<br>来源于美国《第五修正案》的条例。条例中明确规定了证人有权保持沉默。这则原本仅用于法庭上使用的词条，被广泛地运用，来表达不想说，或不想回答的意思。</p>\n<h2 id=\"salt-of-the-earth\"><a href=\"#salt-of-the-earth\" class=\"headerlink\" title=\"salt of the earth\"></a>salt of the earth</h2><p>a person or group considered as the best or noblest part of society，被认为是社会中最好或最崇高的人或团体<br>直译为地球之盐，可见这群人对社会的重要性。不光是a good person或者a nice guy，而是最高级：人见人爱的社会顶梁柱。</p>\n<h2 id=\"turn-the-tables\"><a href=\"#turn-the-tables\" class=\"headerlink\" title=\"turn the tables\"></a>turn the tables</h2><p>to change a situation so that someone’s position is opposite of what it was，使某人的处境发生了与之前相反的变化<br>直译好似“掀桌”，实则有“翻盘”之意。就像双陆棋中有太多运气的因素，指风水轮流转，尤其是由坏转好，反败为胜，或者扭转局面之意。</p>\n<h2 id=\"save-one’s-skin\"><a href=\"#save-one’s-skin\" class=\"headerlink\" title=\"save one’s skin\"></a>save one’s skin</h2><p>to save someone from injury, embarrassment or punishment，拯救某人免于受伤、尴尬或惩罚<br>意指自保，为自己开脱。不止“拯救皮肤”可以表达这个意思，save one’s neck/save one’s bacon，也都是可以互换使用的近义词条。</p>\n<h2 id=\"sitting-duck\"><a href=\"#sitting-duck\" class=\"headerlink\" title=\"sitting duck\"></a>sitting duck</h2><p>可以不费吹灰之力逮到的呆坐着的野鸭，引申为：an easy target or victim，容易被攻击的目标或受害者<br>原指容易被猎到的呆坐不动的鸭子，现在引申为容易被攻击的目标，面对攻击束手无策，坐以待毙。</p>\n<h2 id=\"cold-turkey\"><a href=\"#cold-turkey\" class=\"headerlink\" title=\"cold turkey\"></a>cold turkey</h2><p>immediate, complete withdrawal from something on which one has become dependent, such as an addictive drug，迅速彻底地戒掉某种依赖性的习惯，比如药物上瘾<br>指的是最早不加以任何装饰的火鸡的做法——完完全全就是一整只朴实无华的鸡！后来，人们就用来形容直截了当，不拐弯抹角。go cold turkey用来形容干脆利落地戒掉上瘾。</p>\n<h2 id=\"under-your-belt\"><a href=\"#under-your-belt\" class=\"headerlink\" title=\"under your belt\"></a>under your belt</h2><p>achieved; counted or scored; learned; mastered，取得成绩，得分；学会掌握<br>原指把食物进入肠胃里，也就是消化掉了。现在它不仅指代消化食物，也更多地用来形容掌握了一项新技能或经过了一段经历，而这些技能或经历对往后的人生能起到积极的影响。</p>\n<h2 id=\"scratch-the-surface\"><a href=\"#scratch-the-surface\" class=\"headerlink\" title=\"scratch the surface\"></a>scratch the surface</h2><p>to just begin to find out about something; to examine only the superficial aspects of something，刚开始有所发现；对事物的观察停留在表面阶段<br>原指工匠取材时，为了做标记，只用刀在树木或石头的表面留下浅浅的划痕，而不伤害到材料的内里。现在这则词条被广泛应用来表示略知皮毛，对事情的认知停留在表面。</p>\n<h2 id=\"cook-the-books\"><a href=\"#cook-the-books\" class=\"headerlink\" title=\"cook the books\"></a>cook the books</h2><p>books账本<br>to record false information in the accounts of an organization, especially in order to steal money，在组织的账目上记录错误信息，尤其是为了窃取钱财<br>做假账，对账目做手脚。最早出现在18世纪的一篇新闻报道中，该记者使用了动词cook生动地描绘出对账本数字任意发挥，“添油加醋”的画面感。</p>\n<h2 id=\"bad-blood\"><a href=\"#bad-blood\" class=\"headerlink\" title=\"bad blood\"></a>bad blood</h2><p>feelings of hate between people because of arguments in the past，由于过去的争执导致彼此间仇恨<br>最早出现在19世纪，专门用于形容家庭成员之间的关系不和，指的就是血亲。现在这则词条广泛地用于形容人与人之间各种不睦的关系，可搭配的介词是between，如(there’s) bad blood between A and B。</p>\n<h2 id=\"at-one’s-fingertips\"><a href=\"#at-one’s-fingertips\" class=\"headerlink\" title=\"at one’s fingertips\"></a>at one’s fingertips</h2><p>immediately and easily available，迅速而轻易地获得<br>直译为“在指尖”，实际指近在咫尺，触手可得，完全掌握在自己手中，予取予求。</p>\n<h2 id=\"bite-one’s-tongue\"><a href=\"#bite-one’s-tongue\" class=\"headerlink\" title=\"bite one’s tongue\"></a>bite one’s tongue</h2><p>to stop yourself from saying something because it would better not to, even if you would like to say it，阻止自己说出来，因为即使很想说，也还是不说为好<br>表意是要到舌头，现在引申为出于礼貌或其他方面考虑，不多嘴，少说话，保守秘密。</p>\n<h2 id=\"until-cows-come-home\"><a href=\"#until-cows-come-home\" class=\"headerlink\" title=\"until cows come home\"></a>until cows come home</h2><p>for a very long time，很长一段时间<br>直到奶牛回家。因为牛儿要在山头逛上一整天，直到天黑才会回到牛圈，因此被沿用来形容要很长很长的时间，甚至是无限期。</p>\n<h2 id=\"full-of-beans\"><a href=\"#full-of-beans\" class=\"headerlink\" title=\"full of beans\"></a>full of beans</h2><p>energetic; frisky; badly mistaken，有活力，活泼；严重弄错了<br>表意是“满满的豆子”，而从豆子引申出了多重含义。根据语境的不同，既可以表示充满活力，精神饱满，也用来形容一个人说话不着调，胡说八道。</p>\n<h2 id=\"in-the-doghouse\"><a href=\"#in-the-doghouse\" class=\"headerlink\" title=\"in the doghouse\"></a>in the doghouse</h2><p>in a situation in which someone is annoyed with you because of something you did，因为自己的所作所为，惹恼某人<br>直译是在狗屋里，实际可以把“打入狗屋”理解为“打入冷宫”之意，即失宠，受冷落。而相反地，out of doghouse就是复宠，重获喜爱或青睐。<br>起源：出自1911年发行的著名小说《彼得潘》中的情节。在书中第16章，讲到达林先生因为一时大意，把保姆赶出家门，导致自己的孩子们被绑架了。事后他非常悔恨，便惩罚自己住进了狗屋里，甚至上班的时候，也让人把狗屋一起运送过去。</p>\n<h2 id=\"beat-around-the-bush\"><a href=\"#beat-around-the-bush\" class=\"headerlink\" title=\"beat around the bush\"></a>beat around the bush</h2><p>to avoid answering a question; to stall; to waste time，避免回答问题，拖延，浪费时间<br>表意上理解好似在树丛中放空拳，实则引申为拐弯抹角，回避重点，不直截了当。</p>\n<h2 id=\"fly-on-the-wall\"><a href=\"#fly-on-the-wall\" class=\"headerlink\" title=\"fly on the wall\"></a>fly on the wall</h2><p>someone who can secretly see and hear what happens，能隐秘地看见和听见事情发展经过的人<br>直译为墙上的苍蝇，形容以及其不显眼的存在，出现在事发现场，目睹事情经过，而不引起任何人的注意。也形容窥探着的隐蔽技巧高超，无孔不入。</p>\n<h2 id=\"eat-crow\"><a href=\"#eat-crow\" class=\"headerlink\" title=\"eat crow\"></a>eat crow</h2><p>to be forced to accept a humiliating defeat，被迫接受羞辱的挫败<br>起源于1812年美英战争期间。一位英国军士与一位美国猎人在尼亚加拉河畔狭路相逢。英国军士缴了猎人的步枪，并强迫他吃掉刚捕获的一只乌鸦。美国人只能从命。而等到美国人拿回自己的步枪，就立刻以其人之道还治其人之身，让英国人也受到同样的羞辱。由此引申为被迫认错，丢脸。</p>\n<h2 id=\"die-hard\"><a href=\"#die-hard\" class=\"headerlink\" title=\"die-hard\"></a>die-hard</h2><p>stubbornly resisting change or clinging to a seemingly hopeless or outdated cause，固执地拒绝变化，或坚守着希望渺茫或过时的事情<br>由军队中一句誓死守卫的口号，演变为形容顽固不化，坚守不移的词条。可以用来形容死忠、脑残粉等等。在使用上，既可以作为名词，也可以作为形容词。<br>起源：在1811年的阿尔布厄拉战役（Albuhera）中，西米德塞克斯（West Middlesex）的57团经过了惨烈的交火之后，他们的指挥官英格里斯（Inglis）上校被榴弹击中了脖子和胸口。英格里斯拒绝立即治疗，而是躺在士兵们面前，让他们坚守阵地，他高声喊着：“Die Hard 57th, Die Hard!”（57团不死）最后57团的570名将士中，有422名英勇就义。</p>\n<h2 id=\"out-on-a-limb\"><a href=\"#out-on-a-limb\" class=\"headerlink\" title=\"out on a limb\"></a>out on a limb</h2><p>in a dangerous position to do something; at risk，做某事面临危险的局面；冒险<br>表意为去往树枝外沿，引申义为处于危险的境地，孤立无援。常与动词go搭配，即go out on a limb去冒险。</p>\n<h2 id=\"all-bets-are-off\"><a href=\"#all-bets-are-off\" class=\"headerlink\" title=\"all bets are off\"></a>all bets are off</h2><p>the outcome of a situation is unpredictable，某种情况的结果不可预知<br>原指在博彩中，之前下好的赌注都不算数了，后来渐渐被引申为，之前的条件、规则、逻辑等等都不作数了，推倒重来，一切皆有可能之意。</p>\n<h2 id=\"kid-glove\"><a href=\"#kid-glove\" class=\"headerlink\" title=\"kid glove\"></a>kid glove</h2><p>to deal with someone very gently or carefully，温柔谨慎地对待某人<br>treat someone with kid gloves/handle someone with kid gloves，字面理解是要戴上羊羔皮手套才能碰，意指小心翼翼，谨慎地对待。与take off gloves（不惜一切，放手一搏）正好是一对反义词。</p>\n<h2 id=\"bite-the-bullet\"><a href=\"#bite-the-bullet\" class=\"headerlink\" title=\"bite the bullet\"></a>bite the bullet</h2><p>to accept something difficult and try to live with it，接受并忍受困难的事情<br>战时缺乏麻醉剂做手术，就只好咬紧子弹的做法，演变为今天指代“咬紧牙关挺住”的词条，也可以指勉为其难，为难自己做某事。</p>\n<h2 id=\"deep-pockets\"><a href=\"#deep-pockets\" class=\"headerlink\" title=\"deep pockets\"></a>deep pockets</h2><p>if an organization or a person has deep pockets, they have a lot of money，拥有大量钱财的组织或个人<br>从字面上理解是深深的口袋，意指掌握了巨大的财富。要注意的是，既可以指代巨大的财富或资源，也可以指代拥有这些财富或资源的人。</p>\n<h2 id=\"apples-and-oranges\"><a href=\"#apples-and-oranges\" class=\"headerlink\" title=\"apples and oranges\"></a>apples and oranges</h2><p>two items or groups of items are compared that cannot be practically compared，把两件或两组不具可比性的事物作比较<br>外国人用苹果比橙子，形容把性质完全不同的事物放在一起做比较，风马牛不相及。在西方，能表达相同意思的说法还有chalk and cheese。</p>\n<h2 id=\"two-left-feet\"><a href=\"#two-left-feet\" class=\"headerlink\" title=\"two left feet\"></a>two left feet</h2><p>to be very awkward with one’s feet，出脚非常笨拙<br>两只左脚。说的不是残疾或异形，而是用来形容脚步笨拙，不够灵巧。在各种社交场合中，尤其用来形容不会跳舞。</p>\n<h2 id=\"hard-and-fast\"><a href=\"#hard-and-fast\" class=\"headerlink\" title=\"hard and fast\"></a>hard and fast</h2><p>defined, fixed and invariable，已确定、固定和不可变的<br>指严格固定下来，不容改变的。fast在这里指的是稳固，牢固。在乘机时常听到广播里说的“fasten your belt”（系紧安全带）取的也是这层意思。常用句型有：It’s not a hard and fast rule, but…（这不是硬性规定，但是…）</p>\n<h2 id=\"raise-the-roof\"><a href=\"#raise-the-roof\" class=\"headerlink\" title=\"raise the roof\"></a>raise the roof</h2><p>to be extremely noisy and boisterous; to become extremely angry。异常嘈杂喧闹；极度生气<br>是一则多义词条。它既可以指愤怒，怒气冲天；也可以指狂欢，嗨翻全场。这两种能制造出刺耳噪音，表达的意思却截然不同的情况，都可以用这同一则词条来表达。</p>\n<h2 id=\"all-thumbs\"><a href=\"#all-thumbs\" class=\"headerlink\" title=\"all thumbs\"></a>all thumbs</h2><p>lacking physical coordination, skill or grace; clumsy，缺乏肢体协调性，技能或者优雅；笨拙<br>原意是讽刺一个人十根手指都是拇指，意指不灵活，笨手笨脚。</p>\n<h2 id=\"stick-in-the-mud\"><a href=\"#stick-in-the-mud\" class=\"headerlink\" title=\"stick in the mud\"></a>stick in the mud</h2><p>one who lacks initiative, imagination or enthusiasm，被动，缺乏想象力或热情<br>直译是插在泥里的木棍，搅也搅不动。常用来形容一个人墨守陈规，顽固不化，或者是不思进取。</p>\n<h2 id=\"go-down-the-drain\"><a href=\"#go-down-the-drain\" class=\"headerlink\" title=\"go down the drain\"></a>go down the drain</h2><p>to fail; to be thrown away or wasted，失败，被丢弃或是浪费<br>表意是冲进下水道，现在引申为白白浪费，付诸东流的意思。除了drain指下水道之外，go down the chute/tubes，都是相同的意思。</p>\n<h2 id=\"a-field-day\"><a href=\"#a-field-day\" class=\"headerlink\" title=\"a field day\"></a>a field day</h2><p>to be able to do something you enjoy a great deal, esp. criticizing someone，做某件让你非常享受的事，尤其是批评别人<br>从19世纪的军营中诞生，到了20世纪普遍地用于日常对话中。have a field day既可以形容度过了愉快、尽兴的时光，也可以指抓住了难得的机会，尽情地批评或讽刺他人。</p>\n<h2 id=\"put-finger-on\"><a href=\"#put-finger-on\" class=\"headerlink\" title=\"put finger on\"></a>put finger on</h2><p>to indicate exactly; remember to; to discover; locate，具体地指出，记得，发现，定位<br>直译是伸出手指指出来，引申义是明确具体地指出，说得清楚明白。同义词条还有lay one’s finger on。</p>\n<h2 id=\"up-one’s-alley\"><a href=\"#up-one’s-alley\" class=\"headerlink\" title=\"up one’s alley\"></a>up one’s alley</h2><p>suited to your abilities or interests，适合你的能力或兴趣<br>直译为在谁家狭窄的小街巷上，如今引申为适合某人的才能或特长，或特别擅长的事情。常用的句式是doing something is right up my alley。</p>\n<h2 id=\"a-good-sport\"><a href=\"#a-good-sport\" class=\"headerlink\" title=\"a good sport\"></a>a good sport</h2><p>someone who can accept a loss in a competition or can accept being the butt of a joke，能接受比赛失利或是不在乎成为笑柄的人<br>从竞赛精神出发，指不看重结果，输得起，有度量，或是有参与精神的人。</p>\n<h2 id=\"brownie-points\"><a href=\"#brownie-points\" class=\"headerlink\" title=\"brownie points\"></a>brownie points</h2><p>a notional mark to one’s credit earned for being seen to do the right thing，因为被看见做了正确的事，而得到抽象的表扬<br>现如今已经不光指代女童子军中的“做好事分数”，而是用于各种日常场合，指好评，认可和赞扬。常用搭配有earn/score (some) brownie points。</p>\n<h2 id=\"hit-the-jackpot\"><a href=\"#hit-the-jackpot\" class=\"headerlink\" title=\"hit the jackpot\"></a>hit the jackpot</h2><p>to win a large amount of money gambling or in a lottery; to be exactly right; to find exactly what was sought，在赌博或彩票中赢得一大笔钱；绝对正确；找到了确切的答案<br>指中头彩，中大奖，获得了与金钱相关的巨大胜利，它可以来自赌博或投资等等。除此之外，它还可以表示说对了，一语中的，或是发现了真谛。<br>jackpot是起源于美国1870年代的一种赌牌游戏。参与者先把下的注都放进牌桌中心的pot（奖池）里，游戏规则是每人发5张牌，谁的手里有大于10的一对牌，方可进行下一轮，没有直接淘汰。也就是说，手里至少有一对Jack，才有赢得pot里筹码的机会。</p>\n","categories":["English"],"tags":["English"]},{"title":"Oral English 2","url":"http://yoursite.com/2018/02/14/Oral-English-2/","content":"<h2 id=\"Phil’s-a-snore\"><a href=\"#Phil’s-a-snore\" class=\"headerlink\" title=\"Phil’s a snore.\"></a>Phil’s a snore.</h2><p>这个人太没劲儿。</p>\n<h3 id=\"讲解\"><a href=\"#讲解\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词snore，作动词表示‘打呼’。例句1. Stop snoring.别打呼了；例句2. You snore like a pig.你打鼾打的跟猪一样；作名词表示‘无聊的事情或人’。原句也可以改为：Phil’s a snore and he always makes us snore.Phil这个人很没劲，总是让我们打鼾（无聊后睡着）</p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>1.口语里表示‘无聊’的表达bore：He’s a bore.他这个人很没劲；boring指令人感到无聊的：He’s so boring.他让大家感到无聊；bored指自己感到无聊：He’s so bored.他感到很无聊；<br>2.发音技巧：口语里经常把is与主语连读：Bingo is here=Bingo’s here；My dad is a teacher=My dad’s a teacher.养成连读习惯，因为美国人很少说is，直接是‘s.</p>\n<h2 id=\"I’ll-go-see-if-the-idiot-has-checked-in-yet\"><a href=\"#I’ll-go-see-if-the-idiot-has-checked-in-yet\" class=\"headerlink\" title=\"I’ll go see if the idiot has checked in yet.\"></a>I’ll go see if the idiot has checked in yet.</h2><p>我去看看那个白痴来了没。</p>\n<h3 id=\"讲解-1\"><a href=\"#讲解-1\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词check in，表示‘登记’；因为登记需要本人到场，所以原句中直接翻译成‘来’，口语里的check in比较多的是酒店登记入住与机场办登记手续.例句：1. What time should I check in?我几点来登记入住比较好？2. go to the check-in counter去登记台办理登机手续</p>\n<h3 id=\"补充-1\"><a href=\"#补充-1\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>check在口语里作动词可表示1. 检查：go check the second floor去看下二楼；2. double-check再次检查；3. 寄存：I’m gonna go check my coat.我去把外套寄存一下；4. 下象棋时表示：将你的军！；5. 作名词表示‘账单’，在国外吃完喝完就和服务员说：Check, please.表示‘买单’。</p>\n<h2 id=\"Or-perhaps-you’re-turning-your-back-on-a-man-wrongfully-accused\"><a href=\"#Or-perhaps-you’re-turning-your-back-on-a-man-wrongfully-accused\" class=\"headerlink\" title=\"Or perhaps you’re turning your back on a man wrongfully accused.\"></a>Or perhaps you’re turning your back on a man wrongfully accused.</h2><p>又或者是你要离开的人是被冤枉的。</p>\n<h3 id=\"讲解-2\"><a href=\"#讲解-2\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语1. turn one’s back on…表示‘忽略，抛弃…‘。别人对你不理睬转身离去你就可以说Don’t turn your back on me!；别人放弃一个好的职业你可以劝他说You can’t just turn your back on your career；关键短语2. wrongfully accused.Wrong表示‘错误的’；wrongful表示‘不公平的，不合法的’；违法抓人就是arrest someone wrongfully；accuse表示‘指责，控告’；常见搭配：accuse sb of sth因为某事指责或控告某人，例句：Now you’re accusing me of this?你现在觉得事情怪我？（被冤枉时可以说）</p>\n<h3 id=\"补充-2\"><a href=\"#补充-2\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>back作名词表示‘背部’，必须知道的还有：I got your back.我帮你，我顶你；You’d better watch your back.你最好小心点；My back hurts.我背部疼。</p>\n<h2 id=\"It’s-time-to-take-the-kissing-up-a-notch\"><a href=\"#It’s-time-to-take-the-kissing-up-a-notch\" class=\"headerlink\" title=\"It’s time to take the kissing up a notch.\"></a>It’s time to take the kissing up a notch.</h2><p>是时候让接吻上升一个高度了。</p>\n<h3 id=\"讲解-3\"><a href=\"#讲解-3\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词notch表示‘等级’，take sth up to a notch即表示‘将某事带到一个新的高度‘，take sth down n notch则表示‘将某事降一个高度’，动词可以换，比如tone作动词表示‘用某种语调说话’，tone it down a notch表示说话音调稍微小一点。</p>\n<h3 id=\"补充-3\"><a href=\"#补充-3\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>类似的表达还有take sth to the next level表示将某事带到一个新的阶段，例句：It’s time to take our relationship to the next level.是时候将我们的恋情发展到一个新的高度了；a notch below表示‘稍微差一点’，例句：This movie is a notch below that one.这部电影比那部稍微差一点；a notch above则表示‘稍微好一点’，例句：Tom is a notch above her.Tom比她稍微强一点；top-notch字面意思表示最高等级的；作形容词表示最好的。We need to find some top-notch players.我们得引入一些最顶尖的球员。</p>\n<h2 id=\"I-gotta-break-in-my-new-bag\"><a href=\"#I-gotta-break-in-my-new-bag\" class=\"headerlink\" title=\"I gotta break in my new bag.\"></a>I gotta break in my new bag.</h2><p>我得赶紧背上我的新包。</p>\n<h3 id=\"讲解-4\"><a href=\"#讲解-4\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语break sth in表示‘穿戴’，一般是新买的，赶紧穿戴来适应；例句：When are you gonna break in the shoes you bought last week?你什么时候穿上周新买的鞋？</p>\n<h3 id=\"补充-4\"><a href=\"#补充-4\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>break in最常见的意思表示1. ‘强行入室’。例句：We can’t just break in.我们不能就这样强行进去；2. break in on表示‘打扰，影响到’。例句：The noise from outside broke in on my thoughts.外面的噪音打扰到了我的思路；关于break必须要知道的短语还有：break up with someone与某人分手；break sth off断绝某种关系；Break a leg!祝你好运（上台表演时才用）；break down机器的瘫痪或人的崩溃；take a break休息一下；break the ice打破沉默</p>\n<h2 id=\"That’s-some-drama\"><a href=\"#That’s-some-drama\" class=\"headerlink\" title=\"That’s some drama.\"></a>That’s some drama.</h2><p>真是场好戏啊。</p>\n<h3 id=\"讲解-5\"><a href=\"#讲解-5\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词drama表示’戏剧‘，在口语中经常用来表示带有戏剧性的好戏；固定短语drama queen则用来表示一个很喜欢戏剧化小题大作的人，例句：Don’t be such a drama queen.不要如此小题大作；与它相似的短语是make a scene，表示‘引起众人围观’，例句：Keep it down. You will make a scene.小声点，不然会引来大家围观的。</p>\n<h3 id=\"补充-5\"><a href=\"#补充-5\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>drama的形容词dramatic表示戏剧化的，当一个人小题大作时，你可以对他说：You’re being so dramatic.你也太喜欢戏剧化了；相思词是emotional表示情绪化的：Don’t be so emotional.别太情绪化；相关表达还有：Keep it low.低调点；You gotta lay low.你得保持低调；Don’t make a big deal about it.别小题大作。</p>\n<h2 id=\"Since-I’m-the-new-girl-I-figured-there’d-be-some-hazing\"><a href=\"#Since-I’m-the-new-girl-I-figured-there’d-be-some-hazing\" class=\"headerlink\" title=\"Since I’m the new girl, I figured there’d be some hazing.\"></a>Since I’m the new girl, I figured there’d be some hazing.</h2><p>由于我是新人，我也想到我会被欺负了。</p>\n<h3 id=\"讲解-6\"><a href=\"#讲解-6\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词1. figure，除了熟悉的表示‘数字’，‘人物’等意思之外，口语中经常表示动词‘以为，想到’，一般用过去时形式较多，例句1：You’re the boss. So I figured maybe you could help me.你是老大，所以我觉得或许你能帮我；例句2：A: She’s not coming.她不来了；B: Yeah, I figured.嗯，我想到了；关键词2. hazing表示‘被欺负’，例句：There’s lots of hazing in the military.部队里有很多人被欺负的现象。</p>\n<h3 id=\"补充-6\"><a href=\"#补充-6\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>hazing的原形haze作名词表示‘雾霾’，形容词hazy表示‘雾霾很多的’.例句：It’s very hazy in Shanghai today.今天上海雾霾很严重；hazy还可表示模糊的。例句：My memories of his are very hazy.我对他的记忆很模糊了；雾很大也可说it’s very foggy.</p>\n<h2 id=\"For-starters-she’s-always-harsh-on-my-body\"><a href=\"#For-starters-she’s-always-harsh-on-my-body\" class=\"headerlink\" title=\"For starters, she’s always harsh on my body.\"></a>For starters, she’s always harsh on my body.</h2><p>首先，她一直对我的身材要求很苛刻。</p>\n<h3 id=\"讲解-7\"><a href=\"#讲解-7\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语1. for starters表示‘首先’，在举例陈述第一条时经常用，同义短语还有firstly；first of all；to start with；to begin with，在做presentation时可表达多元化；关键短语2. Harsh on表示对…要求苛刻，例句：You’re being too harsh on your kid.你对你小孩太过于严格；同义短语是be hard on，例句：Don’t be so hard on him.别对他太严格了；因为hard口语里经常表示严格痛苦.Don’t give me a hard time.的意思就是‘别跟我过不去，别故意让我难受’。中文里的敬酒不吃吃罚酒在英语里就可以用You want to do this the hard way?来表达。</p>\n<h3 id=\"补充-7\"><a href=\"#补充-7\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>starter在英式英语里表示‘开胃菜’；美国人则用appetizer.</p>\n<h2 id=\"They-started-to-pick-on-me-after-I-just-arrived\"><a href=\"#They-started-to-pick-on-me-after-I-just-arrived\" class=\"headerlink\" title=\"They started to pick on me after I just arrived.\"></a>They started to pick on me after I just arrived.</h2><p>我刚到他们就开始欺负我。</p>\n<h3 id=\"讲解-8\"><a href=\"#讲解-8\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语pick on sb表示‘欺负某人’，例句：John’s always picking on me.John总是欺负我；美国校园里也有恶霸，叫bully.也可作动词，例句：I hate bullies. Theys always bully people for no reason.我讨厌恶霸们，他们总是毫无理由欺负别人。</p>\n<h3 id=\"补充-8\"><a href=\"#补充-8\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>流氓可以叫hooligan或thug；关于pick必须掌握的用法还有：1. just pick one.随便选一个吧；2. Take your pick.开始选吧；3. pick sb up去接某人；4. be picky挑剔的：Don’t be so picky about food.别这么挑食；5. pick one’s nose挖鼻孔；6. toothpick牙签；7. cherry-pick择优挑选；8. pick holes in找茬儿，例句：Why do you always pick holes in what I do?为什么不管我做什么你都找茬儿？</p>\n<h2 id=\"She’s-at-a-new-extension-I’ll-transfer-you\"><a href=\"#She’s-at-a-new-extension-I’ll-transfer-you\" class=\"headerlink\" title=\"She’s at a new extension. I’ll transfer you.\"></a>She’s at a new extension. I’ll transfer you.</h2><p>她有了新的分机号。我帮你转接。</p>\n<h3 id=\"讲解-9\"><a href=\"#讲解-9\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词1. extension在这里表示‘电话分机’。本意是‘延伸’；办公室分机号就是extension number.例句：I’m looking for Bingo. Do you know his extension number?我找Bingo.你知道他的分机号吗？关键词2. transfer表示‘转移转让’，此处表示‘转机’，例句：Could you transfer me to him?能把我转接到他吗？My boss is transferring me to Hong Kong.我老板要把我调到香港去。</p>\n<h3 id=\"补充-9\"><a href=\"#补充-9\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>和老外打电话比面对面聊天难度大。学会这些表达：1. Hello?喂？；2. You still there? 还在吗？；3. I’m losing you.听不到你说话了；4. Sorry I have bad reception.不好意思我信号不好；5. The connection is bad. I’ll call you back.信号不好。等会打给你。</p>\n<h2 id=\"We’re-just-gonna-drop-Hilary-off-and-come-right-back-home\"><a href=\"#We’re-just-gonna-drop-Hilary-off-and-come-right-back-home\" class=\"headerlink\" title=\"We’re just gonna drop Hilary off and come right back home.\"></a>We’re just gonna drop Hilary off and come right back home.</h2><p>我们把Hilary送到那之后立马就会回家。</p>\n<h3 id=\"讲解-10\"><a href=\"#讲解-10\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语drop sb off，表示‘开车将某人放下’；比如你的朋友开车送你回家，到家门口你可以说：Just drop me off here.我在这下车就好；Drop him off at my sister’s place.把他送到我姐姐家吧；come right back home表示马上回家。英语里经常在back前面加right强调很快马上。比如和朋友聊天你要出去一下，你可以说I’ll be right back.表示我马上回来。</p>\n<h3 id=\"补充-10\"><a href=\"#补充-10\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>关于开车送人还需要知道的表达有：1. Give sb a ride载某人一程：Could you give me a ride home?能载我回家吗？；2. Take sb for a ride带某人兜风：Let me take you for a ride.我带你出去兜一圈；3. hitch-hike免费搭顺风车旅游（老外特别喜欢这样）</p>\n<h2 id=\"She-was-potty-trained-at-eight-months\"><a href=\"#She-was-potty-trained-at-eight-months\" class=\"headerlink\" title=\"She was potty-trained at eight months.\"></a>She was potty-trained at eight months.</h2><p>她八个月大就教她如何上厕所了。</p>\n<h3 id=\"讲解-11\"><a href=\"#讲解-11\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词potty表示‘马桶（小孩用语）’；trained表示‘被培训’。美国人会在小孩小的时候教他们如何如厕，文化差异是美国的小孩儿是不穿开裆裤的，中国小孩基本都穿过，英语里会经常用一些迭声词跟小孩沟通，比如：wee-wee/pee-pee小便；poo-poo大便；choo-choo火车；还有些词成人也用，如nighty-night晚安；okeydokey好的.</p>\n<h3 id=\"补充-11\"><a href=\"#补充-11\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>toilet在英式英语表示厕所；去洗手间就是go to the toilet；英国人还喜欢用loo；toilet在美语里表示马桶；美国人喜欢用bathroom/washroom/restroom表示厕所：I’m gonna go to the bathroom.我去下洗手间。Bathroom原本指家里的卫生间，朋友之间在公共场所也会用。女生也可以说go to the ladies’ room；男生则用go to the men’s room.</p>\n<h2 id=\"Obese-knees-are-the-hardest\"><a href=\"#Obese-knees-are-the-hardest\" class=\"headerlink\" title=\"Obese knees are the hardest.\"></a>Obese knees are the hardest.</h2><p>肥胖的膝盖是最难弄的。</p>\n<h3 id=\"讲解-12\"><a href=\"#讲解-12\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词obese表示‘超级胖的’，名词为obesity.Obesity is a very serious problem in the US.在美国，肥胖是很严重的问题。因为美国人吃junk food（垃圾食品）很多，开车也比较多。Fat作形容词表示胖的；胖子叫fatty；胖猪叫fat-ass；fat作名词表示脂肪；fatty表示脂肪多的：You gotta go easy on fatty foods.你一定要少吃脂肪多的食物。</p>\n<h3 id=\"补充-12\"><a href=\"#补充-12\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>文化差异：中国人对身边胖的朋友喜欢昵称叫‘胖子’，但是fat在英语里是贬义词，如果一个人胖，你可以描述说：He’s a big guy.不要说He’s a fat guy.身材好可以说She’s slim或者She has a good body或She’s in good shape.Thin表示‘瘦’，在英语里也是贬义词。</p>\n<h2 id=\"You’re-on-your-own-buddy\"><a href=\"#You’re-on-your-own-buddy\" class=\"headerlink\" title=\"You’re on your own, buddy.\"></a>You’re on your own, buddy.</h2><p>哥们，你得靠你自己了。</p>\n<h3 id=\"讲解-13\"><a href=\"#讲解-13\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语on one’s own靠自己，例句：She did that all on her own.她是靠自己完成的；From now on, you’re financially on your own.从现在开始，你经济独立了！</p>\n<h3 id=\"补充-13\"><a href=\"#补充-13\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>1.拒绝帮别人时可以说：1. There’s nothing I can do (about it).我也无能为力；2. I would if I could.（完整为：I would help you if I could help you）爱莫能助；3. I’ll see what I can do.我尽力而为吧。<br>2.buddy表示朋友间的哥们；美国的父亲也喜欢叫儿子buddy，或简短的bud.美国人叫哥们还喜欢用man，dude，bro；英国人澳大利亚人喜欢用man，mate.在伦敦经常听到英国人说：Cheers, mate.Cheers在这表示‘谢谢’。美国人则会说：Thanks, buddy.</p>\n<h2 id=\"I-know-Tell-me-about-it\"><a href=\"#I-know-Tell-me-about-it\" class=\"headerlink\" title=\"I know. Tell me about it.\"></a>I know. Tell me about it.</h2><p>我知道。可不是嘛！</p>\n<h3 id=\"讲解-14\"><a href=\"#讲解-14\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>I know看似简单，有两个注意点，1. 翻译成中文应是‘我知道’，而在别人告知或讲解后你该说‘我知道了’，对应英文则是：I see；Got it；Got you（Gotcha）；2. 对于别人说的你感同身受时，美国人喜欢说：I know, right?表示赞同。例句：A: It’s too hot in here.这儿太热了；B: I know, right?就是啊！Tell me about it字面意思是‘跟我说说这个’，在两种语境可用：1. 有人说We kissed last night（我们昨晚接吻了）；你可以说Tell me about it.这时对方是需要跟你描述昨晚的事的；2. 当对方说一件很明显或让你感同身受的事情时，比如It’s too hot in Shanghai.上海太热了，你说Tell me about it.意思是‘可不是嘛’，这时是不需要继续描述的。</p>\n<h2 id=\"Since-you-volunteered-no-take-backs\"><a href=\"#Since-you-volunteered-no-take-backs\" class=\"headerlink\" title=\"Since you volunteered, no take-backs.\"></a>Since you volunteered, no take-backs.</h2><p>你既然主动报名了，不准反悔哦。</p>\n<h3 id=\"讲解-15\"><a href=\"#讲解-15\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语take sth back，表示拿回某物；口语里在说了自己后悔的话之后，可以说：I take it back.我收回我说的话；原句里的take-back是名词形式，动词短语连起来可表示名词，类似的还有：take sth away拿走某物；takeaway外卖，例句：Let’s order some Chinese takeaway.我们打电话叫中餐外卖吧。Volunteer可作名词表示志愿者；也可作动词表示‘主动做某事’。</p>\n<h3 id=\"补充-14\"><a href=\"#补充-14\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语里说的‘话’经常用word这个词来表示，eat one’s words可以表示‘收回说的话’，跟吃没有关系；I give you my word或者You have my word都表示‘我向你保证’；Keep your word不准食言；have a word with you跟你说句话</p>\n<h2 id=\"Chop-Chop\"><a href=\"#Chop-Chop\" class=\"headerlink\" title=\"Chop-Chop.\"></a>Chop-Chop.</h2><p>快点！</p>\n<h3 id=\"讲解-16\"><a href=\"#讲解-16\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>chop本身意思为‘剁碎’；可以想象烧菜时迅速切菜的动作，表示非常迅速；例句：We’re running late. Chop-chop.我们要迟到了，快点。</p>\n<h3 id=\"补充-15\"><a href=\"#补充-15\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>1.口语里经常用的表示快点的短语有：1. Hurry up；2. Come on/C’mon；3. Move it快点走；4. Get a move on!；5. Be quick（用的很少）；<br>2.美国人还喜欢在句子后面加already这个词表示快做某事；有人有事不告诉你，你就可以说Tell me already.快点告诉我；你敲门很久没人开门你可以说Open the door already.快点开门；<br>3.chopper则是俚语，表示‘直升机（helicopter）’；<br>4.在句尾加real quick，表示很快回来：I’m gonna go to the bathroom real quick.我去趟洗手间，很快的。</p>\n<h2 id=\"She’s-really-slammed-Let’s-not-bother-her\"><a href=\"#She’s-really-slammed-Let’s-not-bother-her\" class=\"headerlink\" title=\"She’s really slammed. Let’s not bother her.\"></a>She’s really slammed. Let’s not bother her.</h2><p>她手里太多工作了。我们不要去麻烦她了。</p>\n<h3 id=\"讲解-17\"><a href=\"#讲解-17\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>slam作动词表示‘砰地关上’，如slam the door用力关门；在美国俚语中可表示给某人安排很多工作。例句：My boss slammed me before I was about to leave.我刚准备走，老板给我加了很多工作。所以原句中slammed作形容词表示工作很多很忙；bother作动词表示‘麻烦或骚扰’：1. Don’t bother to call me.别打电话给我了（打了我也不会接）；2. Is this guy bothering you?这人是不是在骚扰你？</p>\n<h3 id=\"补充-16\"><a href=\"#补充-16\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语里表示忙碌可用：I’m really busy；I’m really swamped；My hands are full；I have a lot on my plate；正在忙可以说：I’m in the middle of something.；the slam是俚语表示监狱；Slam dunk表示‘灌篮’。</p>\n<h2 id=\"High-school-for-me-was-no-picnic\"><a href=\"#High-school-for-me-was-no-picnic\" class=\"headerlink\" title=\"High school for me was no picnic.\"></a>High school for me was no picnic.</h2><p>高中对于我来说蛮艰难的。</p>\n<h3 id=\"讲解-18\"><a href=\"#讲解-18\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>picnic除了表示野餐外，还可表示简单的事情。‘no picnic‘是固定表达表示艰难的事情。例句：Memorizing 500 new words a day is no picnic.一天背诵500个生词很难。</p>\n<h3 id=\"补充-17\"><a href=\"#补充-17\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>1.口语中表示事情或任务很简单轻松的表达有名词breeze/cinch/child’s play/a piece of cake/duck soup；有形容词easy/easy-breezy/easy as pie；<br>2.表示轻松成功做成某事可以说nail sth或kill sth.比如有人问你how was the interview?面试进展怎么样？你就可以回答：Nailed it.成功搞定了；你朋友上台之前紧张，你可鼓励说：You will kill it.你会成功搞定的。</p>\n<h2 id=\"Alright-Bring-it-in\"><a href=\"#Alright-Bring-it-in\" class=\"headerlink\" title=\"Alright. Bring it in!\"></a>Alright. Bring it in!</h2><p>好吧。过来拥抱一下。</p>\n<h3 id=\"讲解-19\"><a href=\"#讲解-19\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语bring it in字面意思是‘把它带进来’，其实是美国人在要和对方拥抱时经常说的话。也可以是人多时，比如教练会说bring it in, guys.就是让大家过来聚在一起打气。所以下次要让对面的人过来拥抱一下除了说give me a hug让我抱一下外也可以说Bring it in.</p>\n<h3 id=\"补充-18\"><a href=\"#补充-18\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>美国人英国人的肢体动作比较多，男生之间握手要用力，别人会夸你good handshake，否则会觉得很weak（弱）；击掌可以说：High five!或Give me five；击拳可以说：Pound it!；女孩之间在亲脸颊（kiss on the cheek）比较普遍，可以亲一边；要是好久不见也可用力亲两边；刚认识的朋友一般不亲。</p>\n<h2 id=\"Cuz-my-tai-chi-class-is-doing-a-pub-crawl\"><a href=\"#Cuz-my-tai-chi-class-is-doing-a-pub-crawl\" class=\"headerlink\" title=\"Cuz my tai chi class is doing a pub crawl.\"></a>Cuz my tai chi class is doing a pub crawl.</h2><p>因为我们太极班的同学今天要各种串吧。</p>\n<h3 id=\"讲解-20\"><a href=\"#讲解-20\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>这边涉及到文化特色的问题，pub表示小酒馆或小酒吧，也可说tavern或bar；crawl表示‘爬行’。因为西方人喜欢喝酒的文化，pub crawl（也叫bar crawl）表示的是一种喝酒活动，一帮朋友组队，一个下午或一个晚上要去很多酒吧喝酒，在这家喝完去那家喝，感觉是从这家爬到那家似的。Bar crawl因此而得名。</p>\n<h3 id=\"补充-19\"><a href=\"#补充-19\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>关于酒吧，bar指那种一般安静可聊天的酒吧；club或nightclub指夜店；如果在夜店，bar则表示‘吧台’，家里的吧台也叫bar.例句：let’s go to the bar.我们去吧台吧；Let’s go to a bar.我们去一家酒吧吧。注意区别。西方大部分酒吧也是不可以抽烟的。</p>\n<h2 id=\"We’re-screwed\"><a href=\"#We’re-screwed\" class=\"headerlink\" title=\"We’re screwed.\"></a>We’re screwed.</h2><p>我们完蛋了。</p>\n<h3 id=\"讲解-21\"><a href=\"#讲解-21\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词screw，除了熟悉的作名词表示螺丝钉；作动词表示‘拧’之外，口语中经常表示气愤生气，例句：Screw out!去你的！；Screw that!管它呢！；用screw的被动形式screwed表示完蛋了，是screwed up的简写：You’re so screwed (up).你毁了！</p>\n<h3 id=\"补充-20\"><a href=\"#补充-20\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>关于screw必须要知道的表达有1. screw sth up搞砸了：Sorry I screwed up.对不起我搞砸了；2. screw around乱搞男女关系或闹着玩儿（具体看语境）：You can’t screw around.不要到处瞎搞；We’re just screwing around.我们俩闹着玩的；3. screw sb up使某人精神崩溃：Your divorce is gonna screw you up.离婚会让你崩溃的。</p>\n<h2 id=\"Any-other-topping-suggestions\"><a href=\"#Any-other-topping-suggestions\" class=\"headerlink\" title=\"Any other topping suggestions?\"></a>Any other topping suggestions?</h2><p>顶部要放什么配料呢？</p>\n<h3 id=\"讲解-22\"><a href=\"#讲解-22\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词topping，由top变化而来，top作名词表示‘顶部’或女生穿的短袖体恤等，the top ten players最顶尖的十位球员；所以形容词topless表示上身裸体的；top作动词表示‘超越’，例句：She topped her last performance.她这次的表演超过了上次；topping作名词表示食物顶部加的配料；在英式英语中topping作形容词表示特别棒的，等于excellent.</p>\n<h3 id=\"补充-21\"><a href=\"#补充-21\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>关于top必须要知道的还有1. tops表示‘顶多’，放于句尾：I have 5 dollars, tops.我身上最多5块钱；2. off the top of my head我首先想到的是；3. on top of the world特别开心；4. top up my phone给我手机充值</p>\n<h2 id=\"Hey-dig-in-guys\"><a href=\"#Hey-dig-in-guys\" class=\"headerlink\" title=\"Hey, dig in, guys.\"></a>Hey, dig in, guys.</h2><p>大家开吃吧！</p>\n<h3 id=\"讲解-23\"><a href=\"#讲解-23\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词dig in，字面意思是在里面挖，想象吃饭时就不难理解了。在美国家庭中，坐上饭桌时主人家长会说这句话，也会有人说Bon appetit.法语，表示有个好胃口.</p>\n<h3 id=\"补充-22\"><a href=\"#补充-22\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>在国外吃饭点餐要学会说1. take it easy on…, please少放一点：Take it easy on the onions please少放点洋葱；2. hold the…不要放：Hold the onions please不要放洋葱；3. 点餐请用Can I have…句型，不要说I want…；4. Check, please买单；关于dig还要知道：1. do some digging做些调查；2. I dig you我喜欢你（dig在口语中可表示like喜欢）；3. Can you dig it你明白吗；4. This is my digs.我住这.加了s的digs表示住处</p>\n<h2 id=\"Let’s-pinky-swear\"><a href=\"#Let’s-pinky-swear\" class=\"headerlink\" title=\"Let’s pinky swear.\"></a>Let’s pinky swear.</h2><p>我们拉钩。</p>\n<h3 id=\"讲解-24\"><a href=\"#讲解-24\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>pinky和粉色没有关系，这边表示小拇指，也可写成pinkie，swear在这表示发誓，小拇指的发誓就是我们所说的拉钩一百年不许变。美国人在和别人有约定后还喜欢说You promise?你能保证吗？</p>\n<h3 id=\"补充-23\"><a href=\"#补充-23\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>1.swear to sth表示对…发誓：I swear to God.我对天发誓；swear on sth表示以…发誓：I swear on my life.我以我姓名发誓；swear allegiance to…表示对…宣誓衷心；<br>2.swear还可以作动词表示‘说脏话’：don’t swear不要说脏话；swear words脏话；<br>3.关于pink还要知道in the pink表示健康面色红润：My dad’s in the pink.我爸现在身体不错；tickled pink很开心：I’m tickled pink to see you.看到你我很开心。</p>\n<h2 id=\"I-am-so-hung-over\"><a href=\"#I-am-so-hung-over\" class=\"headerlink\" title=\"I am so hung-over.\"></a>I am so hung-over.</h2><p>我现在特别宿醉。</p>\n<h3 id=\"讲解-25\"><a href=\"#讲解-25\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词hung-over形容词，表示宿醉，名词是hangover.用法：I’m having a huge hangover right now也表示我现在很宿醉；宿醉的特点就是头疼（have a headache）；身体缺水（dehydrated）；喝多了叫drunk；烂醉叫trashed/wasted/loaded/hammered，还有一个搞笑的说法是three sheets to the wind；微醺叫buzzed或tipsy；很清醒叫sober；酒量很好叫can drink like a fish.</p>\n<h3 id=\"补充-24\"><a href=\"#补充-24\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>关于hang必须要知道的表达还有：1. Hang in there.加油，顶住；2. Hang on (a second)等下；3. leave sb hanging让某人干等着；4. How’s it hanging=How’s it going最近怎么样；5. hang out一起玩，放松（不一定是在外面）hang out at my place在我家玩</p>\n<h2 id=\"Pick-up-the-energy\"><a href=\"#Pick-up-the-energy\" class=\"headerlink\" title=\"Pick up the energy.\"></a>Pick up the energy.</h2><p>振作起来！</p>\n<h3 id=\"讲解-26\"><a href=\"#讲解-26\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>pick up最简单的意思是‘捡起来’，原句字面意思表示把能量捡起来，其实就是振作的意思。如果是心情的失落需要振作就说：Pull yourself together. Pick up的意思还有1. 取东西：I’m here to pick up my jacket.我来取我的外套；2. 随便学点：I picked up some French when I was in Paris.我在巴黎的时候学了点法语；3. 接人：I’ll pick you up at 5.我五点钟接你；4. 变好了：My luck has picked up.我转运了；5. 振作精神，提神：He picked me up at my lowest.在我人生最低谷时他帮我重新振作；I need something to pick myself up.我得喝点东西提神。名词pick-me-up表示提神的东西。例句：What’s your morning pick-me-up?你早上喝什么提神？；6. pick-up (truck)客货两用的卡车</p>\n<h2 id=\"Sorry-I-just-blew-it\"><a href=\"#Sorry-I-just-blew-it\" class=\"headerlink\" title=\"Sorry I just blew it.\"></a>Sorry I just blew it.</h2><p>对不起，我搞砸了。</p>\n<h3 id=\"讲解-27\"><a href=\"#讲解-27\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词blow，都知道blow表示‘吹’，如blow out the candles吹灭蜡烛；the wind is blowing in my face风吹打着我的脸；blow dry吹干；blow dryer电吹风；但是blow在口语中经常表示‘搞砸’，如：I blew my test yesterday我昨天的测试搞砸了；Don’t blow it this time.这次别搞砸了.</p>\n<h3 id=\"补充-25\"><a href=\"#补充-25\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>搞砸了美语里还有：mess sth up/screw sth up.Don’t mess it up别搞砸了；关于blow必须要知道的用法还有：1. blow money挥霍钱：I blew 5 grand last night昨晚我挥霍了5000美金；2. blow sb off爽约：She blew me off again她又放我鸽子了；3. blow my mind使我震撼。</p>\n<h2 id=\"I-think-you-need-to-cut-her-some-slack\"><a href=\"#I-think-you-need-to-cut-her-some-slack\" class=\"headerlink\" title=\"I think you need to cut her some slack.\"></a>I think you need to cut her some slack.</h2><p>我觉得你对她应该松懈一点。</p>\n<h3 id=\"讲解-28\"><a href=\"#讲解-28\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语cut sb some slack，本意表示‘允许某人稍微落后，休息’，也就是不要要求太苛刻。比如你已经工作了一天你女朋友还让你打扫家里，你可以说：Cut me some slack.让我休息放我一马的意思；相似的表达是give sb a break，字面意思是让某人休息一下。比如你酒量不好，有人一直盯着你让你喝，你可以说Come on, give me a break.拜托，放我一马吧。<br>注：Give me a break也可以表示对别人说的话不相信，换个语境意思就是：你可以拉倒吧！</p>\n<h3 id=\"补充-26\"><a href=\"#补充-26\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>slack作形容词表示疏忽的松懈的；slacker表示懒鬼。关于cut的表达还需要知道：Cut it out.赶紧停止吧！；cut in line插队，不要插队：Don’t cut in line.或No cuts, no buts, no coconuts.或直接No cutsies!</p>\n<h2 id=\"Hilary-hooked-up-with-a-boy-at-a-party-this-weekend\"><a href=\"#Hilary-hooked-up-with-a-boy-at-a-party-this-weekend\" class=\"headerlink\" title=\"Hilary hooked up with a boy at a party this weekend.\"></a>Hilary hooked up with a boy at a party this weekend.</h2><p>这个周末Hilary在一个派对上跟一个男生好上了。</p>\n<h3 id=\"讲解-29\"><a href=\"#讲解-29\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语hook up，表示‘与某人搞上了’，由于西方的性文化，hook up with sb一般是指两个人发生性关系，但也不绝对；hook sb up with sb还可以单纯表示介绍两人相识：Could you hook me up with your boss?能介绍我跟你老板认识吗？；hook sb up with sth表示帮某人搞到某物：My buddy hooked me up with 2 tickets我哥们帮我搞到了两张票。</p>\n<h3 id=\"补充-27\"><a href=\"#补充-27\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>hook本身的意思是钩子；fishhook表示鱼钩；所以其形容词hooked表示上瘾了；短语是hooked on：My brother is hooked on computer games.我弟弟网游上瘾了；Don’t ever get hooked on drugs.永远不要对毒品上瘾。Hooker则表示妓女，很常用。</p>\n<h2 id=\"Real-estate’s-great-for-those-that-are-business-savvy\"><a href=\"#Real-estate’s-great-for-those-that-are-business-savvy\" class=\"headerlink\" title=\"Real estate’s great for those that are business savvy.\"></a>Real estate’s great for those that are business savvy.</h2><p>房地产适合这些会做生意的。</p>\n<h3 id=\"讲解-30\"><a href=\"#讲解-30\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词1：real estate表示房地产；房地产中介公司就说real estate agency；中介要拿提成，在英文里是commission（佣金）；中介人就是realtor.关键词2：savvy作名词可表示懂行的人，专家。原句中business savvy就是生意专家，也就是会做生意的人；如果你对电器电子设备懂的多，你就是一个tech savvy，科技专家。</p>\n<h3 id=\"补充-28\"><a href=\"#补充-28\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>在某个领域的专家叫expert；医学类的专家是specialist；如果很擅长做某事可以说be adept at，如：He’s so adept at negotiating.他是个谈判专家；如果一窍不通可以说：know nothing about：I know nothing about singing.我不懂唱歌；don’t know the first thing about：You don’t know the first thing about marriage.你对婚姻根本不懂。</p>\n<h2 id=\"We-all-took-a-bunch-of-goofy-photos\"><a href=\"#We-all-took-a-bunch-of-goofy-photos\" class=\"headerlink\" title=\"We all took a bunch of goofy photos.\"></a>We all took a bunch of goofy photos.</h2><p>我们都拍了一些很傻的照片。</p>\n<h3 id=\"讲解-31\"><a href=\"#讲解-31\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>a bunch of表示‘一些’，也可用a few，美国人特别喜欢用a couple of，a couple表示一对夫妇或情侣；所以a couple of严格来说表示两天，但是口语里经常表示两三天，一个不确定的数字。并且of是经常省略掉也不发音的，如：a couple days ago两三天前；goofy是形容词表示愚笨的，可爱且傻傻的感觉。和silly表示傻的差不多，没有恶意。Dumb或stupid表示愚蠢就是贬义了；goof作名词可表示小傻蛋，动词短语goof around表示不做正事的度过时间。</p>\n<h3 id=\"补充-29\"><a href=\"#补充-29\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>拍照片叫take a picture/photo；想和别人合照说：Can I take a picture with you?；想请别人帮你拍照说：Could you take a picture for me?；想让别人拍张你的照片说：Could you take a picture of me?自拍叫take a selfie.</p>\n<h2 id=\"You-need-to-chill\"><a href=\"#You-need-to-chill\" class=\"headerlink\" title=\"You need to chill.\"></a>You need to chill.</h2><p>你得淡定下来。</p>\n<h3 id=\"讲解-32\"><a href=\"#讲解-32\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词chill作动词表示‘冷静，放松’，省略了out.有人冲动或不淡定时你就可以说you gotta chill (out).在口语里美国人经常用chill来表示relax（放松），没做什么特别的事情的时候，别人问你在干嘛，你就可以说：Just chilling at home.在家休息放松呢。</p>\n<h3 id=\"补充-30\"><a href=\"#补充-30\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>1.表示淡定还可以说Calm down；Cool it；Take a chill pill；英国人喜欢说Wind down；<br>2.美国人现在还喜欢说Chillax表示淡定，是chill与relax的合成词，类似的词还有fantabulous特别棒的，是fantastic+fabulous的合成版；<br>3.chill作名词可表示寒冷，chilly作形容词表示寒冷的.例句：It’s a bit chilly outside.外面有点冷。</p>\n<h2 id=\"I-gave-her-the-chance-to-come-clean-and-she-lied-to-my-face\"><a href=\"#I-gave-her-the-chance-to-come-clean-and-she-lied-to-my-face\" class=\"headerlink\" title=\"I gave her the chance to come clean and she lied to my face?\"></a>I gave her the chance to come clean and she lied to my face?</h2><p>我给她机会实话实说她却当着我的面撒谎？</p>\n<h3 id=\"讲解-33\"><a href=\"#讲解-33\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语1：come clean表示实话实说，例句：You gotta come clean about your job.你必须把你的工作老实说一下；关键短语2：to my face表示当着我的面，例句：You’re calling him to my face?你当着我的面给他打电话？</p>\n<h3 id=\"补充-31\"><a href=\"#补充-31\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>与某人实话实说还可以说：be honest with：You’d better be honest with me.最好跟我说实话；level with sb：I’m just gonna level with you.我就跟你实话实说了；clean除了表示干净还可以表示一个人没有犯罪或吸毒：he’s clean.他没事（警匪片经常听到）；in one’s face表示‘直接，挑衅’：He slammed the door in my face.他直接甩门而走；lose face丢脸；save face挽回颜面。</p>\n<h2 id=\"She’s-a-mess\"><a href=\"#She’s-a-mess\" class=\"headerlink\" title=\"She’s a mess.\"></a>She’s a mess.</h2><p>她的生活完全乱套了。</p>\n<h3 id=\"讲解-34\"><a href=\"#讲解-34\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词mess，作名词表示‘混乱’，形容词messy表示混乱的；可以是东西的乱，如：My room is a mess/My room is messy.我的房间很乱；也可以是人生活的混乱：My life is a mess.我也不知道过的什么日子；作动词经常表示弄脏弄乱搞砸，比如mess up：don’t mess up my couch别把我的沙发弄脏；You messed up again?你又搞砸了？；也经常表示‘惹怒’，比如mess with：Don’t mess with me.别惹我；mess with也表示闹着玩。Easy man. I’m just messing with you.淡定哥们，我跟你闹着玩的；mess around表示两个人胡闹着玩：We’re just messing around.我俩闹着玩呢，别当真。</p>\n<h3 id=\"补充-32\"><a href=\"#补充-32\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>一个人做事很有规划不混乱可以说organized，反义词则是disorganized.Bingo’s pretty disorganized.Bingo这个人做事挺混乱的。</p>\n<h2 id=\"You-know-that-made-no-sense-right\"><a href=\"#You-know-that-made-no-sense-right\" class=\"headerlink\" title=\"You know that made no sense, right?\"></a>You know that made no sense, right?</h2><p>你知道那根本说不通，对吧？</p>\n<h3 id=\"讲解-35\"><a href=\"#讲解-35\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>sense作动词表示感觉到，如：I’m sensing a little hostility here.我感到一点敌意；作名词表示感觉感官，如sense of humor幽默感；sense还可以作名词表示‘道理，合理性’；原句中make no sense的字面意思是没有任何道理合理性，即‘说不通’。下次别人做了或说了让你很奇怪的事情你可以说It doesn’t make any sense.这根本就说不通啊；别人不讲道理时你可以说Make some sense.讲点道理啊！</p>\n<h3 id=\"补充-33\"><a href=\"#补充-33\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>关于讲道理的表达还有：1. talk some sense into sb劝别人讲道理：You gotta talk some sense into her. She’s crazy.你赶紧劝她讲点道理，她疯了。；2. Be reasonable.你讲点道理！；3. In a sense从某种意义上来说。</p>\n<h2 id=\"This-is-a-breach-of-trust\"><a href=\"#This-is-a-breach-of-trust\" class=\"headerlink\" title=\"This is a breach of trust.\"></a>This is a breach of trust.</h2><p>你这是失信啊！</p>\n<h3 id=\"讲解-36\"><a href=\"#讲解-36\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词breach，作动词表示违背，如：breach a contract（合同）违约；也可作名词，结构为a breach of…：Y=This is a breach of promise.你这是违背诺言了；a breach of law违法；原句中a breach of trust表示违背了别人信任。</p>\n<h3 id=\"补充-34\"><a href=\"#补充-34\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语里关于失信的表达还有：1. You broke your promise；2. You didn’t keep your word/promise；相关表达：1. I trusted you.我之前都是相信的；2. Trust me on this one.这次相信我；3. You failed me.你辜负了我（fail sb表示辜负某人）；<br>文化补充：美国人喜欢给自己的孩子弄trust fund信托基金，给孩子经济上后援。这样的孩子叫trust fund baby.这个可以对应成中国的富二代。</p>\n<h2 id=\"She-was-completely-in-the-dark\"><a href=\"#She-was-completely-in-the-dark\" class=\"headerlink\" title=\"She was completely in the dark.\"></a>She was completely in the dark.</h2><p>她根本就不知情啊！</p>\n<h3 id=\"讲解-37\"><a href=\"#讲解-37\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语in the dark，字面意思表示在黑暗处，引申为‘不知情’。类似表达还有：keep sb in the dark不让某人知情：We must keep him in the dark about what’s going on.不能让他知道在发生什么；keep sth dark不要别人知道：keep his identity dark不要说他的身份；dark本身表示黑暗，天黑了，皮肤黝黑，都用dark，不要说black.</p>\n<h3 id=\"补充-35\"><a href=\"#补充-35\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>1.守住秘密的表达还有：keep sth from sb：Don’t keep anything from me.不要跟我有秘密；It’s just between us.不要让第三个人知道；My lips are sealed/Your secret is safe with me.我不会说出去的；It stays in this room.不要说出去；<br>2.关于dark要知道一个短语take a shot in the dark字面意思是在黑暗中射击，表示瞎猜的，瞎蒙的。</p>\n<h2 id=\"I’m-gonna-need-to-recharge-my-batteries\"><a href=\"#I’m-gonna-need-to-recharge-my-batteries\" class=\"headerlink\" title=\"I’m gonna need to recharge my batteries.\"></a>I’m gonna need to recharge my batteries.</h2><p>我得好好休息恢复状态。</p>\n<h3 id=\"讲解-38\"><a href=\"#讲解-38\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>这是一个比喻表达。原句中recharge my batteries字面意思是给我的电池充电，其实就是让自己的身体休息从而恢复；关于充电，也可以说charge，如charge my phone给我的手机充电；充电器叫charger；出国会需要电源转接器adaptor；手机要没电可以说My phone’s dying；彻底没电了就说My phone’s dead.</p>\n<h3 id=\"补充-36\"><a href=\"#补充-36\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>一般累了我们可以take a nap，小睡一会儿；如果对方累，你也可以说go get some sleep，去休息会；失眠了就说can’t sleep.虽然insomnia也是失眠，但它表示的是长期的疾病，一般睡不着就说I can’t sleep；如果长期失眠再说：I’m suffering from insomnia；累了要休息也可以说get some rest.</p>\n<h2 id=\"You-brought-this-on-yourself\"><a href=\"#You-brought-this-on-yourself\" class=\"headerlink\" title=\"You brought this on yourself.\"></a>You brought this on yourself.</h2><p>这是你自找的。</p>\n<h3 id=\"讲解-39\"><a href=\"#讲解-39\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>bring sth on oneself字面意思是‘把…带到自己身上‘，引申为自找的。例句：She brought the divorce on herself.离婚都是她自找的；口语里表示自找的还有：1. You asked for it.你自己要的（用过去时）；2. You deserve it.你活该（这是你应得的，看具体语境）；3. You’re the one to blame./It’s all your fault.都怪你；4. You had it coming.你自找的。</p>\n<h3 id=\"补充-37\"><a href=\"#补充-37\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>关于bring必须要知道的表达还有：1. bring sth up提起：Don’t bring it up.别提那事儿；2. be brought up长大：I was brought up in America.我在美国长大；3. Bring it (on)!放马过来./开始吧（接受挑战时说）；4. bring the home the bacon养家糊口.</p>\n<h2 id=\"Lily-let’s-get-you-dressed\"><a href=\"#Lily-let’s-get-you-dressed\" class=\"headerlink\" title=\"Lily, let’s get you dressed.\"></a>Lily, let’s get you dressed.</h2><p>我们帮你把衣服穿好。</p>\n<h3 id=\"讲解-40\"><a href=\"#讲解-40\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词dress除了表示‘裙子’，口语里经常作动词表示穿衣，穿着，被动形式居多。例句：I need to get dressed first.我得先穿好衣服；Why are you not dressed yet?你怎么还没穿好衣服？be dressed了用来表示穿的衣服，如He’s dressed in jeans today.他今天穿的是牛仔裤；dress up则表示盛装或特地穿上某种服装，如：Why are you all dressed up?干嘛穿的这么正式？dress up as表示打扮成，如：I dressed up as ironman for Halloween last year.去年万圣节我打扮成了钢铁侠。</p>\n<h3 id=\"补充-38\"><a href=\"#补充-38\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>一般的裙子叫dress，短裙叫skirt，连衣裙叫one-piece (dress)；盛装打扮也可以说doll up或deck out。例句：You need you doll up before you go to that fancy party.去那个高档派对之前要盛装打扮好。</p>\n<h2 id=\"I-really-was-in-a-jam\"><a href=\"#I-really-was-in-a-jam\" class=\"headerlink\" title=\"I really was in a jam.\"></a>I really was in a jam.</h2><p>我当时真的很困难。</p>\n<h3 id=\"讲解-41\"><a href=\"#讲解-41\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>jam可以作名词表示果酱；或交通堵塞；或困境窘境。原句中短语in a jam表示处于困境中；交通堵塞完整说法是traffic jam；jam作动词可表示使…堵塞，所以路上很堵可以说：The road is jammed with traffic.超级拥挤可以说：jam-packed.例句：It was jam-packed last night.昨晚真是人挤人啊！</p>\n<h3 id=\"补充-39\"><a href=\"#补充-39\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>处于困难的处境的表达还有：1. torn纠结的：I’m torn. I don’t know what to do.好纠结，不知怎么办是好；2. put sb on the spot让某人为难：Come on, man. Don’t put me on the spot.拜托哥们，别让我为难；3. 别人问你how are you，如果你过的不是很好，可以说：I’ve been better或I’ve had better days.意思就是最近不是很好。</p>\n<h2 id=\"I-did-my-best-to-cram-for-my-lectures\"><a href=\"#I-did-my-best-to-cram-for-my-lectures\" class=\"headerlink\" title=\"I did my best to cram for my lectures.\"></a>I did my best to cram for my lectures.</h2><p>我尽力为我的演讲恶补了。</p>\n<h3 id=\"讲解-42\"><a href=\"#讲解-42\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语do one’s best，表示‘尽力而为’。相似表达也可以说give it one’s best shot.例句：Just give it your best shot.尽力而为就好。关键词cram表示恶补，临时抱佛脚的感觉，例句：Everyone is cramming for their finals.大家都在为期末考试恶补。</p>\n<h3 id=\"补充-40\"><a href=\"#补充-40\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>提升学习的强度恶补也可以用bone up on sth，例句：He’s going to the US next week. So he has been boning up on his English.他下周要去美国，所以他最近在恶补英语；shot的字面意思表示射击，口语里经常用它表示努力或机会。如：1. Give it a shot试一试；2. This is your last shot.这是你最后一次机会；3. It’s a long shot.这事难度很大（long shot，字面意思是射击远，所以难度大）</p>\n<h2 id=\"That’s-the-worst-call-ever\"><a href=\"#That’s-the-worst-call-ever\" class=\"headerlink\" title=\"That’s the worst call ever.\"></a>That’s the worst call ever.</h2><p>这个决定差到极致了。</p>\n<h3 id=\"讲解-43\"><a href=\"#讲解-43\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词1：call可表示打电话，动词名词均可：如call me tomorrow/Give me a call tomorrow都很常用；但是口语里经常把它用作‘决定’的意思，本来make a call表示打一个电话，引申为做一个决定，因为你给谁打电话是你做的决定，所以口语有这样的表达：A or B? Your call!要A还是B，你来决定；It’s your call to make, not mine.是你要做决定，不是我；别人做了你喜欢的决定你可以说Good call；反之就是Bad call.关键词2：ever，在最高级句尾加ever表示强调，加深感情，类似于中文的‘史上最…‘，如：You’re the best teacher.你是最棒的老师！感情要比you’re the best teacher要强很多。度过了很不顺利的一天，回家后就说：I just had the worst day ever!</p>\n<h2 id=\"I-don’t-want-you-to-jump-into-anything\"><a href=\"#I-don’t-want-you-to-jump-into-anything\" class=\"headerlink\" title=\"I don’t want you to jump into anything.\"></a>I don’t want you to jump into anything.</h2><p>我不希望你匆忙做决定。</p>\n<h3 id=\"讲解-44\"><a href=\"#讲解-44\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语jump into sth，字面意思表示‘跳进去’，其实就是匆忙做决定。你朋友要闪婚的话，你就对他说：You’re jumping into this.与它相似的表达是jump to conclusions表示匆忙作出结论；口语里也常用rush into表示急匆匆的做决定：Don’t rush into anything也表示不要匆忙做决定；别人很急匆匆的你可以问：What’s the rush?或What’s the hurry?急什么？</p>\n<h3 id=\"补充-41\"><a href=\"#补充-41\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>匆忙时要记得：1. Think it over.再仔细考虑考虑；2. Think it through.把事情方方面面考虑周全；3. Think twice.三思而后行；jump的形容词jumpy表示人焦虑不安的。</p>\n<h2 id=\"TMI-huh\"><a href=\"#TMI-huh\" class=\"headerlink\" title=\"TMI, huh?\"></a>TMI, huh?</h2><p>太多信息了是吧？</p>\n<h3 id=\"讲解-45\"><a href=\"#讲解-45\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>TMI的完整形式是too much information.口语里用得较多；常见的缩写需要知道的有：1. FYI=for your information顺便跟你说一下；2. BTW=by the way顺便说一句或顺便问一下；3. ASAP=as soon as possible尽快（注意口语经常读成A-SAP）；4. LMAO=laugh my ass off笑死了（中国人的意象是笑掉大牙；美国人是笑掉屁股，文化差异）；5. LOL=laugh out loud哈哈；6. TGIF=thank goodness/god it’s Friday终于到星期五了（美国人在星期五喜欢说，晚上要party）；7. JK=just kidding开玩笑而已；8. RIP=rest in peace安息（有人去世时会说）；9. ROTFL=rolling on the floor laughing躺在地上笑；10. TBD=to be decided/determined待定。</p>\n<h2 id=\"And-there’s-a-few-people-outside\"><a href=\"#And-there’s-a-few-people-outside\" class=\"headerlink\" title=\"And there’s a few people outside.\"></a>And there’s a few people outside.</h2><p>而且外面有些人。</p>\n<h3 id=\"讲解-46\"><a href=\"#讲解-46\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键结构there’s，这边有个概念，就是书面语法与口语语法的区别，基本相同，只不过口语语法相对更随意，由于后面是a few people一些人是复数，按书面语法应为there’re a few people，但口语里不管是单数还是复数，美国人都经常说there’s；常见的口语语法还有：Let’s go eat/Come say hi。即口语里表示去干嘛来干嘛可直接加动词，而不是书面语法的go and eat；If I was you，虚拟语气，如果我是你的话，书面语法应为If I were you，但口语里经常用was即可；me and Bingo，我和Bingo，按照书面语法应为Bingo and I，但‘我和谁’在口语里经常是me and 谁谁谁…。</p>\n<h2 id=\"How-can-they-just-kick-us-out\"><a href=\"#How-can-they-just-kick-us-out\" class=\"headerlink\" title=\"How can they just kick us out?\"></a>How can they just kick us out?</h2><p>他们怎么能就这样赶我们出去？</p>\n<h3 id=\"讲解-47\"><a href=\"#讲解-47\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语kick sb out表示‘赶某人出去‘。例句：My wife kicked me out.我老婆把我赶出了家门。关于kick还需要知道的用法有：1. kick off开始：My vacation now officially kicks off.我的假期正式开始；2. kick in药起作用：The medicine hasn’t kicked in.药吃了还没感觉；3. kick back休闲放松：I’m gonna kick back at home tonight.我今晚就待在家休息了；4. kick sb’s ass/butt痛扁某人或比赛中的狂虐：He’s gonna kick your ass in the game.比赛中他会很容易打败你的；5. ass-kicking很棒的：This is an ass-kicking party.这个派对太棒了；6. kick the bucket去世；7. get a kick out of sth做某事而感到快乐：You’ll get a kick out of it.你会喜欢的。</p>\n<h2 id=\"There-have-been-rumors\"><a href=\"#There-have-been-rumors\" class=\"headerlink\" title=\"There have been rumors.\"></a>There have been rumors.</h2><p>有这样的谣言在散播。</p>\n<h3 id=\"讲解-48\"><a href=\"#讲解-48\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词rumor表示‘谣言’，常用固定句型Rumor has it that…+谣言的内容。例句：Rumor has it that he is getting fired.有谣言说他要被解雇了。和rumor相近的词还有gossip八卦：Don’t gossip about my life.别八卦我的生活；talk闲聊八卦：Why did you tell him? You know people talk.你干嘛告诉他？你知道人是会闲聊的。</p>\n<h3 id=\"补充-42\"><a href=\"#补充-42\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>在口语学习过程中，多记句型要比死磕语法效果好的多。比如It’s been…经常用来表示‘已经过了多久’或对即将结束的事情的评价，如It’s been a week.已经过了一周了；It’s been a fun journey.旅途到现在为止很开心。不需要去纠结it’s been的完成时的种种。多积累句型，对应中文的表达。</p>\n<h2 id=\"She-would’ve-wanted-this\"><a href=\"#She-would’ve-wanted-this\" class=\"headerlink\" title=\"She would’ve wanted this.\"></a>She would’ve wanted this.</h2><p>如果她还活着，她也会希望你这样的。</p>\n<h3 id=\"讲解-49\"><a href=\"#讲解-49\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>继续关注句型，少抠语法。原句中would’ve done结构，经常在描述一个已经去世的人时会用，记住这个就行了，比如：Your mom would’ve said yes.你妈要是活着也会答应的。不用太纠结其中语法。</p>\n<h3 id=\"补充-43\"><a href=\"#补充-43\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>would’ve的发音实际有两种：would of和woulda，不会把would have完整发出来；类似的还有：should have=should of=shoulda；could have=could of=coulda；must have=must of=musta；proud of=prouda；out of=outta；kind of=kinda；sort of=sorta；原因是两个：1. have弱读之后发音与of一样；2. t/d后面的of直接把f的发音省略，这样发音更轻松更地道。</p>\n<h2 id=\"You-are-so-high-maintenance\"><a href=\"#You-are-so-high-maintenance\" class=\"headerlink\" title=\"You are so high-maintenance.\"></a>You are so high-maintenance.</h2><p>你可真难伺候。</p>\n<h3 id=\"讲解-50\"><a href=\"#讲解-50\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>maintenance是maintain（维修）的名词形式，high-maintenance指need a lot of effort to keep in good condition需要大量精力来运转良好。例：I’m tired of having a relationship with my girlfriend, she is so high-maintenance.我受够了跟我女朋友谈恋爱，她真难伺候啊。此外，‘苛求的，难讨好的‘还可以用’demanding‘和’hard to please‘.</p>\n<h3 id=\"补充-44\"><a href=\"#补充-44\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>其反义词‘特别好搞定的人’叫做pushover：Stop bullying me, I’m not a pushover.别再欺负我了，我可不是软柿子，随便让你捏。</p>\n<h2 id=\"This-is-a-killer-apartment\"><a href=\"#This-is-a-killer-apartment\" class=\"headerlink\" title=\"This is a killer apartment!\"></a>This is a killer apartment!</h2><p>你这房子太酷了！</p>\n<h3 id=\"讲解-51\"><a href=\"#讲解-51\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>killer本意指‘杀手’，但口语中有另外两个意思。其一：something or someone very difficult.例：The exam was a real killer.这次考试好难。其二：something very impressive.例：The new movie is a killer.这部新电影超带劲儿。此外，killer smile迷死人的微笑；killer charm让人眩晕的个人魅力。</p>\n<h3 id=\"补充-45\"><a href=\"#补充-45\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>killer还可以当感叹词单独使用。例：A: Guess what? I got accepted to Harvard Law!你猜怎么着？我被哈佛法学院录取了！B: OMG, killer!天哪！简直棒呆了！</p>\n<h2 id=\"She’s-playing-hard-to-get\"><a href=\"#She’s-playing-hard-to-get\" class=\"headerlink\" title=\"She’s playing hard-to-get.\"></a>She’s playing hard-to-get.</h2><p>她在吊你胃口呢。</p>\n<h3 id=\"讲解-52\"><a href=\"#讲解-52\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>hard-to-get‘很难得到手’。例：A: I’m really upset! She doesn’t find me attractive.郁闷啊！她不喜欢我！B: Relax! She is just playing hard-to-get.放松！她只是在吊你胃口而已。</p>\n<h3 id=\"补充-46\"><a href=\"#补充-46\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>‘吊胃口’还有‘一直让某人猜测，始终不说答案’的意思，对应英文是：‘keep/leave someone in suspense’.Suspend本意‘悬挂、吊起’，名词suspense表示‘紧张感，担心’。例：Don’t keep us in suspense any longer, tell us what happened!别再吊胃口（让我们着急）了，快告诉我们出了什么事了！</p>\n<h2 id=\"I-can’t-get-over-you\"><a href=\"#I-can’t-get-over-you\" class=\"headerlink\" title=\"I can’t get over you.\"></a>I can’t get over you.</h2><p>忘记你我做不到。</p>\n<h3 id=\"讲解-53\"><a href=\"#讲解-53\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>‘get over’表示‘忘记；熬过；释怀’。例：I’m over you!我已经把你忘记了！get over还可形容‘反应过来，回过神儿来’，如果你看到以前相貌平平的同学现在很美，就可以说：I can’t get over how great you look!真不敢相信，你现在这么美了！</p>\n<h3 id=\"补充-47\"><a href=\"#补充-47\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>有个很像的词组：I’m all over you!意思完全不同：我超级喜欢你！all over表示整个人都扑到什么上面，迷恋。</p>\n<h2 id=\"I-took-it-pretty-hard\"><a href=\"#I-took-it-pretty-hard\" class=\"headerlink\" title=\"I took it pretty hard!\"></a>I took it pretty hard!</h2><p>我深受打击。</p>\n<h3 id=\"讲解-54\"><a href=\"#讲解-54\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>take it easy‘放轻松，轻松接受…‘；take it hard‘难以承受’。例：A: What did he say when you told him you wanted a divorce?当你说要离婚的时候，他说了什么？B: He took it pretty hard, but he’ll get over it.他很难接受，不过他会度过伤痛的。</p>\n<h3 id=\"补充-48\"><a href=\"#补充-48\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>take还有很多搭配：1. Don’t take it personally.这事不是针对你，别放心上。例子：Don’t take it personally, she’s rude to everyone.别往心里去，她对谁都这么粗鲁。2. Don’t take it the wrong way.别误会。3. Don’t take it seriously.别当真，别较真。4. Don’t take it for granted.别想当然以为（这是你该得的）。</p>\n<h2 id=\"We’re-just-being-honest-here\"><a href=\"#We’re-just-being-honest-here\" class=\"headerlink\" title=\"We’re just being honest here.\"></a>We’re just being honest here.</h2><p>我们这是在实话实说。</p>\n<h3 id=\"讲解-55\"><a href=\"#讲解-55\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键是being这个词：强调当下的动态，让句子听起来更为活泼。最后的here，并非指‘这里’，而是‘在这件事上，此时此刻’。例：A: Stop telling me I’m wrong!别再说我错了！B: We’re just honest here. It’s for your own good.我们这是在实话实说，这是为了你好。</p>\n<h3 id=\"补充-49\"><a href=\"#补充-49\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>常用类似表达：You’re being unreasonable here.你在这件事上怎么这么不讲理啊。You’re being ridiculous here.你现在怎么莫名其妙啊！</p>\n<h2 id=\"Cheer-up\"><a href=\"#Cheer-up\" class=\"headerlink\" title=\"Cheer up!\"></a>Cheer up!</h2><p>高兴点嘛！</p>\n<h3 id=\"讲解-56\"><a href=\"#讲解-56\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>cheer up的意思是‘提起精神，使…不再丧志‘。例：Cheer up, better times may be ahead.高兴点嘛，好日子没准儿就在前面呢。例：A: Let’s buy her flowers to cheer her up.咱们去买花来逗她开心。B: The only thing that’s going to cheer her up is getting her job back.唯一能逗她开心的事，就是让她重回原来的工作。</p>\n<h3 id=\"补充-50\"><a href=\"#补充-50\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>常用类似表达：cheer sb on鼓励某人：The crowd cheered the runners on as they started the last lap.赛跑进入最后一圈时，观众为运动员加油鼓劲。</p>\n<h2 id=\"This-is-so-made-up\"><a href=\"#This-is-so-made-up\" class=\"headerlink\" title=\"This is so made up.\"></a>This is so made up.</h2><p>一听就知道是瞎编的。</p>\n<h3 id=\"讲解-57\"><a href=\"#讲解-57\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>make up有很多用法。其一：‘乱说，瞎编’。例：A: Did you make that story up?那个故事是你乱说的吗？B: No, I’m totally serious. It really happend.不，我百分百是认真的，真有其事。其二：‘化妆’。例：She spent an hour making (herself) up before the party.她在聚会前化妆用了一个小时。例：She’s always very heavily made up.她总是浓妆艳抹的。其三：‘和好，复合’。例：Hey, you guys made it up.嘿，你们和好啦。</p>\n<h3 id=\"补充-51\"><a href=\"#补充-51\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>made-up当名词指化妆品，相当于cosmetics.例：She never wears make-up.她从来不搽化妆品.</p>\n<h2 id=\"Lighten-up\"><a href=\"#Lighten-up\" class=\"headerlink\" title=\"Lighten up!\"></a>Lighten up!</h2><p>放松！</p>\n<h3 id=\"讲解-58\"><a href=\"#讲解-58\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>light作形容词是指‘轻的’，动词形式Lighten up字面上的意思是‘变轻巧’，就是要对方‘放松心情，放轻松’。例：A: You really need to lighten up.你真该放轻松一点。B: I know. I’ve been really tense lately.我知道，我最近一直很紧张兮兮的。例：A: I know I did terrible on my test! I’m a horrible student!我知道我考试考得很差！我是个烂学生！B: Lighten up. Maybe you’ll do better next time.放轻松，你下次或许会考得更好。</p>\n<h3 id=\"补充-52\"><a href=\"#补充-52\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>‘放松’还可以说‘loosen up!’.照相的时候很多人觉得很扭捏，放不开，摄影师就会说‘loosen up!‘放开点，别紧张！</p>\n<h2 id=\"I-wanna-get-a-head-start\"><a href=\"#I-wanna-get-a-head-start\" class=\"headerlink\" title=\"I wanna get a head start.\"></a>I wanna get a head start.</h2><p>我想赢在起跑线上。</p>\n<h3 id=\"讲解-59\"><a href=\"#讲解-59\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>head start原本是指在竞赛中拥有起跑的优势，口语中引申为‘赢在起点上’。例：A: Our Bobby goes to the best middle school in New York.我们巴比念的是纽约最好的中学。B: Yes, we want him to have a good head start for college.对，我们要他赢在起跑点上，进入一流的大学。</p>\n<h3 id=\"补充-53\"><a href=\"#补充-53\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>可以泛指‘先一步开始’。例：A: Are you and Greg going to the party at the beach?你跟贵格要去在海边举办的派对吗？B: Yeah. Greg got a head start. I’m leaving in a few minutes.要，他先走一步，我几分钟后就走。</p>\n<h2 id=\"I-wasn’t-myself\"><a href=\"#I-wasn’t-myself\" class=\"headerlink\" title=\"I wasn’t myself.\"></a>I wasn’t myself.</h2><p>我当时不大对劲。</p>\n<h3 id=\"讲解-60\"><a href=\"#讲解-60\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>be not oneself这个短语表达‘不正常’的意思，可以指身体上不舒服，也可以指行动上的。例：A: Why can’t you walk a little faster?你今天为什么不能走快一点呢？B: I’m not quite myself today.我今天不大对劲（身体不大舒服）。例：A: You weren’t yourself at the party the other night.那天晚上派对中你行动怪怪的。B: I know. I had too much whisky.我知道，我喝了太多威士忌。</p>\n<h2 id=\"I-was-on-pins-and-needles\"><a href=\"#I-was-on-pins-and-needles\" class=\"headerlink\" title=\"I was on pins and needles.\"></a>I was on pins and needles.</h2><p>我当时坐如针毡。</p>\n<h3 id=\"讲解-61\"><a href=\"#讲解-61\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>pins和needles都是指针状物，坐在上面这种被扎的感觉，正可用来形容紧张不安的情绪。例：A: I’ve been on pins and needles all week. The boss said he wants to see me this Friday.我这整个星期如坐针毡，老板说他这个星期五要召见我。B: Good luck. I hope it’s good news.祝你好运，我希望是好消息。</p>\n<h3 id=\"补充-54\"><a href=\"#补充-54\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>这个表达法也可以用来形容那种雀跃不已，兴奋的期待心情，例：A: They’re announcing the winner for Best Actress.他们正在宣布最佳女主角的得主。B: I’m on pins and needles. I can barely sit still in my seat.我好兴奋喔，我都快坐不住了。</p>\n<h2 id=\"He’ll-survive\"><a href=\"#He’ll-survive\" class=\"headerlink\" title=\"He’ll survive.\"></a>He’ll survive.</h2><p>他会挺过来的。</p>\n<h3 id=\"讲解-62\"><a href=\"#讲解-62\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>survive原意是‘存活，幸免于难’，用在面临生死攸关之后，得以活下来。例：Rob is in the hospital. He survived a shark attack last week.罗伯在医院里，他上周被鲨鱼攻击，死里逃生。口语中可以引申为‘捱过、度过（困境）’的意思。例：A: I’m going to fail this exam! I just know it!我这考试一定会被当掉，我有预感！B: You’ll survive. It’s just a test! You’ve studied for it all week.你会撑过去的，不就是个考试嘛！你已经用功整个星期了。</p>\n<h3 id=\"补充-55\"><a href=\"#补充-55\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>熬过还可以说he’ll get over it.或者He’ll be fine.</p>\n<h2 id=\"Way-to-go\"><a href=\"#Way-to-go\" class=\"headerlink\" title=\"Way to go.\"></a>Way to go.</h2><p>好样的！</p>\n<h3 id=\"讲解-63\"><a href=\"#讲解-63\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>‘Way to go.’是’That’s the way to go.’的缩写，是用来告诉一个人他做得很好，请继续保持。例：A: I passed my driving test.我通过驾驶测验了。B: Way to go! I think we should go out to celebrate.太好了！我觉得我们该出去庆祝一下。</p>\n<h3 id=\"补充-56\"><a href=\"#补充-56\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>这个说法也可以用来讽刺太过离谱的人，例子：Way to go. You lost my cell phone again.真有你的，你又搞丢了我的手机了。</p>\n<h2 id=\"This-is-just-too-much\"><a href=\"#This-is-just-too-much\" class=\"headerlink\" title=\"This is just too much.\"></a>This is just too much.</h2><p>这太让人吃不消了。</p>\n<h3 id=\"讲解-64\"><a href=\"#讲解-64\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>这个句子通常形容感觉压力很大，或者事出突然无法接受的时候。例：I have to work on five projects at a time? This is just too much.我要同时做5个项目？这实在是太扯了。这个说法除了可以表示心里压力以外，还可以表示体力上吃不消。例：This is just too much. Now I have to drive to Tainan tonight for business.真让人吃不消，我现在得连夜开车去台南出差。</p>\n<h3 id=\"补充-57\"><a href=\"#补充-57\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>吃不消还可以讲：I can’t take/stand this anymore；I’m pushed over the edge；drive somebody crazy</p>\n<h2 id=\"What-are-you-up-for-tonight\"><a href=\"#What-are-you-up-for-tonight\" class=\"headerlink\" title=\"What are you up for tonight?\"></a>What are you up for tonight?</h2><p>你今晚想去哪儿？</p>\n<h3 id=\"讲解-65\"><a href=\"#讲解-65\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>be up for表示‘有想做某事的心情’。例：A: I’ll pick you up at eight. What are you up for tonight?我今晚八点去接你，你今晚想去哪儿？B: Dinner and dancing!吃饭和跳舞！这个表达特别适用‘邀约’，例：A: Are you up for a game of tennis tonight?你今晚想打网球吗？B: I’m always up for tennis!我永远都想打网球！</p>\n<h3 id=\"补充-58\"><a href=\"#补充-58\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>相似词组联想记忆：be up to sth忙于某事。例子：What are you up to?你平时都忙些什么？</p>\n<h2 id=\"This-is-incredible\"><a href=\"#This-is-incredible\" class=\"headerlink\" title=\"This is incredible.\"></a>This is incredible.</h2><p>这简直太好了！</p>\n<h3 id=\"讲解-66\"><a href=\"#讲解-66\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>incredible一词源于credit信用；相信，常见于credit card信用卡，credible是可以相信的，incredible是难以置信的，不可思议的，相当于unbelievable。例：What an incredible actress.她是个了不起的演员。credit当相信时，还可做动词：Would you credit it?你相信吗？</p>\n<h3 id=\"补充-59\"><a href=\"#补充-59\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中表示好的词还有：amazing；awesome；impressive；fantastic；fabulous等等。</p>\n<h2 id=\"I’m-totally-into-photography\"><a href=\"#I’m-totally-into-photography\" class=\"headerlink\" title=\"I’m totally into photography.\"></a>I’m totally into photography.</h2><p>我超爱摄影。</p>\n<h3 id=\"讲解-67\"><a href=\"#讲解-67\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>into sth本意是‘进到…里面‘，所以口语中可以表示be enthusiastic about sth in which one takes an active interest对某事物很有兴趣；非常喜欢：be into yoga, science fiction, stamp collecting喜爱瑜伽、科幻小说、集邮。be into sb还有一个意思：to owe someone money.例：He’s into me for $50.他欠我50美元。</p>\n<h3 id=\"补充-60\"><a href=\"#补充-60\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中表达喜欢的小词还有：my thing.例子：我超喜欢做饭：cooking is my thing.</p>\n<h2 id=\"Don’t-flatter-yourself\"><a href=\"#Don’t-flatter-yourself\" class=\"headerlink\" title=\"Don’t flatter yourself.\"></a>Don’t flatter yourself.</h2><p>別臭美了；少自作多情了。</p>\n<h3 id=\"讲解-68\"><a href=\"#讲解-68\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>flatter本意是奉承，讨好。例：If you flatter your mother a bit she might invite us all to dinner.你要是奉承你母亲几句，说不定她会把我们全请去吃饭；flatter oneself就是讨好自己，让自己开心。例：Do you really think he likes you? You flatter yourself!你真以为他喜欢你？你那是自作多情！常用被动表示某人感到荣幸的，相当于I’m honored. I was very flattered by your invitation to talk at the conference.承蒙你邀我在会上讲话，深感荣幸。</p>\n<h3 id=\"补充-61\"><a href=\"#补充-61\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>形容词flattering使人显得很美的：That’s a very flattering dress.那条连衣裙显得你更漂亮了。或者figure-flattering表示显身材的，使看上去有体型的。</p>\n<h2 id=\"I‘m-all-ears\"><a href=\"#I‘m-all-ears\" class=\"headerlink\" title=\"I‘m all ears.\"></a>I‘m all ears.</h2><p>我洗耳恭听。</p>\n<h3 id=\"讲解-69\"><a href=\"#讲解-69\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>I’m all ears‘我到处都是耳朵，我随时准备好倾听’。例：A: I’ll give you a few pointers on how to study English.我可以给你一些指点，帮助你学习英语。B: I’m all ears.洗耳恭听。</p>\n<h3 id=\"补充-62\"><a href=\"#补充-62\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>这话特别适合用来表示关心别人，show that your are a good listener.A: My boyfriend just dumped me.我男朋友刚把我甩了。B: Are you OK? If you want to talk about it, I’m all ears.你还好吧？假如你想聊，我很愿意听。</p>\n<h2 id=\"Now-we’re-getting-somewhere\"><a href=\"#Now-we’re-getting-somewhere\" class=\"headerlink\" title=\"Now we’re getting somewhere.\"></a>Now we’re getting somewhere.</h2><p>这下有眉目了。</p>\n<h3 id=\"讲解-70\"><a href=\"#讲解-70\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>‘get somewhere‘’到达某处‘，引申为’有进展，有成果‘。例：A: I don’t want to fight anymore, I just got angry because you were ignoring me.我不想再吵了，我气你是因为你一直忽略我。B: Now we’re getting somewhere. I’m sorry I hurt your feelings.这下子有眉目了（我知道你生气的原因了），对不起我伤了你的感情。当然如果表示没进展的话，就要说成‘not get anywhere‘或者’get nowhere‘.例：A: What do you say if we stop seeing each other for a while?你觉得我们先暂停交往好不好？B: That would get us nowhere.这对我们无济于事。</p>\n<h3 id=\"补充-63\"><a href=\"#补充-63\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>在疑问句中，要用‘get anywhere’.A: I was working on that building design all night.我整晚都在忙那个建筑设计。B: Did you get anywhere?有进展吗？</p>\n<h2 id=\"You-should-get-out-more\"><a href=\"#You-should-get-out-more\" class=\"headerlink\" title=\"You should get out more.\"></a>You should get out more.</h2><p>你应该多出去见见世面。</p>\n<h3 id=\"讲解-71\"><a href=\"#讲解-71\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>‘get out’可以是调侃的语气，要对方出去见见世面，免得落伍了；例：A: Have you been to the new bar ‘MUSE’ by CarinaLau?你去过刘嘉玲新开的那家酒吧吗？B: You need to get out more! That bar has been open for 3 years!你真该出去见见世面了，那酒吧开了3年了！也可以作为关心鼓励，要对方‘出去看看，开开眼界’。例：Mom, you and dad need to get out more. You look so pale and weak.妈，您和爸需要多出去走走，您看起来很苍白虚弱。</p>\n<h2 id=\"Are-you-seeing-anyone-special\"><a href=\"#Are-you-seeing-anyone-special\" class=\"headerlink\" title=\"Are you seeing anyone special?\"></a>Are you seeing anyone special?</h2><p>你是不是谈恋爱啦？</p>\n<h3 id=\"讲解-72\"><a href=\"#讲解-72\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>see有‘约会，交往’的意思，但常用于进行时态。例：we should stop seeing each other.我们应该分手了；例：Michael and Anna are seeing each other.迈克和安开始约会了。其二，see还常见于I see，表达‘原来是这样，现在我明白了’，和I know（我本来就知道）不同；其三，‘让我想想啊’的英文：let’s see.比let me think更地道。</p>\n<h3 id=\"补充-64\"><a href=\"#补充-64\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>约会的其他表达：date，后面通常直接跟人：I only dated her once.我和她只约会过一次；go out with：are you going out with Beth?你是不是开始和Beth约会了？</p>\n<h2 id=\"That’s-how-the-world-works\"><a href=\"#That’s-how-the-world-works\" class=\"headerlink\" title=\"That’s how the world works!\"></a>That’s how the world works!</h2><p>这就是社会！</p>\n<h3 id=\"讲解-73\"><a href=\"#讲解-73\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>‘这就是世界运行的方式’，也就是说‘社会就是这样进化变迁的！’例：I know how the world works.我懂这些人情世故，例：A: Can you believe it? He got a promotion! I bet it’s all political!你敢相信吗？他居然被提拔了！我觉得肯定是靠关系上去的！B: Forget it! It’s how the world works!别想了！现在的社会就这样！</p>\n<h3 id=\"补充-65\"><a href=\"#补充-65\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>类似表达：That’s the way it is!本来就是这么回事！（stop complaining!）</p>\n<h2 id=\"You’ve-got-a-point\"><a href=\"#You’ve-got-a-point\" class=\"headerlink\" title=\"You’ve got a point.\"></a>You’ve got a point.</h2><p>你说的有道理。</p>\n<h3 id=\"讲解-74\"><a href=\"#讲解-74\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>point表示重点，what’s your point?你到底想说什么（重点）？let’s get to the point.咱们说重点吧；got a point说到了重点。例：A: But she might not agree.可是她有可能不同意呀。B: You’ve got a point there.你这话说得很有道理。</p>\n<h3 id=\"补充-66\"><a href=\"#补充-66\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>‘重点’还可以用message表达；get the message=see your point：She said it was getting late, I got the message and left.她说时间不早了，我心领神会，于是告辞.</p>\n<h2 id=\"That-doesn’t-make-sense\"><a href=\"#That-doesn’t-make-sense\" class=\"headerlink\" title=\"That doesn’t make sense.\"></a>That doesn’t make sense.</h2><p>这讲不通啊！</p>\n<h3 id=\"讲解-75\"><a href=\"#讲解-75\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>sense本意指‘感觉’，a sixth sense第六感；sense of humor/security/direction/guilt幽默/安全/方向/罪恶感；sense还可以指道理，common sense常识；make sense能讲出道理来，有逻辑。例：None of these makes any sense.这一切都讲不通啊。例：You don’t make sense today.你今天不讲理。</p>\n<h3 id=\"补充-67\"><a href=\"#补充-67\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>make sense后面还可以加上of sth表示understand sth理解或弄懂：Can you make sense of this poem?你看得懂这首诗吗？</p>\n<h2 id=\"My-treat\"><a href=\"#My-treat\" class=\"headerlink\" title=\"My treat!\"></a>My treat!</h2><p>我请客。</p>\n<h3 id=\"讲解-76\"><a href=\"#讲解-76\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>treat表示‘宴请，招待’，my treat就是‘我来招待你’，例：It’s my treat, don’t sweat it!我请客，别计较了！更简单的‘我请客’是‘It’s on me!‘，用’on‘就表示这顿饭’记我头上，记我账上‘。例：The movies are on me, don’t worry about it!电影算我的，别计较！</p>\n<h3 id=\"补充-68\"><a href=\"#补充-68\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>‘我买单’还可以说：I’m paying tonight!/Let me treat you./Let me have the check, please!/Let me get the bill, I insist!/My dollar/My buck!</p>\n<h2 id=\"Nice-try\"><a href=\"#Nice-try\" class=\"headerlink\" title=\"Nice try.\"></a>Nice try.</h2><p>想得美，做梦呢你。</p>\n<h3 id=\"讲解-77\"><a href=\"#讲解-77\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>字面上理解是‘做得好’，可以用来鼓励别人继续努力；但更常用于讽刺别人，某人想骗你上当的时候，你就可以说。例：A: I am currently a professional tennis player and have 3 supermodel girlfriends.B: Umm…Nice try! Do you take me for a fool?（骗谁啊！你当我傻子啊？）</p>\n<h3 id=\"补充-69\"><a href=\"#补充-69\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>想得美还可以说You wish（你就幻想吧）/wishful thinking（痴心妄想）.I think she likes me. But maybe that’s just wishful thinking.</p>\n<h2 id=\"My-thoughts-exactly\"><a href=\"#My-thoughts-exactly\" class=\"headerlink\" title=\"My thoughts exactly!\"></a>My thoughts exactly!</h2><p>跟我想得一模一样！</p>\n<h3 id=\"讲解-78\"><a href=\"#讲解-78\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>当朋友和你很有心电感应，说出和你一模一样的想法时，你就可以用这句话表示惊叹！例：A: Rose and Jack look cute together. Have you ever thought…露丝和杰克在一起看起来好顺眼哦，你有没有想过…B: …that they’re a match made in heaven?…他们俩是天造地设的一对？A: My thoughts exactly!一点没错，我就是这么觉得！</p>\n<h3 id=\"补充-70\"><a href=\"#补充-70\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>同exactly一样意思的是precisely，也是表达‘精准得，确切得’：A: Let’s fire Allan and promote Ann.咱们让艾伦走路，给安升官。B: My thoughts precisely!我正有此意！</p>\n<h2 id=\"Don’t-freak-out\"><a href=\"#Don’t-freak-out\" class=\"headerlink\" title=\"Don’t freak out.\"></a>Don’t freak out.</h2><p>别发飙！</p>\n<h3 id=\"讲解-79\"><a href=\"#讲解-79\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>freak本意是a person with a very strong interest in a particular subject有某种强烈癖好的人：a fitness/clean freak健身狂/洁癖；还可以做定语：a freak accident/storm反常的事故/暴风雨；而freak (sb) (out)则是（使某人）吓到、受惊、发飙、抓狂。例：Don’t freak out, but I kinda lost your earrings.别发飙啊，但我好像把你耳环弄丢了；例：The whole idea freaked me out.这个想法吓到我自己了。</p>\n<h3 id=\"补充-71\"><a href=\"#补充-71\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>同义词flip (out)也是表达特别激动的情绪：生气或者兴奋：He completely flipped when he saw the mess in the kitchen.他看到厨房乱糟糟的景象立马发飙了。</p>\n<h2 id=\"Just-the-opposite\"><a href=\"#Just-the-opposite\" class=\"headerlink\" title=\"Just the opposite.\"></a>Just the opposite.</h2><p>恰恰相反。</p>\n<h3 id=\"讲解-80\"><a href=\"#讲解-80\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>适用于别人不但没有猜中你的意思，反而猜的恰恰相反。例：A: What? You got fired?咋啦？被炒鱿鱼了？B: Just the opposite. I got a promotion!恰恰相反，我升官了！</p>\n<h3 id=\"补充-72\"><a href=\"#补充-72\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>还有一个类似的说法：Not even close.close是接近，even是用来强调，猜测甚至都不沾边。</p>\n<h2 id=\"I-have-a-weakness-for-sweets\"><a href=\"#I-have-a-weakness-for-sweets\" class=\"headerlink\" title=\"I have a weakness for sweets.\"></a>I have a weakness for sweets.</h2><p>我最招架不住甜食。</p>\n<h3 id=\"讲解-81\"><a href=\"#讲解-81\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>If you have a difficulty in resisting sth/sb, then you have a weakness for it.抵挡不了…的诱惑。例：Girls have a weakness for chocolate.女孩子都招架不住巧克力的诱惑。例：A: If you want to win Tom’s heart, make him a cheesecake.如果你想讨汤姆的欢心，就给他做起司蛋糕准没错。B: Great idea! I know he has a weakness got sweets.好主意！我知道他看见甜食就没辙。</p>\n<h3 id=\"补充-73\"><a href=\"#补充-73\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>当然也可以颠倒过来说：…is my weakness.某事是我的致命弱点。</p>\n<h2 id=\"Don’t-blow-it-out-of-proportion\"><a href=\"#Don’t-blow-it-out-of-proportion\" class=\"headerlink\" title=\"Don’t blow it out of proportion.\"></a>Don’t blow it out of proportion.</h2><p>别夸大其词了。</p>\n<h3 id=\"讲解-82\"><a href=\"#讲解-82\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>proportion是比例；out of proportion是‘大到不成比例’，而blow是‘吹’的意思，在美语中有‘吹牛’的意思。例：A: I can’t believe you ignored me like that!我不敢相信你竟这样躲避我！B: I couldn’t take your call! Don’t blow it out of proportion.我只是没办法接你的电话，别夸大其词了。</p>\n<h3 id=\"补充-74\"><a href=\"#补充-74\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>夸张还有一个基本英文叫exaggerate.例：You are exaggerating the difficulties.你把困难夸大了。</p>\n<h2 id=\"We’ll-see\"><a href=\"#We’ll-see\" class=\"headerlink\" title=\"We’ll see.\"></a>We’ll see.</h2><p>我们走着瞧。</p>\n<h3 id=\"讲解-83\"><a href=\"#讲解-83\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>当你不同意别人的看法时，就可以用这句话，表示‘现在跟你吵也没用，我们到时候就知道了’。例：A: A guy that listens to heavy metal could never be charming.听重金属的男生不可能有什么魅力。B: We’ll see, remember, Prince Charming comes disguised as a frog sometimes.我们等着瞧吧，别忘了，有时候王子会扮成青蛙的哦。</p>\n<h3 id=\"补充-75\"><a href=\"#补充-75\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>We’ll see口语中也经常拿来敷衍别人，表示‘再看看吧，再说吧’。A: Can we go camping this summer?我们今年夏天可以去野营吗？B: We’ll see.到时候再说吧。</p>\n<h2 id=\"I-got-stood-up\"><a href=\"#I-got-stood-up\" class=\"headerlink\" title=\"I got stood up.\"></a>I got stood up.</h2><p>我被放鸽子了。</p>\n<h3 id=\"讲解-84\"><a href=\"#讲解-84\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>约会时某人没有按规定的时间到场就可以说‘他放我鸽子he stood me up!’例：A: Can’t you go out with her another day?你不能改天再跟她出去吗？B: It’s too late to cancel, and I don’t wanna stand her up!现在取消来不及了，而我又不想放她鸽子！</p>\n<h3 id=\"补充-76\"><a href=\"#补充-76\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>no-show也是表示someone who does not arrive or appear somewhere they were expected to be该出场而没来的：The bad weather meant there were a lot of no-shows at the game.天气不好，肯定会有很多人不到场了。</p>\n<h2 id=\"I-didn’t-mean-anything-bad\"><a href=\"#I-didn’t-mean-anything-bad\" class=\"headerlink\" title=\"I didn’t mean anything bad.\"></a>I didn’t mean anything bad.</h2><p>我没有恶意。</p>\n<h3 id=\"讲解-85\"><a href=\"#讲解-85\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>若是不小心伤害了别人赶紧用这个句子解释一下吧。例：A: Do you go to bars often?你经常去酒吧吗？B: Of course not. What kind of a girl do you think I am?当然不是，你当我是什么样的女孩儿啊？A: Sorry, I didn’t mean anything bad.很抱歉，我没恶意嘛。例：A: You look very mature in that dress.你穿那件连衣裙很显成熟。B: Are you saying I’m old?你是不是想说我老？A: I didn’t mean anything bad. It looks nice.我没那意思！很好看的。</p>\n<h3 id=\"补充-77\"><a href=\"#补充-77\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>也可以简单得说：I didn’t mean it.我不是这个意思；那么反义词I mean it.就表示‘我是认真的’，相当于I’m serious.</p>\n<h2 id=\"Think-outside-the-box\"><a href=\"#Think-outside-the-box\" class=\"headerlink\" title=\"Think outside the box.\"></a>Think outside the box.</h2><p>换种思路想想。</p>\n<h3 id=\"讲解-86\"><a href=\"#讲解-86\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>‘box’是指被限制在一个范围之内的意思，固有的守旧的思维模式。‘think out of the box‘就是‘think creatively/unconventionally/or from a new perspective‘思维创新、跳出固有思维模式。例：Let’s think outside the box for a minute and try to find a better solution.我们跳出思维定式来想，看看能不能找出更好的解决方案；例：These guys are incredibly creative - they really know how to think out of the box.这些人很有创造力，知道如何创新思维。</p>\n<h2 id=\"I’ll-let-you-off-the-hook-this-time\"><a href=\"#I’ll-let-you-off-the-hook-this-time\" class=\"headerlink\" title=\"I’ll let you off the hook this time.\"></a>I’ll let you off the hook this time.</h2><p>这次我就放你一马。</p>\n<h3 id=\"讲解-87\"><a href=\"#讲解-87\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>hook是钩子，所以on hook就是被勾住，陷入麻烦；off the hook就是脱离危险。例：You’re not getting off the hook.你这次休想逃掉；主语如果是电话the phone rang off the hook all day.则表示‘电话响了一天’，根本没办法挂在听筒上，一直处于off the hook的状态；play hooky是‘翘课、逃学’的意思：You wanna play hooky again? No way!你又想翘课啊？没门！</p>\n<h3 id=\"补充-78\"><a href=\"#补充-78\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>’放我一马‘还可以说go easy on you.在你这里走缓和路线。或者cut me some slack.slack本身表示‘懒散怠慢的’，所以这个词组是‘允许我放肆一次，通融一次’。</p>\n<h2 id=\"What’ve-you-been-up-to\"><a href=\"#What’ve-you-been-up-to\" class=\"headerlink\" title=\"What’ve you been up to?\"></a>What’ve you been up to?</h2><p>你最近都在忙什么啊？</p>\n<h3 id=\"讲解-88\"><a href=\"#讲解-88\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>up to表示occupied or busy with sth忙于某事，一般时态what are you up to?你在忙什么？而现在完成时what’ve you been up to?你最近在忙什么？是常见问候语。例：A: what’ve you been up to?你最近忙什么啊？B: you won’t believe it, but I’ve been seeing a guy from work.跟你说你都不信，我在跟同事谈恋爱。</p>\n<h3 id=\"补充-79\"><a href=\"#补充-79\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>最基本英文how are you?也常换成完成时态how’ve you been?最近好吗？</p>\n<h2 id=\"We-have-a-lot-to-catch-up-on\"><a href=\"#We-have-a-lot-to-catch-up-on\" class=\"headerlink\" title=\"We have a lot to catch up on.\"></a>We have a lot to catch up on.</h2><p>我们有好多要叙叙旧聊一聊的。</p>\n<h3 id=\"讲解-89\"><a href=\"#讲解-89\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>catch up本身是‘赶上’的意思。例：A: I haven’t seen you in class for over a week.我已经一个多星期没看见你来上课了。B: Well, I have been sick. I have a ton of homework to catch up on.我生病了，有一大堆功课要补起来。朋友好久没见，所以要‘赶上’分别后彼此的生活。例：A: It’s been almost a year since we’ve seen each other.我们将近快一年没见了。B: you bet. We have a lot to catch up on.没错，我们可得好好叙叙旧。</p>\n<h2 id=\"I’m-not-falling-for-this-again\"><a href=\"#I’m-not-falling-for-this-again\" class=\"headerlink\" title=\"I’m not falling for this again.\"></a>I’m not falling for this again.</h2><p>我不会再上当了。</p>\n<h3 id=\"讲解-90\"><a href=\"#讲解-90\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>fall for sth：allow oneself to be persuaded by sth相信某事。例：The salesman said the car was in good condition, and I was foolish enough to fall for it.推销员说这辆汽车状况良好，而我那么傻竟然信以为真；例：I’m surprised you fell for that trick.真不敢相信你居然相信这个骗局。</p>\n<h3 id=\"补充-80\"><a href=\"#补充-80\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>fall for sb表示fall in love with sb被某人所吸引；爱上某人；迷恋：They met, fell for each other and got married six weeks later.他们俩一见倾心，六个星期后就结了婚。</p>\n<h2 id=\"I’m-not-a-cheapskate\"><a href=\"#I’m-not-a-cheapskate\" class=\"headerlink\" title=\"I’m not a cheapskate.\"></a>I’m not a cheapskate.</h2><p>我可不是小气鬼。</p>\n<h3 id=\"讲解-91\"><a href=\"#讲解-91\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>cheap（东西）便宜的；（人）小气的；cheapskate则是指小气鬼，a person who is unwilling to spend money.例：Are you saying I’m cheapskate?你说我是小气鬼？其他表示小气的词：形容词stingy吝啬的：He’s very stingy about lending money.他非常吝啬，不愿借钱给别人；形容词mean小抠的：She’s too mean to make a donation.她很小气，不肯捐款；名词miser‘守财奴’：Why don’t you buy me a drink for a change, you old miser!你就不能也请我喝一杯，你这老财迷！</p>\n<h3 id=\"补充-81\"><a href=\"#补充-81\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>反义词‘花钱大手大脚的人’叫做spendthrift：someone who spends a lot of money in a wasteful way：My father tells me I’m too much of a spendthrift.我父亲说我是个败家子。</p>\n<h2 id=\"You’re-off-to-a-good-start\"><a href=\"#You’re-off-to-a-good-start\" class=\"headerlink\" title=\"You’re off to a good start.\"></a>You’re off to a good start.</h2><p>你有一个很好的开始。</p>\n<h3 id=\"讲解-92\"><a href=\"#讲解-92\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>off to a good start表示starting out correctly；beginning something carefully and cautiously开了个好头，常搭配be/get，例：Their marriage got off to rather a shaky start.他们的婚姻一开始就有些不稳固。例：A: How’re things going with you and Dan?你和丹之间的关系如何了？B: We got off to a good start, but things are kinda falling apart now.我们开始的时候很好，但事情现在有点失控了。</p>\n<h3 id=\"补充-82\"><a href=\"#补充-82\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>开个好/坏头还可以说：start off on the right/wrong foot：begin sth in the right/wrong way.例：The new student started off on the wrong foot with the teacher by answering back rudely.那个新来的学生粗鲁地跟老师顶嘴，一开始就把关系搞僵了。</p>\n<h2 id=\"I’ve-had-enough-of-it\"><a href=\"#I’ve-had-enough-of-it\" class=\"headerlink\" title=\"I’ve had enough of it!\"></a>I’ve had enough of it!</h2><p>我受够了！</p>\n<h3 id=\"讲解-93\"><a href=\"#讲解-93\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>have had enough已经经历过太多的某事物。例：A: I’ve had enough of your being late.我受不了你老爱迟到了。B: Then buy me an alarm clock.那你给我买个闹钟啊。当你表示受够了这个意思，还可以用I’ve had it up to here (with…).例：A: I hate this weather, it sucks!讨厌这种天气，真糟透了！B: I’ve had it up to here with your complaining!我受够了你的抱怨！</p>\n<h3 id=\"补充-83\"><a href=\"#补充-83\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>‘受够了’还可以很形象的说：I’m fed up.我被喂饱了。</p>\n<h2 id=\"Can-you-try-to-talk-him-out-of-it\"><a href=\"#Can-you-try-to-talk-him-out-of-it\" class=\"headerlink\" title=\"Can you try to talk him out of it?\"></a>Can you try to talk him out of it?</h2><p>你能劝他打消这个念头吗？</p>\n<h3 id=\"讲解-94\"><a href=\"#讲解-94\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>除了‘persuade’这个词，‘talk’也有‘说服’的意思，‘talk somebody out of/into (doing) something’，说服某人（不）去做某事。例：A: Don’t you think that dress is just beautiful?你不觉得那件洋装漂亮死了吗？B: Are you trying to talk me into buying it for you?你是想说服我帮你买下来吧？例：A: Sammy said that he has decided to drop out of school!山米说他决定辍学！B: Can you try to talk him out of it?你能说服他别这样做吗？</p>\n<h2 id=\"Let’s-hang-out-sometime\"><a href=\"#Let’s-hang-out-sometime\" class=\"headerlink\" title=\"Let’s hang out sometime.\"></a>Let’s hang out sometime.</h2><p>我们有时间出来聚吧。</p>\n<h3 id=\"讲解-95\"><a href=\"#讲解-95\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>hang out是指visit a place often常去某处。例：Where does he hang out these days?他这些日子里都在什么地方来着？hang in there是表示‘加油，坚持住了’；hang on表示‘等等’，相当于hold on；hang up (on sb)是指挂（某人）电话，例：Did you just hang up on me?你刚刚是不是挂我电话来着？而被动be hung up (about/on sb)对…神魂颠倒，无法释怀，例：Are you still hung up on him?你还想着他吗？</p>\n<h3 id=\"补充-84\"><a href=\"#补充-84\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>hangout作名词：a place someone likes to go to often某人常去的地方：The bar is a favorite hangout fpr students.这个酒吧是学生们最喜欢去的地方。</p>\n<h2 id=\"This-is-ridiculous\"><a href=\"#This-is-ridiculous\" class=\"headerlink\" title=\"This is ridiculous.\"></a>This is ridiculous.</h2><p>这太扯了！</p>\n<h3 id=\"讲解-96\"><a href=\"#讲解-96\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>ridiculous本意是指very silly or unreasonable非常傻帽可笑的，例：You look ridiculous in those tight jeans.你穿上那紧身牛仔裤样子真可笑。例：What a ridiculous idea!多么荒谬的念头！</p>\n<h3 id=\"补充-85\"><a href=\"#补充-85\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>荒唐可笑的还可以说absurd.例：What an absurd suggestion!多么荒唐的建议！或者out of nowhere表示（莫名的行为）没有任何根源，无厘头。还可以说joke，例：Your job is a joke!你的工作就是一个玩笑。</p>\n<h2 id=\"You-got-it\"><a href=\"#You-got-it\" class=\"headerlink\" title=\"You got it!\"></a>You got it!</h2><p>听你的，没问题。</p>\n<h3 id=\"讲解-97\"><a href=\"#讲解-97\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>You got it!两个用法。其一：‘你说对了’。例：A: You mean we have to write a 20-page report on John F. Kennedy by next week?你是说我们下周前，要交出一份关于肯尼迪的二十页的报告？B: Yep. You got it!没错，你说对了！其二：‘没问题’。例：A: Will you get me some Coke while you’re at the store?你去店里买东西的时候，可以帮我捎些可乐吗？B: You got it! Is that all you want?没问题！就只要可乐吗？</p>\n<h3 id=\"补充-86\"><a href=\"#补充-86\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语还用You’re on.表达‘没问题’.这句话本意是‘（演出）该你上场了’，引申为‘这事情你是主角，听你的’。</p>\n<h2 id=\"Don’t-be-so-petty\"><a href=\"#Don’t-be-so-petty\" class=\"headerlink\" title=\"Don’t be so petty.\"></a>Don’t be so petty.</h2><p>不要这么小气嘛。</p>\n<h3 id=\"讲解-98\"><a href=\"#讲解-98\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>petty愿意是small or unimportant小的；不重要的：petty details/troubles细节/小麻烦；也可以指having or showing a small mind气量小的；小气的：petty and childish behavior小心眼和孩子气的行为。</p>\n<h3 id=\"补充-87\"><a href=\"#补充-87\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>反义词‘大度’叫做generous：He is really generous with his time, he’s always fixing my computer.他很乐于助人，总是花时间帮我修电脑。</p>\n<h2 id=\"She’s-out-of-my-league\"><a href=\"#She’s-out-of-my-league\" class=\"headerlink\" title=\"She’s out of my league.\"></a>She’s out of my league.</h2><p>我配不上这女生。</p>\n<h3 id=\"讲解-99\"><a href=\"#讲解-99\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>league本意‘联盟，同盟’，美国8所名校‘常春藤联盟’叫Ivy League；in league表示‘共谋，联合’。例：He pretended not to know her but in fact they were in league (together).他装着不认识她，其实他们暗中勾结（在一起）；league还可以表示本句的‘（好或坏的）等级、范畴’，所以She’s out of my league.就是她跟你不是一个档次的，她不是你能配得上的。</p>\n<h3 id=\"补充-88\"><a href=\"#补充-88\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>‘我配不上她’还可以说I’m not good enough for her.或者She deserves much better.</p>\n<h2 id=\"Now-that’s-perfect-English\"><a href=\"#Now-that’s-perfect-English\" class=\"headerlink\" title=\"Now that’s perfect English.\"></a>Now that’s perfect English.</h2><p>这才叫好的英语嘛。</p>\n<h3 id=\"讲解-100\"><a href=\"#讲解-100\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>用Now that’s…这个句型做开头，是指‘这才像话，这才配称做…‘的意思，表示说话者所给予的正面评价。例：A: Here’s your 12-ounce steak, sir.这是您点的十二盎司牛排。B: Now that’s what I call a steak.这才叫做牛排嘛。例：A: look at my new car!快看我的新车！B: Now that’s a sportscar.这才叫做跑车嘛！</p>\n","categories":["English"],"tags":["English"]},{"title":"Oral English 1","url":"http://yoursite.com/2018/02/03/Oral-English-1/","content":"<h2 id=\"I’m-heading-out\"><a href=\"#I’m-heading-out\" class=\"headerlink\" title=\"I’m heading out.\"></a>I’m heading out.</h2><p>我准备走了。</p>\n<h3 id=\"讲解\"><a href=\"#讲解\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词head，除了熟悉的‘头’，还可以表示‘出发，前往’，例句：Where are you heading?/Where are you headed?主被动都可以。</p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中其他常见的表示‘我要走了’的表达：I’m leaving；I’m gonna go；I’m out of here；’我们走吧’：Let’s get out of here；Let’s blow this place off；Let’s roll! </p>\n<h2 id=\"You’ll-make-it\"><a href=\"#You’ll-make-it\" class=\"headerlink\" title=\"You’ll make it.\"></a>You’ll make it.</h2><p>你会成功的！</p>\n<h3 id=\"讲解-1\"><a href=\"#讲解-1\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语‘make it’表示成功（succeed）.例句：You must make it this time.你这次一定要成功！He made it to the finals.他成功闯进总决赛了.</p>\n<h3 id=\"补充-1\"><a href=\"#补充-1\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中还经常：1）用‘can‘t make it to…’表示不能去…；例句：I’m sorry. I can’t make it to dinner tonight.不好意思，晚饭我去不了了；2）用‘not make it till’表示‘撑不到…’；例句：He won’t make it till tomorrow.他撑不到明天了.</p>\n<h2 id=\"Apology-accepted\"><a href=\"#Apology-accepted\" class=\"headerlink\" title=\"Apology accepted!\"></a>Apology accepted!</h2><p>嗯，接受你的道歉。</p>\n<h3 id=\"讲解-2\"><a href=\"#讲解-2\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>这是典型的将动词变被动形式的口语句型。原句应为：I accept your apology，当别人说I apologize. Forgive me please（我道歉，请原谅我）时用。</p>\n<h3 id=\"补充-2\"><a href=\"#补充-2\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中常见的类似表达还有：1. Agreed!（表示‘我同意’）；2. None taken.（表示‘没事儿’），在回答别人说No offense（表示‘没有冒犯之意’）时用；3. Problem solved.（表示‘问题解决了’）.</p>\n<h2 id=\"I’m-stuffed\"><a href=\"#I’m-stuffed\" class=\"headerlink\" title=\"I’m stuffed.\"></a>I’m stuffed.</h2><p>我吃的撑死了。</p>\n<h3 id=\"讲解-3\"><a href=\"#讲解-3\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词‘stuff’，除了作名词表示‘东西/事情’，还可以作动词表示‘塞满’，stuffed字面意思是肚子被塞满了，也就是撑死了的意思.这也是为什么‘stuffy’表示‘天气闷热的’.</p>\n<h3 id=\"补充-3\"><a href=\"#补充-3\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>我饱了：I’m full；我吃撑了还可以说：My stomach is going to pop（字面意思是我的胃要炸了）；我饿了：I’m hungry；我很饿：I’m starved/starving/famished；我饿死了：I’m starving to death/I could eat a horse now（字面意思是：我现在可以吃下一匹马）.</p>\n<h2 id=\"Stay-put\"><a href=\"#Stay-put\" class=\"headerlink\" title=\"Stay put.\"></a>Stay put.</h2><p>待着别动。</p>\n<h3 id=\"讲解-4\"><a href=\"#讲解-4\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词‘put’这里不表示熟悉的‘放’，而是形容词‘固定的/静止的’，所以这句话也可以说Stay still.（still这里也表示‘静止的’意思）。</p>\n<h3 id=\"注\"><a href=\"#注\" class=\"headerlink\" title=\"注\"></a>注</h3><p>警察抓人时喜欢说：Freeze!（也是‘别动’的意思）</p>\n<h3 id=\"补充-4\"><a href=\"#补充-4\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中put也经常表示‘说/表达’；例句：I don’t know how to put this.（我不知道该怎么说）；Let me put it this way.（我这么跟你说吧）；Well put!（说得好！）</p>\n<h2 id=\"What’s-with-you\"><a href=\"#What’s-with-you\" class=\"headerlink\" title=\"What’s with you?\"></a>What’s with you?</h2><p>你怎么了？</p>\n<h3 id=\"讲解-5\"><a href=\"#讲解-5\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>难点在于‘wrong’一词在口语中省略了，完整句应为：What’s wrong with you?（是不是出事了？）</p>\n<h3 id=\"补充-5\"><a href=\"#补充-5\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中常见的类似表达还有：What’s up?/What’s the matter?（怎么了？）；Is everything okay?（一切还好吧？）；Is something wrong?（是不是出事了？）；What’s bothering you?（你在烦什么呢？）</p>\n<h3 id=\"注-1\"><a href=\"#注-1\" class=\"headerlink\" title=\"注\"></a>注</h3><p>What’s wrong with you?和What’s the matter with you?用气愤的语气读也可以表示：你脑子进水了啊？</p>\n<h2 id=\"How’s-it-going\"><a href=\"#How’s-it-going\" class=\"headerlink\" title=\"How’s it going?\"></a>How’s it going?</h2><p>最近一切可好？</p>\n<h3 id=\"讲解-6\"><a href=\"#讲解-6\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词‘go’，除了表示熟悉的‘去/走’；口语中经常表示‘进展’，所以how’s it going?字面意思是‘一切进展得怎么样？’；而刚见面时说则表示‘最近好吗？’，也经常说：Hey.How’s everything going?<br>例句补充：I hope the meeting will go well.我希望会议能开得顺利.</p>\n<h3 id=\"补充-6\"><a href=\"#补充-6\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中常见的表示打招呼的还有：How are you?/How (are) you doing?/What’s up!（年轻人喜欢用）</p>\n<h2 id=\"You-rock\"><a href=\"#You-rock\" class=\"headerlink\" title=\"You rock!\"></a>You rock!</h2><p>你太牛啦！</p>\n<h3 id=\"讲解-7\"><a href=\"#讲解-7\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词‘rock’，除了表示熟悉的‘岩石/摇滚’，口语中经常作动词表示‘很棒/很牛’；例句：Adele really rocks!（Adele实在太棒了！）</p>\n<h3 id=\"补充-7\"><a href=\"#补充-7\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>（1）口语中经常用来表示‘很棒’的词还有rule（动词）：This movie rules!（这部电影真不错！）；awesome（形容词）：This food is awesome.（这东西很好吃！）<br>（2）‘rock’口语中还经常表示‘喝酒放的冰块儿’.例句：Do you want your whiskey on the rocks?（你的威士忌要加冰块儿吗？）</p>\n<h2 id=\"He-was-so-pissed-off\"><a href=\"#He-was-so-pissed-off\" class=\"headerlink\" title=\"He was so pissed off.\"></a>He was so pissed off.</h2><p>他当时气得不得了。</p>\n<h3 id=\"讲解-8\"><a href=\"#讲解-8\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语‘piss off’，表示‘使…生气’；piss me off惹我生气；英国人还喜欢用‘Piss off’表示‘滚开’.被动形式pissed off表示生气的.口语中也经常将off省略。例句：I’m so pissed (off) at him right now.我现在特别生他的气。</p>\n<h3 id=\"补充-8\"><a href=\"#补充-8\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>（1）除了pissed off，口语中常用来表示生气的还有：angry：Don’t be angry with me；mad：Don’t be mad at me.都表示‘别生我气’。<br>（2）piss这个词本身表示动词或名词‘小便’，但是较粗鲁，建议在公共场合或陌生人面前不要用，而在朋友面前可以用.例句：I need to piss./I need to take a piss.我得去小便一下。</p>\n<h2 id=\"You’re-so-sick\"><a href=\"#You’re-so-sick\" class=\"headerlink\" title=\"You’re so sick.\"></a>You’re so sick.</h2><p>你真变态。</p>\n<h3 id=\"讲解-9\"><a href=\"#讲解-9\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词‘sick’，除了表示‘生病的’，还可以表示恶心的/变态的。但是看表示生病的还是表示恶心的，得看具体语境。常见例句：You’re sick!你真变态！You make me sick.你真让我感到恶心！</p>\n<h3 id=\"补充-9\"><a href=\"#补充-9\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中常见的表示‘恶心的’还有形容词gross和disgusting.例句：You’re gross/disgusting.你真恶心；还有动词gross out.例句：You really gross me out.你真让我感到恶心。</p>\n<h2 id=\"I’m-beat\"><a href=\"#I’m-beat\" class=\"headerlink\" title=\"I’m beat.\"></a>I’m beat.</h2><p>我累死了。</p>\n<h3 id=\"讲解-10\"><a href=\"#讲解-10\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词‘beat’，除了熟悉的意思动词‘击打’，也可以作形容词表示‘筋疲力尽的’.例句：I wanna sleep, cuz I’m so beat（我想睡觉，因为我实在太累了）.</p>\n<h3 id=\"补充-10\"><a href=\"#补充-10\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>（1）口语中常见的表示‘很累的’形容词还有：very tried；exhausted；dog-tired；worn out；<br>（2）关于beat在口语中的常见表达还有：beat a dead horse白费口舌；beat sb up/beat the hell out of sb痛扁某人一顿；beat around the bush绕弯子；Beats me.（问倒我了，我也不知道）</p>\n<h2 id=\"We’re-in-a-hurry\"><a href=\"#We’re-in-a-hurry\" class=\"headerlink\" title=\"We’re in a hurry.\"></a>We’re in a hurry.</h2><p>我们挺赶时间的。</p>\n<h3 id=\"讲解-11\"><a href=\"#讲解-11\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词‘hurry’表示‘快点’，in a hurry表示赶时间，口语中也经常用in a rush表示赶时间。</p>\n<h3 id=\"补充-11\"><a href=\"#补充-11\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中其他常见类似表达：What’s the rush?你急匆匆的干嘛呀？；No rush.不用急.；We’re running out of time.我们快没时间了.；Hold your horses!别急，等下.；Take your time.你慢慢来，我不着急.；Don’t rush to conclusions.不要仓促做决定.；rush hour上下班高峰期</p>\n<h2 id=\"Watch-your-tone-young-man\"><a href=\"#Watch-your-tone-young-man\" class=\"headerlink\" title=\"Watch your tone, young man.\"></a>Watch your tone, young man.</h2><p>年轻人，注意你的说话语气哦。</p>\n<h3 id=\"讲解-12\"><a href=\"#讲解-12\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词‘tone’表示‘说话的语气/声调’。例句：I don’t like your tone.我不喜欢你说话的语气；first tone（第一声）/second tone（第二声）.</p>\n<h3 id=\"补充-12\"><a href=\"#补充-12\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中类似的表达还有Watch your mouth和Watch your language（都表示‘注意你的嘴巴和你说的话’，在别人说脏话时可以用）；You eat with that mouth?（你是用那张嘴吃饭的吗？别人说脏话时用）；Swearing is bad. Don’t swear.（说脏话不好，不要说脏话.swear也表示‘说脏话’）</p>\n<h2 id=\"I’m-really-not-in-the-mood\"><a href=\"#I’m-really-not-in-the-mood\" class=\"headerlink\" title=\"I’m really not in the mood.\"></a>I’m really not in the mood.</h2><p>我真的没那心情。</p>\n<h3 id=\"讲解-13\"><a href=\"#讲解-13\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词‘mood’表示‘心情’；常见口语搭配：in the mood（有做…事情的心情），经常用in the mood for sth/to do sth；例句：I’m in the mood for a movie.我想看部电影；Sorry, I’m not in the mood to go out.不好意西，我没心情出去玩；Not in the mood!没心情</p>\n<h3 id=\"补充-13\"><a href=\"#补充-13\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中常见相关的表达：（1）心情不好：in a bad mood：She’s in a bad mood.（她心情不好）（2）情绪多变的：moody：She’s really moody.（她这人真的喜怒无常情绪多变）</p>\n<h2 id=\"She-dumped-me\"><a href=\"#She-dumped-me\" class=\"headerlink\" title=\"She dumped me!\"></a>She dumped me!</h2><p>她把我给甩了。</p>\n<h3 id=\"讲解-14\"><a href=\"#讲解-14\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词‘dump’，能查到的词典意思是‘倒垃圾/清理废物’，除此之外还可以表示‘甩/抛弃’.例句：I got dumped.我被甩了. Lily dumped Tom yesterday.昨天Lily把Tom甩了.</p>\n<h3 id=\"补充-14\"><a href=\"#补充-14\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>（1）口语中经常用take a dump表示‘大便’（但是较粗俗，建议公共场合不要用，和朋友之间没关系）.例句：I need to go take a dump!我得去大便一下！<br>（2）关于‘甩’：口语中也经常用break up（表示分手）.例句：Don’t break up with me.別跟我分手啊. We’ve broken up.我们已经分手了.</p>\n<h2 id=\"Count-me-in\"><a href=\"#Count-me-in\" class=\"headerlink\" title=\"Count me in.\"></a>Count me in.</h2><p>算上我一个呗。</p>\n<h3 id=\"讲解-15\"><a href=\"#讲解-15\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>count表示‘计算/数数’，短语字面意思是：把我算进去，所以count sb in就表示算上某人.例句：Tom’s coming tonight. So count him in.（Tom今晚要来的，把他也算上。）</p>\n<h3 id=\"补充-15\"><a href=\"#补充-15\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中必须掌握的还有（1）count sb out表示不要算上.例句：He’s not coming. So count him out.（他不来了，所以就不要算上他了）；（2）countdown倒计时：The countdown begins.（倒计时开始）；（3）count：重要；例句：That doesn’t count. One more time.（刚才那局不算，我们再来一次.）</p>\n<h2 id=\"I’m-gonna-throw-a-party-this-week\"><a href=\"#I’m-gonna-throw-a-party-this-week\" class=\"headerlink\" title=\"I’m gonna throw a party this week.\"></a>I’m gonna throw a party this week.</h2><p>这周我要开个party。</p>\n<h3 id=\"讲解-16\"><a href=\"#讲解-16\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词‘throw’，这里不表示‘扔’，而表示的是‘举办’：throw a party（开派对）.口语中常见的还有have a party/hold a party（都表示‘开派对’）.例句：I’m having a party at my place this Friday? You wanna come?（这周五我要在家开个派对，你想来吗？）</p>\n<h3 id=\"补充-16\"><a href=\"#补充-16\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>在美国常见的party有：birthday party生日派对；housewarming party暖房派对（搬入新家后邀请朋友过来的派对）；bachelor party新郎新婚前告别单身的派对；bachelorette party新娘结婚前告别单身的派对；costume party化妆舞会；going-away party离别派对</p>\n<h2 id=\"Can-I-get-a-refill\"><a href=\"#Can-I-get-a-refill\" class=\"headerlink\" title=\"Can I get a refill?\"></a>Can I get a refill?</h2><p>我能续杯吗？</p>\n<h3 id=\"讲解-17\"><a href=\"#讲解-17\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词‘refill’，表示‘重新加满’，在这里就是名词‘再次满杯’的意思。‘re’作前缀经常表示‘再次’.比如consider-reconsider：You should reconsider it.（你应该重新考虑一下）；do-redo：I want to redo the house.（我想把房子重新装修一下）</p>\n<h3 id=\"补充-17\"><a href=\"#补充-17\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中的喝酒常用语还有：Can I get some more?（能给我再倒一点吗？）；I’m having a blast right now.（我现在特别开心）；This is very strong.（这酒真烈！）；Bottoms up!（干杯.全部干完！）；I think I’m drunk.（我好像已经醉了。）</p>\n<h2 id=\"Like-you-know-him\"><a href=\"#Like-you-know-him\" class=\"headerlink\" title=\"Like you know him.\"></a>Like you know him.</h2><p>说的好像你认识他似的。</p>\n<h3 id=\"讲解-18\"><a href=\"#讲解-18\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词‘like’，在这不表示‘喜欢’，而表示‘好像’，典型的‘讽刺句’/‘鄙视句’，翻译成中文是：‘说的好像…’。比如：1.你的一个朋友整天和你说英国怎么怎么的好，你就可以说：Like you’ve been there.（说得好像你去过似的）；2.你朋友笑话你昨晚喝醉了，你就可以说：Like you’ve never gotten drunk before.（说得好像你以前从来没喝醉过似的）。</p>\n<h3 id=\"补充-18\"><a href=\"#补充-18\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中还经常用like表示‘比如’.例句：I saw many people last night, like Lily and Tom.我昨晚看到了很多熟人，比如说Lily和Tom.</p>\n<h2 id=\"I-didn’t-mean-to\"><a href=\"#I-didn’t-mean-to\" class=\"headerlink\" title=\"I didn’t mean to.\"></a>I didn’t mean to.</h2><p>我不是存心的。</p>\n<h3 id=\"讲解-19\"><a href=\"#讲解-19\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词‘mean’，mean to do表示‘打算做某事’，didn’t mean to表示‘没打算做’，即不是故意存心的.在美国，两人分手时A说：You hurt me（你伤害了我），此时B经常回答：Sorry, but I really didn’t mean to.（对不起，但是我真的不是存心的）。所以下次再犯无心之错时就对对方说：Sorry, I didn’t mean to.</p>\n<h3 id=\"补充-19\"><a href=\"#补充-19\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>（1）口语中经常用mean表示人‘尖酸刻薄的’：My boss is really mean to me.（我的老板对我真的很坏）；You’re mean!（你这人太坏了！）<br>（2）固定短句I mean it.表示‘我是认真的（没开玩笑）’。</p>\n<h2 id=\"Yeah-I’ve-been-there-before\"><a href=\"#Yeah-I’ve-been-there-before\" class=\"headerlink\" title=\"Yeah, I’ve been there before.\"></a>Yeah, I’ve been there before.</h2><p>对的，我也有过类似经历。</p>\n<h3 id=\"讲解-20\"><a href=\"#讲解-20\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>此句为典型‘英语思维’句，字面意思为：我以前去过那儿（身体去过那儿）；语境一变，也经常用来表示：我也有过类似经历（思维想法去过那儿）.这里的思维习惯就是：英文里经常把‘身体’与‘思维/想法’对等。常见的表达有：I’m with Bingo.（可以理解为：我和Bingo在一起呢；也可以理解为：我同意Bingo的）；Are you following me?（身体层面：你是不是在跟踪我？；思维层面：你听懂我说的了吗？）；I’m lost.（身体层面：我迷路了；思维层面：我听不懂了）.所以下次你的朋友再说你英语不好的话你就说：I will get there.（我会到达那个水平的）。</p>\n<h2 id=\"Keep-in-touch\"><a href=\"#Keep-in-touch\" class=\"headerlink\" title=\"Keep in touch.\"></a>Keep in touch.</h2><p>保持联系哦。</p>\n<h3 id=\"讲解-21\"><a href=\"#讲解-21\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词touch，这里不表示‘触摸’，而表示‘联系’.常见搭配表达还有：lose touch with sb与某人失去联系；get in touch with sb与某人取得联系；stay in touch保持联系</p>\n<h3 id=\"补充-20\"><a href=\"#补充-20\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>（1）touch被动形式还可以表示‘感动的’：I’m really touched by that movie.（我真的被那部电影感动到了）；<br>（2）a touch经常用来表示‘一点点’；a touch of your love你的一点点爱</p>\n<h2 id=\"Could-you-do-me-a-huge-favor\"><a href=\"#Could-you-do-me-a-huge-favor\" class=\"headerlink\" title=\"Could you do me a huge favor?\"></a>Could you do me a huge favor?</h2><p>你能帮我个大忙吗？</p>\n<h3 id=\"讲解-22\"><a href=\"#讲解-22\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词‘favor’作名词时经常表示‘帮忙’.常用搭配有：do me a favor帮我个忙；ask you for a favor请你帮个忙；I got a huge favor to ask.我有个大忙需要你帮.</p>\n<h3 id=\"补充-21\"><a href=\"#补充-21\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中常见的表示‘帮忙’的表达还有：Can you help me (out)?你能帮我吗？；You need a hand?要帮忙不？；Let me give you a hand.我来帮你.更礼貌的表达：I was wondering if you could do me a favor.不知你可不可以帮我个忙？</p>\n<h2 id=\"When-are-you-gonna-pop-the-question\"><a href=\"#When-are-you-gonna-pop-the-question\" class=\"headerlink\" title=\"When are you gonna pop the question?\"></a>When are you gonna pop the question?</h2><p>你打算什么时候求婚呢？</p>\n<h3 id=\"讲解-23\"><a href=\"#讲解-23\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>pop the question：表示‘求婚‘.question指代的就是那句经典的‘Will you marry me?’（你愿意嫁给我吗？）；求婚也经常用一个动词叫propose.例句：I’m going to propose to her tonight.我准备今晚向她求婚.求婚的时候一般是单膝跪地：get down on one knee.准备好戒指ring.如果她答应了，那么戒指就是engagement ring（订婚戒指）.而你就可以说I’m engaged.（我已经订婚了）.那么她就是你的fiancee（未婚妻）.你是她的fiance（未婚夫）.</p>\n<h2 id=\"Take-it-easy-man\"><a href=\"#Take-it-easy-man\" class=\"headerlink\" title=\"Take it easy, man.\"></a>Take it easy, man.</h2><p>兄弟你淡定！</p>\n<h3 id=\"讲解-24\"><a href=\"#讲解-24\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词take，这里表示‘接受’.原句字面意思是‘轻松的接受它’，言外之意就是‘淡定，放轻松’。类似的常见口语表达还有：Don’t take it personal.别往心里去，不是针对你！；Don’t take it too seriously.不要太当回事儿.；I can’t take it anymore.我实在受不了了.</p>\n<h3 id=\"补充-22\"><a href=\"#补充-22\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中经常用来表达淡定的还有：Calm down/Chill/Chill out!/Easy!例句：Chill out, man. It’s no big deal.哥们，淡定。没什么大不了的</p>\n<h2 id=\"Can-I-crash-at-your-place\"><a href=\"#Can-I-crash-at-your-place\" class=\"headerlink\" title=\"Can I crash at your place?\"></a>Can I crash at your place?</h2><p>我能睡你家吗？</p>\n<h3 id=\"讲解-25\"><a href=\"#讲解-25\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词crash，这里不表示熟悉的‘撞击/坠毁’，而表示‘sleep’睡觉，区别在于crash强调的是‘临时决定睡觉或者强调睡觉环境不好或者借宿’。例句：I’m tired. I’m gonna go crash.我累了。我准备去睡觉了；She crashed on the couch.她睡在沙发上的。</p>\n<h3 id=\"补充-23\"><a href=\"#补充-23\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中和睡觉有关的表达还有：hit the bed/hit the hay/hit the sack，都表示去睡觉；take a nap则表示稍微睡一小会儿.</p>\n<h2 id=\"Oh-I-don’t-know-about-that\"><a href=\"#Oh-I-don’t-know-about-that\" class=\"headerlink\" title=\"Oh, I don’t know about that.\"></a>Oh, I don’t know about that.</h2><p>这可说不准。</p>\n<h3 id=\"讲解-26\"><a href=\"#讲解-26\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>本句意思为引申义，而字面意思是：我不知道这事儿.口语中经常用don’t know（不知道）来表示not sure（不确定）。比如你在shopping时销售人员（salesperson）说这衣服很适合你（you look good in it），你应该买下来（you should buy it），你就可以说：I don’t know. It’s a bit expensive for me.（我不确定，对我来说有点儿贵了）</p>\n<h2 id=\"You-look-stunning\"><a href=\"#You-look-stunning\" class=\"headerlink\" title=\"You look stunning.\"></a>You look stunning.</h2><p>你看上去美极了。</p>\n<h3 id=\"讲解-27\"><a href=\"#讲解-27\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词stunning表示‘惊艳的，令人印象深刻的’，此句经常在某种场合遇到朋友时使用.比如在某个party上遇到朋友时就可以打招呼说：Hey. How are you? You look stunning!类似的表达还有：You look amazing/good/sharp today.（表示：你今天看起来很不错）；如果只对女生还可以说：You look beautiful/gorgeous!对男生可以说：You look dapper, dude!</p>\n<h3 id=\"补充-24\"><a href=\"#补充-24\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>聊天时夸对方，美国人还经常喜欢用：You’re funny!你很有趣；You’re cute.你很可爱！</p>\n<h2 id=\"Out-with-it\"><a href=\"#Out-with-it\" class=\"headerlink\" title=\"Out with it.\"></a>Out with it.</h2><p>你就说出来吧！</p>\n<h3 id=\"讲解-28\"><a href=\"#讲解-28\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>当你感觉对方想说但是还在思考要不要说的时候就可以用这句.口语中常见的表示‘说’的还有很多.但是语境不同，用法也有差异.<br>举例补充：（1）A: Can I ask you something?（我能问你点事儿吗？）B: Shoot.（说吧！）；（2）I know you know her name. Just spill it, man.（我知道你知道她的名字，你就说吧，哥们）；（3）Do you want me to spell it out for you?（你要我帮你说出来吗？）；（4）Can I run something by you?（我能跟你说点事儿吗？；（5）We need to talk.（我们得好好谈一谈）（语气很重，慎用）</p>\n<h2 id=\"I-need-to-throw-up\"><a href=\"#I-need-to-throw-up\" class=\"headerlink\" title=\"I need to throw up.\"></a>I need to throw up.</h2><p>我得吐一下。</p>\n<h3 id=\"讲解-29\"><a href=\"#讲解-29\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语throw up：表示呕吐.口语中经常用来表示‘呕吐’的还有：puke和vomit.也可以作名词表示‘呕吐物’。例句：1. Don’t throw up on me!別吐到我身上；2. There’s your vomit all over the place.地上都是你吐的东西.</p>\n<h3 id=\"补充-25\"><a href=\"#补充-25\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>呕吐的原因可能是怀孕了（you’re pregnant），可能是你喝多了（you’re drunk），也有可能是你胃不舒服（Your stomach is not feeling well）.</p>\n<h2 id=\"Have-I-made-myself-clear\"><a href=\"#Have-I-made-myself-clear\" class=\"headerlink\" title=\"Have I made myself clear?\"></a>Have I made myself clear?</h2><p>都听懂我说的意思了吗？</p>\n<h3 id=\"讲解-30\"><a href=\"#讲解-30\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语make oneself clear：表示‘让别人听懂意思’.原句也可改为：Am I making myself clear?例句：You’ve made yourself clear.懂你的意思了.</p>\n<h3 id=\"补充-26\"><a href=\"#补充-26\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中常见的表示‘你听懂了吗？’还有：You understand?；You got it?；You got me?；You following me?；You see what I’m saying?；You understand what I’m talking about?；Are we clear?（经常伴有命令的口吻）</p>\n<h2 id=\"You-ran-out-on-me\"><a href=\"#You-ran-out-on-me\" class=\"headerlink\" title=\"You ran out on me.\"></a>You ran out on me.</h2><p>当初是你抛弃我的。</p>\n<h3 id=\"讲解-31\"><a href=\"#讲解-31\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语run out on sb：表示抛弃某人.等于abandon.口语中也可以用walk out on sb表示抛弃某人.例句：My father ran out on us when I was 5.（我5岁的时候我父亲就丢下我们不管走了）。</p>\n<h3 id=\"补充-27\"><a href=\"#补充-27\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>关于run在口语中的用法，必须掌握的还有：（1）I gotta run.（我得走了）；（2）I ran into Bingo yesterday.（我昨天碰到Bingo了）(run into sb表示偶遇某人)；（3）We’re running out of time（我们快没时间了）（run out of sth表示‘快用完…了’）。</p>\n<h2 id=\"I’ll-fix-you-up-with-Beth\"><a href=\"#I’ll-fix-you-up-with-Beth\" class=\"headerlink\" title=\"I’ll fix you up with Beth.\"></a>I’ll fix you up with Beth.</h2><p>我把Beth介绍给你做女友。</p>\n<h3 id=\"讲解-32\"><a href=\"#讲解-32\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语fix sb up：给某人安排对象，做媒.口语当中也经常用set sb up来表示。例句：Your friend is so pretty! Can you set me up with her?你朋友长得太漂亮了，你能把我介绍给她认识吗？</p>\n<h3 id=\"补充-28\"><a href=\"#补充-28\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>关于fix在口语中的用法，必须掌握的还有：（1）It can’t be fixed.修不了了/你补不了了；（2）I’ll fix you up with a bigger room.我再给你提供个大一点的房间.</p>\n<h2 id=\"Whatever\"><a href=\"#Whatever\" class=\"headerlink\" title=\"Whatever.\"></a>Whatever.</h2><p>随便，无所谓了。</p>\n<h3 id=\"讲解-33\"><a href=\"#讲解-33\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>whatever表示‘不管什么/随便什么’.单独的‘whatever’经常伴有不屑无所谓的口吻.口语中经常包含whatever短句有：Whatever you say!你说什么就是什么咯；Whatever you’re having.你吃/喝什么我就要什么.（点菜时经常用）；Whatever you do, I’ll be there for you.不管你做什么，我都会支持你的。</p>\n<h3 id=\"补充-29\"><a href=\"#补充-29\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>whatever还经常在刚碰面的时候用来问候别人.例如：Hey. Whatever happened to your brother? Haven’t seen him for a while.你弟弟最近怎么样了？有段时间没见到他了。</p>\n<h2 id=\"Can-you-put-her-on-the-phone\"><a href=\"#Can-you-put-her-on-the-phone\" class=\"headerlink\" title=\"Can you put her on the phone?\"></a>Can you put her on the phone?</h2><p>你能让她接下电话吗？</p>\n<h3 id=\"讲解-34\"><a href=\"#讲解-34\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语put sb on the phone：表示让某人接电话.常用的同义短语还有put sb through.例句：Is Bingo there? Can you put him through?（请问Bingo在吗？能让他接下电话吗？）</p>\n<h3 id=\"补充-30\"><a href=\"#补充-30\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中常用的和电话有关的表达还有：pick up the phone接电话；hang up the phone挂电话；Don’t hang up on me.不要挂我电话；Who is it?你是谁？；Gimme a call tomorrow.明天给我电话哦；I’ll text you.我会给你短信的.</p>\n<h2 id=\"You’re-unbelievable\"><a href=\"#You’re-unbelievable\" class=\"headerlink\" title=\"You’re unbelievable!\"></a>You’re unbelievable!</h2><p>你真是不可理喻！</p>\n<h3 id=\"讲解-35\"><a href=\"#讲解-35\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词unbelievable：字面意思是难以置信的；太棒或太极端到难以置信的；例句：Did you hear him sing? It’s unbelievable.你听到他唱歌了没？唱的太棒了！而原句的You’re unbelievable则表示你太极端，难以接受。</p>\n<h3 id=\"补充-31\"><a href=\"#补充-31\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中常用的表示‘不可理喻’的表达还有：Are you out of your mind?（你是不是疯了？）；Are you serious?（你不是吧！）</p>\n<h2 id=\"I-really-appreciate-it\"><a href=\"#I-really-appreciate-it\" class=\"headerlink\" title=\"I really appreciate it.\"></a>I really appreciate it.</h2><p>我真的很感激。</p>\n<h3 id=\"讲解-36\"><a href=\"#讲解-36\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词appreciate表示‘感激’.当表示对别人的感激和帮助时经常用：Thanks. I really appreciate it.例句：I really appreciate you trying to help me.真的很感激你尝试帮我。</p>\n<h3 id=\"补充-32\"><a href=\"#补充-32\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>当希望别人做某事或者希望别人不做某事时经常用句型：I’d really appreciate it if you…例句：I’d really appreciate it if you left right now.如果你现在就走，我会很感激的.</p>\n<h2 id=\"I-owe-you-one\"><a href=\"#I-owe-you-one\" class=\"headerlink\" title=\"I owe you one.\"></a>I owe you one.</h2><p>我欠你个人情！</p>\n<h3 id=\"讲解-37\"><a href=\"#讲解-37\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词owe：表示‘欠’.口语中常见表达有：You owe me money.你欠我钱；I owe you bigtime.我欠你太多了（人情/金钱都可以）；I owe you an apology.我得跟你道歉；I owe my life to you.我的命是你的了！</p>\n<h3 id=\"补充-33\"><a href=\"#补充-33\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>关于owe的表达必须掌握的还有（1）You owe it to yourself.这是你应得的；（2）Owing to the rain, we can’t go.由于下雨，我们不能去了(owe to sth表示‘因为某事’)</p>\n<h2 id=\"That-goes-without-saying\"><a href=\"#That-goes-without-saying\" class=\"headerlink\" title=\"That goes without saying.\"></a>That goes without saying.</h2><p>那还用说？</p>\n<h3 id=\"讲解-38\"><a href=\"#讲解-38\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>习语。字面意思是：不用说就可以进行，言外之意就是不用说了。口语中常见的包含say的短语短句还有：（1）Need I say more?还需要再说下去吗？；（2）Says who?谁说的！；（3）I’m just saying.我只是说说而已；（4）If you say so.你说是的话那就是咯；（5）I can’t say the same.不敢苟同；（6）Do as I say.听我的，我说什么你就做什么;（7）You don’t say!是嘛！/可不是嘛！</p>\n<h2 id=\"Dinner’s-on-me\"><a href=\"#Dinner’s-on-me\" class=\"headerlink\" title=\"Dinner’s on me.\"></a>Dinner’s on me.</h2><p>晚饭我请客。</p>\n<h3 id=\"讲解-39\"><a href=\"#讲解-39\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词on：此处表示‘算…的‘。Lunch is on me.午饭算我的（言外之意就是午饭我买单）.邀请别人吃饭喝酒时常用此句型.例句：First drink’s on me.第一杯算我的.</p>\n<h3 id=\"补充-34\"><a href=\"#补充-34\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中常用和用餐有关的表达还有：（1）Let me buy your dinner.我请你吃晚饭吧；（2）It’s on the house.店主请客（免费）；（3）It’s my treat.算我的，我买单；（4）Let’s split the bill.我们分开付账吧；（5）I got it this time.这次我来请。</p>\n<h2 id=\"Where-does-that-come-from\"><a href=\"#Where-does-that-come-from\" class=\"headerlink\" title=\"Where does that come from?\"></a>Where does that come from?</h2><p>你怎么想起来说这种话呢？</p>\n<h3 id=\"讲解-40\"><a href=\"#讲解-40\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>字面意思是：那是从哪来的？在别人说了一些让你不可思议的话的时候你可以用这句。例句：A: I think you don’t love me anymore.（我觉得你不爱我了）；B: What? Where does that come from?（什么？你怎么想起来说这种话呢？）</p>\n<h3 id=\"补充-35\"><a href=\"#补充-35\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中和‘说话’有关的句子必须掌握的还有：（1）Where were we?我们刚才说到哪了？；（2）I know where this is going.我知道你想要说什么了。</p>\n<h2 id=\"You-deserve-it\"><a href=\"#You-deserve-it\" class=\"headerlink\" title=\"You deserve it!\"></a>You deserve it!</h2><p>你活该！/这是你应得的！</p>\n<h3 id=\"讲解-41\"><a href=\"#讲解-41\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词deserve表示：值得。原句字面意思是：你值得这个.语境变意思也变。如果是自作自受就翻译为你活该；如果是通过努力理所应当就翻译为你应得的。口语中常见的deserve还有：You deserve someone better.你值得拥有更好的人（别人失恋时安慰可以用）</p>\n<h3 id=\"补充-36\"><a href=\"#补充-36\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>‘你活该’的口语表达还有：You had it coming；You brought this on yourself；表示‘这是你应得的’还有：You owe this to yourself!</p>\n<h2 id=\"How-am-I-supposed-to-know\"><a href=\"#How-am-I-supposed-to-know\" class=\"headerlink\" title=\"How am I supposed to know?\"></a>How am I supposed to know?</h2><p>你问我我问谁？</p>\n<h3 id=\"讲解-42\"><a href=\"#讲解-42\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语be supposed to表示：应该.原句字面理解为：我怎么会应该知道？.其他例句：What am I supposed to say?我应该说什么好呢？</p>\n<h3 id=\"补充-37\"><a href=\"#补充-37\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中表示‘不知道’的表达还可以用God。如God knows where he is.（鬼才知道他现在人在哪）。</p>\n<h2 id=\"I’ve-been-working-out-lately\"><a href=\"#I’ve-been-working-out-lately\" class=\"headerlink\" title=\"I’ve been working out lately.\"></a>I’ve been working out lately.</h2><p>我最近一直在健身。</p>\n<h3 id=\"讲解-43\"><a href=\"#讲解-43\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语work out在原句中表示：健身，锻炼身体.例句：I need to go to the gym to work out.我得去健身房锻炼去。口语中也经常用此句夸别人的身材：You look good. Been working out, huh?你看上去不错，最近在健身是吧？</p>\n<h3 id=\"补充-38\"><a href=\"#补充-38\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中关于‘健身’常见的表达还有：1. lose some weight/shed some pounds减肥；2. You’ve put on some weight.你最近变胖了；3. I’m on a diet.我最近在控制饮食；4. hit the gym去健身房锻炼</p>\n<h2 id=\"He-never-cheated-on-me\"><a href=\"#He-never-cheated-on-me\" class=\"headerlink\" title=\"He never cheated on me.\"></a>He never cheated on me.</h2><p>他从来没背着我偷过人。</p>\n<h3 id=\"讲解-44\"><a href=\"#讲解-44\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语cheat on表示：偷人.例句：I’ve never cheated on her.我从来没有背着她偷过人。cheat本身表示的是作弊欺骗，在考试中作弊叫cheat in exams.</p>\n<h3 id=\"补充-39\"><a href=\"#补充-39\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中和感情有关的常见表达还有：have an affair有婚外恋；break up分手；get dumped被甩了；get back together和好；a perfect match天生一对；go out with与某人约会；in a relationship恋爱中；fall in love坠入爱河</p>\n<h2 id=\"Are-you-in-or-are-you-out\"><a href=\"#Are-you-in-or-are-you-out\" class=\"headerlink\" title=\"Are you in or are you out?\"></a>Are you in or are you out?</h2><p>你到底要不要一起做？</p>\n<h3 id=\"讲解-45\"><a href=\"#讲解-45\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词in和out，字面意思是在里面和在外面，口语中经常用来表示‘加入’和‘退出’.当有活动时别人会问你想不想加入，你想加入时可说：I’m in.如果你想退出活动时可说：I’m out.例句：A: We’re going shopping tomorrow. Wanna come?（我们明天去逛街，想来吗？）B: Yeah, I’m in.（好，我来）</p>\n<h3 id=\"补充-40\"><a href=\"#补充-40\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>如果别人邀请，你不想加入时可用pass这个词。例句：Do you want to have dinner with us?（你想和我们一起吃晚饭吗？）B: I’ll pass/I’ll take a pass.（我就不参加了）</p>\n<h2 id=\"I-failed-you\"><a href=\"#I-failed-you\" class=\"headerlink\" title=\"I failed you.\"></a>I failed you.</h2><p>我辜负了你们的期望。</p>\n<h3 id=\"讲解-46\"><a href=\"#讲解-46\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词fail，表示失败。例句：Don’t fail again.别再失败了.口语中经常用fail sb表示：另某人失望。或者fail sth表示：未成功.例句：I failed the test, mom. I’m sorry I failed you again.妈妈，我测试没过，对不起，又让你失望了.</p>\n<h3 id=\"补充-41\"><a href=\"#补充-41\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中表示‘失望’的表达还有：Don’t let me down.别让我失望；I’m disappointed in you.我对你感到失望；I expected more.没达到我的期望；not as good as I’d expected.没我期望中的好。</p>\n<h2 id=\"I-have-no-credit-left-on-my-phone\"><a href=\"#I-have-no-credit-left-on-my-phone\" class=\"headerlink\" title=\"I have no credit left on my phone.\"></a>I have no credit left on my phone.</h2><p>我手机没钱了。</p>\n<h3 id=\"讲解-47\"><a href=\"#讲解-47\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词credit表示‘信用’，在这引申为‘费用’的意思。给手机充值叫做：top up my phone/put money on my phone/add money to my phone.</p>\n<h3 id=\"补充-42\"><a href=\"#补充-42\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>手机常见的问题还有：I’m losing you.我快听不清你说话了；You there?你还在听我说话吗？；No reception here.手机在这没信号；My cell phone has some bad reception.我手机信号不好；My phone isn’t working well.我手机出了点问题；Hello?Hello?喂，喂？（听不到对方说话时用）</p>\n<h2 id=\"That-would-be-great\"><a href=\"#That-would-be-great\" class=\"headerlink\" title=\"That would be great.\"></a>That would be great.</h2><p>那样的话就太好啦！</p>\n<h3 id=\"讲解-48\"><a href=\"#讲解-48\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语would be，口语中，在对方主动提出要做事情或者提到一个可能性时，经常用‘that would be…’句型。例句：1. A: Do you want me to pick you up tomorrow?（你要我明天接你吗？）；B: That would be nice.（那样的话就太好了）；2. A: I think it’s going to rain tomorrow.（我觉得明天要下雨）；B: That would be too bad.（那样就太不好了）.</p>\n<h3 id=\"补充-43\"><a href=\"#补充-43\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>would在口语中经常变成’d.并且d不发音，that would be经常说成that’d be…，如That’d be awesome.那样的话就太棒了！</p>\n<h2 id=\"Big-deal\"><a href=\"#Big-deal\" class=\"headerlink\" title=\"Big deal!\"></a>Big deal!</h2><p>有什么了不起的！</p>\n<h3 id=\"讲解-49\"><a href=\"#讲解-49\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>deal表示交易买卖.big deal字面意思为大买卖，引申为‘了不起’，例句：It’s a big deal. Don’t mess it up.这事儿很重要，别搞砸了。但是口语中经常用big deal，再配合讽刺不屑的语气表示：有什么大不了的。</p>\n<h3 id=\"补充-44\"><a href=\"#补充-44\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中和deal表示‘买卖’的常见表达还有：Deal!一言为定；Don’t make a big deal about it/Don’t make a big deal out of it.別小题大做；This is a good deal.这买卖真划算；cut a deal达成协议。</p>\n<h2 id=\"You-got-me-wrong\"><a href=\"#You-got-me-wrong\" class=\"headerlink\" title=\"You got me wrong.\"></a>You got me wrong.</h2><p>你误会我了。</p>\n<h3 id=\"讲解-50\"><a href=\"#讲解-50\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词get，除了熟悉的表示获得得到，也经常表示‘理解’。例句：I don’t get it.我不懂；I don’t get her.我真搞不懂她。原句里的got me wrong就是错误的理解我了（即误会我了）.其他常用句子：别误会我：Don’t get me wrong；你全搞错了：You got it all wrong.</p>\n<h3 id=\"补充-45\"><a href=\"#补充-45\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中用get表示理解的短句还有：You got it/You get it?你懂了吗？；You got me?你懂我意思了吗？；I got you/I gotcha.我懂你意思了。</p>\n<h2 id=\"Hey-you-wanna-hang-out\"><a href=\"#Hey-you-wanna-hang-out\" class=\"headerlink\" title=\"Hey, you wanna hang out?\"></a>Hey, you wanna hang out?</h2><p>喂，你要不要一起玩啊？</p>\n<h3 id=\"讲解-51\"><a href=\"#讲解-51\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语hang out，表示：一起玩儿一起放松.例句：1. I like hanging out with you.我喜欢和你一起玩儿；2. I’ll just hang out at home tonight.我今晚就在家休息放松了。口语中也经常会把out省略，比如：Let’s hang tomorrow night.我们明晚一起玩吧。</p>\n<h3 id=\"补充-46\"><a href=\"#补充-46\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中关于hang常见的短语还有：hang in there加油顶住；hang on等一下；hang up the phone挂电话；hang up on sb挂某人电话；have a hangover宿醉；hung-over宿醉的（形容词）；How’s it hanging?最近怎么样（打招呼用）</p>\n<h2 id=\"You-poor-thing\"><a href=\"#You-poor-thing\" class=\"headerlink\" title=\"You poor thing!\"></a>You poor thing!</h2><p>你真可怜！</p>\n<h3 id=\"讲解-52\"><a href=\"#讲解-52\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>poor在这表示可怜。原句理解为：你这个可怜的东西。也经常说：Poor you.英语中，当听到对方描述自己不好的经历时经常用poor表示同情。也经常用：Sorry to hear that.或者That’s terrible.例句：A: I’m not feeling well today.（今天感觉身体不舒服）；B: Oh, you poor thing/Sorry to hear that/That’s terrible.（都表示对对方的同情）。</p>\n<h3 id=\"补充-47\"><a href=\"#补充-47\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>英语中当听到对方描述自己好的经历时经常用：That’s great/awesome；Good for you；That’s good to hear；I’m happy for you；Congratulations（恭喜）等表达。</p>\n<h2 id=\"How-come-you’re-still-single\"><a href=\"#How-come-you’re-still-single\" class=\"headerlink\" title=\"How come you’re still single?\"></a>How come you’re still single?</h2><p>你怎么还是单身呢？</p>\n<h3 id=\"讲解-53\"><a href=\"#讲解-53\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语how come表示：怎么会？口语中在感到惊讶时用。例句：1. A: I lost my wallet.（我钱包丢了）；B: How come?（怎么会呢？）；2. How come you’re sick?你怎么会生病呢？</p>\n<h3 id=\"补充-48\"><a href=\"#补充-48\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>当别人说出一些你认为难以置信的事情时，比如你朋友说：I just got into Harvard.（我被哈佛大学录取了），你就可以说：What!/No way!/Are you kidding?/Are you serious?/Really?/Seriously?都表示很惊讶，不会吧！</p>\n<h2 id=\"This-guy-is-nuts\"><a href=\"#This-guy-is-nuts\" class=\"headerlink\" title=\"This guy is nuts.\"></a>This guy is nuts.</h2><p>这哥们绝对是个疯子！</p>\n<h3 id=\"讲解-54\"><a href=\"#讲解-54\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词nut，愿意是坚果，俚语意思是疯子，复数nuts表示‘疯的’.常用短语：go nuts发疯（Don’t go nuts别发疯）；drive sb nuts使某人发疯（You’re driving me nuts你真让我崩溃）</p>\n<h3 id=\"补充-49\"><a href=\"#补充-49\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>除了nuts表示疯的，口语中也常用crazy/insane/bananas/out of one’s mind；例句：Are you crazy?/Are you insane?/Are you bananas?/Are you out of mind?都表示你疯了吗？；lunatic也表示疯子（名词）.</p>\n<h2 id=\"Let’s-take-a-short-break\"><a href=\"#Let’s-take-a-short-break\" class=\"headerlink\" title=\"Let’s take a short break.\"></a>Let’s take a short break.</h2><p>我们短暂休息一会儿。</p>\n<h3 id=\"讲解-55\"><a href=\"#讲解-55\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词break表示短休息。短语take a break.由于寒假假期较短，所以寒假叫做winter take.在美国，休息多长时间用take，并把分钟省略。如休息五分钟可直接说：Let’s take five.不需要加minutes.</p>\n<h3 id=\"补充-50\"><a href=\"#补充-50\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>表示短暂休息睡眠的也可以用nap.例句：I need to take a nap.我得稍微睡一会儿（强调短睡眠）；较长的假期叫vacation，如暑假：summer vacation；中国的法定假日一般用holiday描述，如：National Day holiday国庆假期。去度假叫go on a vacation.</p>\n<h2 id=\"It’s-all-on-him\"><a href=\"#It’s-all-on-him\" class=\"headerlink\" title=\"It’s all on him.\"></a>It’s all on him.</h2><p>都怪他！</p>\n<h3 id=\"讲解-56\"><a href=\"#讲解-56\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词是on，和前面dinner’s on me一样，表示：算…的。吃饭算我的，所以是我请客；但是语境一变，责任算他的，就表示：都怪他。例句：If anything goes wrong, it’s on you.如果出什么事儿的话就怪你。</p>\n<h3 id=\"补充-51\"><a href=\"#补充-51\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>其他表示‘承担责任’的表达还有：It’s all your fault.都是你的错；My bad.我的错；I blame you.我责怪你；He is to blame.怪他；I’m responsible for this.这事儿我有责任.</p>\n<h2 id=\"She’s-seeing-someone-again\"><a href=\"#She’s-seeing-someone-again\" class=\"headerlink\" title=\"She’s seeing someone again.\"></a>She’s seeing someone again.</h2><p>她又开始约会了。</p>\n<h3 id=\"讲解-57\"><a href=\"#讲解-57\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词seeing表示约会，而不是熟悉的看见.等于dating.例句：I heard that Lily’s seeing Tom.我听说Lily最近在和Tom约会。</p>\n<h3 id=\"补充-52\"><a href=\"#补充-52\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中表示约会常用的短语还有：go out字面意思是出去（男女之间可特指出去约会）：I’ve been going out with Sarah（我最近在和Sarah出去约会）；go on a date去约会；blind date相亲；bring a date带一个男伴/女伴；in a relationship恋爱中；It’s getting serious.（感情）变的认真了.</p>\n<h2 id=\"You-stay-out-of-this\"><a href=\"#You-stay-out-of-this\" class=\"headerlink\" title=\"You stay out of this.\"></a>You stay out of this.</h2><p>你别多管闲事儿。</p>\n<h3 id=\"讲解-58\"><a href=\"#讲解-58\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>短语stay out of表示：别插手.例句：You stay out of this fight.你别插手这场斗争。</p>\n<h3 id=\"补充-53\"><a href=\"#补充-53\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中常见的表示‘别多管闲事’的句子还有：It has nothing to do with you.（跟你没关系）；It’s none of/not your business.（不关你事儿）；Keep your nose out of this.（别没事儿找事儿）；Mind your own business.（管好你自己的事儿就行）；Don’t get in the way.（別碍事儿）;短语interfere with…（干涉）</p>\n<h2 id=\"Sleep-tight\"><a href=\"#Sleep-tight\" class=\"headerlink\" title=\"Sleep tight.\"></a>Sleep tight.</h2><p>睡个好觉。</p>\n<h3 id=\"讲解-59\"><a href=\"#讲解-59\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词tight不表示熟悉的‘紧的’，而是俚语意思：舒服地/稳健地.例句：Sit tight.坐好了.晚上睡前经常用sleep tight表示希望对方睡个好觉。</p>\n<h3 id=\"补充-54\"><a href=\"#补充-54\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>常见的和‘睡觉’有关的表达还有：good night晚安；Sweet dreams好梦。一般会经常说（Good night and sleep tight比较押韵）；can’t fall asleep睡不着；have a nightmare做噩梦；I’ll sleep on it.我睡觉时好好考虑；You’ll sleep it off.你睡一觉就好了；sleeping pills安眠药</p>\n<h2 id=\"She’s-gonna-be-crushed\"><a href=\"#She’s-gonna-be-crushed\" class=\"headerlink\" title=\"She’s gonna be crushed.\"></a>She’s gonna be crushed.</h2><p>她会崩溃的。</p>\n<h3 id=\"讲解-60\"><a href=\"#讲解-60\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词crush，表示‘压碎’；crushed被压碎的，引申为‘人崩溃了’.例句：Lucy’s crushed by the whole breakup thing.整个分手事件把Lucy搞得崩溃了，打击很大.</p>\n<h3 id=\"补充-55\"><a href=\"#补充-55\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>（1）口语中表示‘心情很差’的词还有：heart-broken极其伤心的；broken-hearted极度悲伤的；desperate绝望的；miserable痛苦的；<br>（2）crush在口语中还可以表示‘迷恋，有好感’，可做动词和名词，例句：I have a crush on Sarah/I’m crushing on Sarah.我对Sarah有好感。</p>\n<h2 id=\"This-one-is-way-better\"><a href=\"#This-one-is-way-better\" class=\"headerlink\" title=\"This one is way better.\"></a>This one is way better.</h2><p>这个好多了。</p>\n<h3 id=\"讲解-61\"><a href=\"#讲解-61\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词way，除了熟悉的‘方法，方式，道路’，还可以表示‘非常地/远远地’。Better表示更好，way better则表示好的多，修饰程度.经常还会和too搭配表示‘太/非常’；例句：1. It’s way too hot today.今天实在太热了；2. I’m way taller than you.我比你高多了；3. He’s way gone.他早就走了；4. Way ahead of you.早就在你前面想到了。</p>\n<h3 id=\"补充-56\"><a href=\"#补充-56\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>way的口语用法还有：way to go!干得漂亮！；This way please.这边请；the way you talk你说话的方式；in a different way以不同的方式</p>\n<h2 id=\"I’m-in-the-middle-of-something\"><a href=\"#I’m-in-the-middle-of-something\" class=\"headerlink\" title=\"I’m in the middle of something.\"></a>I’m in the middle of something.</h2><p>我现在正在忙。</p>\n<h3 id=\"讲解-62\"><a href=\"#讲解-62\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>短语in the middle of something：字面意思是在某件事的正中间，言外之意就是脱不了身，所以用此短语表示：说话时正在忙。开会时别人给你打电话你就可以说：Sorry. I’m in the middle of something. I’ll call you back.对不起，我在忙，回头给你回电话.也可以具体说出事情：I’m in the middle of a meeting.我在忙着开会呢</p>\n<h3 id=\"补充-57\"><a href=\"#补充-57\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>表示忙的短语还有：busy忙碌的；busy as hell忙得要死；I will be tied up tomorrow.我明天会超忙.</p>\n<h2 id=\"Buckle-up\"><a href=\"#Buckle-up\" class=\"headerlink\" title=\"Buckle up!\"></a>Buckle up!</h2><p>系好安全带！</p>\n<h3 id=\"讲解-63\"><a href=\"#讲解-63\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>开车用语，buckle指的是‘皮带扣’，作动词就是把安全带扣上，也经常说：Fasten your seatbelt. Seatbelt表示‘座位安全带’.</p>\n<h3 id=\"补充-58\"><a href=\"#补充-58\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>常见的汽车用语还有：Hop in/Get in the car.上车；Pull over靠边停；Stop the car停车；run red lights闯红灯；Don’t drive when you’re drunk不要醉驾；Don’t drive under the influence不要酒驾；speed limit限速；drive over the speed limit超速；give you a lift让你搭顺风车</p>\n<h2 id=\"Bring-it-on\"><a href=\"#Bring-it-on\" class=\"headerlink\" title=\"Bring it on.\"></a>Bring it on.</h2><p>放马过来。</p>\n<h3 id=\"讲解-64\"><a href=\"#讲解-64\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>口语中也经常说Bring it.表示：开始吧（很有自信）。当别人挑战你时或者比赛时经常说。例句：A: I think you’re no competition.（我觉得你根本不是我对手）B: Really? Bring it on.（是嘛？放马过来吧！）</p>\n<h3 id=\"补充-59\"><a href=\"#补充-59\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中回应对方挑战的表达还有：We’ll see (about that).我们到时看咯，走着瞧了；I don’t know about that.这可说不准；You’re gonna be sorry for saying this.你会为说这话而后悔的；Ok, it’s on!行，我应战！</p>\n<h2 id=\"I-don’t-buy-any-of-your-crap\"><a href=\"#I-don’t-buy-any-of-your-crap\" class=\"headerlink\" title=\"I don’t buy any of your crap.\"></a>I don’t buy any of your crap.</h2><p>我才不信你的鬼话呢。</p>\n<h3 id=\"讲解-65\"><a href=\"#讲解-65\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>1.关键词buy，除了熟悉的‘买’，口语中经常用来表示‘相信（believe）’.例句：1. I don’t buy a word you just said.你刚才说的话我一个字也不信；2. She buys your story.她是相信你的故事的；<br>2.关键词crap，除了表示‘大便’，口语中经常用来表示‘鬼话废话’.例句：1. Cut the crap.别说废话；2. He’s full of crap.他这人鬼话连篇。</p>\n<h3 id=\"补充-60\"><a href=\"#补充-60\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>表示‘不相信’还可以说：I doubt that.我可不信；Bullshit!胡说；Nonsense.瞎说！</p>\n<h2 id=\"Let’s-just-take-a-cab\"><a href=\"#Let’s-just-take-a-cab\" class=\"headerlink\" title=\"Let’s just take a cab.\"></a>Let’s just take a cab.</h2><p>我们还是打车吧。</p>\n<h3 id=\"讲解-66\"><a href=\"#讲解-66\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词cab表示出租车，也可以用熟悉的‘taxi’.计程车司机叫cab driver/taxi driver.英语里用take表示乘坐交通工具，如：take the bus坐公交；take the subway坐地铁；take the train坐火车等.</p>\n<h3 id=\"补充-61\"><a href=\"#补充-61\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>在国外打车可跟司机说地点加please.如：Central park, please.请把我带到中央公园；最后不要忘了给小费说：Keep the change.（零钱不用找了）</p>\n<h2 id=\"I-quit-my-job\"><a href=\"#I-quit-my-job\" class=\"headerlink\" title=\"I quit my job.\"></a>I quit my job.</h2><p>我辞职了。</p>\n<h3 id=\"讲解-67\"><a href=\"#讲解-67\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词quit表示停止/放弃.常见的有：quit smoking戒烟；quit drinking戒酒等.quit my job就是停止我的工作（辞职）；辞职时也可直接说：I quit!我不干了.正式一点的词表示辞职的有：resign: He resigned from the company yesterday.（他昨天辞职了）</p>\n<h3 id=\"补充-62\"><a href=\"#补充-62\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>和工作有关的常见表达还有：fire/lay off解雇：I’m fired/I’m laid off.我被炒鱿鱼了；hire招聘；employ雇佣；employer雇主；employee雇员；suspended被停职了；between jobs没有工作</p>\n<h2 id=\"Almost-slippped-my-mind\"><a href=\"#Almost-slippped-my-mind\" class=\"headerlink\" title=\"Almost slippped my mind.\"></a>Almost slippped my mind.</h2><p>差点儿忘记了。</p>\n<h3 id=\"讲解-68\"><a href=\"#讲解-68\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语slip my mind，字面意思是滑过我的脑子，引申为：忘记了。例句：A: Why didn’t you go to the meeting?（你为什么不去开会）；B: Oh, it slipped my mind.（那事儿我忘记了）；与之意思相反的是cross my mind，字面意思是穿过我的脑子，引申为：想起.例句：You always cross my mind before I go to bed.我睡前总是会想到你！</p>\n<h3 id=\"补充-63\"><a href=\"#补充-63\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中的‘忘记’还有：Just forget about it.忘了吧（没事儿了）；Forget what I said.当我什么也没说。</p>\n<h2 id=\"Dummy-up\"><a href=\"#Dummy-up\" class=\"headerlink\" title=\"Dummy up.\"></a>Dummy up.</h2><p>别说话。</p>\n<h3 id=\"讲解-69\"><a href=\"#讲解-69\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词dummy表示：笨蛋，口语中语气更重的还有stupid-ass和dumb-ass，也表示笨蛋.Dummy up表示’保持安静‘.愿意是嘴笨不要说话。</p>\n<h3 id=\"补充-64\"><a href=\"#补充-64\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中和‘闭嘴’有关的表达还有：Shut up/Shut it/Shut your mouth(shut表示关上，就是把嘴关上)；Zip it/Zip your mouth（zip表示拉链，就是把嘴拉上）；Keep quiet保持安静；Keep your voice down/Keep it down声音小点儿；Shh/shush/hush嘘，别说话；No talking!不准说话.</p>\n<h2 id=\"I-couldn’t-care-less\"><a href=\"#I-couldn’t-care-less\" class=\"headerlink\" title=\"I couldn’t care less.\"></a>I couldn’t care less.</h2><p>我才不在乎呢。</p>\n<h3 id=\"讲解-70\"><a href=\"#讲解-70\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键语法点couldn’t+比较级表示最高级：couldn’t care less，字面意思是不能在乎的更少了，言外之意就是在乎地已经少的不能再少了，也就是很不在乎。类似常见表达还有：I couldn’t agree more（不能同意更多，即非常同意）；It couldn’t be better（不能更好了，即非常好）</p>\n<h3 id=\"补充-65\"><a href=\"#补充-65\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中表示‘我不在乎’的表达还有：I don’t care我无所谓；Whatever随便；I don’t give a damn/crap/shit（慎用）/rat’s ass我无所谓</p>\n<h2 id=\"Let-me-be-clear\"><a href=\"#Let-me-be-clear\" class=\"headerlink\" title=\"Let me be clear.\"></a>Let me be clear.</h2><p>我跟你说清楚吧。</p>\n<h3 id=\"讲解-71\"><a href=\"#讲解-71\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>clear在口语中经常表示‘说话意思的清楚’。比如说话时可以问：Am I making myself clear?我说的你们听懂没？；说完话可以问：Have I made myself clear?/Are we clear?（大家都清楚了吧？）</p>\n<h3 id=\"补充-66\"><a href=\"#补充-66\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中的各种’说‘还有：1. I’m gonna be straight with you./I’m just gonna level with you.我就和你直说了；2. Don’t beat around the bush.别绕弯子；3. cut to the chase直接说重点；4. Get down to business谈正事儿；5. Says who?谁说的？</p>\n<h2 id=\"I’ll-be-right-back\"><a href=\"#I’ll-be-right-back\" class=\"headerlink\" title=\"I’ll be right back.\"></a>I’ll be right back.</h2><p>我马上回来。</p>\n<h3 id=\"讲解-72\"><a href=\"#讲解-72\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>此句在口语中也可以直接说Be right back，并经常用简写BRB.表示失陪下，马上回来。比如和朋友聊天时电话突然响，你就可以说：Be right back（出去接个电话，马上回来），在线聊天时会经常用缩写BRB。而中文里的‘失陪’就可以用：Excuse me.</p>\n<h3 id=\"补充-67\"><a href=\"#补充-67\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中常见的缩写除了BRB还有：TTYL（talk to you later回聊）；TBD（to be determined待定）；LOL（laugh out loud哈哈）；LMAO（laugh my ass off笑死了）；CU（see you再见）；FYI（for your information顺便告诉你）；ASAP（as soon as possible）等</p>\n<h2 id=\"You’ve-crossed-a-line-here\"><a href=\"#You’ve-crossed-a-line-here\" class=\"headerlink\" title=\"You’ve crossed a line here.\"></a>You’ve crossed a line here.</h2><p>你这事儿做的有点过了。</p>\n<h3 id=\"讲解-73\"><a href=\"#讲解-73\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语cross a line，字面意思是越过一条线，引申为‘过分’。例句：Don’t cross the line.不要太过分；There’s a line you should never cross.凡事有个度。</p>\n<h3 id=\"补充-68\"><a href=\"#补充-68\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中表示‘过分’的表达还有：Enough. This is too much.够了，这个太过分了；This is out of line.这个太过分了！；Know your limits.知道自己的底线；This is terrible/awful.这样太不好了！；Don’t push it.别得寸进尺！；You’ve gone too far.你做的太过分了</p>\n<h2 id=\"Listen-up-everyone\"><a href=\"#Listen-up-everyone\" class=\"headerlink\" title=\"Listen up, everyone.\"></a>Listen up, everyone.</h2><p>大家都给我听好了。</p>\n<h3 id=\"讲解-74\"><a href=\"#讲解-74\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词listen表示‘听’，后面加up表示‘认真听好了’，用来吸引大家的注意力，相当于listen carefully. everyone.</p>\n<h3 id=\"补充-69\"><a href=\"#补充-69\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中的各种‘听’还有：1. Please hear me out.请听我说完。2. Are you listening to yourself?你在胡说什么啊？3. Look, it’s over.你听着，一切都结束了。4. Sorry, I was eavesdropping.不好意思，我刚才在偷听。5. Never heard of it.从来没有听说过。6. She’s a great listener.她是个不错的倾听者。</p>\n<h2 id=\"Don’t-overthink-this\"><a href=\"#Don’t-overthink-this\" class=\"headerlink\" title=\"Don’t overthink this.\"></a>Don’t overthink this.</h2><p>你别想多了。</p>\n<h3 id=\"讲解-75\"><a href=\"#讲解-75\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词overthink=over（过度地）+think（想）：过渡地想，即想多了。也可以说：Don’t think too much（别想太多了）.口语中经常用over放在动词前面表示：过度地…；常见单词有：overreact：over+react反应过度；overspend：over+spend花费过多；overestimate：over+estimate高估；与之相反的是：under+…，如：underreact：under+react未作出应有反应；underspend：under+spend花费过少；underestimate：under+estimate低估。</p>\n<h2 id=\"Now-we’re-even\"><a href=\"#Now-we’re-even\" class=\"headerlink\" title=\"Now we’re even.\"></a>Now we’re even.</h2><p>现在我们扯平了。</p>\n<h3 id=\"讲解-76\"><a href=\"#讲解-76\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词even除了表示‘甚至’，口语中还经常表示‘平等的’。例句：1. After this, we’re even.这事情结束后我们就扯平了；2. Ok, let’s call it even.好，我们之间扯平了。</p>\n<h3 id=\"补充-70\"><a href=\"#补充-70\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中的和‘平等，公平’有关的表达还有：1. an even break一个公平的机会；2. This is not fair.这太不公平了（fair强调公平）；3. All men are created equal.人生而平等（equal强调平等）；<br>even表示‘甚至’时在否定句中放否定词后面，和中文顺序不一样，如：I don’t even know you.；I’ve never even met you before.</p>\n<h2 id=\"Leave-me-alone\"><a href=\"#Leave-me-alone\" class=\"headerlink\" title=\"Leave me alone.\"></a>Leave me alone.</h2><p>让我一个人静一静。</p>\n<h3 id=\"讲解-77\"><a href=\"#讲解-77\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词是leave，除了表示‘离开’，也经常表示‘让…保持…状态‘，原句字面意思是：让我保持alone（一个人）的状态，即让我一个人待着，换一个语境，也可以翻译为：离我远一点（如果有人骚扰你时）。类似的语法表达还有：Leave the door open.把门开着；Leave the lights on.把灯开着（保持开的状态）；Leave it on the table.放在桌上就行（强调状态）</p>\n<h3 id=\"补充-71\"><a href=\"#补充-71\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>著名生活服务类节目‘非诚勿扰’可翻译为：Leave me alone unless you mean it：除非你是认真的（you mean it），不然就离我远一点（leave me alone）.</p>\n<h2 id=\"I’m-wasted\"><a href=\"#I’m-wasted\" class=\"headerlink\" title=\"I’m wasted.\"></a>I’m wasted.</h2><p>我喝醉了。</p>\n<h3 id=\"讲解-78\"><a href=\"#讲解-78\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词wasted，除了表示‘浪费的’，口语中还表示‘烂醉如泥的’.例句：Let’s go get wasted tonight.我们今晚去大醉一场吧！</p>\n<h3 id=\"补充-72\"><a href=\"#补充-72\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>（1）口语中用来表示‘喝酒’的形容词还有：I’m sober.我清醒着呢；I’m tipsy/buzzed我微醉 drunk/hammered/trashed醉了；<br>（2）酒鬼：drunkard/alcoholic/lush/alky/booze hound；<br>（3）西方常见酒的分类：alcohol酒精；liquor/booze烈酒；cocktail鸡尾酒；beer啤酒；white wine白葡萄酒；red wine红葡萄酒；whiskey威士忌；scotch苏格兰威士忌；vodka伏特加；rum朗姆酒等</p>\n<h2 id=\"Something’s-up\"><a href=\"#Something’s-up\" class=\"headerlink\" title=\"Something’s up.\"></a>Something’s up.</h2><p>出事了。</p>\n<h3 id=\"讲解-79\"><a href=\"#讲解-79\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词up，除了表示‘向上’，还表示‘发生了’，另外的常见短句是What’s up?（发生了什么）；原句在口语中也经常说Something’s come up.意思一样。类似的表达还有：Something’s wrong.有些不对劲儿；Something happened.发生了点事情；We got a problem.我们遇到问题了.</p>\n<h3 id=\"补充-73\"><a href=\"#补充-73\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>‘up’在口语中还经常表示‘醒着’，如：Who’s still up?谁还醒着；What’are you doing up?你不睡觉在干嘛？；还经常表示‘到时间了’，如：Time’s up!时间到；My shift’s up.我轮班结束了。</p>\n<h2 id=\"You-totally-had-it-coming\"><a href=\"#You-totally-had-it-coming\" class=\"headerlink\" title=\"You totally had it coming.\"></a>You totally had it coming.</h2><p>这完全是你自找的。</p>\n<h3 id=\"讲解-80\"><a href=\"#讲解-80\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语have sth coming表示‘应得的’，可以是好的，也可以是坏的。有人自作自受，你就可以说：You had it coming.你自找的。口语中类似表达还有：You deserve it.你活该（也可以用褒义表示：这是你应得的）；You asked for it/You brought this on yourself.你自找的</p>\n<h3 id=\"补充-74\"><a href=\"#补充-74\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中还经常用see sth coming表示‘预料中的’。例句：A: Tom won the game.（Tom赢了比赛）；B: Yeah, I didn’t see it coming though.（对，但是我根本没想到，出乎意料）</p>\n<h2 id=\"Don’t-play-dirty\"><a href=\"#Don’t-play-dirty\" class=\"headerlink\" title=\"Don’t play dirty.\"></a>Don’t play dirty.</h2><p>别跟我玩阴的哦。</p>\n<h3 id=\"讲解-81\"><a href=\"#讲解-81\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词dirty，表示脏的；下流的；阴险的。原句中play dirty也可以用fight dirty，在两人比赛斗争时提醒对方不要玩阴招就说Don’t play dirty；当一个人经常说脏话时可说：What a dirty mouth you got!你嘴巴真脏啊！；有人说话下流可以说：He always talks dirty.他说话总是很下流。</p>\n<h3 id=\"补充-75\"><a href=\"#补充-75\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中当别人说脏话时还可以用：You eat with that mouth?（你是用这张嘴吃饭的吗？）；或直接说：Come on.（切）；或Don’t swear.（不要说脏话）</p>\n<h2 id=\"Beats-me\"><a href=\"#Beats-me\" class=\"headerlink\" title=\"Beats me.\"></a>Beats me.</h2><p>我也不知道，问倒我了。</p>\n<h3 id=\"讲解-82\"><a href=\"#讲解-82\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>不要误解为‘打我’，口语中类似的表达还有：I don’t know/I don’t have any clue/I have no idea我不知道；You got me/I’m stumped你难住我了.</p>\n<h3 id=\"补充-76\"><a href=\"#补充-76\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中表示‘不理解’的表达有：I don’t understand/Not following you/You lost me/I don’t get it.没听懂你说的；I don’t see your point.我不知道你的重点是什么；表示‘迷惑‘的表达有：I’m confused/I’m baffled/I’m bewildered/I’m perplexed.我迷惑了.</p>\n<h2 id=\"What’s-in-it-for-me\"><a href=\"#What’s-in-it-for-me\" class=\"headerlink\" title=\"What’s in it for me?\"></a>What’s in it for me?</h2><p>对我有什么好处呢？</p>\n<h3 id=\"讲解-83\"><a href=\"#讲解-83\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>字面意思是：里面有什么是给我的？引申为：对我有什么好处？类似表达还有do me good对我有好处；do me bad对我有坏处；in your interest对你有好处；for your own good为你自己好</p>\n<h3 id=\"补充-77\"><a href=\"#补充-77\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>（1）与原句同义的还有：Why would I say yes?我为什么要答应你呢？<br>（2）口语句‘what’s there to…‘经常表示‘有什么好…的‘。What’s there to see?那有什么好看的呢？；What’s there to eat?那有什么好吃的呢？</p>\n<h2 id=\"I-think-I’m-in-love-with-you\"><a href=\"#I-think-I’m-in-love-with-you\" class=\"headerlink\" title=\"I think I’m in love with you.\"></a>I think I’m in love with you.</h2><p>我觉得我爱上你了。</p>\n<h3 id=\"讲解-84\"><a href=\"#讲解-84\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语in love with爱上某人.类似表达还有：fall in love坠入爱河；love at first sight一见钟情；Love me, love my dog.爱屋及乌。</p>\n<h3 id=\"补充-78\"><a href=\"#补充-78\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中的‘喜欢’还有：I like you/I dig you/I’m into you/I’ve got a crush on you/I have a thing for you/I fancy you（英国人喜欢用）都表示我喜欢你；I’m crazy about you. I think about you all the time.非常喜欢你，喜欢的发狂，每时每刻都在想你。</p>\n<h2 id=\"Could-you-give-us-a-sec\"><a href=\"#Could-you-give-us-a-sec\" class=\"headerlink\" title=\"Could you give us a sec?\"></a>Could you give us a sec?</h2><p>你能让我们俩单独说会儿话吗？</p>\n<h3 id=\"讲解-85\"><a href=\"#讲解-85\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语give us a sec表示：让我们单独说话；也可以表示：稍等一下；sec是second的缩写，也可以说give us a second/minute/moment.下次想和某人单独说话你就可以说：Can I see you for a sec?或者Can I talk to you for a sec?，这边的sec都可以换成second/minute/moment；而give me a sec一般表示：稍等一下（给我一小会儿）。</p>\n<h3 id=\"补充-79\"><a href=\"#补充-79\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>单独说话在口语中也可用：Can we talk in private?/Can we talk privately?我们能单独聊会儿吗？</p>\n<h2 id=\"Don’t-take-this-the-wrong-way\"><a href=\"#Don’t-take-this-the-wrong-way\" class=\"headerlink\" title=\"Don’t take this the wrong way.\"></a>Don’t take this the wrong way.</h2><p>别误会哦。</p>\n<h3 id=\"讲解-86\"><a href=\"#讲解-86\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词take，表示‘理解/接受’，(in) the wrong way表示‘以错误的方式’，字面意思是不要以错误的方式理解这个，即不要误会。</p>\n<h3 id=\"补充-80\"><a href=\"#补充-80\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中关于take的短语必须知道的还有：take sb for把某人当作…（1. what do you take me for?你把我当成什么人了？；2. Sorry, I took you for someone else不好意思我认错人了）；take it out on me拿我发火解气；take care of you照顾你；take care of it搞定这事儿；I need to take off.我得走了。</p>\n<h2 id=\"Shame-on-you\"><a href=\"#Shame-on-you\" class=\"headerlink\" title=\"Shame on you!\"></a>Shame on you!</h2><p>真为你感到羞耻。</p>\n<h3 id=\"讲解-87\"><a href=\"#讲解-87\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词‘shame’表示‘耻辱’.Shame on sb表示‘为…感到羞耻丢人’。例句：A: Tom stole his mom’s money yesterday（昨天Tom偷他妈的钱了）；B: Shame on him.（他真丢人！）类似表达还有：You should be ashamed of yourself.你应该为自己感到羞耻。；This is so embarrassing.这太丢人了/难为情了；It’s so awkward.太尴尬了</p>\n<h3 id=\"补充-81\"><a href=\"#补充-81\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>shame还经常表示‘遗憾可惜’，如：What a shame!太可惜了！；It’s a shame that you can’t come with us.你不能和我们一起来太遗憾了</p>\n<h2 id=\"You’re-doomed\"><a href=\"#You’re-doomed\" class=\"headerlink\" title=\"You’re doomed.\"></a>You’re doomed.</h2><p>你死定了。</p>\n<h3 id=\"讲解-88\"><a href=\"#讲解-88\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词doomed表示‘注定要倒霉的’。类似表达还有：You’re dead!你死翘翘了；You’re dead meat.你死定了；You’re screwed/You’re done.你完蛋了。</p>\n<h3 id=\"补充-82\"><a href=\"#补充-82\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中‘求饶’的表达：Just give me another chance（再给我一次机会吧）；Give me a break.（先让我休息一下吧）；Cut me some slack（放过我吧）；I promise it’s not ganna happen again（我保证这样的事儿不会再发生了）；I swear to God that I won’t do it again（我对天发誓我以后再也不这样了）</p>\n<h2 id=\"Don’t-play-that-game-with-me\"><a href=\"#Don’t-play-that-game-with-me\" class=\"headerlink\" title=\"Don’t play that game with me.\"></a>Don’t play that game with me.</h2><p>不要跟我玩那套。</p>\n<h3 id=\"讲解-89\"><a href=\"#讲解-89\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词play game（玩游戏）引申为‘玩…哪套‘。例句：I know what game you’re playing. It won’t work.我知道你在跟我玩哪一套。没有的！</p>\n<h3 id=\"补充-83\"><a href=\"#补充-83\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>（1）play the … card表示用…招数：I always play the ‘I can’t drink’ card when I don’t want to drink.我不想喝酒的时候我就骗他们说我不能喝酒；He played the ‘I’m sick’ card again.他又骗我们说他生病了。<br>（2）‘不上当’在口语中可表达为：I won’t fall for that.我不会上当的。</p>\n<h2 id=\"I-need-some-time-to-figure-it-out\"><a href=\"#I-need-some-time-to-figure-it-out\" class=\"headerlink\" title=\"I need some time to figure it out.\"></a>I need some time to figure it out.</h2><p>我需要点时间好好弄清楚。</p>\n<h3 id=\"讲解-90\"><a href=\"#讲解-90\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语figure sth out表示：把…弄清楚。例句：You figure out why he didn’t come today.你给我弄清楚为什么他今天没来；I’ve got it all figured out.我把一切都搞清楚了.</p>\n<h3 id=\"补充-84\"><a href=\"#补充-84\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中必须要掌握的‘out’短语还有：Cut it out.停止，别闹了；Check it out.看一看；Don’t freak out.别惊慌失措；knock sb up使某人怀孕；sell out卖光；knockout美女；takeout外卖；move out搬出去；worn out筋疲力尽的；creep sb out使某人感到不舒服自在。</p>\n<h2 id=\"I’ll-catch-up\"><a href=\"#I’ll-catch-up\" class=\"headerlink\" title=\"I’ll catch up.\"></a>I’ll catch up.</h2><p>我会跟上的。</p>\n<h3 id=\"讲解-91\"><a href=\"#讲解-91\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语catch up表示‘跟上进度’。例句：A: We’re on our third glass. What’s wrong with you?（我们已经喝第三杯了，你怎么回事？）B: Don’t worry. I’ll catch up with you.（別担心，我会跟上你们的进度的）。</p>\n<h3 id=\"补充-85\"><a href=\"#补充-85\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>catch up在口语中经常也表示‘叙旧’。叙旧的常见表达有：Long time no see. We need to catch up.好久不见，我们得好好叙旧；It’s been a while since I saw you last.从我上次见你到现在得有一阵子了吧；Let’s go grab a couple of drinks.我们去喝两杯！；Where’ve you been?最近跑哪去了？；What’ve you been doing?最近忙什么呢？</p>\n<h2 id=\"Get-your-ass-out-of-here\"><a href=\"#Get-your-ass-out-of-here\" class=\"headerlink\" title=\"Get your ass out of here.\"></a>Get your ass out of here.</h2><p>滚！</p>\n<h3 id=\"讲解-92\"><a href=\"#讲解-92\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>口语中经常用sb’s ass表示‘人’。如：Thank you for saving my ass.谢谢你救了我（不是救了我的屁股）；I’ll kick your ass.我会揍你的（不是踢你的屁股）；所以原句就等于：You get out of here.你滚出去</p>\n<h3 id=\"补充-86\"><a href=\"#补充-86\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>（1）口语中让别人滚的表达还有：Get out of my face/Get lost.从我眼前消失；Get out of the way.别挡道；Be gone!赶紧消失！；Scram/Eff off/Piss off（英国人喜欢用）滚（语气很重）；<br>（2）美语中out of经常缩读成outta.如：I’m out of here.=I’m outta here.（我走了）</p>\n<h2 id=\"You-don’t-wanna-do-this\"><a href=\"#You-don’t-wanna-do-this\" class=\"headerlink\" title=\"You don’t wanna do this.\"></a>You don’t wanna do this.</h2><p>你最好别这样做。</p>\n<h3 id=\"讲解-93\"><a href=\"#讲解-93\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>字面意思是：你不会想要这么做的，引申为：我建议不要这么做。口语中‘给建议’的表达有：1. You might wanna…如：You might wanna call your mom first.我建议你先给你妈妈打个电话；2. I think you should…如：I think you should give her a chance.我觉得你应该给她个机会；3. You’d better…如：You’d better leave now.你最好现在就走；4. I would … (if I were you)：I would go to LA (if I were you).我建议你去洛杉矶（口语中经常把If I were you省略）</p>\n<h2 id=\"That-blew-my-mind\"><a href=\"#That-blew-my-mind\" class=\"headerlink\" title=\"That blew my mind.\"></a>That blew my mind.</h2><p>太让我震撼了。</p>\n<h3 id=\"讲解-94\"><a href=\"#讲解-94\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语blow one’s mind表示：令某人震撼，惊叹不已.例句：I think her song is gonna blow your mind.我觉得她的歌会让你为之惊叹.表示‘惊艳‘的美语表达还有：Your song was really mind-blowing/awesome/amazing.你的歌真的很不错；You killed it.你刚才表现很棒</p>\n<h3 id=\"补充-87\"><a href=\"#补充-87\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中的‘mind’还有：change my mind我改变主意；out of my mind我疯了；keep/bear sth in mind记住某事；cross my mind让我想起；slip my mind我忘记；never mind.没事了；I don’t mind.我不介意；What’s in your mind?你脑子里想的什么？</p>\n<h2 id=\"I’m-off-on-Sunday\"><a href=\"#I’m-off-on-Sunday\" class=\"headerlink\" title=\"I’m off on Sunday.\"></a>I’m off on Sunday.</h2><p>我周日不用上班。</p>\n<h3 id=\"讲解-95\"><a href=\"#讲解-95\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键词off在这边表示’不上班‘.原句也可以改为：I got Sunday off.下班：get off work.</p>\n<h3 id=\"补充-88\"><a href=\"#补充-88\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>（1）请假用take off即可：Sir, can I take this Friday off?先生，这周五我可以请假吗？；I took 3 day off last week.我上周请了3天假；生病不用上班叫做off on sick leave；<br>（2）off还可以表示‘走，离开’：I’m off, guys.（各位，我先走了）；Off to Macao later.（等会儿去澳门）；<br>（3）off也可以表示‘取消了’：The wedding’s off.婚礼取消了！</p>\n<h2 id=\"She-got-the-message\"><a href=\"#She-got-the-message\" class=\"headerlink\" title=\"She got the message.\"></a>She got the message.</h2><p>她有数了。</p>\n<h3 id=\"讲解-96\"><a href=\"#讲解-96\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>get the message字面意思表示：收到消息，引申为：‘懂你意思了’。例句：I got the message when you said you were not feeling well.你说你身体不舒服的时候我就懂你意思了。类似表达有get the idea。</p>\n<h3 id=\"补充-89\"><a href=\"#补充-89\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中‘我懂你意思了’的表达还有：I see what you’re saying；I gotcha；I totally feel you；I see what you’re getting at.</p>\n<h2 id=\"What’s-with-the-sad-face\"><a href=\"#What’s-with-the-sad-face\" class=\"headerlink\" title=\"What’s with the sad face?\"></a>What’s with the sad face?</h2><p>你干嘛一脸伤心的样子？</p>\n<h3 id=\"讲解-97\"><a href=\"#讲解-97\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>what’s with the…表示：干嘛…一般觉得好奇不理解时用。例句：What’s with the car?你干嘛开车过来？；What’s with the red t-shirt?你干嘛穿件红体恤？；What’s with the long face?你干嘛拉着个脸？</p>\n<h3 id=\"补充-90\"><a href=\"#补充-90\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中表示好奇的常见句子还有：What’s the occasion?有什么重要的场合要参加吗？；What brings you here?什么风把你吹来了？；What’re you doing here?你在这干嘛？；What the hell?什么情况？（搞什么？）</p>\n<h2 id=\"I-wouldn’t-say-so\"><a href=\"#I-wouldn’t-say-so\" class=\"headerlink\" title=\"I wouldn’t say so.\"></a>I wouldn’t say so.</h2><p>我不是很同意你说的话。</p>\n<h3 id=\"讲解-98\"><a href=\"#讲解-98\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>完整句为I wouldn’t say so (if I were you).字面意思就是：如果我是你的话我不会这样说的，引申为：我不赞成你说的话。口语中If I were you（如果我是你）经常省略.I wouldn’t经常用来表示委婉的否认别人。例句：A: It’s a beautiful day today.（今天天气真美）；B: I wouldn’t call it beautiful.（我不认为今天算美）</p>\n<h3 id=\"补充-91\"><a href=\"#补充-91\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>口语中经常不赞同别人说的话的表达还有：I don’t think so.我不这么认为；I’m afraid I have to disagree.恐怕我不能赞成你说的了；I can’t say the same.我有不同观点</p>\n<h2 id=\"I-kind-of-miss-you\"><a href=\"#I-kind-of-miss-you\" class=\"headerlink\" title=\"I kind of miss you.\"></a>I kind of miss you.</h2><p>我有点想你了。</p>\n<h3 id=\"讲解-99\"><a href=\"#讲解-99\" class=\"headerlink\" title=\"讲解\"></a>讲解</h3><p>关键短语kind of表示：有点儿。例句：I’m kind of hungry.我有点儿饿了。Kind of在口语中经常缩读成kinda；与kind of意思用法一模一样的是sort of，可缩读成sorta.例句：I sorta wanna go out.我有点想出去玩。</p>\n<h3 id=\"补充-92\"><a href=\"#补充-92\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>（1）口语中表示‘一点点’的短语还有：a little/a bit/a little bit/a tad.例句：I’m a bit tired.我有点累了；<br>（2）kind of与sort of还经常表示委婉的语气，如不敢或者不想告诉对方但又必须说时可以用，例句：I kind of kissed your girlfriend last night.我昨晚亲了你女朋友（不敢告诉你，但又必须得说，不能理解成‘我有点亲了你女朋友’）</p>\n","categories":["English"],"tags":["English"]},{"title":"[LeetCode] Problem 69 - Sqrt(x)","url":"http://yoursite.com/2018/01/23/LeetCode-Problem-69-Sqrt-x/","content":"<p>Implement int sqrt(int x).</p>\n<p>Compute and return the square root of x, where x is guaranteed to be a non-negative integer.</p>\n<p>Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: 4</p>\n<p>Output: 2</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: 8</p>\n<p>Output: 2</p>\n<p>Explanation: The square root of 8 is 2.82842…, and since we want to return an integer, the decimal part will be truncated.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">mySqrt</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> start = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = x;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = start + (end - start) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mid &gt; x / mid)</span><br><span class=\"line\">            end = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((mid + <span class=\"number\">1</span>) &gt; x / (mid + <span class=\"number\">1</span>))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">            </span><br><span class=\"line\">            start = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 88 - Merge Sorted Array","url":"http://yoursite.com/2018/01/23/LeetCode-Problem-88-Merge-Sorted-Array/","content":"<p>Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>The number of elements initialized in nums1 and nums2 are m and n respectively.</p>\n<p>You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input:<br>nums1 = [1,2,3,0,0,0], m = 3<br>nums2 = [2,5,6],       n = 3</p>\n<p>Output: [1,2,2,3,5,6]</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums1, <span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span>[] nums2, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos = m + n - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = m - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = n - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; j &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums1[i] &lt; nums2[j])</span><br><span class=\"line\">            nums1[pos--] = nums2[j--];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            nums1[pos--] = nums1[i--];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span>) </span><br><span class=\"line\">        nums1[pos--] = nums2[j--];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 27 - Remove Element","url":"http://yoursite.com/2018/01/16/LeetCode-Problem-27-Remove-Element/","content":"<p>Given an array and a value, remove all instances of that value in-place and return the new length.</p>\n<p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p>\n<p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Given nums = [3,2,2,3], val = 3,</p>\n<p>Your function should return length = 2, with the first two elements of nums being 2.</p>\n<p>It doesn’t matter what you leave beyond the returned length.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Given nums = [0,1,2,2,3,0,4,2], val = 2,</p>\n<p>Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.</p>\n<p>Note that the order of those five elements can be arbitrary.</p>\n<p>It doesn’t matter what values are set beyond the returned length.</p>\n<h2 id=\"Clarification\"><a href=\"#Clarification\" class=\"headerlink\" title=\"Clarification\"></a>Clarification</h2><p>Confused why the returned value is an integer but your answer is an array?</p>\n<p>Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.</p>\n<p>Internally you can think of this:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// nums is passed in by reference. (i.e., without making a copy)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> len = removeElement(nums, val);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// any modification to nums in your function would be known by the caller.</span></span><br><span class=\"line\"><span class=\"comment\">// using the length returned by your function, it prints the first len elements.</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    print(nums[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">removeElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || nums.length &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] != val)</span><br><span class=\"line\">            nums[length++] = nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"When-elements-to-remove-are-rare\"><a href=\"#When-elements-to-remove-are-rare\" class=\"headerlink\" title=\"When elements to remove are rare\"></a>When elements to remove are rare</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">removeElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || nums.length &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt;= end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[start] == val)</span><br><span class=\"line\">            nums[start] = nums[end--];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            start++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> end + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 26 - Remove Duplicates from Sorted Array","url":"http://yoursite.com/2018/01/16/LeetCode-Problem-26-Remove-Duplicates-from-Sorted-Array/","content":"<p>Given a sorted array, remove the duplicates in-place such that each element appear only once and return the new length.</p>\n<p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Given nums = [1,1,2],</p>\n<p>Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.</p>\n<p>It doesn’t matter what you leave beyond the new length.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Given nums = [0,0,1,1,1,2,2,3,3,4],</p>\n<p>Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.</p>\n<p>It doesn’t matter what values are set beyond the returned length.</p>\n<h2 id=\"Clarification\"><a href=\"#Clarification\" class=\"headerlink\" title=\"Clarification\"></a>Clarification</h2><p>Confused why the returned value is an integer but your answer is an array?</p>\n<p>Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.</p>\n<p>Internally you can think of this:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// nums is passed in by reference. (i.e., without making a copy)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> len = removeDuplicates(nums);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// any modification to nums in your function would be known by the caller.</span></span><br><span class=\"line\"><span class=\"comment\">// using the length returned by your function, it prints the first len elements.</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    print(nums[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">removeDuplicates</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || nums.length &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] != nums[length])</span><br><span class=\"line\">            nums[++length] = nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> length + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"Urllib Demo","url":"http://yoursite.com/2017/12/29/Urllib-Demo/","content":"<h2 id=\"使用Urllib爬取网页\"><a href=\"#使用Urllib爬取网页\" class=\"headerlink\" title=\"使用Urllib爬取网页\"></a>使用Urllib爬取网页</h2><h3 id=\"将爬取到的网页以网页的形式保存在本地\"><a href=\"#将爬取到的网页以网页的形式保存在本地\" class=\"headerlink\" title=\"将爬取到的网页以网页的形式保存在本地\"></a>将爬取到的网页以网页的形式保存在本地</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 爬取百度首页</span></span><br><span class=\"line\">file = urllib.request.urlopen(<span class=\"string\">\"http://www.baidu.com\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 将对应的网页内容读取出来</span></span><br><span class=\"line\">data = file.read()</span><br><span class=\"line\"><span class=\"comment\">#print(data)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以二进制写入的方式打开文件</span></span><br><span class=\"line\">fhandle = open(<span class=\"string\">\"/Users/matianyao/Desktop/crawler.html\"</span>, <span class=\"string\">\"wb\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 写入对应的数据</span></span><br><span class=\"line\">fhandle.write(data)</span><br><span class=\"line\"><span class=\"comment\"># 关闭文件</span></span><br><span class=\"line\">fhandle.close()</span><br></pre></td></tr></table></figure>\n<h3 id=\"直接将对应信息写入本地文件\"><a href=\"#直接将对应信息写入本地文件\" class=\"headerlink\" title=\"直接将对应信息写入本地文件\"></a>直接将对应信息写入本地文件</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 直接将网页写入本地文件</span></span><br><span class=\"line\">filename = urllib.request.urlretrieve(<span class=\"string\">\"http://edu.51cto.com\"</span>, filename=<span class=\"string\">\"/Users/matianyao/Desktop/crawler.html\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 清除urlretrieve执行所造成的缓存</span></span><br><span class=\"line\">urllib.request.urlcleanup()</span><br></pre></td></tr></table></figure>\n<h3 id=\"其它常见用法\"><a href=\"#其它常见用法\" class=\"headerlink\" title=\"其它常见用法\"></a>其它常见用法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 返回与当前环境有关的信息</span></span><br><span class=\"line\">file.info()</span><br><span class=\"line\"><span class=\"comment\"># 获取当前爬取网页的状态码</span></span><br><span class=\"line\">file.getcode()</span><br><span class=\"line\"><span class=\"comment\"># 获取当前所爬取的url地址</span></span><br><span class=\"line\">file.geturl()</span><br><span class=\"line\"><span class=\"comment\"># 对网址进行编码</span></span><br><span class=\"line\">urllib.request.quote(<span class=\"string\">\"http://www.sina.com.cn\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 对编码的网址进行解码</span></span><br><span class=\"line\">urllib.request.unquote(<span class=\"string\">\"http%3A//www.sina.com.cn\"</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"浏览器的模拟——Headers属性\"><a href=\"#浏览器的模拟——Headers属性\" class=\"headerlink\" title=\"浏览器的模拟——Headers属性\"></a>浏览器的模拟——Headers属性</h2><p>有时候，无法爬取一些网页，会出现403错误，因为这些网页为了防止别人恶意采集其信息所以进行了一些反爬虫的设置。<br>可以设置一些Headers信息，模拟成浏览器去访问这些网站。</p>\n<h3 id=\"使用build-opener-修改报头\"><a href=\"#使用build-opener-修改报头\" class=\"headerlink\" title=\"使用build_opener()修改报头\"></a>使用build_opener()修改报头</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">\"http://worldagnetwork.com/\"</span></span><br><span class=\"line\">headers = (<span class=\"string\">\"User-Agent\"</span>, <span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/604.4.7 (KHTML, like Gecko) Version/11.0.2 Safari/604.4.7\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建自定义的opener对象</span></span><br><span class=\"line\">opener = urllib.request.build_opener()</span><br><span class=\"line\"><span class=\"comment\"># 设置对应的头信息</span></span><br><span class=\"line\">opener.addheaders = [headers]</span><br><span class=\"line\"><span class=\"comment\"># 打开对应的网址，再读取对应数据</span></span><br><span class=\"line\">data = opener.open(url).read()</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用add-header-添加报头\"><a href=\"#使用add-header-添加报头\" class=\"headerlink\" title=\"使用add_header()添加报头\"></a>使用add_header()添加报头</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">\"http://worldagnetwork.com/\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个Request对象</span></span><br><span class=\"line\">req = urllib.request.Request(url)</span><br><span class=\"line\"><span class=\"comment\"># 添加对应的报头信息</span></span><br><span class=\"line\">req.add_header(<span class=\"string\">\"User-Agent\"</span>, <span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/604.4.7 (KHTML, like Gecko) Version/11.0.2 Safari/604.4.7\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 打开对应网址并读取了网页内容</span></span><br><span class=\"line\">data = urllib.request.urlopen(req).read()</span><br></pre></td></tr></table></figure>\n<h2 id=\"超时设置\"><a href=\"#超时设置\" class=\"headerlink\" title=\"超时设置\"></a>超时设置</h2><p>有时候，访问一个网页，如果该网页长时间未响应，那么系统就会判断该网页超时了，即无法打开该网页。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range (<span class=\"number\">1</span>, <span class=\"number\">30</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 在爬取的时候设置超时异常的值</span></span><br><span class=\"line\">        file = urllib.request.urlopen(<span class=\"string\">\"http://yum.iqianyue.com\"</span>, timeout=<span class=\"number\">0.1</span>)</span><br><span class=\"line\">        data = file.read()</span><br><span class=\"line\">        print(len(data))</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(<span class=\"string\">\"ERROR--&gt;\"</span> + str(e))</span><br></pre></td></tr></table></figure>\n<h2 id=\"HTTP协议请求实战\"><a href=\"#HTTP协议请求实战\" class=\"headerlink\" title=\"HTTP协议请求实战\"></a>HTTP协议请求实战</h2><h3 id=\"GET请求实例分析\"><a href=\"#GET请求实例分析\" class=\"headerlink\" title=\"GET请求实例分析\"></a>GET请求实例分析</h3><ol>\n<li>构建对应的url地址，该url地址包含GET请求的字段名和字段内容等信息，并且url地址满足GET请求的格式，即“http://网址?字段名1=字段内容1&amp;字段名2=字段内容2”</li>\n<li>以对应的url为参数，构建Request对象</li>\n<li>通过urlopen()打开构建的Request对象</li>\n<li>按需求进行后续的处理操作，比如读取网页的内容、将内容写入文件等</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"></span><br><span class=\"line\">key = <span class=\"string\">\"哈哈\"</span></span><br><span class=\"line\">url = <span class=\"string\">\"http://www.baidu.com/s?wd=\"</span></span><br><span class=\"line\">key_code = urllib.request.quote(key)</span><br><span class=\"line\">url_all = url + key_code</span><br><span class=\"line\">req = urllib.request.Request(url_all)</span><br><span class=\"line\">data = urllib.request.urlopen(req).read()</span><br><span class=\"line\"></span><br><span class=\"line\">fhandle = open(<span class=\"string\">\"/Users/matianyao/Desktop/crawler.html\"</span>, <span class=\"string\">\"wb\"</span>)</span><br><span class=\"line\">fhandle.write(data)</span><br><span class=\"line\">fhandle.close()</span><br></pre></td></tr></table></figure>\n<h3 id=\"POST请求实例分析\"><a href=\"#POST请求实例分析\" class=\"headerlink\" title=\"POST请求实例分析\"></a>POST请求实例分析</h3><ol>\n<li>设置好url网址</li>\n<li>构建表单数据，并使用urllib.parse.urlencode对数据进行编码处理</li>\n<li>创建Request对象，参数包括url地址和要传递的数据</li>\n<li>使用add_header()添加头信息，模拟浏览器进行爬取</li>\n<li>使用urllib.request.urlopen()打开对应的Request对象，完成信息的传递</li>\n<li>后续处理，比如读取网页内容、将内容写入文件等</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.parse</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">\"http://www.iqianyue.com/mypost/\"</span></span><br><span class=\"line\">postdata = urllib.parse.urlencode(&#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"ceo@iqianyue.com\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"pass\"</span>: <span class=\"string\">\"aA123456\"</span></span><br><span class=\"line\">&#125;).encode(<span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\">req = urllib.request.Request(url, postdata)</span><br><span class=\"line\">req.add_header(<span class=\"string\">\"User-Agent\"</span>, <span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/604.4.7 (KHTML, like Gecko) Version/11.0.2 Safari/604.4.7\"</span>)</span><br><span class=\"line\">data = urllib.request.urlopen(req).read()</span><br><span class=\"line\"></span><br><span class=\"line\">fhandle = open(<span class=\"string\">\"/Users/matianyao/Desktop/crawler.html\"</span>, <span class=\"string\">\"wb\"</span>)</span><br><span class=\"line\">fhandle.write(data)</span><br><span class=\"line\">fhandle.close()</span><br></pre></td></tr></table></figure>\n<h2 id=\"代理服务器的设置\"><a href=\"#代理服务器的设置\" class=\"headerlink\" title=\"代理服务器的设置\"></a>代理服务器的设置</h2><p>有时使用同一个IP去爬取同一个网站上的网页，久了之后会被该网站服务器屏蔽。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用代理服务器来爬取某个url网页</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">use_proxy</span><span class=\"params\">(proxy_addr, url)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 设置对应的代理服务器信息</span></span><br><span class=\"line\">    proxy = urllib.request.ProxyHandler(&#123;<span class=\"string\">\"http\"</span>: proxy_addr&#125;)</span><br><span class=\"line\">    <span class=\"comment\"># 创建一个自定义的opener对象</span></span><br><span class=\"line\">    opener = urllib.request.build_opener(proxy, urllib.request.HTTPHandler)</span><br><span class=\"line\">    <span class=\"comment\"># 创建全局默认的opener对象</span></span><br><span class=\"line\">    urllib.request.install_opener(opener)</span><br><span class=\"line\">    <span class=\"comment\"># 打开对应网址爬取网页并读取</span></span><br><span class=\"line\">    data = urllib.request.urlopen(url).read().decode(<span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">proxy_addr = <span class=\"string\">\"61.135.217.7:80\"</span></span><br><span class=\"line\">data = use_proxy(proxy_addr, <span class=\"string\">\"http://www.baidu.com\"</span>)</span><br><span class=\"line\">print(len(data))</span><br></pre></td></tr></table></figure>\n<h2 id=\"异常处理神器——URLError实战\"><a href=\"#异常处理神器——URLError实战\" class=\"headerlink\" title=\"异常处理神器——URLError实战\"></a>异常处理神器——URLError实战</h2><p>一般来说，产生URLError的原因有如下几种可能：<br>1） 连接不上服务器<br>2） 远程url不存在<br>3） 无网络<br>4） 触发了HTTPError</p>\n<h3 id=\"HTTPError\"><a href=\"#HTTPError\" class=\"headerlink\" title=\"HTTPError\"></a>HTTPError</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.error</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    urllib.request.urlopen(<span class=\"string\">\"http://worldagnetwork.com/\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> urllib.error.HTTPError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    print(e.code)</span><br><span class=\"line\">    print(e.reason)</span><br></pre></td></tr></table></figure>\n<h3 id=\"URLError\"><a href=\"#URLError\" class=\"headerlink\" title=\"URLError\"></a>URLError</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.error</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    urllib.request.urlopen(<span class=\"string\">\"http://www.baidusss.net/\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> urllib.error.URLError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    print(e.reason)</span><br></pre></td></tr></table></figure>\n<h3 id=\"整合改进\"><a href=\"#整合改进\" class=\"headerlink\" title=\"整合改进\"></a>整合改进</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.error</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    urllib.request.urlopen(<span class=\"string\">\"http://www.baidusss.com/\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> urllib.error.URLError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> hasattr(e, <span class=\"string\">\"code\"</span>):</span><br><span class=\"line\">        print(e.code)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> hasattr(e, <span class=\"string\">\"reason\"</span>):</span><br><span class=\"line\">        print(e.reason)</span><br></pre></td></tr></table></figure>","categories":["Web Crawler"],"tags":["Python","Web Crawler"]},{"title":"[LeetCode] Problem 264 - Ugly Number II","url":"http://yoursite.com/2017/10/31/LeetCode-Problem-264-Ugly-Number-II/","content":"<p>Write a program to find the n-th ugly number.</p>\n<p>Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. </p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>1 is typically treated as an ugly number.</p>\n<p>n does not exceed 1690.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: n = 10</p>\n<p>Output: 12</p>\n<p>Explanation: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 is the sequence of the first 10 ugly numbers.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">nthUglyNumber</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] ugly = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t5 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ugly[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        ugly[i] = Math.min(<span class=\"number\">2</span> * ugly[t2], Math.min(<span class=\"number\">3</span> * ugly[t3], <span class=\"number\">5</span> * ugly[t5]));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ugly[i] == <span class=\"number\">2</span> * ugly[t2])</span><br><span class=\"line\">            t2++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ugly[i] == <span class=\"number\">3</span> * ugly[t3])</span><br><span class=\"line\">            t3++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ugly[i] == <span class=\"number\">5</span> * ugly[t5])</span><br><span class=\"line\">            t5++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ugly[n-<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 263 - Ugly Number","url":"http://yoursite.com/2017/10/31/LeetCode-Problem-263-Ugly-Number/","content":"<p>Write a program to check whether a given number is an ugly number.</p>\n<p>Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. </p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>1 is typically treated as an ugly number.</p>\n<p>Input is within the 32-bit signed integer range: [−2^31,  2^31 − 1].</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: 6</p>\n<p>Output: true</p>\n<p>Explanation: 6 = 2 × 3</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: 8</p>\n<p>Output: true</p>\n<p>Explanation: 8 = 2 × 2 × 2</p>\n<h3 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h3><p>Input: 14</p>\n<p>Output: false </p>\n<p>Explanation: 14 is not ugly since it includes another prime factor 7.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isUgly</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">        num /= <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num % <span class=\"number\">3</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">        num /= <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num % <span class=\"number\">5</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">        num /= <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> num == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 202 - Happy Number","url":"http://yoursite.com/2017/10/31/LeetCode-Problem-202-Happy-Number/","content":"<p>Write an algorithm to determine if a number is “happy”.</p>\n<p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: 19</p>\n<p>Output: true</p>\n<p>Explanation:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1^2 + 9^2 = 82</span><br><span class=\"line\">8^2 + 2^2 = 68</span><br><span class=\"line\">6^2 + 8^2 = 100</span><br><span class=\"line\">1^2 + 0^2 + 0^2 = 1</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHappy</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    HashSet&lt;Integer&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (set.contains(n))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        set.add(n);</span><br><span class=\"line\">        n = sum(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        sum += Math.pow(n % <span class=\"number\">10</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        n /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 82 - Remove Duplicates from Sorted List II","url":"http://yoursite.com/2017/10/12/LeetCode-Problem-82-Remove-Duplicates-from-Sorted-List-II/","content":"<p>Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5</p>\n<p>Output: 1-&gt;2-&gt;5</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: 1-&gt;1-&gt;1-&gt;2-&gt;3</p>\n<p>Output: 2-&gt;3</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">deleteDuplicates</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    ListNode dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    dummy.next = head;</span><br><span class=\"line\">    ListNode prev = dummy;</span><br><span class=\"line\">    ListNode current = head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current != <span class=\"keyword\">null</span> &amp;&amp; current.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current.val == current.next.val) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (current.next != <span class=\"keyword\">null</span> &amp;&amp; current.next.val == prev.next.val)</span><br><span class=\"line\">                current = current.next;</span><br><span class=\"line\"></span><br><span class=\"line\">            current = current.next;</span><br><span class=\"line\">            prev.next = current;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            prev = current;</span><br><span class=\"line\">            current = current.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummy.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 83 - Remove Duplicates from Sorted List","url":"http://yoursite.com/2017/10/12/LeetCode-Problem-83-Remove-Duplicates-from-Sorted-List/","content":"<p>Given a sorted linked list, delete all duplicates such that each element appear only once.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: 1-&gt;1-&gt;2</p>\n<p>Output: 1-&gt;2</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: 1-&gt;1-&gt;2-&gt;3-&gt;3</p>\n<p>Output: 1-&gt;2-&gt;3</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">deleteDuplicates</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode current = head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current.val == current.next.val)</span><br><span class=\"line\">            current.next = current.next.next;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            current = current.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 61 - Rotate List","url":"http://yoursite.com/2017/10/12/LeetCode-Problem-61-Rotate-List/","content":"<p>Given a linked list, rotate the list to the right by k places, where k is non-negative.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2</p>\n<p>Output: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</p>\n<p>Explanation:<br>rotate 1 steps to the right: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL<br>rotate 2 steps to the right: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: 0-&gt;1-&gt;2-&gt;NULL, k = 4</p>\n<p>Output: 2-&gt;0-&gt;1-&gt;NULL</p>\n<p>Explanation:<br>rotate 1 steps to the right: 2-&gt;0-&gt;1-&gt;NULL<br>rotate 2 steps to the right: 1-&gt;2-&gt;0-&gt;NULL<br>rotate 3 steps to the right: 0-&gt;1-&gt;2-&gt;NULL<br>rotate 4 steps to the right: 2-&gt;0-&gt;1-&gt;NULL</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">rotateRight</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ListNode dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    dummy.next = head;</span><br><span class=\"line\">    ListNode slow = dummy;</span><br><span class=\"line\">    ListNode fast = dummy;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = getLength(head);</span><br><span class=\"line\">    k %= length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++)</span><br><span class=\"line\">        fast = fast.next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        fast = fast.next;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fast.next = head;</span><br><span class=\"line\">    dummy.next = slow.next;</span><br><span class=\"line\">    slow.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummy.next;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getLength</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (head != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        head = head.next;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 19 - Remove Nth Node From End of List","url":"http://yoursite.com/2017/10/12/LeetCode-Problem-19-Remove-Nth-Node-From-End-of-List/","content":"<p>Given a linked list, remove the nth node from the end of list and return its head.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</p>\n<p>After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>Given n will always be valid.</p>\n<h2 id=\"Follow-up\"><a href=\"#Follow-up\" class=\"headerlink\" title=\"Follow up\"></a>Follow up</h2><p>Could you do this in one pass?</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">removeNthFromEnd</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    ListNode dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    dummy.next = head;</span><br><span class=\"line\">    ListNode slow = dummy;</span><br><span class=\"line\">    ListNode fast = dummy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        fast = fast.next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        fast = fast.next;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    slow.next = slow.next.next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummy.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 213 - House Robber II","url":"http://yoursite.com/2017/09/27/LeetCode-Problem-213-House-Robber-II/","content":"<p>After robbing those houses on that street, the thief has found himself a new place for his thievery so that he will not get too much attention. This time, all houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, the security system for these houses remain the same as for those in the previous street.</p>\n<p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: [2,3,2]</p>\n<p>Output: 3</p>\n<p>Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: [1,2,3,1]</p>\n<p>Output: 4</p>\n<p>Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">rob</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || nums.length &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums.length == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums.length == <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(nums[<span class=\"number\">0</span>], nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.max(robHelper(nums, <span class=\"number\">0</span>, nums.length - <span class=\"number\">2</span>), robHelper(nums, <span class=\"number\">1</span>, nums.length - <span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">robHelper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    dp[start%<span class=\"number\">2</span>] = nums[start];</span><br><span class=\"line\">    dp[(start+<span class=\"number\">1</span>)%<span class=\"number\">2</span>] = Math.max(nums[start], nums[start+<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start + <span class=\"number\">2</span>; i &lt;= end; i++)</span><br><span class=\"line\">        dp[i%<span class=\"number\">2</span>] = Math.max(dp[(i-<span class=\"number\">1</span>)%<span class=\"number\">2</span>], dp[(i-<span class=\"number\">2</span>)%<span class=\"number\">2</span>] + nums[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[end%<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 198 - House Robber","url":"http://yoursite.com/2017/09/27/LeetCode-Problem-198-House-Robber/","content":"<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p>\n<p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: [1,2,3,1]</p>\n<p>Output: 4</p>\n<p>Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: [2,7,9,3,1]</p>\n<p>Output: 12</p>\n<p>Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1). Total amount you can rob = 2 + 9 + 1 = 12.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">rob</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || nums.length &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length+<span class=\"number\">1</span>];</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= nums.length; i++)</span><br><span class=\"line\">        dp[i] = Math.max(dp[i-<span class=\"number\">1</span>], nums[i-<span class=\"number\">1</span>] + dp[i-<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[nums.length];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 154 - Find Minimum in Rotated Sorted Array II","url":"http://yoursite.com/2017/09/26/LeetCode-Problem-154-Find-Minimum-in-Rotated-Sorted-Array-II/","content":"<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>\n<p>(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).</p>\n<p>Find the minimum element.</p>\n<p>The array may contain duplicates.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: [1,3,5]</p>\n<p>Output: 1</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: [2,2,2,0,1]</p>\n<p>Output: 0</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>This is a follow up problem to Find Minimum in Rotated Sorted Array.<br>Would allow duplicates affect the run-time complexity? How and why?</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findMin</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> middle = (left + right) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[middle] &gt; nums[right])</span><br><span class=\"line\">            left = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[middle] &lt; nums[left])</span><br><span class=\"line\">            right = middle;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            right--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[left];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 153 - Find Minimum in Rotated Sorted Array","url":"http://yoursite.com/2017/09/26/LeetCode-Problem-153-Find-Minimum-in-Rotated-Sorted-Array/","content":"<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>\n<p>(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).</p>\n<p>Find the minimum element.</p>\n<p>You may assume no duplicate exists in the array.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: [3,4,5,1,2] </p>\n<p>Output: 1</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: [4,5,6,7,0,1,2]</p>\n<p>Output: 0</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findMin</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> middle = (left + right) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[middle] &gt; nums[right])</span><br><span class=\"line\">            left = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            right = middle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[left];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 35 - Search Insert Position","url":"http://yoursite.com/2017/09/26/LeetCode-Problem-35-Search-Insert-Position/","content":"<p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>\n<p>You may assume no duplicates in the array.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: [1,3,5,6], 5</p>\n<p>Output: 2</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: [1,3,5,6], 2</p>\n<p>Output: 1</p>\n<h3 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h3><p>Input: [1,3,5,6], 7</p>\n<p>Output: 4</p>\n<h3 id=\"No-4\"><a href=\"#No-4\" class=\"headerlink\" title=\"No.4\"></a>No.4</h3><p>Input: [1,3,5,6], 0</p>\n<p>Output: 0</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">searchInsert</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;        </span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> middle = (left + right) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[middle] &gt; target)</span><br><span class=\"line\">            right = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[middle] &lt; target)</span><br><span class=\"line\">            left = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 152 - Maximum Product Subarray","url":"http://yoursite.com/2017/09/26/LeetCode-Problem-152-Maximum-Product-Subarray/","content":"<p>Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: [2,3,-2,4]</p>\n<p>Output: 6</p>\n<p>Explanation: [2,3] has the largest product 6.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: [-2,0,-1]</p>\n<p>Output: 0</p>\n<p>Explanation: The result cannot be 2, because [-2,-1] is not a subarray.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxProduct</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length][<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> localMin = dp[i-<span class=\"number\">1</span>][<span class=\"number\">1</span>] * nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> localMax = dp[i-<span class=\"number\">1</span>][<span class=\"number\">0</span>] * nums[i];</span><br><span class=\"line\">        </span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = Math.max(nums[i], Math.max(localMax, localMin));</span><br><span class=\"line\">        dp[i][<span class=\"number\">1</span>] = Math.min(nums[i], Math.min(localMax, localMin));</span><br><span class=\"line\">        max = Math.max(max, dp[i][<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 53 - Maximum Subarray","url":"http://yoursite.com/2017/09/25/LeetCode-Problem-53-Maximum-Subarray/","content":"<p>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: [-2,1,-3,4,-1,2,1,-5,4],</p>\n<p>Output: 6</p>\n<p>Explanation: [4,-1,2,1] has the largest sum = 6.</p>\n<h2 id=\"Follow-up\"><a href=\"#Follow-up\" class=\"headerlink\" title=\"Follow up\"></a>Follow up</h2><p>If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>\n<h2 id=\"O-nlogn-runtime-O-logn-stack-space-–-Divide-and-Conquer\"><a href=\"#O-nlogn-runtime-O-logn-stack-space-–-Divide-and-Conquer\" class=\"headerlink\" title=\"O(nlogn) runtime, O(logn) stack space – Divide and Conquer\"></a>O(nlogn) runtime, O(logn) stack space – Divide and Conquer</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> subArrayHelper(nums, <span class=\"number\">0</span>, nums.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">subArrayHelper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &gt; right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Integer.MIN_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> middle = (left + right) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> leftSum = subArrayHelper(nums, left, middle - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rightSum = subArrayHelper(nums, middle + <span class=\"number\">1</span>, right);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sumFromLeft = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = middle - <span class=\"number\">1</span>; i &gt;= left; i--)&#123;</span><br><span class=\"line\">        sum += nums[i];</span><br><span class=\"line\">        sumFromLeft = Math.max(sumFromLeft, sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sumFromRight = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = middle + <span class=\"number\">1</span>; i &lt;= right; i++)&#123;</span><br><span class=\"line\">        sum += nums[i];</span><br><span class=\"line\">        sumFromRight = Math.max(sumFromRight, sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> middleSum = sumFromLeft + sumFromRight + nums[middle];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.max(middleSum, Math.max(leftSum, rightSum));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"O-n-runtime-O-1-space-–-Dynamic-programming\"><a href=\"#O-n-runtime-O-1-space-–-Dynamic-programming\" class=\"headerlink\" title=\"O(n) runtime, O(1) space – Dynamic programming\"></a>O(n) runtime, O(1) space – Dynamic programming</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length+<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = Integer.MIN_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= nums.length; i++) &#123;</span><br><span class=\"line\">        dp[i] = Math.max(nums[i-<span class=\"number\">1</span>], dp[i-<span class=\"number\">1</span>] + nums[i-<span class=\"number\">1</span>]);</span><br><span class=\"line\">        max = Math.max(max, dp[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 63 - Unique Paths II","url":"http://yoursite.com/2017/09/25/LeetCode-Problem-63-Unique-Paths-II/","content":"<p>A robot is located at the top-left corner of a m x n grid (marked ‘Start’ in the diagram below).</p>\n<p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked ‘Finish’ in the diagram below).</p>\n<p>Now consider if some obstacles are added to the grids. How many unique paths would there be?</p>\n<p><img src=\"https://s2.ax1x.com/2019/02/24/k5Fgjx.png\" alt=\"k5Fgjx.png\"></p>\n<p>An obstacle and empty space is marked as 1 and 0 respectively in the grid.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>m and n will be at most 100.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input:<br>[<br>  [0,0,0],<br>  [0,1,0],<br>  [0,0,0]<br>]</p>\n<p>Output: 2</p>\n<p>Explanation:<br>There is one obstacle in the middle of the 3x3 grid above.<br>There are two ways to reach the bottom-right corner:</p>\n<ol>\n<li>Right -&gt; Right -&gt; Down -&gt; Down</li>\n<li>Down -&gt; Down -&gt; Right -&gt; Right</li>\n</ol>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// O(mn) runtime, O(mn) space – Dynamic programming</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">uniquePathsWithObstacles</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] obstacleGrid)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = obstacleGrid.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = obstacleGrid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[m][n];</span><br><span class=\"line\"></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = obstacleGrid[<span class=\"number\">0</span>][<span class=\"number\">0</span>] ^ <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][i] = obstacleGrid[<span class=\"number\">0</span>][i] == <span class=\"number\">1</span> ? <span class=\"number\">0</span> : dp[<span class=\"number\">0</span>][i-<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; m; i++)</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = obstacleGrid[i][<span class=\"number\">0</span>] == <span class=\"number\">1</span> ? <span class=\"number\">0</span> : dp[i-<span class=\"number\">1</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; n; j++)</span><br><span class=\"line\">            dp[i][j] = obstacleGrid[i][j] == <span class=\"number\">1</span> ? <span class=\"number\">0</span> : dp[i-<span class=\"number\">1</span>][j] + dp[i][j-<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[m-<span class=\"number\">1</span>][n-<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 62 - Unique Paths","url":"http://yoursite.com/2017/09/25/LeetCode-Problem-62-Unique-Paths/","content":"<p>A robot is located at the top-left corner of a m x n grid.</p>\n<p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid.</p>\n<p>How many possible unique paths are there?</p>\n<p><img src=\"https://s2.ax1x.com/2019/02/24/k5Fgjx.png\" alt=\"k5Fgjx.png\"></p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>m and n will be at most 100.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: m = 3, n = 2</p>\n<p>Output: 3</p>\n<p>Explanation:<br>From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:</p>\n<ol>\n<li>Right -&gt; Right -&gt; Down</li>\n<li>Right -&gt; Down -&gt; Right</li>\n<li>Down -&gt; Right -&gt; Right</li>\n</ol>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: m = 7, n = 3</p>\n<p>Output: 28</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// O(mn) runtime, O(mn) space – Bottom-up dynamic programming</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">uniquePaths</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[m][n];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> || j == <span class=\"number\">0</span>)</span><br><span class=\"line\">                dp[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                dp[i][j] = dp[i-<span class=\"number\">1</span>][j] + dp[i][j-<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[m-<span class=\"number\">1</span>][n-<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 70 - Climbing Stairs","url":"http://yoursite.com/2017/09/25/LeetCode-Problem-70-Climbing-Stairs/","content":"<p>You are climbing a stair case. It takes n steps to reach to the top.</p>\n<p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>Given n will be a positive integer.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: 2</p>\n<p>Output: 2</p>\n<p>Explanation: There are two ways to climb to the top.</p>\n<ol>\n<li>1 step + 1 step</li>\n<li>2 steps</li>\n</ol>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: 3</p>\n<p>Output: 3</p>\n<p>Explanation: There are three ways to climb to the top.</p>\n<ol>\n<li>1 step + 1 step + 1 step</li>\n<li>1 step + 2 steps</li>\n<li>2 steps + 1 step</li>\n</ol>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// O(n) runtime, O(1) space – Dynamic programming</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">climbStairs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;=n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> current = dp[<span class=\"number\">0</span>] + dp[<span class=\"number\">1</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = dp[<span class=\"number\">1</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>] = current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 150 - Evaluate Reverse Polish Notation","url":"http://yoursite.com/2017/09/19/LeetCode-Problem-150-Evaluate-Reverse-Polish-Notation/","content":"<p>Evaluate the value of an arithmetic expression in Reverse Polish Notation.</p>\n<p>Valid operators are +, -, *, /. Each operand may be an integer or another expression.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>Division between two integers should truncate toward zero.</p>\n<p>The given RPN expression is always valid. That means the expression would always evaluate to a result and there won’t be any divide by zero operation.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: [“2”, “1”, “+”, “3”, “*”]</p>\n<p>Output: 9</p>\n<p>Explanation: ((2 + 1) * 3) = 9</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: [“4”, “13”, “5”, “/“, “+”]</p>\n<p>Output: 6</p>\n<p>Explanation: (4 + (13 / 5)) = 6</p>\n<h3 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h3><p>Input: [“10”, “6”, “9”, “3”, “+”, “-11”, “*“, “/“, “*”, “17”, “+”, “5”, “+”]</p>\n<p>Output: 22</p>\n<p>Explanation:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5</span><br><span class=\"line\">= ((10 * (6 / (12 * -11))) + 17) + 5</span><br><span class=\"line\">= ((10 * (6 / -132)) + 17) + 5</span><br><span class=\"line\">= ((10 * 0) + 17) + 5</span><br><span class=\"line\">= (0 + 17) + 5</span><br><span class=\"line\">= 17 + 5</span><br><span class=\"line\">= 22</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">evalRPN</span><span class=\"params\">(String[] tokens)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tokens == <span class=\"keyword\">null</span> || tokens.length &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    Set&lt;String&gt; operation = <span class=\"keyword\">new</span> HashSet&lt;String&gt;()&#123;&#123;</span><br><span class=\"line\">        add(<span class=\"string\">\"+\"</span>);</span><br><span class=\"line\">        add(<span class=\"string\">\"-\"</span>);</span><br><span class=\"line\">        add(<span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">        add(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">    &#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String token : tokens) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!operation.contains(token)) &#123;</span><br><span class=\"line\">            stack.push(Integer.valueOf(token));</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> b = stack.pop();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = stack.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (token) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"+\"</span> :</span><br><span class=\"line\">                stack.push(a + b);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"-\"</span> :</span><br><span class=\"line\">                stack.push(a - b);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"*\"</span> :</span><br><span class=\"line\">                stack.push(a * b);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"/\"</span> :</span><br><span class=\"line\">                stack.push(a / b);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> stack.peek();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 20 - Valid Parentheses","url":"http://yoursite.com/2017/09/18/LeetCode-Problem-20-Valid-Parentheses/","content":"<p>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.</p>\n<p>An input string is valid if:</p>\n<p>Open brackets must be closed by the same type of brackets.<br>Open brackets must be closed in the correct order.</p>\n<p>Note that an empty string is also considered valid.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: “()”</p>\n<p>Output: true</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: “()[]{}”</p>\n<p>Output: true</p>\n<h3 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h3><p>Input: “(]”</p>\n<p>Output: false</p>\n<h3 id=\"No-4\"><a href=\"#No-4\" class=\"headerlink\" title=\"No.4\"></a>No.4</h3><p>Input: “([)]”</p>\n<p>Output: false</p>\n<h3 id=\"No-5\"><a href=\"#No-5\" class=\"headerlink\" title=\"No.5\"></a>No.5</h3><p>Input: “{[]}”</p>\n<p>Output: true</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    Map&lt;Character, Character&gt; map = <span class=\"keyword\">new</span> HashMap&lt;Character, Character&gt;()&#123;&#123;</span><br><span class=\"line\">        put(<span class=\"string\">'('</span>, <span class=\"string\">')'</span>);</span><br><span class=\"line\">        put(<span class=\"string\">'['</span>, <span class=\"string\">']'</span>);</span><br><span class=\"line\">        put(<span class=\"string\">'&#123;'</span>, <span class=\"string\">'&#125;'</span>);</span><br><span class=\"line\">    &#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Stack&lt;Character&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Character ch : s.toCharArray()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map.containsKey(ch))</span><br><span class=\"line\">            stack.push(ch);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (stack.isEmpty() || map.get(stack.pop()) != ch)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> stack.isEmpty();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 155 - Min Stack","url":"http://yoursite.com/2017/09/18/LeetCode-Problem-155-Min-Stack/","content":"<p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p>\n<ul>\n<li>push(x) – Push element x onto stack.</li>\n<li>pop() – Removes the element on top of the stack.</li>\n<li>top() – Get the top element.</li>\n<li>getMin() – Retrieve the minimum element in the stack.</li>\n</ul>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>MinStack minStack = new MinStack();<br>minStack.push(-2);<br>minStack.push(0);<br>minStack.push(-3);<br>minStack.getMin();   –&gt; Returns -3.<br>minStack.pop();<br>minStack.top();      –&gt; Returns 0.<br>minStack.getMin();   –&gt; Returns -2.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// O(n) runtime, O(n) space – Minor space optimization</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MinStack</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Stack&lt;Integer&gt; stack;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Stack&lt;Integer&gt; min;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MinStack</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        min = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        stack.push(x);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (min.isEmpty() || x &lt;= min.peek())</span><br><span class=\"line\">            min.push(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = stack.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == min.peek())</span><br><span class=\"line\">            min.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">top</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack.peek();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min.peek();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 133 - Clone Graph","url":"http://yoursite.com/2017/09/18/LeetCode-Problem-133-Clone-Graph/","content":"<p>Given a reference of a node in a connected undirected graph, return a deep copy (clone) of the graph. Each node in the graph contains a val (int) and a list (List[Node]) of its neighbors.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p><img src=\"https://s2.ax1x.com/2019/02/24/k5eE4S.png\" alt=\"k5eE4S.png\"></p>\n<p>Input:<br>{“$id”:”1”,”neighbors”:[{“$id”:”2”,”neighbors”:[{“$ref”:”1”},{“$id”:”3”,”neighbors”:[{“$ref”:”2”},{“$id”:”4”,”neighbors”:[{“$ref”:”3”},{“$ref”:”1”}],”val”:4}],”val”:3}],”val”:2},{“$ref”:”4”}],”val”:1}</p>\n<p>Explanation:<br>Node 1’s value is 1, and it has two neighbors: Node 2 and 4.<br>Node 2’s value is 2, and it has two neighbors: Node 1 and 3.<br>Node 3’s value is 3, and it has two neighbors: Node 2 and 4.<br>Node 4’s value is 4, and it has two neighbors: Node 1 and 3.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>The number of nodes will be between 1 and 100.</p>\n<p>The undirected graph is a simple graph, which means no repeated edges and no self-loops in the graph.</p>\n<p>Since the graph is undirected, if node p has node q as neighbor, then node q must have node p as neighbor too.</p>\n<p>You must return the copy of the given node as a reference to the cloned graph.</p>\n<h2 id=\"O-n-runtime-O-n-space-–-Depth-first-traversal\"><a href=\"#O-n-runtime-O-n-space-–-Depth-first-traversal\" class=\"headerlink\" title=\"O(n) runtime, O(n) space – Depth-first traversal\"></a>O(n) runtime, O(n) space – Depth-first traversal</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UndirectedGraphNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> label;</span><br><span class=\"line\">    List&lt;UndirectedGraphNode&gt; neighbors;</span><br><span class=\"line\">    UndirectedGraphNode(<span class=\"keyword\">int</span> x) &#123; label = x; neighbors = <span class=\"keyword\">new</span> ArrayList&lt;UndirectedGraphNode&gt;(); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> UndirectedGraphNode <span class=\"title\">cloneGraph</span><span class=\"params\">(UndirectedGraphNode node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Map&lt;UndirectedGraphNode, UndirectedGraphNode&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dfs(map, node);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> UndirectedGraphNode <span class=\"title\">dfs</span><span class=\"params\">(Map&lt;UndirectedGraphNode, UndirectedGraphNode&gt; map, UndirectedGraphNode node)</span> </span>&#123;</span><br><span class=\"line\">    UndirectedGraphNode copy = <span class=\"keyword\">new</span> UndirectedGraphNode(node.label);</span><br><span class=\"line\">    map.put(node, copy);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (UndirectedGraphNode neighbor : node.neighbors) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!map.containsKey(neighbor))</span><br><span class=\"line\">            copy.neighbors.add(dfs(map, neighbor));</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            copy.neighbors.add(map.get(neighbor));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> copy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"O-n-runtime-O-n-space-–-Breadth-first-traversal\"><a href=\"#O-n-runtime-O-n-space-–-Breadth-first-traversal\" class=\"headerlink\" title=\"O(n) runtime, O(n) space – Breadth-first traversal\"></a>O(n) runtime, O(n) space – Breadth-first traversal</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UndirectedGraphNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> label;</span><br><span class=\"line\">    List&lt;UndirectedGraphNode&gt; neighbors;</span><br><span class=\"line\">    UndirectedGraphNode(<span class=\"keyword\">int</span> x) &#123; label = x; neighbors = <span class=\"keyword\">new</span> ArrayList&lt;UndirectedGraphNode&gt;(); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> UndirectedGraphNode <span class=\"title\">cloneGraph</span><span class=\"params\">(UndirectedGraphNode node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Map&lt;UndirectedGraphNode, UndirectedGraphNode&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bfs(map, node);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> UndirectedGraphNode <span class=\"title\">bfs</span><span class=\"params\">(Map&lt;UndirectedGraphNode, UndirectedGraphNode&gt; map, UndirectedGraphNode node)</span> </span>&#123;</span><br><span class=\"line\">    Queue&lt;UndirectedGraphNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    UndirectedGraphNode copy = <span class=\"keyword\">new</span> UndirectedGraphNode(node.label);</span><br><span class=\"line\">    map.put(node, copy);</span><br><span class=\"line\">    queue.offer(node);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        UndirectedGraphNode current = queue.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (UndirectedGraphNode neighbor : current.neighbors) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!map.containsKey(neighbor)) &#123;</span><br><span class=\"line\">                queue.offer(neighbor);</span><br><span class=\"line\">                map.put(neighbor, <span class=\"keyword\">new</span> UndirectedGraphNode(neighbor.label));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            map.get(current).neighbors.add(map.get(neighbor));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> copy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 13 - Roman to Integer","url":"http://yoursite.com/2017/09/18/LeetCode-Problem-13-Roman-to-Integer/","content":"<p>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p>\n<p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</p>\n<p>Symbol       Value<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000</p>\n<p>For example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p>\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</p>\n<p>I can be placed before V (5) and X (10) to make 4 and 9.<br>X can be placed before L (50) and C (100) to make 40 and 90.<br>C can be placed before D (500) and M (1000) to make 400 and 900.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: “III”</p>\n<p>Output: 3</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: “IV”</p>\n<p>Output: 4</p>\n<h3 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h3><p>Input: “IX”</p>\n<p>Output: 9</p>\n<h3 id=\"No-4\"><a href=\"#No-4\" class=\"headerlink\" title=\"No.4\"></a>No.4</h3><p>Input: “LVIII”</p>\n<p>Output: 58</p>\n<p>Explanation: L = 50, V= 5, III = 3.</p>\n<h3 id=\"No-5\"><a href=\"#No-5\" class=\"headerlink\" title=\"No.5\"></a>No.5</h3><p>Input: “MCMXCIV”</p>\n<p>Output: 1994</p>\n<p>Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">romanToInt</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    Map&lt;Character, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;Character, Integer&gt;()&#123;&#123;</span><br><span class=\"line\">        put(<span class=\"string\">'I'</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        put(<span class=\"string\">'V'</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">        put(<span class=\"string\">'X'</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        put(<span class=\"string\">'L'</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">        put(<span class=\"string\">'C'</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">        put(<span class=\"string\">'D'</span>, <span class=\"number\">500</span>);</span><br><span class=\"line\">        put(<span class=\"string\">'M'</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> prev = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Character ch : s.toCharArray()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> current = map.get(ch);</span><br><span class=\"line\">        num += current &lt;= prev ? current : current - <span class=\"number\">2</span> * prev;</span><br><span class=\"line\">        prev = current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 12 - Integer to Roman","url":"http://yoursite.com/2017/09/18/LeetCode-Problem-12-Integer-to-Roman/","content":"<p>Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.</p>\n<p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</p>\n<p>Symbol       Value<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000</p>\n<p>For example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p>\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</p>\n<p>I can be placed before V (5) and X (10) to make 4 and 9.<br>X can be placed before L (50) and C (100) to make 40 and 90.<br>C can be placed before D (500) and M (1000) to make 400 and 900.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: 3</p>\n<p>Output: “III”</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: 4</p>\n<p>Output: “IV”</p>\n<h3 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h3><p>Input: 9</p>\n<p>Output: “IX”</p>\n<h3 id=\"No-4\"><a href=\"#No-4\" class=\"headerlink\" title=\"No.4\"></a>No.4</h3><p>Input: 58</p>\n<p>Output: “LVIII”</p>\n<p>Explanation: L = 50, V = 5, III = 3.</p>\n<h3 id=\"No-5\"><a href=\"#No-5\" class=\"headerlink\" title=\"No.5\"></a>No.5</h3><p>Input: 1994</p>\n<p>Output: “MCMXCIV”</p>\n<p>Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">intToRoman</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] key = &#123;<span class=\"number\">1000</span>, <span class=\"number\">900</span>, <span class=\"number\">500</span>, <span class=\"number\">400</span>, <span class=\"number\">100</span>, <span class=\"number\">90</span>, <span class=\"number\">50</span>, <span class=\"number\">40</span>, <span class=\"number\">10</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    String[] val = &#123;<span class=\"string\">\"M\"</span>, <span class=\"string\">\"CM\"</span>, <span class=\"string\">\"D\"</span>, <span class=\"string\">\"CD\"</span>, <span class=\"string\">\"C\"</span>, <span class=\"string\">\"XC\"</span>, <span class=\"string\">\"L\"</span>, <span class=\"string\">\"XL\"</span>, <span class=\"string\">\"X\"</span>, <span class=\"string\">\"IX\"</span>, <span class=\"string\">\"V\"</span>, <span class=\"string\">\"IV\"</span>, <span class=\"string\">\"I\"</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; key.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (num &gt;= key[i]) &#123;</span><br><span class=\"line\">            sb.append(val[i]);</span><br><span class=\"line\">            num -= key[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 54 - Spiral Matrix","url":"http://yoursite.com/2017/09/17/LeetCode-Problem-54-Spiral-Matrix/","content":"<p>Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input:<br>[<br> [ 1, 2, 3 ],<br> [ 4, 5, 6 ],<br> [ 7, 8, 9 ]<br>]</p>\n<p>Output: [1,2,3,6,9,8,7,4,5]</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input:<br>[<br>  [1, 2, 3, 4],<br>  [5, 6, 7, 8],<br>  [9,10,11,12]<br>]</p>\n<p>Output: [1,2,3,4,8,12,11,10,9,5,6,7]</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">spiralOrder</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (matrix == <span class=\"keyword\">null</span> || matrix.length == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = matrix.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">2</span> * start &lt; m &amp;&amp; <span class=\"number\">2</span> * start &lt; n) &#123;</span><br><span class=\"line\">        spiralOrderHelper(result, matrix, m, n, start);</span><br><span class=\"line\">        start++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">spiralOrderHelper</span><span class=\"params\">(List&lt;Integer&gt; result, <span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> start)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> endX = n - <span class=\"number\">1</span> - start;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> endY = m - <span class=\"number\">1</span> - start;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt;= endX; i++)</span><br><span class=\"line\">        result.add(matrix[start][i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (endY &gt; start) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start + <span class=\"number\">1</span>; i &lt;= endY; i++)</span><br><span class=\"line\">            result.add(matrix[i][endX]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (endY &gt; start &amp;&amp; endX &gt; start) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = endX - <span class=\"number\">1</span>; i &gt;= start; i--)</span><br><span class=\"line\">            result.add(matrix[endY][i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (endY &gt; start + <span class=\"number\">1</span> &amp;&amp; endX &gt; start) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = endY - <span class=\"number\">1</span>; i &gt; start; i--)</span><br><span class=\"line\">            result.add(matrix[i][start]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 137 - Single Number II","url":"http://yoursite.com/2017/09/16/LeetCode-Problem-137-Single-Number-II/","content":"<p>Given a non-empty array of integers, every element appears three times except for one, which appears exactly once. Find that single one.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: [2,2,3,2]</p>\n<p>Output: 3</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: [0,1,0,1,0,1,99]</p>\n<p>Output: 99</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">32</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (((nums[j] &gt;&gt; i) &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>)</span><br><span class=\"line\">                sum++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        num |= (sum % <span class=\"number\">3</span>) &lt;&lt; i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Improvement\"><a href=\"#Improvement\" class=\"headerlink\" title=\"Improvement\"></a>Improvement</h2><ol>\n<li>A new number appears - It gets XOR’d to the variable “ones”.</li>\n<li>A number gets repeated(appears twice) - It is removed from “ones” and XOR’d to the variable “twos”.</li>\n<li>A number appears for the third time - It gets removed from both “ones” and “twos”.</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> once = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> twice = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> common;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        twice |= once &amp; nums[i];</span><br><span class=\"line\">        once ^= nums[i];</span><br><span class=\"line\">        common = ~(once &amp; twice);</span><br><span class=\"line\">        once &amp;= common;</span><br><span class=\"line\">        twice &amp;= common;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> once;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 136 - Single Number","url":"http://yoursite.com/2017/09/16/LeetCode-Problem-136-Single-Number/","content":"<p>Given an array of integers, every element appears twice except for one. Find that single one.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: [2,2,1]</p>\n<p>Output: 1</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: [4,1,2,1,2]</p>\n<p>Output: 4</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> n : nums)</span><br><span class=\"line\">        num ^= n;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 124 - Binary Tree Maximum Path Sum","url":"http://yoursite.com/2017/09/16/LeetCode-Problem-124-Binary-Tree-Maximum-Path-Sum/","content":"<p>Given a non-empty binary tree, find the maximum path sum.</p>\n<p>For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: [1,2,3]<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  1</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">2   3</span><br></pre></td></tr></table></figure></p>\n<p>Output: 6</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: [-10,9,20,null,null,15,7]<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> -10</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">9  20</span><br><span class=\"line\">  /  \\</span><br><span class=\"line\"> 15   7</span><br></pre></td></tr></table></figure></p>\n<p>Output: 42</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> max = Integer.MIN_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxPathSum</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    maxPathSumHelper(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">maxPathSumHelper</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = Math.max(maxPathSumHelper(root.left), <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = Math.max(maxPathSumHelper(root.right), <span class=\"number\">0</span>);</span><br><span class=\"line\">    max = Math.max(max, root.val + left + right);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.max(left, right) + root.val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 109 - Convert Sorted List to Binary Search Tree","url":"http://yoursite.com/2017/09/15/LeetCode-Problem-109-Convert-Sorted-List-to-Binary-Search-Tree/","content":"<p>Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.</p>\n<p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Given the sorted linked list: [-10,-3,0,5,9],</p>\n<p>One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     0</span><br><span class=\"line\">    / \\</span><br><span class=\"line\">  -3   9</span><br><span class=\"line\">  /   /</span><br><span class=\"line\">-10  5</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// O(n) runtime, O(logn) stack space – Bottom-up recursion</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ListNode current;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">sortedListToBST</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    ListNode node = head;</span><br><span class=\"line\">    current = head;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        length++;</span><br><span class=\"line\">        node = node.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sortedListToBSTHelper(<span class=\"number\">0</span>, length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">sortedListToBSTHelper</span><span class=\"params\">(<span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt; end)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (start + end) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    TreeNode left = sortedListToBSTHelper(start, mid - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    TreeNode parent = <span class=\"keyword\">new</span> TreeNode(current.val);</span><br><span class=\"line\">    parent.left = left;</span><br><span class=\"line\">    current = current.next;</span><br><span class=\"line\"></span><br><span class=\"line\">    TreeNode right = sortedListToBSTHelper(mid + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">    parent.right = right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> parent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 108 - Convert Sorted Array to Binary Search Tree","url":"http://yoursite.com/2017/09/15/LeetCode-Problem-108-Convert-Sorted-Array-to-Binary-Search-Tree/","content":"<p>Given an array where elements are sorted in ascending order, convert it to a height balanced BST.</p>\n<p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Given the sorted array: [-10,-3,0,5,9],</p>\n<p>One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     0</span><br><span class=\"line\">    / \\</span><br><span class=\"line\">  -3   9</span><br><span class=\"line\">  /   /</span><br><span class=\"line\">-10  5</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// O(n) runtime, O(log n) stack space</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">sortedArrayToBST</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || nums.length &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sortedArrayToBSTHelper(nums, <span class=\"number\">0</span>, nums.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">sortedArrayToBSTHelper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt; end)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start == end)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TreeNode(nums[start]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (start + end) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    TreeNode root = <span class=\"keyword\">new</span> TreeNode(nums[mid]);</span><br><span class=\"line\"></span><br><span class=\"line\">    root.left = sortedArrayToBSTHelper(nums, start, mid - <span class=\"number\">1</span>);</span><br><span class=\"line\">    root.right = sortedArrayToBSTHelper(nums, mid + <span class=\"number\">1</span>, end);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 110 - Balanced Binary Tree","url":"http://yoursite.com/2017/09/15/LeetCode-Problem-110-Balanced-Binary-Tree/","content":"<p>Given a binary tree, determine if it is height-balanced.</p>\n<p>For this problem, a height-balanced binary tree is defined as:</p>\n<p>a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Given the following tree [3,9,20,null,null,15,7]:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  3</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">9  20</span><br><span class=\"line\">  /  \\</span><br><span class=\"line\"> 15   7</span><br></pre></td></tr></table></figure></p>\n<p>Return true.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Given the following tree [1,2,2,3,3,null,null,4,4]:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      1</span><br><span class=\"line\">     / \\</span><br><span class=\"line\">    2   2</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  3   3</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">4   4</span><br></pre></td></tr></table></figure></p>\n<p>Return false.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// O(n) runtime, O(n) stack space – Bottom-up recursion</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBalanced</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxDepth(root) ==  -<span class=\"number\">1</span> ? <span class=\"keyword\">false</span> : <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> leftDepth = maxDepth(root.left);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftDepth == -<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> rightDepth = maxDepth(root.right);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rightDepth == -<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (Math.abs(leftDepth - rightDepth) &gt; <span class=\"number\">1</span>) ? -<span class=\"number\">1</span> : Math.max(leftDepth, rightDepth) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 111 - Minimum Depth of Binary Tree","url":"http://yoursite.com/2017/09/15/LeetCode-Problem-111-Minimum-Depth-of-Binary-Tree/","content":"<p>Given a binary tree, find its minimum depth.</p>\n<p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>A leaf is a node with no children.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Given binary tree [3,9,20,null,null,15,7],<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  3</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">9  20</span><br><span class=\"line\">  /  \\</span><br><span class=\"line\"> 15   7</span><br></pre></td></tr></table></figure></p>\n<p>return its minimum depth = 2.</p>\n<h2 id=\"O-n-runtime-O-log-n-space-–-Depth-first-traversal\"><a href=\"#O-n-runtime-O-log-n-space-–-Depth-first-traversal\" class=\"headerlink\" title=\"O(n) runtime, O(log n) space – Depth-first traversal\"></a>O(n) runtime, O(log n) space – Depth-first traversal</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.left == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> minDepth(root.right) + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.right == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> minDepth(root.left) + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.min(minDepth(root.right), minDepth(root.left)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"O-n-runtime-O-n-space-–-Breadth-first-traversal\"><a href=\"#O-n-runtime-O-n-space-–-Breadth-first-traversal\" class=\"headerlink\" title=\"O(n) runtime, O(n) space – Breadth-first traversal\"></a>O(n) runtime, O(n) space – Breadth-first traversal</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    queue.offer(root);</span><br><span class=\"line\">    TreeNode levelEnd = root;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> depth = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        TreeNode current = queue.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current.left == <span class=\"keyword\">null</span> &amp;&amp; current.right == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current.left != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            queue.offer(current.left);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current.right != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            queue.offer(current.right);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current == levelEnd) &#123;</span><br><span class=\"line\">            levelEnd = current.right == <span class=\"keyword\">null</span> ? current.left : current.right;</span><br><span class=\"line\">            depth++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> depth;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 104 - Maximum Depth of Binary Tree","url":"http://yoursite.com/2017/09/15/LeetCode-Problem-104-Maximum-Depth-of-Binary-Tree/","content":"<p>Given a binary tree, find its maximum depth.</p>\n<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>A leaf is a node with no children.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Given binary tree [3,9,20,null,null,15,7],<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  3</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">9  20</span><br><span class=\"line\">  /  \\</span><br><span class=\"line\"> 15   7</span><br></pre></td></tr></table></figure></p>\n<p>return its depth = 3.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// O(n) runtime, O(log n) space – Recursion</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> leftDepth = maxDepth(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rightDepth = maxDepth(root.right);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.max(leftDepth, rightDepth) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 98 - Validate Binary Search Tree","url":"http://yoursite.com/2017/09/14/LeetCode-Problem-98-Validate-Binary-Search-Tree/","content":"<p>Given a binary tree, determine if it is a valid binary search tree (BST).</p>\n<p>Assume a BST is defined as follows:</p>\n<p>The left subtree of a node contains only nodes with keys less than the node’s key.<br>The right subtree of a node contains only nodes with keys greater than the node’s key.<br>Both the left and right subtrees must also be binary search trees.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  2</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">1   3</span><br></pre></td></tr></table></figure></p>\n<p>Output: true</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  5</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">1   4</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  3   6</span><br></pre></td></tr></table></figure></p>\n<p>Output: false</p>\n<p>Explanation: The input is: [5,1,4,null,null,3,6]. The root node’s value is 5 but its right child’s value is 4.</p>\n<h2 id=\"O-n-runtime-O-n-stack-space-–-Top-down-recursion\"><a href=\"#O-n-runtime-O-n-stack-space-–-Top-down-recursion\" class=\"headerlink\" title=\"O(n) runtime, O(n) stack space – Top-down recursion\"></a>O(n) runtime, O(n) stack space – Top-down recursion</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidBST</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isValidBSTHelper(root, Long.MIN_VALUE, Long.MAX_VALUE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidBSTHelper</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">long</span> low, <span class=\"keyword\">long</span> high)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val &lt;= low || root.val &gt;= high)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> isValidBSTHelper(root.left, low, root.val) &amp;&amp; isValidBSTHelper(root.right, root.val, high);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"O-n-runtime-O-n-stack-space-–-In-order-traversal\"><a href=\"#O-n-runtime-O-n-stack-space-–-In-order-traversal\" class=\"headerlink\" title=\"O(n) runtime, O(n) stack space – In-order traversal\"></a>O(n) runtime, O(n) stack space – In-order traversal</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> TreeNode prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidBST</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isValidBST(root.left)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prev == <span class=\"keyword\">null</span> || root.val &gt; prev.val) &#123;</span><br><span class=\"line\">            prev = root;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> isValidBST(root.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 138 - Copy List with Random Pointer","url":"http://yoursite.com/2017/09/14/LeetCode-Problem-138-Copy-List-with-Random-Pointer/","content":"<p>A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.</p>\n<p>Return a deep copy of the list.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p><img src=\"https://s2.ax1x.com/2019/02/24/k5eY34.png\" alt=\"k5eY34.png\"></p>\n<p>Input:<br>{“$id”:”1”,”next”:{“$id”:”2”,”next”:null,”random”:{“$ref”:”2”},”val”:2},”random”:{“$ref”:”2”},”val”:1}</p>\n<p>Explanation:<br>Node 1’s value is 1, both of its next and random pointer points to Node 2.<br>Node 2’s value is 2, its next pointer points to null and its random pointer points to itself.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> label;</span><br><span class=\"line\">    RandomListNode next, random;</span><br><span class=\"line\">    RandomListNode(<span class=\"keyword\">int</span> x) &#123; <span class=\"keyword\">this</span>.label = x; &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// O(n) runtime, O(1) space – Modify original structure</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RandomListNode <span class=\"title\">copyRandomList</span><span class=\"params\">(RandomListNode head)</span> </span>&#123;</span><br><span class=\"line\">    RandomListNode current = head;</span><br><span class=\"line\">    RandomListNode copyHead = <span class=\"keyword\">null</span>, copyCurrent = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        RandomListNode copy = <span class=\"keyword\">new</span> RandomListNode(current.label);</span><br><span class=\"line\">        copy.next = current.next;</span><br><span class=\"line\">        current.next = copy;</span><br><span class=\"line\">        current = copy.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    current = head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current.random != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            current.next.random = current.random.next;</span><br><span class=\"line\"></span><br><span class=\"line\">        current = current.next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    current = head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        copyHead = copyCurrent = current.next;</span><br><span class=\"line\">        current.next = current.next.next;</span><br><span class=\"line\">        current = copyCurrent.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        copyCurrent.next = current.next;</span><br><span class=\"line\">        current.next = current.next.next;</span><br><span class=\"line\">        copyCurrent = copyCurrent.next;</span><br><span class=\"line\">        current = current.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> copyHead;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 23 - Merge K Sorted Linked Lists","url":"http://yoursite.com/2017/09/14/LeetCode-Problem-23-Merge-K-Sorted-Linked-Lists/","content":"<p>Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input:<br>[<br>  1-&gt;4-&gt;5,<br>  1-&gt;3-&gt;4,<br>  2-&gt;6<br>]</p>\n<p>Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</p>\n<h2 id=\"O-nklogk-runtime-O-k-space-–-Heap\"><a href=\"#O-nklogk-runtime-O-k-space-–-Heap\" class=\"headerlink\" title=\"O(nklogk) runtime, O(k) space – Heap\"></a>O(nklogk) runtime, O(k) space – Heap</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next;</span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeKLists</span><span class=\"params\">(ListNode[] lists)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lists == <span class=\"keyword\">null</span> || lists.length &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    PriorityQueue&lt;ListNode&gt; minHeap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;(lists.length, (o1, o2) -&gt; o1.val - o2.val);</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode head = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    ListNode current = head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ListNode node : lists) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            minHeap.add(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!minHeap.isEmpty()) &#123;</span><br><span class=\"line\">        current.next = minHeap.poll();;</span><br><span class=\"line\">        current = current.next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current.next != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            minHeap.offer(current.next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> head.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"O-nklogk-runtime-O-1-space-–-Divide-and-conquer-using-two-way-merge\"><a href=\"#O-nklogk-runtime-O-1-space-–-Divide-and-conquer-using-two-way-merge\" class=\"headerlink\" title=\"O(nklogk) runtime, O(1) space – Divide and conquer using two way merge\"></a>O(nklogk) runtime, O(1) space – Divide and conquer using two way merge</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next;</span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeKLists</span><span class=\"params\">(ListNode[] lists)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lists == <span class=\"keyword\">null</span> || lists.length &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> partition(lists, <span class=\"number\">0</span>, lists.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ListNode <span class=\"title\">partition</span><span class=\"params\">(ListNode[] lists, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start == end)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lists[start];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (start + end) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode left = partition(lists, start, mid);</span><br><span class=\"line\">    ListNode right = partition(lists, mid + <span class=\"number\">1</span>, end);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> mergeTwoLists(left, right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ListNode <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l1 == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l2 == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class=\"line\">        l1.next = mergeTwoLists(l1.next, l2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        l2.next = mergeTwoLists(l1, l2.next);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 24 - Swap Nodes in Pairs","url":"http://yoursite.com/2017/09/13/LeetCode-Problem-24-Swap-Nodes-in-Pairs/","content":"<p>Given a linked list, swap every two adjacent nodes and return its head.</p>\n<p>You may not modify the values in the list, only nodes itself can be changed.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next;</span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">swapPairs</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    ListNode node = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    node.next = head;</span><br><span class=\"line\">    ListNode prev = node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (prev.next != <span class=\"keyword\">null</span> &amp;&amp; prev.next.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        ListNode current = prev.next;</span><br><span class=\"line\">        ListNode next = prev.next.next;</span><br><span class=\"line\">        current.next = next.next;</span><br><span class=\"line\">        next.next = current;</span><br><span class=\"line\">        prev.next = next;</span><br><span class=\"line\">        prev = current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> node.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 2 - Add Two Numbers","url":"http://yoursite.com/2017/09/13/LeetCode-Problem-2-Add-Two-Numbers/","content":"<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</p>\n<p>Output: 7 -&gt; 0 -&gt; 8</p>\n<p>Explanation: 342 + 465 = 807.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next;</span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">addTwoNumbers</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">    ListNode head = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    ListNode current1 = l1;</span><br><span class=\"line\">    ListNode current2 = l2;</span><br><span class=\"line\">    ListNode current = head;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> carry = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current1 != <span class=\"keyword\">null</span> || current2 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> val1 = current1 == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : current1.val;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> val2 = current2 == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : current2.val;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = val1 + val2 + carry;</span><br><span class=\"line\"></span><br><span class=\"line\">        current.next = <span class=\"keyword\">new</span> ListNode(sum % <span class=\"number\">10</span>);</span><br><span class=\"line\">        carry = sum / <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        current = current.next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current1 != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            current1 = current1.next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current2 != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            current2 = current2.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (carry &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        current.next = <span class=\"keyword\">new</span> ListNode(carry);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> head.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 21 - Merge Two Sorted Lists","url":"http://yoursite.com/2017/09/13/LeetCode-Problem-21-Merge-Two-Sorted-Lists/","content":"<p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4</p>\n<p>Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next;</span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l1 == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l2 == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l1.val &lt;= l2.val) &#123;</span><br><span class=\"line\">        l1.next = mergeTwoLists(l1.next, l2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        l2.next = mergeTwoLists(l1, l2.next);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 9 - Palindrome Number","url":"http://yoursite.com/2017/09/13/LeetCode-Problem-9-Palindrome-Number/","content":"<p>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: 121</p>\n<p>Output: true</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: -121</p>\n<p>Output: false</p>\n<p>Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.</p>\n<h3 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h3><p>Input: 10</p>\n<p>Output: false</p>\n<p>Explanation: Reads 01 from right to left. Therefore it is not a palindrome.</p>\n<h2 id=\"Follow-up\"><a href=\"#Follow-up\" class=\"headerlink\" title=\"Follow up\"></a>Follow up</h2><p>Coud you solve it without converting the integer to a string?</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span> || (x != <span class=\"number\">0</span> &amp;&amp; x % <span class=\"number\">10</span> == <span class=\"number\">0</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> reverseX = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x &gt; reverseX) &#123;</span><br><span class=\"line\">        reverseX = reverseX * <span class=\"number\">10</span> + x % <span class=\"number\">10</span>;</span><br><span class=\"line\">        x /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x == reverseX || reverseX / <span class=\"number\">10</span> == x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 66 - Plus One","url":"http://yoursite.com/2017/09/13/LeetCode-Problem-66-Plus-One/","content":"<p>Given a non-negative integer represented as a non-empty array of digits, plus one to the integer.</p>\n<p>The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.</p>\n<p>You may assume the integer does not contain any leading zero, except the number 0 itself.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: [1,2,3]</p>\n<p>Output: [1,2,4]</p>\n<p>Explanation: The array represents the integer 123.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: [4,3,2,1]</p>\n<p>Output: [4,3,2,2]</p>\n<p>Explanation: The array represents the integer 4321.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] plusOne(<span class=\"keyword\">int</span>[] digits) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = digits.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (digits[i] != <span class=\"number\">9</span>) &#123;</span><br><span class=\"line\">            digits[i]++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> digits;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            digits[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] newDigit = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[digits.length+<span class=\"number\">1</span>];</span><br><span class=\"line\">    newDigit[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newDigit;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 7 - Reverse Integer","url":"http://yoursite.com/2017/09/13/LeetCode-Problem-7-Reverse-Integer/","content":"<p>Given a 32-bit signed integer, reverse digits of an integer.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: 123</p>\n<p>Output: 321</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: -123</p>\n<p>Output: -321</p>\n<h3 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h3><p>Input: 120</p>\n<p>Output: 21</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2^31,  2^31 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> reverseX = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Math.abs(reverseX) &gt; Integer.MAX_VALUE / <span class=\"number\">10</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        reverseX = reverseX * <span class=\"number\">10</span> + x % <span class=\"number\">10</span>;</span><br><span class=\"line\">        x /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> reverseX;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 5 - Longest Palindromic Substring","url":"http://yoursite.com/2017/09/12/LeetCode-Problem-5-Longest-Palindromic-Substring/","content":"<p>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: “babad”</p>\n<p>Output: “bab”</p>\n<p>Note: “aba” is also a valid answer.</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: “cbbd”</p>\n<p>Output: “bb”</p>\n<h2 id=\"O-n-2-runtime-O-n-space-–-Dynamic-programming\"><a href=\"#O-n-2-runtime-O-n-space-–-Dynamic-programming\" class=\"headerlink\" title=\"O(n^2) runtime, O(n) space – Dynamic programming\"></a>O(n^2) runtime, O(n) space – Dynamic programming</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">longestPalindrome</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    String str = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = s.length();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[n][n];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// P[i, i] ← true</span></span><br><span class=\"line\">    <span class=\"comment\">// P[i, i+1] ← (Si = Si+1)</span></span><br><span class=\"line\">    <span class=\"comment\">// P[i, j] ← (P[i+1, j-1] and Si = Sj)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; n; j++) &#123;</span><br><span class=\"line\">            dp[i][j] = (s.charAt(i) == s.charAt(j)) &amp;&amp; (j - i + <span class=\"number\">1</span> &lt; <span class=\"number\">3</span> || dp[i+<span class=\"number\">1</span>][j-<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dp[i][j] &amp;&amp; (j - i + <span class=\"number\">1</span>) &gt; str.length())</span><br><span class=\"line\">                str = s.substring(i, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"O-n-2-runtime-O-1-space-–-Simpler-solution\"><a href=\"#O-n-2-runtime-O-1-space-–-Simpler-solution\" class=\"headerlink\" title=\"O(n^2) runtime, O(1) space – Simpler solution\"></a>O(n^2) runtime, O(1) space – Simpler solution</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">longestPalindrome</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    String str = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = s.length();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len1 = expandAroundCenter(s, i, i);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len2 = expandAroundCenter(s, i, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = Math.max(len1, len2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (max &gt; str.length())</span><br><span class=\"line\">            str = s.substring(i - (max - <span class=\"number\">1</span>) / <span class=\"number\">2</span>, i + <span class=\"number\">1</span> + max / <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">expandAroundCenter</span><span class=\"params\">(String s, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; j &lt; s.length() &amp;&amp; s.charAt(i) == s.charAt(j)) &#123;</span><br><span class=\"line\">        i--;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> j - i - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 3 - Longest Substring Without Repeating Characters","url":"http://yoursite.com/2017/09/12/LeetCode-Problem-3-Longest-Substring-Without-Repeating-Characters/","content":"<p>Given a string, find the length of the longest substring without repeating characters.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: “abcabcbb”</p>\n<p>Output: 3 </p>\n<p>Explanation: The answer is “abc”, with the length of 3. </p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: “bbbbb”</p>\n<p>Output: 1</p>\n<p>Explanation: The answer is “b”, with the length of 1.</p>\n<h3 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h3><p>Input: “pwwkew”</p>\n<p>Output: 3</p>\n<p>Explanation: The answer is “wke”, with the length of 3. Note that the answer must be a substring, “pwke” is a subsequence and not a substring.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// O(n) runtime, O(1) space</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] ascii = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">256</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Arrays.fill(ascii, -<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ascii[s.charAt(i)] &gt;= idx)</span><br><span class=\"line\">            idx = ascii[s.charAt(i)] + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        ascii[s.charAt(i)] = i;</span><br><span class=\"line\">        max = Math.max(max, i - idx + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 65 - Valid Number","url":"http://yoursite.com/2017/09/12/LeetCode-Problem-65-Valid-Number/","content":"<p>Validate if a given string is numeric.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>“0” =&gt; true<br>“ 0.1 “ =&gt; true<br>“abc” =&gt; false<br>“1 a” =&gt; false<br>“2e10” =&gt; true<br>“ -90e3   “ =&gt; true<br>“ 1e” =&gt; false<br>“e3” =&gt; false<br>“ 6e-1” =&gt; true<br>“ 99e2.5 “ =&gt; false<br>“53.5e93” =&gt; true<br>“ –6 “ =&gt; false<br>“-+3” =&gt; false<br>“95a54e53” =&gt; false</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one. However, here is a list of characters that can be in a valid decimal number:</p>\n<p>Numbers 0-9<br>Exponent - “e”<br>Positive/negative sign - “+”/“-“<br>Decimal point - “.”</p>\n<p>Of course, the context of these characters also matters in the input.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNumber</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isNum = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; s.length() &amp;&amp; Character.isWhitespace(s.charAt(i)))</span><br><span class=\"line\">        i++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; s.length() &amp;&amp; (s.charAt(i) == <span class=\"string\">'+'</span> || s.charAt(i) == <span class=\"string\">'-'</span>))</span><br><span class=\"line\">        i++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; s.length() &amp;&amp; Character.isDigit(s.charAt(i))) &#123;</span><br><span class=\"line\">        isNum = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; s.length() &amp;&amp; s.charAt(i) == <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; s.length() &amp;&amp; Character.isDigit(s.charAt(i))) &#123;</span><br><span class=\"line\">            isNum = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isNum &amp;&amp; i &lt; s.length() &amp;&amp; s.charAt(i) == <span class=\"string\">'e'</span>) &#123;</span><br><span class=\"line\">        isNum = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; s.length() &amp;&amp; (s.charAt(i) == <span class=\"string\">'+'</span> || s.charAt(i) == <span class=\"string\">'-'</span>))</span><br><span class=\"line\">            i++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; s.length() &amp;&amp; Character.isDigit(s.charAt(i))) &#123;</span><br><span class=\"line\">            isNum = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; s.length() &amp;&amp; Character.isWhitespace(s.charAt(i)))</span><br><span class=\"line\">        i++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> isNum &amp;&amp; i == s.length();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 8 - String to Integer (atoi)","url":"http://yoursite.com/2017/09/12/LeetCode-Problem-8-String-to-Integer-atoi/","content":"<p>Implement atoi to convert a string to an integer.</p>\n<p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>\n<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>\n<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>\n<p>If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: “42”</p>\n<p>Output: 42</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: “   -42”</p>\n<p>Output: -42</p>\n<p>Explanation: The first non-whitespace character is ‘-‘, which is the minus sign. Then take as many numerical digits as possible, which gets 42.</p>\n<h3 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h3><p>Input: “4193 with words”</p>\n<p>Output: 4193</p>\n<p>Explanation: Conversion stops at digit ‘3’ as the next character is not a numerical digit.</p>\n<h3 id=\"No-4\"><a href=\"#No-4\" class=\"headerlink\" title=\"No.4\"></a>No.4</h3><p>Input: “words and 987”</p>\n<p>Output: 0</p>\n<p>Explanation: The first non-whitespace character is ‘w’, which is not a numerical digit or a +/- sign. Therefore no valid conversion could be performed.</p>\n<h3 id=\"No-5\"><a href=\"#No-5\" class=\"headerlink\" title=\"No.5\"></a>No.5</h3><p>Input: “-91283472332”</p>\n<p>Output: -2147483648</p>\n<p>Explanation: The number “-91283472332” is out of the range of a 32-bit signed integer. Thefore INT_MIN (−2^31) is returned.</p>\n<h2 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h2><p>Only the space character ‘ ‘ is considered as whitespace character.</p>\n<p>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2^31,  2^31 − 1]. If the numerical value is out of the range of representable values, INT_MAX (2^31 − 1) or INT_MIN (−2^31) is returned.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">myAtoi</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; str.length() &amp;&amp; Character.isWhitespace(str.charAt(i)))</span><br><span class=\"line\">        i++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; str.length() &amp;&amp; str.charAt(i) == <span class=\"string\">'-'</span>) &#123;</span><br><span class=\"line\">        flag = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i &lt; str.length() &amp;&amp; str.charAt(i) == <span class=\"string\">'+'</span>)</span><br><span class=\"line\">        i++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; str.length() &amp;&amp; Character.isDigit(str.charAt(i))) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> digit = Character.getNumericValue(str.charAt(i));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num &gt; Integer.MAX_VALUE / <span class=\"number\">10</span> || (num == <span class=\"number\">214748364</span> &amp;&amp; digit &gt; <span class=\"number\">7</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> flag == <span class=\"number\">1</span> ? Integer.MAX_VALUE : Integer.MIN_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\">        num = <span class=\"number\">10</span> * num + digit;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag * num;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 151 - Reverse Words in a String","url":"http://yoursite.com/2017/09/12/LeetCode-Problem-151-Reverse-Words-in-a-String/","content":"<p>Given an input string, reverse the string word by word.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>A word is defined as a sequence of non-space characters.</p>\n<p>Input string may contain leading or trailing spaces. However, your reversed string should not contain leading or trailing spaces.</p>\n<p>You need to reduce multiple spaces between two words to a single space in the reversed string.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: “the sky is blue”,</p>\n<p>Output: “blue is sky the”.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// O(n) runtime, O(n) space</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">reverseWords</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = s.length();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> start = s.length() - <span class=\"number\">1</span>; start &gt;= <span class=\"number\">0</span>; start--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.charAt(start) == <span class=\"string\">' '</span>)</span><br><span class=\"line\">            end = start;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (start == <span class=\"number\">0</span> || s.charAt(start - <span class=\"number\">1</span>) == <span class=\"string\">' '</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sb.length() != <span class=\"number\">0</span>)</span><br><span class=\"line\">                sb.append(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            sb.append(s.substring(start, end));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 28 - Implement strStr()","url":"http://yoursite.com/2017/09/12/LeetCode-Problem-28-Implement-strStr/","content":"<p>Implement strStr().</p>\n<p>Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: haystack = “hello”, needle = “ll”</p>\n<p>Output: 2</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: haystack = “aaaaa”, needle = “bba”</p>\n<p>Output: -1</p>\n<h2 id=\"Clarification\"><a href=\"#Clarification\" class=\"headerlink\" title=\"Clarification\"></a>Clarification</h2><p>What should we return when needle is an empty string? This is a great question to ask during an interview.</p>\n<p>For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C’s strstr() and Java’s indexOf().</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// O(nm) runtime, O(1) space</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">strStr</span><span class=\"params\">(String haystack, String needle)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= haystack.length() - needle.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; ; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == needle.length())</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (needle.charAt(j) != haystack.charAt(i+j))</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 125 - Valid Palindrome","url":"http://yoursite.com/2017/09/12/LeetCode-Problem-125-Valid-Palindrome/","content":"<p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>For the purpose of this problem, we define empty string as valid palindrome.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h3><p>Input: “A man, a plan, a canal: Panama”</p>\n<p>Output: true</p>\n<h3 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h3><p>Input: “race a car”</p>\n<p>Output: false</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// O(n) runtime, O(1) space</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = s.length() - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (start &lt; end &amp;&amp; !Character.isLetterOrDigit(s.charAt(start)))</span><br><span class=\"line\">            start++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (start &lt; end &amp;&amp; !Character.isLetterOrDigit(s.charAt(end)))</span><br><span class=\"line\">            end--;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Character.toLowerCase(s.charAt(start)) != Character.toLowerCase(s.charAt(end)))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        start++;</span><br><span class=\"line\">        end--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 167 - Two Sum II - Input array is sorted","url":"http://yoursite.com/2017/09/11/LeetCode-Problem-167-Two-Sum-II-Input-array-is-sorted/","content":"<p>Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.</p>\n<p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>Your returned answers (both index1 and index2) are not zero-based.<br>You may assume that each input would have exactly one solution and you may not use the same element twice.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Input: numbers = [2,7,11,15], target = 9</p>\n<p>Output: [1,2]</p>\n<p>Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.</p>\n<h2 id=\"O-nlogn-runtime-O-1-space\"><a href=\"#O-nlogn-runtime-O-1-space\" class=\"headerlink\" title=\"O(nlogn) runtime, O(1) space\"></a>O(nlogn) runtime, O(1) space</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length &amp;&amp; nums[i] &lt;= target; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = binarySearch(nums, i + <span class=\"number\">1</span>, nums.length - <span class=\"number\">1</span>, target - num);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j != -<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i &lt; j ? <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;i + <span class=\"number\">1</span>, j + <span class=\"number\">1</span>&#125; : <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;j + <span class=\"number\">1</span>, i + <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt;= end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (start + end) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[mid] &lt; target)</span><br><span class=\"line\">            start = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &gt; target)</span><br><span class=\"line\">            end = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"O-n-runtime-O-1-space\"><a href=\"#O-n-runtime-O-1-space\" class=\"headerlink\" title=\"O(n) runtime, O(1) space\"></a>O(n) runtime, O(1) space</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[start] + nums[end] &lt; target)</span><br><span class=\"line\">            start++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[start] + nums[end] &gt; target)</span><br><span class=\"line\">            end--;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;start + <span class=\"number\">1</span>, end + <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"[LeetCode] Problem 1 - Two Sum","url":"http://yoursite.com/2017/09/10/LeetCode-Problem-1-Two-Sum/","content":"<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>\n<p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Given nums = [2, 7, 11, 15], target = 9,</p>\n<p>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// O(n) runtime, O(n) space</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = nums[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map.containsKey(target - num))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;i, map.get(target - num)&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        map.put(num, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","LeetCode"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】机器人的运动范围","url":"http://yoursite.com/2017/09/10/【剑指Offer】机器人的运动范围/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>地上有一个m行n列的方格。一个机器人从坐标(0,0)的格子开始移动，它每一次可以向左、右、上、下移动一格，但不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格(35,37)，因为3+5+3+7=18。但它不能进入方格(35,38)。因为3+5+3+8=19.请问该机器人能够到达多少个格子？</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">movingCount</span><span class=\"params\">(<span class=\"keyword\">int</span> threshold, <span class=\"keyword\">int</span> rows, <span class=\"keyword\">int</span> cols)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[] visited = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[rows*cols];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> movingCountHelper(threshold, rows, cols, <span class=\"number\">0</span>, <span class=\"number\">0</span>, visited);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">movingCountHelper</span><span class=\"params\">(<span class=\"keyword\">int</span> threshold, <span class=\"keyword\">int</span> rows, <span class=\"keyword\">int</span> cols, <span class=\"keyword\">int</span> row, <span class=\"keyword\">int</span> col, <span class=\"keyword\">boolean</span>[] visited)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (row &lt; <span class=\"number\">0</span> || col &lt; <span class=\"number\">0</span> || row &gt;= rows || col &gt;= cols || visited[row*cols+col] || getDigitSum(row) + getDigitSum(col) &gt; threshold)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    visited[row*cols+col] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    count += movingCountHelper(threshold, rows, cols, row - <span class=\"number\">1</span>, col, visited)</span><br><span class=\"line\">            + movingCountHelper(threshold, rows, cols, row + <span class=\"number\">1</span>, col, visited)</span><br><span class=\"line\">            + movingCountHelper(threshold, rows, cols, row, col - <span class=\"number\">1</span>, visited)</span><br><span class=\"line\">            + movingCountHelper(threshold, rows, cols, row, col + <span class=\"number\">1</span>, visited);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getDigitSum</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        sum += num % <span class=\"number\">10</span>;</span><br><span class=\"line\">        num /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】矩阵中的路径","url":"http://yoursite.com/2017/09/10/【剑指Offer】矩阵中的路径/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如在下面的3x4的矩阵中包含一条字符串“bcced”的路径。但矩阵中不包含字符串“abcb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。</p>\n<p>a b c e<br>s f c s<br>a d e e</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPath</span><span class=\"params\">(<span class=\"keyword\">char</span>[] matrix, <span class=\"keyword\">int</span> rows, <span class=\"keyword\">int</span> cols, <span class=\"keyword\">char</span>[] str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (matrix == <span class=\"keyword\">null</span> || rows &lt; <span class=\"number\">1</span> || cols &lt; <span class=\"number\">1</span> || str == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[] visited = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[matrix.length];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; rows; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; cols; j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hasPathHelper(matrix, rows, cols, i, j, str, <span class=\"number\">0</span>, visited))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathHelper</span><span class=\"params\">(<span class=\"keyword\">char</span>[] matrix, <span class=\"keyword\">int</span> rows, <span class=\"keyword\">int</span> cols, <span class=\"keyword\">int</span> row, <span class=\"keyword\">int</span> col, <span class=\"keyword\">char</span>[] str, <span class=\"keyword\">int</span> strIdx, <span class=\"keyword\">boolean</span>[] visited)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (row &lt; <span class=\"number\">0</span> || col &lt; <span class=\"number\">0</span> || row &gt;= rows || col &gt;= cols)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> matrixIdx = row * cols + col;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (visited[matrixIdx] || str[strIdx] != matrix[matrixIdx])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strIdx == str.length - <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    visited[matrixIdx] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> result = hasPathHelper(matrix, rows, cols, row - <span class=\"number\">1</span>, col, str, strIdx + <span class=\"number\">1</span>, visited)</span><br><span class=\"line\">                        || hasPathHelper(matrix, rows, cols, row + <span class=\"number\">1</span>, col, str, strIdx + <span class=\"number\">1</span>, visited)</span><br><span class=\"line\">                        || hasPathHelper(matrix, rows, cols, row, col - <span class=\"number\">1</span>, str, strIdx + <span class=\"number\">1</span>, visited)</span><br><span class=\"line\">                        || hasPathHelper(matrix, rows, cols, row, col + <span class=\"number\">1</span>, str, strIdx + <span class=\"number\">1</span>, visited);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!result)</span><br><span class=\"line\">        visited[matrixIdx] = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】滑动窗口的最大值","url":"http://yoursite.com/2017/09/09/【剑指Offer】滑动窗口的最大值/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个数组和滑动窗口的大小，请找出所有滑动窗口里的最大值。例如，如果输入数组{2, 3, 4, 2, 6, 2, 5, 1}及滑动窗口的大小3，那么一共存在6个滑动窗口，它们的最大值分别为{4, 4, 6, 6, 6, 5}。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title\">maxInWindows</span><span class=\"params\">(<span class=\"keyword\">int</span>[] num, <span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">    ArrayList&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num == <span class=\"keyword\">null</span> || num.length &lt; <span class=\"number\">1</span> || size &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    LinkedList&lt;Integer&gt; deque = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; num.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!deque.isEmpty() &amp;&amp; num[i] &gt; num[deque.peekLast()])</span><br><span class=\"line\">            deque.pollLast();</span><br><span class=\"line\"></span><br><span class=\"line\">        deque.offerLast(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i - deque.peekFirst() &gt; size - <span class=\"number\">1</span>)</span><br><span class=\"line\">            deque.pollFirst();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= size - <span class=\"number\">1</span>)</span><br><span class=\"line\">            result.add(num[deque.peekFirst()]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】数据流中的中位数","url":"http://yoursite.com/2017/09/08/【剑指Offer】数据流中的中位数/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序后中间两个数的平均值。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> PriorityQueue&lt;Integer&gt; maxHeap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;(<span class=\"number\">5</span>, <span class=\"keyword\">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o2.compareTo(o1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> PriorityQueue&lt;Integer&gt; minHeap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(Integer num)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (maxHeap.size() == minHeap.size())</span><br><span class=\"line\">        maxHeap.add(num);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        minHeap.add(num);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!minHeap.isEmpty() &amp;&amp; !maxHeap.isEmpty() &amp;&amp; maxHeap.peek() &gt; minHeap.peek()) &#123;</span><br><span class=\"line\">        maxHeap.offer(minHeap.poll());</span><br><span class=\"line\">        minHeap.offer(maxHeap.poll());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Double <span class=\"title\">GetMedian</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (maxHeap.size() &gt; minHeap.size())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">double</span>) maxHeap.peek();</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (maxHeap.peek() + minHeap.peek()) / <span class=\"number\">2.0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】二叉搜索树的第k个结点","url":"http://yoursite.com/2017/09/08/【剑指Offer】二叉搜索树的第k个结点/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一棵二叉搜索树，请找出其中的第k大的结点。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">KthNode</span><span class=\"params\">(TreeNode pRoot, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pRoot == <span class=\"keyword\">null</span> || k &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> KthNodeHelper(pRoot, k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">KthNodeHelper</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    TreeNode node = KthNodeHelper(root.left, k);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++count == k)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\"></span><br><span class=\"line\">    node = KthNodeHelper(root.right, k);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】序列化二叉树","url":"http://yoursite.com/2017/09/08/【剑指Offer】序列化二叉树/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>请实现两个函数，分别用来序列化和反序列化二叉树。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> idx = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">Serialize</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"$,\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sb.append(root.val).append(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">    sb.append(Serialize(root.left));</span><br><span class=\"line\">    sb.append(Serialize(root.right));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">Deserialize</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || str.length() &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    String[] strs = str.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Deserialize(strs);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">Deserialize</span><span class=\"params\">(String[] strs)</span> </span>&#123;</span><br><span class=\"line\">    idx++;</span><br><span class=\"line\">    TreeNode root = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (idx &lt; strs.length &amp;&amp; !strs[idx].equals(<span class=\"string\">\"$\"</span>)) &#123;</span><br><span class=\"line\">        root = <span class=\"keyword\">new</span> TreeNode(Integer.valueOf(strs[idx]));</span><br><span class=\"line\">        root.left = Deserialize(strs);</span><br><span class=\"line\">        root.right = Deserialize(strs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】按之字形顺序打印二叉树","url":"http://yoursite.com/2017/09/08/【剑指Offer】按之字形顺序打印二叉树/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>请实现一个函数按照之字形顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; Print(TreeNode pRoot) &#123;</span><br><span class=\"line\">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pRoot != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        Stack&lt;TreeNode&gt;[] stack = (Stack&lt;TreeNode&gt;[]) <span class=\"keyword\">new</span> Stack[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++)</span><br><span class=\"line\">            stack[i] = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">        stack[idx].push(pRoot);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stack[idx].isEmpty()) &#123;</span><br><span class=\"line\">            ArrayList&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> end = stack[idx].size();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (start++ &lt; end)&#123;</span><br><span class=\"line\">                TreeNode node = stack[idx].pop();</span><br><span class=\"line\">                result.add(node.val);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (idx == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (node.left != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                        stack[<span class=\"number\">1</span>-idx].push(node.left);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (node.right != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                        stack[<span class=\"number\">1</span>-idx].push(node.right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (node.right != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                        stack[<span class=\"number\">1</span>-idx].push(node.right);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (node.left != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                        stack[<span class=\"number\">1</span>-idx].push(node.left);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            idx = <span class=\"number\">1</span> - idx;</span><br><span class=\"line\">            results.add(result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】把二叉树打印成多行","url":"http://yoursite.com/2017/09/08/【剑指Offer】把二叉树打印成多行/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>从上到下按层打印二叉树，同一层的结点按从左到右的顺序打印，每一层打印到一行。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; Print(TreeNode pRoot) &#123;</span><br><span class=\"line\">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pRoot != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        queue.offer(pRoot);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">            ArrayList&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> end = queue.size();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (start++ &lt; end)&#123;</span><br><span class=\"line\">                TreeNode node = queue.poll();</span><br><span class=\"line\">                result.add(node.val);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (node.left != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    queue.offer(node.left);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (node.right != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    queue.offer(node.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            results.add(result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】对称的二叉树","url":"http://yoursite.com/2017/09/08/【剑指Offer】对称的二叉树/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSymmetrical</span><span class=\"params\">(TreeNode pRoot)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pRoot == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> isSymmetricalHelper(pRoot.left, pRoot.right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSymmetricalHelper</span><span class=\"params\">(TreeNode left, TreeNode right)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left == <span class=\"keyword\">null</span> &amp;&amp; right == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (left == <span class=\"keyword\">null</span> || right == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (left.val != right.val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> isSymmetricalHelper(left.left, right.right) &amp;&amp; isSymmetricalHelper(left.right, right.left);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】二叉树的下一个结点","url":"http://yoursite.com/2017/09/08/【剑指Offer】二叉树的下一个结点/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一棵二叉树和其中的一个结点，如何找出中序遍历顺序的下一个结点？树中的结点除了有两个分别指向左右子结点的指针以外，还有一个指向父结点的指针。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeLinkNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeLinkNode left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    TreeLinkNode right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    TreeLinkNode next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    TreeLinkNode(<span class=\"keyword\">int</span> val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeLinkNode <span class=\"title\">GetNext</span><span class=\"params\">(TreeLinkNode pNode)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pNode == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pNode.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        pNode = pNode.right;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (pNode.left != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            pNode = pNode.left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (pNode.next != <span class=\"keyword\">null</span> &amp;&amp; pNode.next.right == pNode)</span><br><span class=\"line\">            pNode = pNode.next;</span><br><span class=\"line\"></span><br><span class=\"line\">        pNode = pNode.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pNode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】删除链表中重复的结点","url":"http://yoursite.com/2017/09/08/【剑指Offer】删除链表中重复的结点/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>在一个排序的链表中，如何删除重复的结点？</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">deleteDuplication</span><span class=\"params\">(ListNode pHead)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pHead == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode current = pHead;</span><br><span class=\"line\">    ListNode prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current != <span class=\"keyword\">null</span> &amp;&amp; current.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current.next.val &gt; current.val) &#123;</span><br><span class=\"line\">            prev = current;</span><br><span class=\"line\">            current = current.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (current.next != <span class=\"keyword\">null</span> &amp;&amp; current.next.val == current.val)</span><br><span class=\"line\">                current = current.next;</span><br><span class=\"line\"></span><br><span class=\"line\">            current = current.next;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prev != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                prev.next = current;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                pHead = current;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pHead;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】链表中环的入口结点","url":"http://yoursite.com/2017/09/08/【剑指Offer】链表中环的入口结点/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>一个链表中包含环，如何找出环的入口结点？</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">EntryNodeOfLoop</span><span class=\"params\">(ListNode pHead)</span> </span>&#123;</span><br><span class=\"line\">    ListNode node = meetingNode(pHead);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = countNodes(node);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> findEntry(pHead, count);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ListNode <span class=\"title\">meetingNode</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode slow = head;</span><br><span class=\"line\">    ListNode fast = head.next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fast == slow)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> slow;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fast.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">        fast = fast.next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">countNodes</span><span class=\"params\">(ListNode node)</span> </span>&#123;</span><br><span class=\"line\">    ListNode current = node.next;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current != node) &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        current = current.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ListNode <span class=\"title\">findEntry</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> count)</span> </span>&#123;</span><br><span class=\"line\">    ListNode slow = head;</span><br><span class=\"line\">    ListNode fast = head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">        fast = fast.next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast != slow) &#123;</span><br><span class=\"line\">        fast = fast.next;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> slow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】字符流中第一个不重复的字符","url":"http://yoursite.com/2017/09/07/【剑指Offer】字符流中第一个不重复的字符/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符“go”时，第一个只出现一次的字符是‘g’。当从该字符流中读出前六个字符“google”时，第一个只出现一次的字符是‘l’。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] occurrence = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">256</span>];</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"keyword\">char</span> ch)</span> </span>&#123;</span><br><span class=\"line\">    index++;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> current = (<span class=\"keyword\">int</span>) ch;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (occurrence[current] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        occurrence[current] = index;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (occurrence[current] &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        occurrence[current] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">char</span> <span class=\"title\">FirstAppearingOnce</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> result = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> min = Integer.MAX_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (occurrence[i] &gt; <span class=\"number\">0</span> &amp;&amp; occurrence[i] &lt; min) &#123;</span><br><span class=\"line\">            result = (<span class=\"keyword\">char</span>) i;</span><br><span class=\"line\">            min = occurrence[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result == <span class=\"string\">'\\0'</span>)</span><br><span class=\"line\">        result = <span class=\"string\">'#'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】表示数值的字符串","url":"http://yoursite.com/2017/09/07/【剑指Offer】表示数值的字符串/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串“+100”、“5e2”、“-123”、“3.1416”及“-1E-16”都表示数值，但“12e”、“1a3.14”、“1.2.3”、“+-5”及“12e+5.4”都不是。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNumeric</span><span class=\"params\">(<span class=\"keyword\">char</span>[] str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || str.length &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isNum = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str[idx] == <span class=\"string\">'+'</span> || str[idx] == <span class=\"string\">'-'</span>)</span><br><span class=\"line\">        idx++;</span><br><span class=\"line\"></span><br><span class=\"line\">    idx = scanNumber(str, idx);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (idx &lt; str.length &amp;&amp; str[idx] == <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">        idx++;</span><br><span class=\"line\"></span><br><span class=\"line\">        idx = scanNumber(str, idx);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (idx &lt; str.length &amp;&amp; (str[idx] == <span class=\"string\">'e'</span> || str[idx] == <span class=\"string\">'E'</span>))</span><br><span class=\"line\">            isNum = isExponential(str, idx + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (idx &lt; str.length &amp;&amp; str[idx] != <span class=\"string\">'e'</span> &amp;&amp; str[idx] != <span class=\"string\">'E'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (idx &lt; str.length &amp;&amp; (str[idx] == <span class=\"string\">'e'</span> || str[idx] == <span class=\"string\">'E'</span>))</span><br><span class=\"line\">        isNum = isExponential(str, idx + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (idx &lt; str.length &amp;&amp; str[idx] != <span class=\"string\">'.'</span> &amp;&amp; str[idx] != <span class=\"string\">'e'</span> &amp;&amp; str[idx] != <span class=\"string\">'E'</span>)</span><br><span class=\"line\">        isNum = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> isNum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">scanNumber</span><span class=\"params\">(<span class=\"keyword\">char</span>[] str, <span class=\"keyword\">int</span> idx)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; idx &lt; str.length; idx++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (str[idx] &lt; <span class=\"string\">'0'</span> || str[idx] &gt; <span class=\"string\">'9'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> idx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> idx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isExponential</span><span class=\"params\">(<span class=\"keyword\">char</span>[] str, <span class=\"keyword\">int</span> idx)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (idx == str.length)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str[idx] == <span class=\"string\">'+'</span> || str[idx] == <span class=\"string\">'-'</span>)</span><br><span class=\"line\">        idx++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (idx == str.length)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    idx = scanNumber(str, idx);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (idx &lt; str.length)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】正则表达式匹配","url":"http://yoursite.com/2017/09/07/【剑指Offer】正则表达式匹配/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>请实现一个函数用来匹配包含‘.’和‘<em>’的正则表达式。模式中的字符‘.’表示任意一个字符，而‘</em>’表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串“aaa”与模式“a.a”和“ab<em>ac</em>a”匹配，但与“aa.a”及“ab*a”均不匹配。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">match</span><span class=\"params\">(<span class=\"keyword\">char</span>[] str, <span class=\"keyword\">char</span>[] pattern)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || pattern == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> matchHelper(str, <span class=\"number\">0</span>, pattern, <span class=\"number\">0</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matchHelper</span><span class=\"params\">(<span class=\"keyword\">char</span>[] str, <span class=\"keyword\">int</span> strIdx, <span class=\"keyword\">char</span>[] pattern, <span class=\"keyword\">int</span> patternIdx)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strIdx == str.length &amp;&amp; patternIdx == pattern.length)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strIdx != str.length &amp;&amp; patternIdx == pattern.length)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (patternIdx + <span class=\"number\">1</span> &lt; pattern.length &amp;&amp; pattern[patternIdx+<span class=\"number\">1</span>] == <span class=\"string\">'*'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (strIdx &lt; str.length &amp;&amp; (str[strIdx] == pattern[patternIdx] || pattern[patternIdx] == <span class=\"string\">'.'</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> matchHelper(str, strIdx, pattern, patternIdx + <span class=\"number\">2</span>)</span><br><span class=\"line\">                    || matchHelper(str , strIdx + <span class=\"number\">1</span>, pattern, patternIdx)</span><br><span class=\"line\">                    || matchHelper(str, strIdx + <span class=\"number\">1</span>, pattern, patternIdx + <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> matchHelper(str, strIdx, pattern, patternIdx + <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strIdx &lt; str.length &amp;&amp; (str[strIdx] == pattern[patternIdx] || pattern[patternIdx] == <span class=\"string\">'.'</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> matchHelper(str, strIdx + <span class=\"number\">1</span>, pattern, patternIdx + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】构建乘积数组","url":"http://yoursite.com/2017/09/07/【剑指Offer】构建乘积数组/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个数组A[0, 1, … , n-1]，请构建一个数组B[0, 1, … , n-1]，其中B中的元素B[i]=A[0]xA[1]x…xA[i-1]xA[i+1]x…xA[n-1]。不能使用除法。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] multiply(<span class=\"keyword\">int</span>[] A) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] B = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[A.length];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A == <span class=\"keyword\">null</span> || A.length &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> B;</span><br><span class=\"line\"></span><br><span class=\"line\">    B[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= A.length - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">        B[i] = A[i-<span class=\"number\">1</span>] * B[i-<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = A.length - <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        temp *= A[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">        B[i] *= temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> B;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】数组中重复的数字","url":"http://yoursite.com/2017/09/07/【剑指Offer】数组中重复的数字/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>在一个长度为n的数组里的所有数字都在0到n-1的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。例如，如果输入长度为7的数组{2, 3, 1, 0, 2, 5, 3}，那么对应的输出是重复的数字2或者3.</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">duplicate</span><span class=\"params\">(<span class=\"keyword\">int</span> numbers[], <span class=\"keyword\">int</span> length, <span class=\"keyword\">int</span>[] duplication)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numbers == <span class=\"keyword\">null</span> || length &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (numbers[i] != i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (numbers[i] == numbers[numbers[i]]) &#123;</span><br><span class=\"line\">                duplication[<span class=\"number\">0</span>] = numbers[i];</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            swap(numbers, i, numbers[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> numbers[], <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">    numbers[i] = numbers[i] ^ numbers[j];</span><br><span class=\"line\">    numbers[j] = numbers[i] ^ numbers[j];</span><br><span class=\"line\">    numbers[i] = numbers[i] ^ numbers[j];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】树中两个结点的最低公共祖先","url":"http://yoursite.com/2017/09/06/【剑指Offer】树中两个结点的最低公共祖先/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入两个树结点，求它们的最低公共祖先。这棵树是普通的树，而且树中的结点没有指向父结点的指针。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    List&lt;TreeNode&gt; children = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">getLastCommonParent</span><span class=\"params\">(TreeNode root, TreeNode node1, TreeNode node2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || node1 == <span class=\"keyword\">null</span> || node2 == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;TreeNode&gt; path1 = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    getPath(path1, root, node1);</span><br><span class=\"line\">    List&lt;TreeNode&gt; path2 = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    getPath(path2, root, node2);</span><br><span class=\"line\"></span><br><span class=\"line\">    Iterator&lt;TreeNode&gt; iterator1 = path1.iterator();</span><br><span class=\"line\">    Iterator&lt;TreeNode&gt; iterator2 = path2.iterator();</span><br><span class=\"line\">    TreeNode parent = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (iterator1.hasNext() &amp;&amp; iterator2.hasNext()) &#123;</span><br><span class=\"line\">        TreeNode n1 = iterator1.next();</span><br><span class=\"line\">        TreeNode n2 = iterator2.next();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n1 != n2)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        parent = n1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> parent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">getPath</span><span class=\"params\">(List&lt;TreeNode&gt; path, TreeNode root, TreeNode node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    path.add(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == node)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (TreeNode child : root.children) &#123;</span><br><span class=\"line\">        getPath(path, child, node);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (path.contains(node))</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!path.contains(node))</span><br><span class=\"line\">        path.remove(path.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】把字符串转换成整数","url":"http://yoursite.com/2017/09/06/【剑指Offer】把字符串转换成整数/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>写一个函数StrToInt，实现把字符串转换成整数的功能。不能使用atoi或者其他类似的库函数。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isInvalid = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">StrToInt</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || str.length() &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        isInvalid = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] array = str.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">long</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> minus = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array[index] == <span class=\"string\">'+'</span>)</span><br><span class=\"line\">        index++;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (array[index] == <span class=\"string\">'-'</span>) &#123;</span><br><span class=\"line\">        minus = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        index++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; index &lt; array.length; index++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (array[index] &lt; <span class=\"string\">'0'</span> || array[index] &gt; <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">            isInvalid = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> flag = minus ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">        result = result * <span class=\"number\">10</span> + flag * (array[index] - <span class=\"string\">'0'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((!minus &amp;&amp; result &gt; Integer.MAX_VALUE) || (minus &amp;&amp; result &lt; Integer.MIN_VALUE)) &#123;</span><br><span class=\"line\">            isInvalid = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】不用加减乘除做加法","url":"http://yoursite.com/2017/09/06/【剑指Offer】不用加减乘除做加法/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>写一个函数，求两个整数之和，要求在函数体内不得使用+、-、x、／四则运算符号。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">Add</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num2 != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = num1 ^ num2;</span><br><span class=\"line\">        num2 = (num1 &amp; num2) &lt;&lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        num1 = sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关问题\"><a href=\"#相关问题\" class=\"headerlink\" title=\"相关问题\"></a>相关问题</h2><p>不使用新的变量，交换两个变量的值。比如有两个变量a、b，希望交换它们的值。有两种不同的办法：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">基于加减法</th>\n<th style=\"text-align:left\">基于异或运算</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">a = a + b</td>\n<td style=\"text-align:left\">a = a ^ b</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">b = a - b</td>\n<td style=\"text-align:left\">b = a ^ b</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">a = a - b</td>\n<td style=\"text-align:left\">a = a ^ b</td>\n</tr>\n</tbody>\n</table>\n","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】求1+2+...+n","url":"http://yoursite.com/2017/09/06/【剑指Offer】求1-2-n/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>求1+2+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">Sum_Solution</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = n;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> end = n &gt; <span class=\"number\">0</span> &amp;&amp; (sum += Sum_Solution(n - <span class=\"number\">1</span>)) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】圆圈中最后剩下的数字","url":"http://yoursite.com/2017/09/05/【剑指Offer】圆圈中最后剩下的数字/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>0, 1, …, n-1这n个数字排成一个圆圈，从数字0开始每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。</p>\n<h2 id=\"经典的解法，用环形链表模拟圆圈\"><a href=\"#经典的解法，用环形链表模拟圆圈\" class=\"headerlink\" title=\"经典的解法，用环形链表模拟圆圈\"></a>经典的解法，用环形链表模拟圆圈</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">LastRemaining_Solution</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || m &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode head = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    ListNode tail = head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        ListNode node = <span class=\"keyword\">new</span> ListNode(i);</span><br><span class=\"line\">        tail.next = node;</span><br><span class=\"line\">        tail = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tail.next = head;</span><br><span class=\"line\">    ListNode current = head;</span><br><span class=\"line\">    ListNode prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">            prev = current;</span><br><span class=\"line\">            current = current.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        prev.next = current.next;</span><br><span class=\"line\">        current = prev.next;</span><br><span class=\"line\">        n--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> current.val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创新的解法，拿到Offer不在话下\"><a href=\"#创新的解法，拿到Offer不在话下\" class=\"headerlink\" title=\"创新的解法，拿到Offer不在话下\"></a>创新的解法，拿到Offer不在话下</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">LastRemaining_Solution</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || m &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//f(n, m) = f'(n-1,m) = [f(n-1,m) + m] % n</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++)</span><br><span class=\"line\">        result = (result + m) % i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】扑克牌的顺子","url":"http://yoursite.com/2017/09/05/【剑指Offer】扑克牌的顺子/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>从扑克牌中随机抽5张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，而大、小王可以看成任意数字。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isContinuous</span><span class=\"params\">(<span class=\"keyword\">int</span>[] numbers)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numbers == <span class=\"keyword\">null</span> || numbers.length &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Arrays.sort(numbers);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> numOfZero = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> numOfGap = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numbers.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numbers[i] == <span class=\"number\">0</span>)</span><br><span class=\"line\">            numOfZero++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (numbers[i] == numbers[i+<span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            numOfGap += numbers[i+<span class=\"number\">1</span>] - numbers[i] - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> numOfZero &gt;= numOfGap ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】n个骰子的点数","url":"http://yoursite.com/2017/09/04/【剑指Offer】n个骰子的点数/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。</p>\n<h2 id=\"基于递归求骰子点数，时间效率不够高\"><a href=\"#基于递归求骰子点数，时间效率不够高\" class=\"headerlink\" title=\"基于递归求骰子点数，时间效率不够高\"></a>基于递归求骰子点数，时间效率不够高</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">PrintProbability</span><span class=\"params\">(<span class=\"keyword\">int</span> number)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (number &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] prob = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">6</span>*number-number+<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">6</span>; i++)</span><br><span class=\"line\">        probability(prob, number, number, i);</span><br><span class=\"line\"></span><br><span class=\"line\">    print(prob, number);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">probability</span><span class=\"params\">(<span class=\"keyword\">int</span>[] prob, <span class=\"keyword\">int</span> number, <span class=\"keyword\">int</span> current, <span class=\"keyword\">int</span> sum)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        prob[sum-number]++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">6</span>; i++)</span><br><span class=\"line\">        probability(prob, number, current - <span class=\"number\">1</span>, sum + i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span>[] prob, <span class=\"keyword\">int</span> number)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> total = Math.pow(<span class=\"number\">6</span>, number);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; prob.length; i++)</span><br><span class=\"line\">        System.out.println(i+number + <span class=\"string\">\": \"</span> + prob[i] / total);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"基于循环求骰子点数，时间性能好\"><a href=\"#基于循环求骰子点数，时间性能好\" class=\"headerlink\" title=\"基于循环求骰子点数，时间性能好\"></a>基于循环求骰子点数，时间性能好</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">PrintProbability</span><span class=\"params\">(<span class=\"keyword\">int</span> number)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (number &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] prob = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>][<span class=\"number\">6</span>*number+<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">6</span>; i++)</span><br><span class=\"line\">        prob[flag][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//f(i,n) = f(i-1,n-1) + f(i-1,n-2) + f(i-1,n-3) + f(i-1,n-4) + f(i-1,n-5) + f(i-1,n-6)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= number; i++) &#123;</span><br><span class=\"line\">        flag = <span class=\"number\">1</span> - flag;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt;= <span class=\"number\">6</span> * i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= <span class=\"number\">6</span> &amp;&amp; k &lt;= j; k++)</span><br><span class=\"line\">                prob[flag][j] += prob[<span class=\"number\">1</span>-flag][j-k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    print(prob[flag], number);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span>[] prob, <span class=\"keyword\">int</span> number)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> total = Math.pow(<span class=\"number\">6</span>, number);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = number; i &lt;= <span class=\"number\">6</span> * number; i++)</span><br><span class=\"line\">        System.out.println(i + <span class=\"string\">\": \"</span> + prob[i] / total);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】翻转单词顺序VS左旋转字符串","url":"http://yoursite.com/2017/09/03/【剑指Offer】翻转单词顺序VS左旋转字符串/","content":"<h2 id=\"题目一\"><a href=\"#题目一\" class=\"headerlink\" title=\"题目一\"></a>题目一</h2><p>输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串”I am a student.”，则输出”student. a am I”。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">ReverseSentence</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || str.length() &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] result = str.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    reverse(result, <span class=\"number\">0</span>, result.length - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (end &lt; result.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result[end] == <span class=\"string\">' '</span>) &#123;</span><br><span class=\"line\">            reverse(result, start, end - <span class=\"number\">1</span>);</span><br><span class=\"line\">            start = ++end;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (end == result.length - <span class=\"number\">1</span>)</span><br><span class=\"line\">            reverse(result, start, end++);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            end++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> String.valueOf(result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">char</span>[] result, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> tmp = result[start];</span><br><span class=\"line\">        result[start] = result[end];</span><br><span class=\"line\">        result[end] = tmp;</span><br><span class=\"line\">        start++;</span><br><span class=\"line\">        end--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"题目二\"><a href=\"#题目二\" class=\"headerlink\" title=\"题目二\"></a>题目二</h2><p>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如输入字符串”abcdefg”和数字2，该函数将返回左旋转2位得到的结果”cdefgab”。</p>\n<h2 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">LeftRotateString</span><span class=\"params\">(String str, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || str.length() &lt; n)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] result = str.toCharArray();</span><br><span class=\"line\">    reverse(result, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    reverse(result, n, result.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    reverse(result, <span class=\"number\">0</span>, result.length - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> String.valueOf(result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">char</span>[] result, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> tmp = result[start];</span><br><span class=\"line\">        result[start] = result[end];</span><br><span class=\"line\">        result[end] = tmp;</span><br><span class=\"line\">        start++;</span><br><span class=\"line\">        end--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】和为s的两个数字VS和为s的连续正数序列","url":"http://yoursite.com/2017/09/02/【剑指Offer】和为s的两个数字VS和为s的连续正数序列/","content":"<h2 id=\"题目一\"><a href=\"#题目一\" class=\"headerlink\" title=\"题目一\"></a>题目一</h2><p>输入一个递增排序的数组和一个数字s，在数组中查找两个数，使得它们的和正好是s。如果有多对数字的和等于s，输出任意一对即可。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title\">FindNumbersWithSum</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> sum)</span> </span>&#123;</span><br><span class=\"line\">    ArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"keyword\">null</span> || array.length &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = array.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (array[start] + array[end] &lt; sum)</span><br><span class=\"line\">            start++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (array[start] + array[end] &gt; sum)</span><br><span class=\"line\">            end--;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            list.add(array[start]);</span><br><span class=\"line\">            list.add(array[end]);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"题目二\"><a href=\"#题目二\" class=\"headerlink\" title=\"题目二\"></a>题目二</h2><p>输入一个正数s，打印出所有和为s的连续正数序列（至少含有两个数）。例如输入15，由于1+2+3+4+5=4+5+6=7+8=15，所以结果打印出3个连续序列1～5、4～6和7～8。</p>\n<h2 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; FindContinuousSequence(<span class=\"keyword\">int</span> sum) &#123;</span><br><span class=\"line\">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum &lt; <span class=\"number\">3</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> results;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> start = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> middle = (sum + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> current = start + end;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt; middle) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current &lt; sum) &#123;</span><br><span class=\"line\">            end++;</span><br><span class=\"line\">            current += end;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current &gt; sum) &#123;</span><br><span class=\"line\">            current -= start;</span><br><span class=\"line\">            start++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ArrayList&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            findContinuousSequence(result, start, end);</span><br><span class=\"line\">            results.add(result);</span><br><span class=\"line\">            current -= start;</span><br><span class=\"line\">            start++;</span><br><span class=\"line\">            end++;</span><br><span class=\"line\">            current += end;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">findContinuousSequence</span><span class=\"params\">(ArrayList&lt;Integer&gt; result, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt;= end; i++)</span><br><span class=\"line\">        result.add(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】数组中只出现一次的数字","url":"http://yoursite.com/2017/09/02/【剑指Offer】数组中只出现一次的数字/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>一个整形数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">FindNumsAppearOnce</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> num1[], <span class=\"keyword\">int</span> num2[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"keyword\">null</span> || array.length &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++)</span><br><span class=\"line\">        result ^= array[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = findFirstBitIsOne(result);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isBitOne(array[i], index))</span><br><span class=\"line\">            num1[<span class=\"number\">0</span>] ^= array[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            num2[<span class=\"number\">0</span>] ^= array[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">findFirstBitIsOne</span><span class=\"params\">(<span class=\"keyword\">int</span> result)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (index &lt; <span class=\"number\">32</span> &amp;&amp; (result &amp; <span class=\"number\">1</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        result &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        index++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBitOne</span><span class=\"params\">(<span class=\"keyword\">int</span> num, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    num &gt;&gt;= index;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (num &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】二叉树的深度","url":"http://yoursite.com/2017/09/02/【剑指Offer】二叉树的深度/","content":"<h2 id=\"题目一\"><a href=\"#题目一\" class=\"headerlink\" title=\"题目一\"></a>题目一</h2><p>输入一棵二叉树的根结点，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">TreeDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> leftDepth = TreeDepth(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rightDepth = TreeDepth(root.right);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> leftDepth &gt; rightDepth ? leftDepth + <span class=\"number\">1</span> : rightDepth + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"题目二\"><a href=\"#题目二\" class=\"headerlink\" title=\"题目二\"></a>题目二</h2><p>输入一棵二叉树的根结点，判断该树是不是平衡二叉树。如果某二叉树中任意结点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。</p>\n<h2 id=\"需要重复遍历结点多次的解法，简单但不足以打动面试官\"><a href=\"#需要重复遍历结点多次的解法，简单但不足以打动面试官\" class=\"headerlink\" title=\"需要重复遍历结点多次的解法，简单但不足以打动面试官\"></a>需要重复遍历结点多次的解法，简单但不足以打动面试官</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">IsBalanced_Solution</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> leftDep = TreeDepth(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rightDep = TreeDepth(root.right);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> IsBalanced_Solution(root.left) &amp;&amp; IsBalanced_Solution(root.right) &amp;&amp; Math.abs(leftDep - rightDep) &lt; <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">TreeDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> leftDepth = TreeDepth(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rightDepth = TreeDepth(root.right);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> leftDepth &gt; rightDepth ? leftDepth + <span class=\"number\">1</span> : rightDepth + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"每个结点只遍历一次的解法，正是面试官喜欢的\"><a href=\"#每个结点只遍历一次的解法，正是面试官喜欢的\" class=\"headerlink\" title=\"每个结点只遍历一次的解法，正是面试官喜欢的\"></a>每个结点只遍历一次的解法，正是面试官喜欢的</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isBalanced = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">IsBalanced_Solution</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    getDepth(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isBalanced;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> leftDep = getDepth(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rightDep = getDepth(root.right);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Math.abs(leftDep - rightDep) &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        isBalanced = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.max(leftDep, rightDep) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】数字在排序数组中出现的次数","url":"http://yoursite.com/2017/09/02/【剑指Offer】数字在排序数组中出现的次数/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>统计一个数字在排序数组中出现的次数。例如输入排序数组{1, 2, 3, 3, 3, 3, 4, 5}和数字3，由于3在这个数组中出现了4次，因此输出4.</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">GetNumberOfK</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array , <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array != <span class=\"keyword\">null</span> || array.length &lt;<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> firstIdx = getFirstK(array, k, <span class=\"number\">0</span>, array.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lastIdx = getLastK(array, k, <span class=\"number\">0</span>, array.length - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (firstIdx != -<span class=\"number\">1</span> &amp;&amp; lastIdx != -<span class=\"number\">1</span>)</span><br><span class=\"line\">            count = lastIdx - firstIdx + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getFirstK</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt; end)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> middle = (start + end) / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array[middle] &lt; k)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getFirstK(array, k, middle + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (array[middle] &gt; k)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getFirstK(array, k, start, middle - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (middle == <span class=\"number\">0</span> || (middle &gt; <span class=\"number\">0</span> &amp;&amp; array[middle - <span class=\"number\">1</span>] != k))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> getFirstK(array, k, start, middle - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getLastK</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt; end)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> middle = (start + end) / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array[middle] &lt; k)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getLastK(array, k, middle + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (array[middle] &gt; k)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getLastK(array, k, start, middle - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (middle == array.length - <span class=\"number\">1</span> || (middle &lt; array.length - <span class=\"number\">1</span> &amp;&amp; array[middle + <span class=\"number\">1</span>] != k))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> getLastK(array, k, middle + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】两个链表的第一个公共结点","url":"http://yoursite.com/2017/09/01/【剑指Offer】两个链表的第一个公共结点/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入两个链表，找出它们的第一个公共结点。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">FindFirstCommonNode</span><span class=\"params\">(ListNode pHead1, ListNode pHead2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> firstLen = getListLength(pHead1);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> secondLen = getListLength(pHead2);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> diff = firstLen - secondLen;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (diff &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        pHead1 = findFirstNodeHelper(pHead1, diff);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diff &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        pHead2 = findFirstNodeHelper(pHead2, -diff);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pHead1 != <span class=\"keyword\">null</span> &amp;&amp; pHead2 != <span class=\"keyword\">null</span> &amp;&amp; pHead1 != pHead2) &#123;</span><br><span class=\"line\">        pHead1 = pHead1.next;</span><br><span class=\"line\">        pHead2 = pHead2.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pHead1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getListLength</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (head != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        head = head.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ListNode <span class=\"title\">findFirstNodeHelper</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> step)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (step != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        step--;</span><br><span class=\"line\">        head = head.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】数组中的逆序对","url":"http://yoursite.com/2017/09/01/【剑指Offer】数组中的逆序对/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>在数组中的两个数字如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对，输入一个数组，求出这个数组中的逆序对的总数。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">InversePairs</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"keyword\">null</span> || array.length &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] aux = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[array.length];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++)</span><br><span class=\"line\">        aux[i] = array[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sortAndCount(array, aux, <span class=\"number\">0</span>, array.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">sortAndCount</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span>[] aux, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start == end)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (start + end) / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> leftCount = sortAndCount(array, aux, start, mid);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rightCount = sortAndCount(array, aux, mid + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> splitCount = countSplitInv(array, aux, start, mid, end);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (leftCount + rightCount + splitCount) % <span class=\"number\">1000000007</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">countSplitInv</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span>[] aux, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = start;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j &gt; mid)</span><br><span class=\"line\">            array[i] = aux[k++];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k &gt; end)</span><br><span class=\"line\">            array[i] = aux[j++];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (aux[j] &lt; aux[k])</span><br><span class=\"line\">            array[i] = aux[j++];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            count += mid - j + <span class=\"number\">1</span>;</span><br><span class=\"line\">            array[i] = aux[k++];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">1000000007</span>)</span><br><span class=\"line\">                count %= <span class=\"number\">1000000007</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt;= end; i++)</span><br><span class=\"line\">        aux[i] = array[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】第一个只出现一次的字符","url":"http://yoursite.com/2017/08/31/【剑指Offer】第一个只出现一次的字符/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>在字符串中找出第一个只出现一次的字符。如输入“abaccdeff”，则输出’b’。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">FirstNotRepeatingChar</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || str.length() == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Map&lt;Character, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class=\"line\">        Character ch = str.charAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map.containsKey(ch))</span><br><span class=\"line\">            map.put(ch, map.get(ch) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            map.put(ch, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class=\"line\">        Character ch = str.charAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map.get(ch) == <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h2><ol>\n<li><p>定义一个函数，输入两个字符串，从第一个字符串中删除在第二个字符串中出现过的所有字符。例如从第一个字符串“We are students. ”中删除在第二个字符串“aeiou”中出现过的字符得到的结果是“W r Stdnts. ”。为了解决这个问题，可以创建一个用数组实现的简单哈希表来存储第二个字符串。这样从头到尾扫描第一个字符串的每一个字符时，用O(1)时间就能判断出该字符是不是在第二个字符中。如果第一个字符串的长度是n，那么总的时间复杂度是O(n)。</p>\n</li>\n<li><p>定义一个函数，删除字符串中所有重复出现的字符。例如输入“google”，删除重复的字符之后的结果是“gole”。可以创建一个用布尔型数组实现的简单的哈希表。数组中的元素的意义是其下标看做ASCII码后对应的字母在字符串中是否已经出现。先把数组中所有的元素都设为false。以“google”为例，当扫描到第一个g时，g的ASCII码是103，那么把数组中下标为103的元素设为true。当扫描到第二个g时，发现数组中下标为103的元素的值是true，就知道g在前面已经出现了。也就是说，用O(1)时间就能判断出每个字符是否在前面已经出现过。如果字符串的长度是n，那么总的时间复杂度是O(n)。</p>\n</li>\n<li><p>在英语中，如果两个单词中出现的字母相同，并且每个字母出现的次数也相同，那么这两个单词互为变位词（Anagram）。例如silent与listen、evil与live等互为变位词。请完成一个函数，判断输入的两个字符串是不是互为变位词。可以创建一个用数组实现的简单哈希表，用来统计字符串中每个字符出现的次数。当扫描到第一个字符串中的每个字符时，为哈希表对应的项的值增加1.接下来扫描第二个字符串，扫描到每个字符时，为哈希表对应的项的值减去1.如果扫描完第二个字符串后，哈希表中所有的值都是0，那么这两个字符串就互为变位词。</p>\n</li>\n</ol>\n","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】丑数","url":"http://yoursite.com/2017/08/31/【剑指Offer】丑数/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>把只包含因子2、3和5的数称作丑数（Ugly Number）。求按从小到大的顺序的第1500个丑数。例如6、8都是丑数，但14不是，因为它包含因子7.习惯上把1当做第一个丑数。</p>\n<h2 id=\"逐个判断每个整数是不是丑数的解法，直观但不够高效\"><a href=\"#逐个判断每个整数是不是丑数的解法，直观但不够高效\" class=\"headerlink\" title=\"逐个判断每个整数是不是丑数的解法，直观但不够高效\"></a>逐个判断每个整数是不是丑数的解法，直观但不够高效</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">GetUglyNumber_Solution</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> number = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> currentIdx = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (currentIdx &lt; index) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isUglyNumber(number))</span><br><span class=\"line\">            currentIdx++;</span><br><span class=\"line\"></span><br><span class=\"line\">        number++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isUglyNumber</span><span class=\"params\">(<span class=\"keyword\">int</span> number)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (number % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">        number /= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (number % <span class=\"number\">3</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">        number /= <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (number % <span class=\"number\">5</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">        number /= <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> number == <span class=\"number\">1</span> ? <span class=\"keyword\">true</span> :<span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建数组保存已经找到的丑数，用空间换时间的解法\"><a href=\"#创建数组保存已经找到的丑数，用空间换时间的解法\" class=\"headerlink\" title=\"创建数组保存已经找到的丑数，用空间换时间的解法\"></a>创建数组保存已经找到的丑数，用空间换时间的解法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">GetUglyNumber_Solution</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] array = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[index];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t5 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    array[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">        array[i] = Math.min(array[t2] * <span class=\"number\">2</span>, Math.min(array[t3] * <span class=\"number\">3</span>, array[t5] * <span class=\"number\">5</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(array[i] == array[t2] * <span class=\"number\">2</span>)</span><br><span class=\"line\">            t2++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (array[i] == array[t3] * <span class=\"number\">3</span>)</span><br><span class=\"line\">            t3++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (array[i] == array[t5] * <span class=\"number\">5</span>)</span><br><span class=\"line\">            t5++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> array[index - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】把数组排成最小的数","url":"http://yoursite.com/2017/08/31/【剑指Offer】把数组排成最小的数/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3, 32, 321}，则打印出这3个数字能排成的最小数字321323。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">PrintMinNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] numbers)</span> </span>&#123;</span><br><span class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    String[] str = <span class=\"keyword\">new</span> String[numbers.length];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numbers.length; i++)</span><br><span class=\"line\">        str[i] = String.valueOf(numbers[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    Arrays.sort(str, <span class=\"keyword\">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(String o1, String o2)</span> </span>&#123;</span><br><span class=\"line\">            String m = o1 + o2;</span><br><span class=\"line\">            String n = o2 + o1;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> m.compareTo(n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.length; i++)</span><br><span class=\"line\">        sb.append(str[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】从1到n整数中1出现的次数","url":"http://yoursite.com/2017/08/31/【剑指Offer】从1到n整数中1出现的次数/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入一个整数n，求从1到n这n个整数的十进制表示中1出现的次数。例如输入12，从1到12这些整数中包含1的数字有1，10，11和12，1一共出现了5次。</p>\n<h2 id=\"不考虑时间效率的解法，靠它想拿Offer有点难\"><a href=\"#不考虑时间效率的解法，靠它想拿Offer有点难\" class=\"headerlink\" title=\"不考虑时间效率的解法，靠它想拿Offer有点难\"></a>不考虑时间效率的解法，靠它想拿Offer有点难</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">NumberOf1Between1AndN_Solution</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        count += NumberOf1(i);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">NumberOf1</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n % <span class=\"number\">10</span> == <span class=\"number\">1</span>)</span><br><span class=\"line\">            count++;</span><br><span class=\"line\"></span><br><span class=\"line\">        n /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"从数字规律着手明显提高时间效率的解法，能让面试官耳目一新\"><a href=\"#从数字规律着手明显提高时间效率的解法，能让面试官耳目一新\" class=\"headerlink\" title=\"从数字规律着手明显提高时间效率的解法，能让面试官耳目一新\"></a>从数字规律着手明显提高时间效率的解法，能让面试官耳目一新</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">NumberOf1Between1AndN_Solution</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> currentN = n;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (currentN &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> current = currentN % <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> high = currentN / <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> low = n - currentN * index;</span><br><span class=\"line\"></span><br><span class=\"line\">        count += high * index;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">            count += index;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == <span class=\"number\">1</span>)</span><br><span class=\"line\">            count += low + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        index *= <span class=\"number\">10</span>;</span><br><span class=\"line\">        currentN /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】连续子数组的最大和","url":"http://yoursite.com/2017/08/30/【剑指Offer】连续子数组的最大和/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入一个整形数组，数组里有正数也有负数。数组中一个或连续的多个整数组成一个子数组。求所有子数组的和的最大值。要求时间复杂度为O(n)。</p>\n<h2 id=\"举例分析数组的规律\"><a href=\"#举例分析数组的规律\" class=\"headerlink\" title=\"举例分析数组的规律\"></a>举例分析数组的规律</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">FindGreatestSumOfSubArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"keyword\">null</span> || array.length &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = Integer.MIN_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            sum = array[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            sum += array[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum &gt; max)</span><br><span class=\"line\">            max = sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"应用动态规划法\"><a href=\"#应用动态规划法\" class=\"headerlink\" title=\"应用动态规划法\"></a>应用动态规划法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">FindGreatestSumOfSubArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"keyword\">null</span> || array.length &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = Integer.MIN_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] s = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[array.length];</span><br><span class=\"line\">    s[<span class=\"number\">0</span>] = array[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">        s[i] = Math.max(array[i], s[i - <span class=\"number\">1</span>] + array[i]);</span><br><span class=\"line\">        max = Math.max(s[i] , max);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】最小的K个数","url":"http://yoursite.com/2017/08/29/【剑指Offer】最小的K个数/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入n个整数，找出其中最小的k个数。例如输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4.</p>\n<h2 id=\"O-n-的算法，只有当我们可以修改输入的数组时可用\"><a href=\"#O-n-的算法，只有当我们可以修改输入的数组时可用\" class=\"headerlink\" title=\"O(n)的算法，只有当我们可以修改输入的数组时可用\"></a>O(n)的算法，只有当我们可以修改输入的数组时可用</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title\">GetLeastNumbers_Solution</span><span class=\"params\">(<span class=\"keyword\">int</span>[] input, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    ArrayList&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (input == <span class=\"keyword\">null</span> || input.length &lt;= <span class=\"number\">0</span> || k &gt; input.length || k &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = input.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> pivot = Partition(input, left, right);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pivot != k - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pivot &lt; k - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            left = pivot + <span class=\"number\">1</span>;</span><br><span class=\"line\">            pivot = Partition(input, left, right);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            right = pivot - <span class=\"number\">1</span>;</span><br><span class=\"line\">            pivot = Partition(input, left, right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++)</span><br><span class=\"line\">        result.add(input[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">Partition</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = start + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = start + <span class=\"number\">1</span>; j &lt;= end; j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (array[j] &lt; array[start]) &#123;</span><br><span class=\"line\">            Swap(array, i, j);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Swap(array, start, --i);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == j)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    array[i] = array[i] ^ array[j];</span><br><span class=\"line\">    array[j] = array[i] ^ array[j];</span><br><span class=\"line\">    array[i] = array[j] ^ array[i];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"O-nlogk-的算法，特别适合处理海量数据\"><a href=\"#O-nlogk-的算法，特别适合处理海量数据\" class=\"headerlink\" title=\"O(nlogk)的算法，特别适合处理海量数据\"></a>O(nlogk)的算法，特别适合处理海量数据</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title\">GetLeastNumbers_Solution</span><span class=\"params\">(<span class=\"keyword\">int</span>[] input, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    ArrayList&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (input == <span class=\"keyword\">null</span> || input.length &lt;= <span class=\"number\">0</span> || k &gt; input.length || k &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    PriorityQueue&lt;Integer&gt; maxHeap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;(k, <span class=\"keyword\">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> o2.compareTo(o1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; input.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (maxHeap.size() &lt; k)</span><br><span class=\"line\">            maxHeap.offer(input[i]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (input[i] &lt; maxHeap.peek()) &#123;</span><br><span class=\"line\">            maxHeap.poll();</span><br><span class=\"line\">            maxHeap.offer(input[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Integer i : maxHeap)</span><br><span class=\"line\">        result.add(i);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】数组中出现次数超过一半的数字","url":"http://yoursite.com/2017/08/28/【剑指Offer】数组中出现次数超过一半的数字/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1，2，3，2，2，2，5，4，2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2.</p>\n<h2 id=\"基于Partition函数的O-n-算法\"><a href=\"#基于Partition函数的O-n-算法\" class=\"headerlink\" title=\"基于Partition函数的O(n)算法\"></a>基于Partition函数的O(n)算法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">MoreThanHalfNum_Solution</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"keyword\">null</span> || array.length &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = array.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> middle = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> pivot = Partition(array, left, right);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pivot != middle) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pivot &lt; middle) &#123;</span><br><span class=\"line\">            left = pivot + <span class=\"number\">1</span>;</span><br><span class=\"line\">            pivot = Partition(array, left, right);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            right = pivot - <span class=\"number\">1</span>;</span><br><span class=\"line\">            pivot = Partition(array, left, right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = array[middle];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!CheckMoreThanHalf(array, result))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">Partition</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = start + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = start + <span class=\"number\">1</span>; j &lt;= end; j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (array[j] &lt; array[start]) &#123;</span><br><span class=\"line\">            Swap(array, i, j);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Swap(array, start, --i);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == j)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    array[i] = array[i] ^ array[j];</span><br><span class=\"line\">    array[j] = array[i] ^ array[j];</span><br><span class=\"line\">    array[i] = array[j] ^ array[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">CheckMoreThanHalf</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> result)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result == array[i])</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">2</span> * count &lt;= array.length)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"根据数组特点找出O-n-的算法\"><a href=\"#根据数组特点找出O-n-的算法\" class=\"headerlink\" title=\"根据数组特点找出O(n)的算法\"></a>根据数组特点找出O(n)的算法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">MoreThanHalfNum_Solution</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"keyword\">null</span> || array.length &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = array[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            count = <span class=\"number\">1</span>;</span><br><span class=\"line\">            result = array[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (array[i] == result)</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            count--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!CheckMoreThanHalf(array, result))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">CheckMoreThanHalf</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> result)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result == array[i])</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">2</span> * count &lt;= array.length)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】字符串的排列","url":"http://yoursite.com/2017/08/28/【剑指Offer】字符串的排列/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入一个字符串，打印出该字符串中字符的所有排列。例如输入字符串abc，则打印出由字符a、b、c所能排列出来的所有字符串abc、acb、bac、bca、cab和cba。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;String&gt; <span class=\"title\">Permutation</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    ArrayList&lt;String&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    HashSet&lt;String&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str != <span class=\"keyword\">null</span> &amp;&amp; str.length() != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        Permutation(str.toCharArray(), <span class=\"number\">0</span>, set);</span><br><span class=\"line\">        result.addAll(set);</span><br><span class=\"line\">        Collections.sort(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Permutation</span><span class=\"params\">(<span class=\"keyword\">char</span>[] str, <span class=\"keyword\">int</span> pos, HashSet&lt;String&gt; result)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pos == str.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        result.add(String.valueOf(str));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = pos; i &lt; str.length; i++)&#123;</span><br><span class=\"line\">        swap(str, i, pos);</span><br><span class=\"line\">        Permutation(str, pos + <span class=\"number\">1</span>, result);</span><br><span class=\"line\">        swap(str, pos, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">char</span>[] str, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> temp = str[i];</span><br><span class=\"line\">    str[i] = str[j];</span><br><span class=\"line\">    str[j] = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h2><ol>\n<li><p>输入一个含有8个数字的数组，判断有没有可能把这8个数字分别放到正方体的8个顶点上，使得正方体上三组相对的面上的4个顶点的和都相等。</p>\n</li>\n<li><p>在8x8的国际象棋上摆放8个皇后，使其不能相互攻击，即任意两个皇后不得处在同一行、同一列或者同一对角线上。请问总共有多少种符合条件的摆法？</p>\n</li>\n</ol>\n","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】二叉搜索树与双向链表","url":"http://yoursite.com/2017/08/27/【剑指Offer】二叉搜索树与双向链表/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> TreeNode last = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">Convert</span><span class=\"params\">(TreeNode pRootOfTree)</span> </span>&#123;</span><br><span class=\"line\">    ConvertNode(pRootOfTree);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (last != <span class=\"keyword\">null</span> &amp;&amp; last.left != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        last = last.left;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> last;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ConvertNode</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ConvertNode(root.left);</span><br><span class=\"line\"></span><br><span class=\"line\">    root.left = last;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (last != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        last.right = root;</span><br><span class=\"line\">    last = root;</span><br><span class=\"line\"></span><br><span class=\"line\">    ConvertNode(root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"React Demo","url":"http://yoursite.com/2017/06/15/React-Demo/","content":"<p>React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable and easier to debug.</p>\n<p>Build encapsulated components that manage their own state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the DOM.</p>\n<h2 id=\"build-an-interactive-tic-tac-toe-game\"><a href=\"#build-an-interactive-tic-tac-toe-game\" class=\"headerlink\" title=\"build an interactive tic-tac-toe game\"></a>build an interactive tic-tac-toe game</h2><p>We have three components:</p>\n<ul>\n<li>Square</li>\n<li>Board</li>\n<li>Game</li>\n</ul>\n<p>The Square component renders a single button, the Board renders 9 squares, and the Game component renders a board with some placeholders.</p>\n<h3 id=\"index-html\"><a href=\"#index-html\" class=\"headerlink\" title=\"index.html\"></a>index.html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>reactDemo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/react@latest/dist/react.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/react-dom@latest/dist/react-dom.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/babel-standalone@6.15.0/babel.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/babel\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Game</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div className=<span class=\"string\">\"game\"</span>&gt;</span><br><span class=\"line\">                &lt;div className=<span class=\"string\">\"game-board\"</span>&gt;</span><br><span class=\"line\">                    &lt;Board /&gt;</span><br><span class=\"line\">                &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>div&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Board</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">            squares: <span class=\"built_in\">Array</span>(<span class=\"number\">9</span>).fill(<span class=\"literal\">null</span>),</span><br><span class=\"line\">            xIsNext: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    handleClick(i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> squares = <span class=\"keyword\">this</span>.state.squares.slice();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (calculateWinner(squares) || squares[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        squares[i] = <span class=\"keyword\">this</span>.state.xIsNext ? <span class=\"string\">'X'</span> : <span class=\"string\">'O'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">            squares: squares,</span><br><span class=\"line\">            xIsNext: !<span class=\"keyword\">this</span>.state.xIsNext,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    renderSquare(i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;Square</span><br><span class=\"line\">                value=&#123;<span class=\"keyword\">this</span>.state.squares[i]&#125;</span><br><span class=\"line\">                onClick=&#123;() =&gt; <span class=\"keyword\">this</span>.handleClick(i)&#125;</span><br><span class=\"line\">            /&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> winner = calculateWinner(<span class=\"keyword\">this</span>.state.squares);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> status;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (winner)</span><br><span class=\"line\">            status = <span class=\"string\">'Winner: '</span> + winner;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            status = <span class=\"string\">'Next player: '</span> + (<span class=\"keyword\">this</span>.state.xIsNext ? <span class=\"string\">'X'</span> : <span class=\"string\">'O'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;div className=<span class=\"string\">\"status\"</span>&gt;&#123;status&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                &lt;div className=\"board-row\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                    &#123;this.renderSquare(0)&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">                    &#123;this.renderSquare(1)&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">                    &#123;this.renderSquare(2)&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">                &lt;/</span>div&gt;</span><br><span class=\"line\">                &lt;div className=<span class=\"string\">\"board-row\"</span>&gt;</span><br><span class=\"line\">                    &#123;<span class=\"keyword\">this</span>.renderSquare(<span class=\"number\">3</span>)&#125;</span><br><span class=\"line\">                    &#123;<span class=\"keyword\">this</span>.renderSquare(<span class=\"number\">4</span>)&#125;</span><br><span class=\"line\">                    &#123;<span class=\"keyword\">this</span>.renderSquare(<span class=\"number\">5</span>)&#125;</span><br><span class=\"line\">                &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                &lt;div className=\"board-row\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                    &#123;this.renderSquare(6)&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">                    &#123;this.renderSquare(7)&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">                    &#123;this.renderSquare(8)&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">                &lt;/</span>div&gt;</span><br><span class=\"line\">            &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        );</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function Square(props) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return (</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;button className=\"square\" onClick=&#123;props.onClick&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &#123;props.value&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>button&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calculateWinner</span>(<span class=\"params\">squares</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> lines = [</span><br><span class=\"line\">        [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">        [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>],</span><br><span class=\"line\">        [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>],</span><br><span class=\"line\">        [<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">        [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>],</span><br><span class=\"line\">        [<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>],</span><br><span class=\"line\">        [<span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>],</span><br><span class=\"line\">        [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; lines.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> [a, b, c] = lines[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (squares[a] &amp;&amp; squares[a] === squares[b] &amp;&amp; squares[a] === squares[c]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> squares[a];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &lt;Game /&gt;,</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h2 id=\"result\"><a href=\"#result\" class=\"headerlink\" title=\"result\"></a>result</h2><p><img src=\"http://i2.muimg.com/1949/905018b5283fe2ba.png\" alt=\"Markdown\"></p>\n","categories":["React"],"tags":["JavaScript","React"]},{"title":"Spring Boot Demo","url":"http://yoursite.com/2017/06/07/Spring-Boot-Demo/","content":"<p>Spring Boot offers a fast way to build applications. It looks at your classpath and at beans you have configured, makes reasonable assumptions about what you’re missing, and adds it. With Spring Boot you can focus more on business features and less on infrastructure.</p>\n<h2 id=\"Build-with-Maven\"><a href=\"#Build-with-Maven\" class=\"headerlink\" title=\"Build with Maven\"></a>Build with Maven</h2><h3 id=\"directory-structure\"><a href=\"#directory-structure\" class=\"headerlink\" title=\"directory structure\"></a>directory structure</h3><p><img src=\"http://i1.piimg.com/1949/9bb98f88651f90bc.png\" alt=\"Markdown\"></p>\n<h3 id=\"pom-xml\"><a href=\"#pom-xml\" class=\"headerlink\" title=\"pom.xml\"></a>pom.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springbootDemo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"execute\"><a href=\"#execute\" class=\"headerlink\" title=\"execute\"></a>execute</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn package</span><br></pre></td></tr></table></figure>\n<h2 id=\"Create-a-simple-web-application\"><a href=\"#Create-a-simple-web-application\" class=\"headerlink\" title=\"Create a simple web application\"></a>Create a simple web application</h2><h3 id=\"create-a-web-controller\"><a href=\"#create-a-web-controller\" class=\"headerlink\" title=\"create a web controller\"></a>create a web controller</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> hello;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Greetings from Spring Boot!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"create-an-Application-class\"><a href=\"#create-an-Application-class\" class=\"headerlink\" title=\"create an Application class\"></a>create an Application class</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> hello;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"result\"><a href=\"#result\" class=\"headerlink\" title=\"result\"></a>result</h3><p><img src=\"http://i1.piimg.com/1949/c57405de9ca43f8c.png\" alt=\"Markdown\"></p>\n<h2 id=\"Add-Tests\"><a href=\"#Add-Tests\" class=\"headerlink\" title=\"Add Tests\"></a>Add Tests</h2><p>mock the HTTP request cycle</p>\n<h3 id=\"a-simple-unit-test\"><a href=\"#a-simple-unit-test\" class=\"headerlink\" title=\"a simple unit test\"></a>a simple unit test</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> hello;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.hamcrest.Matchers.equalTo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.MediaType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureMockMvc</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloControllerTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MockMvc mvc;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getHello</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        mvc.perform(MockMvcRequestBuilders.get(<span class=\"string\">\"/\"</span>).accept(MediaType.APPLICATION_JSON))</span><br><span class=\"line\">                .andExpect(status().isOk())</span><br><span class=\"line\">                .andExpect(content().string(equalTo(<span class=\"string\">\"Greetings from Spring Boot!\"</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"a-very-simple-full-stack-integration-test\"><a href=\"#a-very-simple-full-stack-integration-test\" class=\"headerlink\" title=\"a very simple full-stack integration test\"></a>a very simple full-stack integration test</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> hello;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.hamcrest.Matchers.equalTo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertThat;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Before;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.embedded.LocalServerPort;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.web.client.TestRestTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.ResponseEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span>(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloControllerIT</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@LocalServerPort</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> port;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> URL base;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestRestTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.base = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"http://localhost:\"</span> + port + <span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getHello</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ResponseEntity&lt;String&gt; response = template.getForEntity(base.toString(),</span><br><span class=\"line\">                String.class);</span><br><span class=\"line\">        assertThat(response.getBody(), equalTo(<span class=\"string\">\"Greetings from Spring Boot!\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"result-1\"><a href=\"#result-1\" class=\"headerlink\" title=\"result\"></a>result</h3><p><img src=\"http://i1.piimg.com/1949/e1314d724d8d1e0e.png\" alt=\"Markdown\"></p>\n","categories":["Spring Boot"],"tags":["Java","Spring Boot"]},{"title":"【剑指Offer】复杂链表的复制","url":"http://yoursite.com/2017/05/16/【剑指Offer】复杂链表的复制/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>请实现函数ComplexListNode Clone(ComplexListNode pHead)，复制一个复杂链表。在复杂链表中，每个结点除了有一个m_pNext指针指向下一个结点外，还有一个m_pSibling指向链表中的任意结点或者NULL。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> label;</span><br><span class=\"line\">    RandomListNode next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    RandomListNode random = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    RandomListNode(<span class=\"keyword\">int</span> label) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.label = label;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RandomListNode <span class=\"title\">Clone</span><span class=\"params\">(RandomListNode pHead)</span> </span>&#123;</span><br><span class=\"line\">    CloneNodes(pHead);</span><br><span class=\"line\">    ConnectSiblingNodes(pHead);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ReconnectNodes(pHead);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">CloneNodes</span><span class=\"params\">(RandomListNode pHead)</span> </span>&#123;</span><br><span class=\"line\">    RandomListNode node = pHead;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        RandomListNode clone = <span class=\"keyword\">new</span> RandomListNode(node.label);</span><br><span class=\"line\">        clone.next = node.next;</span><br><span class=\"line\">        node.next = clone;</span><br><span class=\"line\">        node = clone.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ConnectSiblingNodes</span><span class=\"params\">(RandomListNode pHead)</span> </span>&#123;</span><br><span class=\"line\">    RandomListNode node = pHead;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.random != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            node.next.random = node.random.next;</span><br><span class=\"line\"></span><br><span class=\"line\">        node = node.next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> RandomListNode <span class=\"title\">ReconnectNodes</span><span class=\"params\">(RandomListNode pHead)</span> </span>&#123;</span><br><span class=\"line\">    RandomListNode node = pHead;</span><br><span class=\"line\">    RandomListNode cloneNode = <span class=\"keyword\">null</span>, cloneHead = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        cloneHead = cloneNode = node.next;</span><br><span class=\"line\">        node.next = cloneNode.next;</span><br><span class=\"line\">        node = node.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        cloneNode.next = node.next;</span><br><span class=\"line\">        cloneNode = cloneNode.next;</span><br><span class=\"line\">        node.next = cloneNode.next;</span><br><span class=\"line\">        node = node.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> cloneHead;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】二叉树中和为某一值的路径","url":"http://yoursite.com/2017/05/16/【剑指Offer】二叉树中和为某一值的路径/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入一棵二叉树和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; FindPath(TreeNode root, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; paths = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    ArrayList&lt;Integer&gt; path = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    FindPath(root, target, <span class=\"number\">0</span>, path, paths);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> paths;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">FindPath</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> sum, ArrayList&lt;Integer&gt; path, ArrayList&lt;ArrayList&lt;Integer&gt;&gt; paths)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> currentSum = sum + root.val;</span><br><span class=\"line\">    path.add(root.val);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentSum == target &amp;&amp; root.left == <span class=\"keyword\">null</span> &amp;&amp; root.right == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        paths.add(<span class=\"keyword\">new</span> ArrayList(path));</span><br><span class=\"line\"></span><br><span class=\"line\">    FindPath(root.left, target, currentSum, path, paths);</span><br><span class=\"line\">    FindPath(root.right, target, currentSum, path, paths);</span><br><span class=\"line\"></span><br><span class=\"line\">    path.remove(path.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】二叉搜索树的后序遍历序列","url":"http://yoursite.com/2017/05/16/【剑指Offer】二叉搜索树的后序遍历序列/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则返回true，否则返回false。假设输入的数组的任意两个数字都互不相同。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">VerifySquenceOfBST</span><span class=\"params\">(<span class=\"keyword\">int</span>[] sequence)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sequence.length == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> VerifySquenceOfBST(sequence, <span class=\"number\">0</span>, sequence.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">VerifySquenceOfBST</span><span class=\"params\">(<span class=\"keyword\">int</span>[] sequence, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt;= end)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> idx = start;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; idx &lt; end; idx++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sequence[idx] &gt; sequence[end])</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = idx + <span class=\"number\">1</span>; i &lt; end; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sequence[i] &lt; sequence[end])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> VerifySquenceOfBST(sequence, start, idx - <span class=\"number\">1</span>) &amp;&amp; VerifySquenceOfBST(sequence, idx, end - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h2><p>输入一个整数数组，判断该数组是不是某二叉搜索树的前序遍历的结果。这和前面问题的后序遍历很类似，只是在前序遍历得到的序列中，第一个数字是根结点的值。</p>\n","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】从上往下打印二叉树","url":"http://yoursite.com/2017/05/16/【剑指Offer】从上往下打印二叉树/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>从上往下打印出二叉树的每个结点，同一层的结点按照从左到右的顺序打印。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title\">PrintFromTopToBottom</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    ArrayList&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    queue.offer(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty())&#123;</span><br><span class=\"line\">        TreeNode node = queue.poll();</span><br><span class=\"line\">        result.add(node.val);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.left != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            queue.offer(node.left);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.right != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            queue.offer(node.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h2><p>如何广度优先遍历一个有向图》这同样也可以基于队列实现。树是图的一种特殊退化形式，从上到下按层遍历二叉树，从本质上来说就是广度优先遍历二叉树。</p>\n","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】栈的压入、弹出序列","url":"http://yoursite.com/2017/05/15/【剑指Offer】栈的压入、弹出序列/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1、2、3、4、5是某栈的压栈序列，序列4、5、3、2、1是该压栈序列对应的一个弹出序列，但4、3、5、1、2就不可能是该压栈序列的弹出序列。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">IsPopOrder</span><span class=\"params\">(<span class=\"keyword\">int</span>[] pushA, <span class=\"keyword\">int</span>[] popA)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> popPos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pushA.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stack.isEmpty() || stack.peek() != popA[popPos])</span><br><span class=\"line\">            stack.push(pushA[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() == popA[popPos])&#123;</span><br><span class=\"line\">            stack.pop();</span><br><span class=\"line\">            popPos++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> stack.isEmpty();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】包含min函数的栈","url":"http://yoursite.com/2017/05/15/【剑指Offer】包含min函数的栈/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的min函数。在该栈中，调用min、push及pop的时间复杂度都是O(1)。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stack&lt;Integer&gt; data = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">Stack&lt;Integer&gt; min = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> node)</span> </span>&#123;</span><br><span class=\"line\">    data.push(node);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (min.size() == <span class=\"number\">0</span> || node &lt; min.peek())</span><br><span class=\"line\">        min.push(node);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        min.push(min.peek());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    data.pop();</span><br><span class=\"line\">    min.pop();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">top</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data.peek();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min.peek();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】顺时针打印矩阵","url":"http://yoursite.com/2017/05/14/【剑指Offer】顺时针打印矩阵/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title\">printMatrix</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rows = matrix.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> columns = matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ArrayList&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">2</span> * start &lt; rows &amp;&amp; <span class=\"number\">2</span> * start &lt; columns)&#123;</span><br><span class=\"line\">        printMatrixInCircle(result, matrix, start);</span><br><span class=\"line\">        start++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">printMatrixInCircle</span><span class=\"params\">(ArrayList&lt;Integer&gt; result, <span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> start)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rows = matrix.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> columns = matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> endX = columns - start - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> endY = rows - start - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt;= endX; i++)</span><br><span class=\"line\">        result.add(matrix[start][i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &lt; endY)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start + <span class=\"number\">1</span>; i &lt;= endY; i++)</span><br><span class=\"line\">            result.add(matrix[i][endX]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &lt; endX &amp;&amp; start &lt; endY)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = endX - <span class=\"number\">1</span>; i &gt;= start; i--)</span><br><span class=\"line\">            result.add(matrix[endY][i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &lt; endY - <span class=\"number\">1</span> &amp;&amp; start &lt; endX)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = endY - <span class=\"number\">1</span>; i &gt; start; i--)</span><br><span class=\"line\">            result.add(matrix[i][start]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】二叉树的镜像","url":"http://yoursite.com/2017/05/14/【剑指Offer】二叉树的镜像/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>请完成一个函数，输入一个二叉树，该函数输出它的镜像。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Mirror</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.left == <span class=\"keyword\">null</span> &amp;&amp; root.right == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    TreeNode tmp = root.left;</span><br><span class=\"line\">    root.left = root.right;</span><br><span class=\"line\">    root.right = tmp;</span><br><span class=\"line\"></span><br><span class=\"line\">    Mirror(root.left);</span><br><span class=\"line\">    Mirror(root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】树的子结构","url":"http://yoursite.com/2017/05/14/【剑指Offer】树的子结构/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入两棵二叉树A和B，判断B是不是A的子结构。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    TreeNode left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    TreeNode right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">HasSubtree</span><span class=\"params\">(TreeNode root1, TreeNode root2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root1 != <span class=\"keyword\">null</span> &amp;&amp; root2 != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root1.val == root2.val)</span><br><span class=\"line\">            result = DoesTree1HasTree2(root1, root2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result == <span class=\"keyword\">false</span>)</span><br><span class=\"line\">            result = HasSubtree(root1.left, root2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result == <span class=\"keyword\">false</span>)</span><br><span class=\"line\">            result = HasSubtree(root1.right, root2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">DoesTree1HasTree2</span><span class=\"params\">(TreeNode root1, TreeNode root2)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root2 == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root1 == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root1.val != root2.val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> DoesTree1HasTree2(root1.left, root2.left) &amp;&amp; DoesTree1HasTree2(root1.right, root2.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】合并两个排序的链表","url":"http://yoursite.com/2017/05/14/【剑指Offer】合并两个排序的链表/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入两个递增排序的链表，合并这两个链表并使新链表中的结点仍然是按照递增排序的。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">Merge</span><span class=\"params\">(ListNode list1, ListNode list2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list1 == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list2;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (list2 == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list1;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode head = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list1.val &lt; list2.val)&#123;</span><br><span class=\"line\">        head = list1;</span><br><span class=\"line\">        head.next = Merge(list1.next, list2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        head = list2;</span><br><span class=\"line\">        head.next = Merge(list1, list2.next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】反转链表","url":"http://yoursite.com/2017/05/14/【剑指Offer】反转链表/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>定义一个函数，输入一个链表的头结点，反转该链表并输出反转后链表的头结点。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">ReverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    ListNode current = head;</span><br><span class=\"line\">    ListNode previous = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    ListNode tail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        ListNode next = current.next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            tail = current;</span><br><span class=\"line\"></span><br><span class=\"line\">        current.next = previous;</span><br><span class=\"line\">        previous = current;</span><br><span class=\"line\">        current = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tail;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】链表中倒数第k个结点","url":"http://yoursite.com/2017/05/14/【剑指Offer】链表中倒数第k个结点/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入一个链表，输出该链表中倒数第k个结点。例如一个链表有6个结点，从头结点开始它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个结点是值为4的结点。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">FindKthToTail</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k == <span class=\"number\">0</span> || head == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode ahead = head;</span><br><span class=\"line\">    ListNode behind = head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ahead.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        ahead = ahead.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ahead.next != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        ahead = ahead.next;</span><br><span class=\"line\">        behind = behind.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> behind;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h2><ol>\n<li><p>求链表的中间结点。如果链表中结点总数为奇数，返回中间结点；如果结点总数是偶数，返回中间两个结点的任意一个。我们也可以定义两个指针，同时从链表的头结点出发，一个指针一次走一步，另一个指针一次走两步。当走得快的指针走到链表的末尾时，走得慢的指针正好在链表的中间。</p>\n</li>\n<li><p>判断一个单向链表是否形成了环形结构。定义两个指针，同时从链表的头结点出发，一个指针一次走一步，另一个指针一次走两步。如果走得快的指针追上了走得慢的指针，那么链表就是环形链表；如果走得快的指针走到了链表的末尾都没有追上第一个指针，那么链表就不是环形链表。</p>\n</li>\n</ol>\n","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】调整数组顺序使奇数位于偶数前面","url":"http://yoursite.com/2017/05/13/【剑指Offer】调整数组顺序使奇数位于偶数前面/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。</p>\n<h2 id=\"只完成基本功能的解法，仅适用于初级程序员\"><a href=\"#只完成基本功能的解法，仅适用于初级程序员\" class=\"headerlink\" title=\"只完成基本功能的解法，仅适用于初级程序员\"></a>只完成基本功能的解法，仅适用于初级程序员</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reOrderArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> begin = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = array.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (begin &lt; end)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (begin &lt; end &amp;&amp; (array[begin] &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>)</span><br><span class=\"line\">            begin++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (begin &lt; end &amp;&amp; (array[end] &amp; <span class=\"number\">1</span>) != <span class=\"number\">1</span>)</span><br><span class=\"line\">            end--;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (begin &lt; end)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = array[end];</span><br><span class=\"line\">            array[end] = array[begin];</span><br><span class=\"line\">            array[begin] = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"考虑可扩展性的解法，能秒杀Offer\"><a href=\"#考虑可扩展性的解法，能秒杀Offer\" class=\"headerlink\" title=\"考虑可扩展性的解法，能秒杀Offer\"></a>考虑可扩展性的解法，能秒杀Offer</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reOrderArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> begin = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = array.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (begin &lt; end)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (begin &lt; end &amp;&amp; isOdd(array[begin]))</span><br><span class=\"line\">            begin++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (begin &lt; end &amp;&amp; !isOdd(array[end]))</span><br><span class=\"line\">            end--;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (begin &lt; end)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = array[end];</span><br><span class=\"line\">            array[end] = array[begin];</span><br><span class=\"line\">            array[begin] = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOdd</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (n &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"本题扩展\"><a href=\"#本题扩展\" class=\"headerlink\" title=\"本题扩展\"></a>本题扩展</h2><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reOrderArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] aux = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[array.length];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> countOdd = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">        aux[i] = array[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isOdd(array[i]))</span><br><span class=\"line\">            countOdd++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> oddPos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> evenPos = countOdd;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; aux.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isOdd(aux[i]))</span><br><span class=\"line\">            array[oddPos++] = aux[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            array[evenPos++] = aux[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOdd</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (n &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】在O(1)时间删除链表结点","url":"http://yoursite.com/2017/05/13/【剑指Offer】在O-1-时间删除链表结点/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定单向链表的头指针和一个结点指针，定义一个函数在O(1)时间删除该结点。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteNode</span><span class=\"params\">(ListNode head, ListNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.next != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        node.val = node.next.val;</span><br><span class=\"line\">        node.next = node.next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (head == node)</span><br><span class=\"line\">        head = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (head.next != node)</span><br><span class=\"line\">            head = head.next;</span><br><span class=\"line\"></span><br><span class=\"line\">        head.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】打印1到最大的n位数","url":"http://yoursite.com/2017/05/13/【剑指Offer】打印1到最大的n位数/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入数字n，按顺序打印出从1到最大的n为十进制数。比如输入3，则打印出1、2、3一直到最大的3位数即999。</p>\n<h2 id=\"跳进面试官的陷阱\"><a href=\"#跳进面试官的陷阱\" class=\"headerlink\" title=\"跳进面试官的陷阱\"></a>跳进面试官的陷阱</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Print1ToMaxOfNDigits</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> number = (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">10</span>, n);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; number; i++)</span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"在字符串上模拟数字加法的解法，绕过陷阱才能拿到Offer\"><a href=\"#在字符串上模拟数字加法的解法，绕过陷阱才能拿到Offer\" class=\"headerlink\" title=\"在字符串上模拟数字加法的解法，绕过陷阱才能拿到Offer\"></a>在字符串上模拟数字加法的解法，绕过陷阱才能拿到Offer</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Print1ToMaxOfNDigits</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] number = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[n];</span><br><span class=\"line\">    Arrays.fill(number, <span class=\"string\">'0'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!Increment(number))&#123;</span><br><span class=\"line\">        PrintNumber(number);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">Increment</span><span class=\"params\">(<span class=\"keyword\">char</span>[] number)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> carry = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = number.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = number[i] - <span class=\"string\">'0'</span> + carry;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == number.length - <span class=\"number\">1</span>)</span><br><span class=\"line\">            sum++;</span><br><span class=\"line\"></span><br><span class=\"line\">        carry = sum / <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (carry == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            number[i] = (<span class=\"keyword\">char</span>) (sum % <span class=\"number\">10</span> + <span class=\"string\">'0'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            number[i] = (<span class=\"keyword\">char</span>) (sum + <span class=\"string\">'0'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">PrintNumber</span><span class=\"params\">(<span class=\"keyword\">char</span>[] number)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isBeginning0 = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; number.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isBeginning0 == <span class=\"keyword\">true</span> &amp;&amp; number[i] != <span class=\"string\">'0'</span>)</span><br><span class=\"line\">            isBeginning0 = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isBeginning0 == <span class=\"keyword\">false</span>)</span><br><span class=\"line\">            System.out.print(number[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"把问题转换成数字排列的解法，递归让代码更简洁\"><a href=\"#把问题转换成数字排列的解法，递归让代码更简洁\" class=\"headerlink\" title=\"把问题转换成数字排列的解法，递归让代码更简洁\"></a>把问题转换成数字排列的解法，递归让代码更简洁</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Print1ToMaxOfNDigits</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] number = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[n];</span><br><span class=\"line\">    Arrays.fill(number, <span class=\"string\">'0'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">        number[<span class=\"number\">0</span>] = (<span class=\"keyword\">char</span>) (i + <span class=\"string\">'0'</span>);</span><br><span class=\"line\">        Print1ToMaxOfNDigits(number, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Print1ToMaxOfNDigits</span><span class=\"params\">(<span class=\"keyword\">char</span>[] number, <span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index == number.length - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        PrintNumber(number);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">9</span>; i++) &#123;</span><br><span class=\"line\">        number[index+<span class=\"number\">1</span>] = (<span class=\"keyword\">char</span>) (i + <span class=\"string\">'0'</span>);</span><br><span class=\"line\">        Print1ToMaxOfNDigits(number, index + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">PrintNumber</span><span class=\"params\">(<span class=\"keyword\">char</span>[] number)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isBeginning0 = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; number.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isBeginning0 == <span class=\"keyword\">true</span> &amp;&amp; number[i] != <span class=\"string\">'0'</span>)</span><br><span class=\"line\">            isBeginning0 = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isBeginning0 == <span class=\"keyword\">false</span>)</span><br><span class=\"line\">            System.out.print(number[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isBeginning0 == <span class=\"keyword\">false</span>)</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h2><p>定义一个函数，在该函数中可以实现任意两个整数的加法。由于没有限定输入两个数的大小范围，我们也要把它当做大数问题来处理。</p>\n","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】数值的整数次方","url":"http://yoursite.com/2017/05/12/【剑指Offer】数值的整数次方/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>实现函数double Power(double base, int exponent)，求base的exponent次方。不得使用库函数，同时不需要考虑大数问题。</p>\n<h2 id=\"自以为题目简单的解法\"><a href=\"#自以为题目简单的解法\" class=\"headerlink\" title=\"自以为题目简单的解法\"></a>自以为题目简单的解法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">Power</span><span class=\"params\">(<span class=\"keyword\">double</span> base, <span class=\"keyword\">int</span> exponent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> result = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= Math.abs(exponent); i++)</span><br><span class=\"line\">        result *= base;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exponent &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        result = <span class=\"number\">1</span> / result;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"全面又高效的解法，确保我们能拿到Offer\"><a href=\"#全面又高效的解法，确保我们能拿到Offer\" class=\"headerlink\" title=\"全面又高效的解法，确保我们能拿到Offer\"></a>全面又高效的解法，确保我们能拿到Offer</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">Power</span><span class=\"params\">(<span class=\"keyword\">double</span> base, <span class=\"keyword\">int</span> exponent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exponent == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> base;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (exponent == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">double</span> result = Power(base, Math.abs(exponent) &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    result *= result;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((exponent &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>)</span><br><span class=\"line\">        result *= base;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exponent &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        result = <span class=\"number\">1</span> / result;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】二进制中1的个数","url":"http://yoursite.com/2017/05/12/【剑指Offer】二进制中1的个数/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>请实现一个函数，输入一个整数，输出该数二进制表示中1的个数。例如把9表示成二进制是1001，有2位是1。因此如果输入9，该函数输出2。</p>\n<h2 id=\"可能引起死循环的解法\"><a href=\"#可能引起死循环的解法\" class=\"headerlink\" title=\"可能引起死循环的解法\"></a>可能引起死循环的解法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">NumberOf1</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((n &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>)</span><br><span class=\"line\">            count++;</span><br><span class=\"line\"></span><br><span class=\"line\">        n = n &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"常规解法\"><a href=\"#常规解法\" class=\"headerlink\" title=\"常规解法\"></a>常规解法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">NumberOf1</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (flag != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((n &amp; flag) == flag)</span><br><span class=\"line\">            count++;</span><br><span class=\"line\"></span><br><span class=\"line\">        flag = flag &lt;&lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"能给面试官带来惊喜的解法\"><a href=\"#能给面试官带来惊喜的解法\" class=\"headerlink\" title=\"能给面试官带来惊喜的解法\"></a>能给面试官带来惊喜的解法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">NumberOf1</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        n = n &amp; (n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h2><ol>\n<li><p>用一条语句判断一个整数是不是2的整数次方。一个整数如果是2的整数次方，那么它的二进制表示中有且只有一位是1，而其他所有位都是0.根据前面的分析，把这个整数减去1之后再和它自己做与运算，这个整数中唯一的1就会变成0.</p>\n</li>\n<li><p>输入两个整数m和n，计算需要改变m的二进制表示中的多少位才能得到n。比如10的二进制表示为1010，13的二进制表示为1101，需要改变1010中的3位才能得到1101.我们可以分为两步解决这个问题：第一步求这两个数的异或，第二步统计异或结果中1的位数。</p>\n</li>\n</ol>\n","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】斐波那契数列","url":"http://yoursite.com/2017/05/12/【剑指Offer】斐波那契数列/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>写一个函数，输入n，求斐波那契（Fibonacci）数列的第n项。</p>\n<h2 id=\"效率很低的解法，挑剔的面试官不会喜欢\"><a href=\"#效率很低的解法，挑剔的面试官不会喜欢\" class=\"headerlink\" title=\"效率很低的解法，挑剔的面试官不会喜欢\"></a>效率很低的解法，挑剔的面试官不会喜欢</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">Fibonacci</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> || n == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Fibonacci(n - <span class=\"number\">1</span>) + Fibonacci(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"面试官期待的实用解法\"><a href=\"#面试官期待的实用解法\" class=\"headerlink\" title=\"面试官期待的实用解法\"></a>面试官期待的实用解法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">Fibonacci</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> || n == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> fib1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> fib2 = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> current = fib1 + fib2;</span><br><span class=\"line\">        fib1 = fib2;</span><br><span class=\"line\">        fib2 = current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fib2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"时间复杂度O-logn-但不够实用的解法\"><a href=\"#时间复杂度O-logn-但不够实用的解法\" class=\"headerlink\" title=\"时间复杂度O(logn)但不够实用的解法\"></a>时间复杂度O(logn)但不够实用的解法</h2><h2 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h2><h3 id=\"跳台阶\"><a href=\"#跳台阶\" class=\"headerlink\" title=\"跳台阶\"></a>跳台阶</h3><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">JumpFloor</span><span class=\"params\">(<span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target == <span class=\"number\">1</span> || target == <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> JumpFloor(target - <span class=\"number\">1</span>) + JumpFloor(target - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"变态跳台阶\"><a href=\"#变态跳台阶\" class=\"headerlink\" title=\"变态跳台阶\"></a>变态跳台阶</h3><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。此时该青蛙跳上一个n级的台阶总共有多少种跳法？ </p>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">JumpFloorII</span><span class=\"params\">(<span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target == <span class=\"number\">0</span> || target == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * JumpFloorII(target - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"矩形覆盖\"><a href=\"#矩形覆盖\" class=\"headerlink\" title=\"矩形覆盖\"></a>矩形覆盖</h3><p>我们可以用2x1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2x1的小矩形无重叠地覆盖一个2xn的大矩形，总共有多少种方法？</p>\n<h3 id=\"实现-2\"><a href=\"#实现-2\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">RectCover</span><span class=\"params\">(<span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target == <span class=\"number\">0</span> || target == <span class=\"number\">1</span> || target == <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> RectCover(target - <span class=\"number\">1</span>) + RectCover(target - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】旋转数组的最小数字","url":"http://yoursite.com/2017/05/12/【剑指Offer】旋转数组的最小数字/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minNumberInRotateArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = array.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = left;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (array[left] &gt;= array[right])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (right - left == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            mid = right;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (array[mid] == array[left] &amp;&amp; array[mid] == array[right])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> minInOrder(array, left, right);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (array[mid] &gt;= array[left])</span><br><span class=\"line\">            left = mid;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (array[mid] &lt;= array[right])</span><br><span class=\"line\">            right = mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> array[mid];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">minInOrder</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> min = array[left];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = left + <span class=\"number\">1</span>; i &lt;= right; i++)</span><br><span class=\"line\">        min = Math.min(min, array[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】用两个栈实现队列","url":"http://yoursite.com/2017/05/11/【剑指Offer】用两个栈实现队列/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>用两个栈实现一个队列。分别完成在队列尾部插入结点和在队列头部删除结点的功能。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stack&lt;Integer&gt; stack1 = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\">Stack&lt;Integer&gt; stack2 = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> node)</span> </span>&#123;</span><br><span class=\"line\">    stack1.push(node);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stack2.isEmpty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stack1.isEmpty())</span><br><span class=\"line\">            stack2.push(stack1.pop());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> stack2.pop();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h2><p>用两个队列实现一个栈。</p>\n","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】重建二叉树","url":"http://yoursite.com/2017/05/11/【剑指Offer】重建二叉树/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建出二叉树并输出它的头结点。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">reConstructBinaryTree</span><span class=\"params\">(<span class=\"keyword\">int</span>[] pre, <span class=\"keyword\">int</span>[] in)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reConstructBinaryTree(pre, in, <span class=\"number\">0</span>, pre.length - <span class=\"number\">1</span>, <span class=\"number\">0</span>, in.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">reConstructBinaryTree</span><span class=\"params\">(<span class=\"keyword\">int</span>[] pre, <span class=\"keyword\">int</span>[] in, <span class=\"keyword\">int</span> startPreorder, <span class=\"keyword\">int</span> endPreorder, <span class=\"keyword\">int</span> startInorder, <span class=\"keyword\">int</span> endInorder)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (startPreorder &gt; endPreorder || startInorder &gt; endInorder)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    TreeNode node = <span class=\"keyword\">new</span> TreeNode(pre[startPreorder]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = startInorder; i &lt;= endInorder; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (in[i] == pre[startPreorder])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> leftLength = i - startInorder;</span><br><span class=\"line\">            node.left = reConstructBinaryTree(pre, in, startPreorder + <span class=\"number\">1</span>, startPreorder + leftLength, startInorder, i - <span class=\"number\">1</span>);</span><br><span class=\"line\">            node.right = reConstructBinaryTree(pre, in, startPreorder + leftLength + <span class=\"number\">1</span>, endPreorder, i + <span class=\"number\">1</span>, endInorder);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】从尾到头打印链表","url":"http://yoursite.com/2017/05/11/【剑指Offer】从尾到头打印链表/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>输入一个链表的头结点，从尾到头反过来打印出每个结点的值。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title\">printListFromTailToHead</span><span class=\"params\">(ListNode listNode)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (listNode != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        printListFromTailToHead(listNode.next);</span><br><span class=\"line\">        list.add(listNode.val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】替换空格","url":"http://yoursite.com/2017/05/10/【剑指Offer】替换空格/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>请实现一个函数，把字符串中的每个空格替换成“%20”。例如输入“We are happy.”，则输出“We%20are%20happy.“。</p>\n<h2 id=\"时间复杂度为O-n-2-的解法，不足以拿到Offer\"><a href=\"#时间复杂度为O-n-2-的解法，不足以拿到Offer\" class=\"headerlink\" title=\"时间复杂度为O(n^2)的解法，不足以拿到Offer\"></a>时间复杂度为O(n^2)的解法，不足以拿到Offer</h2><h2 id=\"时间复杂度为O-n-的解法，搞定Offer就靠它了\"><a href=\"#时间复杂度为O-n-的解法，搞定Offer就靠它了\" class=\"headerlink\" title=\"时间复杂度为O(n)的解法，搞定Offer就靠它了\"></a>时间复杂度为O(n)的解法，搞定Offer就靠它了</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">replaceSpace</span><span class=\"params\">(StringBuffer str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> originalLength = str.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> numberOfBlank = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; originalLength; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (str.charAt(i) == <span class=\"string\">' '</span>)</span><br><span class=\"line\">            numberOfBlank++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> newLength = originalLength + <span class=\"number\">2</span> * numberOfBlank;</span><br><span class=\"line\">    str.setLength(newLength);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> indexOfOriginal = originalLength - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> indexOfNew = newLength - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (indexOfNew &gt; indexOfOriginal)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (str.charAt(indexOfOriginal) == <span class=\"string\">' '</span>)&#123;</span><br><span class=\"line\">            str.setCharAt(indexOfNew, <span class=\"string\">'0'</span>);</span><br><span class=\"line\">            str.setCharAt(--indexOfNew, <span class=\"string\">'2'</span>);</span><br><span class=\"line\">            str.setCharAt(--indexOfNew, <span class=\"string\">'%'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            str.setCharAt(indexOfNew, str.charAt(indexOfOriginal));</span><br><span class=\"line\"></span><br><span class=\"line\">        indexOfNew--;</span><br><span class=\"line\">        indexOfOriginal--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h2><p>有两个排序的数组A1和A2，内存在A1的末尾有足够多的空余空间容纳A2。请实现一个函数，把A2中的所有数字插入到A1中并且所有的数字是排序的。</p>\n","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】二维数组中的查找","url":"http://yoursite.com/2017/05/10/【剑指Offer】二维数组中的查找/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">Find</span><span class=\"params\">(<span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span>[][] array)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rows = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> columns = array[<span class=\"number\">0</span>].length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (rows &lt; array.length &amp;&amp; columns &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (array[rows][columns] &lt; target)</span><br><span class=\"line\">            rows++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (array[rows][columns] &gt; target)</span><br><span class=\"line\">            columns--;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【剑指Offer】实现Singleton模式","url":"http://yoursite.com/2017/05/09/【剑指Offer】实现Singleton模式/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>设计一个类，我们只能生成该类的一个实例。</p>\n<h2 id=\"不好的解法一：只适用于单线程环境\"><a href=\"#不好的解法一：只适用于单线程环境\" class=\"headerlink\" title=\"不好的解法一：只适用于单线程环境\"></a>不好的解法一：只适用于单线程环境</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton1</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton1 instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton1 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton1();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"不好的解法二：虽然在多线程环境中能工作但效率不高\"><a href=\"#不好的解法二：虽然在多线程环境中能工作但效率不高\" class=\"headerlink\" title=\"不好的解法二：虽然在多线程环境中能工作但效率不高\"></a>不好的解法二：虽然在多线程环境中能工作但效率不高</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton2</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton2 instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton2 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton2();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"可行的解法：加同步锁前后两次判断实例是否已存在\"><a href=\"#可行的解法：加同步锁前后两次判断实例是否已存在\" class=\"headerlink\" title=\"可行的解法：加同步锁前后两次判断实例是否已存在\"></a>可行的解法：加同步锁前后两次判断实例是否已存在</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton3</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton3 instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton3 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton3.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> Singleton3();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"强烈推荐的解法一：利用静态构造函数\"><a href=\"#强烈推荐的解法一：利用静态构造函数\" class=\"headerlink\" title=\"强烈推荐的解法一：利用静态构造函数\"></a>强烈推荐的解法一：利用静态构造函数</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton4</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton4 instance = <span class=\"keyword\">new</span> Singleton4();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton4</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton4 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"强烈推荐的解法二：实现按需创建实例\"><a href=\"#强烈推荐的解法二：实现按需创建实例\" class=\"headerlink\" title=\"强烈推荐的解法二：实现按需创建实例\"></a>强烈推荐的解法二：实现按需创建实例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton5</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton5</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton5 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Nested.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nested</span></span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton5 instance = <span class=\"keyword\">new</span> Singleton5();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm","剑指Offer"],"tags":["OJ","Algorithm"]},{"title":"【算法】图","url":"http://yoursite.com/2017/04/16/【算法】图/","content":"<h2 id=\"union-find算法\"><a href=\"#union-find算法\" class=\"headerlink\" title=\"union-find算法\"></a>union-find算法</h2><h3 id=\"动态连通性\"><a href=\"#动态连通性\" class=\"headerlink\" title=\"动态连通性\"></a>动态连通性</h3><p><img src=\"http://i1.piimg.com/1949/7830aa780246348a.png\" alt=\"Markdown\"></p>\n<h3 id=\"quick-find算法\"><a href=\"#quick-find算法\" class=\"headerlink\" title=\"quick-find算法\"></a>quick-find算法</h3><h4 id=\"示意\"><a href=\"#示意\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i2.muimg.com/1949/9456a8293d32c9ef.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">union</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> pID = find(p);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> qID = find(q);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pID == qID)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; id.length; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (id[i] == pID)</span><br><span class=\"line\">\t\t\tid[i] = qID;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcount--;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> id[p];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>在quick-find算法中，每次find调用只需要访问数组一次，而归并两个分量的union操作访问数组的次数在N+3到2N+1之间。</p>\n<h3 id=\"quick-union算法\"><a href=\"#quick-union算法\" class=\"headerlink\" title=\"quick-union算法\"></a>quick-union算法</h3><h4 id=\"示意-1\"><a href=\"#示意-1\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i2.muimg.com/1949/23a364290eea1782.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">union</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> pRoot = find(p);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> qRoot = find(q);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pRoot == qRoot)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tid[pRoot] = qRoot;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcount--;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (id[p] != p)</span><br><span class=\"line\">\t\tp = id[p];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> id[p];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p><img src=\"http://i2.muimg.com/1949/d63e558f3cd8e654.png\" alt=\"Markdown\"></p>\n<p>quick-union算法中的find方法访问数组的次数为1加上给定触点所对应的节点的深度的两倍。union和connected访问数组的次数为两次find操作（如果union中给定的两个触点分别在不同的树中则还需要加1）。</p>\n<h3 id=\"加权quick-union算法\"><a href=\"#加权quick-union算法\" class=\"headerlink\" title=\"加权quick-union算法\"></a>加权quick-union算法</h3><p>记录每一棵树的大小并总是将较小的树连接到较大的树上。</p>\n<h4 id=\"示意-2\"><a href=\"#示意-2\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/a3c8a2c34bb44f5c.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-2\"><a href=\"#实现-2\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnionFind</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] size;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UnionFind</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t\tcount = n;</span><br><span class=\"line\">\t\tid = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">\t\tsize = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">\t\t\tid[i] = i;</span><br><span class=\"line\">\t\t\tsize[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">connected</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> find(p) == find(q);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">union</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> pRoot = find(p);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> qRoot = find(q);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (pRoot == qRoot)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (size[pRoot] &lt; size[qRoot])&#123;</span><br><span class=\"line\">\t\t\tid[pRoot] = qRoot;</span><br><span class=\"line\">\t\t\tsize[qRoot] += size[pRoot];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tid[qRoot] = pRoot;</span><br><span class=\"line\">\t\t\tsize[pRoot] += size[qRoot];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tcount--;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (id[p] != p)</span><br><span class=\"line\">\t\t\tp = id[p];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id[p];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>对于N个触点，加权quick-union算法构造的森林中的任意节点的深度最多为lgN。</p>\n<p>对于加权quick-union算法和N个触点，在最坏情况下find、connected和union的成本的增长数量级为lgN。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><img src=\"http://i1.piimg.com/1949/974c6a77edb3dacf.png\" alt=\"Markdown\"></p>\n<h2 id=\"无向图\"><a href=\"#无向图\" class=\"headerlink\" title=\"无向图\"></a>无向图</h2><h3 id=\"深度优先搜索\"><a href=\"#深度优先搜索\" class=\"headerlink\" title=\"深度优先搜索\"></a>深度优先搜索</h3><p>要搜索一幅图，只需用一个递归方法来遍历所有顶点。在访问其中一个顶点时：</p>\n<ol>\n<li>将它标记为已访问</li>\n<li>递归地访问它的所有没有被标记过的邻居顶点</li>\n</ol>\n<p>如果图是连通的，每个连接链表中的元素都会被检查到。</p>\n<h4 id=\"示意-3\"><a href=\"#示意-3\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/0264195b993311fb.png\" alt=\"Markdown\"><br><img src=\"http://i1.piimg.com/1949/7a07a3fd3f50eb8d.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-3\"><a href=\"#实现-3\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DepthFirstPaths</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> s;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] edgeTo;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DepthFirstPaths</span><span class=\"params\">(Graph g, <span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.s = s;</span><br><span class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</span><br><span class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[g.V()];</span><br><span class=\"line\">\t\tdfs(g, s);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Graph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)&#123;</span><br><span class=\"line\">\t\t\t\tedgeTo[w] = v;</span><br><span class=\"line\">\t\t\t\tdfs(g, w);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> marked[v];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">pathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!hasPathTo(v))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tStack&lt;Integer&gt; path = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\">\t\tpath.push(v);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (v != s)&#123;</span><br><span class=\"line\">\t\t\tpath.push(edgeTo[v]);</span><br><span class=\"line\">\t\t\tv = edgeTo[v];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> path;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"特点-3\"><a href=\"#特点-3\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>深度优先搜索标记与起点连通的所有顶点所需的时间和顶点的度数之和成正比。</p>\n<p>使用深度优先搜索得到从给定起点到任意标记顶点的路径所需的时间与路径的长度成正比。</p>\n<p>单点路径：给定一幅图和一个起点s，回答“从s到给定目的顶点v是否存在一条路径？如果有，找出这条路径。”等类似问题。</p>\n<h3 id=\"广度优先搜索\"><a href=\"#广度优先搜索\" class=\"headerlink\" title=\"广度优先搜索\"></a>广度优先搜索</h3><p>使用一个队列来保存所有已经被标记过但其邻接表还未被检查过的顶点。先将起点加入队列，然后重复以下步骤直到队列为空：</p>\n<ol>\n<li>取队列中的下一个顶点v并标记它</li>\n<li>将与v相邻的所有未被标记过的顶点加入队列</li>\n</ol>\n<h4 id=\"示意-4\"><a href=\"#示意-4\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/3c2eaf4cb946acf8.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-4\"><a href=\"#实现-4\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BreadthFirstPaths</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> s;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] edgeTo;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BreadthFirstPaths</span><span class=\"params\">(Graph g, <span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.s = s;</span><br><span class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</span><br><span class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[g.V()];</span><br><span class=\"line\">\t\tbfs(g, s);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(Graph g, <span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">\t\tQueue&lt;Integer&gt; queue = <span class=\"keyword\">new</span> Queue&lt;Integer&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tmarked[s] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\tqueue.enqueue(s);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(!queue.isEmpty())&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> v = queue.dequeue();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tmarked[w] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t\tqueue.enqueue(w);</span><br><span class=\"line\">\t\t\t\t\tedgeTo[w] = v;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> marked[v];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">pathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!hasPathTo(v))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tStack&lt;Integer&gt; path = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\">\t\tpath.push(v);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (v != s)&#123;</span><br><span class=\"line\">\t\t\tpath.push(edgeTo[v]);</span><br><span class=\"line\">\t\t\tv = edgeTo[v];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> path;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"特点-4\"><a href=\"#特点-4\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>对于从s可达的任意顶点v，广度优先搜索都能找到一条从s到v的最短路径（没有其他从s到v的路径所含的边比这条路径更少）。</p>\n<p>广度优先搜索所需的时间在最坏情况下和V+E成正比。</p>\n<p>单点最短路径：给定一幅图和一个起点s，回答“从s到给定目的顶点v是否存在一条路径？如果有，找出其中最短的那条（所含边数最少）。”等类似问题。</p>\n<h4 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h4><p>在搜索中都会先将起点存入数据结构中，然后重复以下步骤直到数据结构被清空：</p>\n<ol>\n<li>取其中的下一个顶点并标记它</li>\n<li>将v的所有相邻而又未被标记的顶点加入数据结构</li>\n</ol>\n<p>这两个算法的不同之处仅在于从数据结构中获取下一个顶点的规则（对于广度优先搜索来说是最早加入的顶点，对于深度优先搜索来说是最晚加入的顶点）。</p>\n<h3 id=\"连通分量\"><a href=\"#连通分量\" class=\"headerlink\" title=\"连通分量\"></a>连通分量</h3><p>深度优先搜索的直接应用是找出一幅图的所有连通分量。它能够将所有顶点切分为等价类。</p>\n<h4 id=\"示意-5\"><a href=\"#示意-5\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/639ea2cba5992960.png\" alt=\"Markdown\"><br><img src=\"http://i4.buimg.com/1949/e7a39bc32cca0ce8.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-5\"><a href=\"#实现-5\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConnectedComponents</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] id;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConnectedComponents</span><span class=\"params\">(Graph g)</span></span>&#123;</span><br><span class=\"line\">\t\tcount = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</span><br><span class=\"line\">\t\tid = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[g.V()];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> s = <span class=\"number\">0</span>; s &lt; g.V(); s++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[s] == <span class=\"keyword\">false</span>)&#123;</span><br><span class=\"line\">\t\t\t\tdfs(g, s);</span><br><span class=\"line\">\t\t\t\tcount++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Graph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\tid[v] = count;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)</span><br><span class=\"line\">\t\t\t\tdfs(g, w);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">connected</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id[v] == id[w];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">id</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id[v];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"特点-5\"><a href=\"#特点-5\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>深度优先搜索的预处理使用的时间和空间与V+E成正比且可以在常数时间内处理关于图的连通性查询。</p>\n<h4 id=\"比较-1\"><a href=\"#比较-1\" class=\"headerlink\" title=\"比较\"></a>比较</h4><p>union-find算法其实更快，因为它不需要完整地构造并表示一幅图，是一种动态算法（在任何时候都能用接近常数的时间检查两个顶点是否连通，甚至是在添加一条边的时候），但深度优先搜索则必须要对图进行预处理。因此，在完成只需要判断连通性或是需要完成有大量连通性查询和插入操作混合等类似的任务时，更倾向使用union-find算法，而深度优先搜索则更适合实现图的抽象数据类型，因为它能更有效地利用已有的数据结构。</p>\n<h3 id=\"检测环\"><a href=\"#检测环\" class=\"headerlink\" title=\"检测环\"></a>检测环</h3><p>给定的图是无环图吗？</p>\n<h4 id=\"实现-6\"><a href=\"#实现-6\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cycle</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> hasCycle;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cycle</span><span class=\"params\">(Graph g)</span></span>&#123;</span><br><span class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</span><br><span class=\"line\">\t\thasCycle = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> s = <span class=\"number\">0</span>; s &lt; g.V(); s++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[s] == <span class=\"keyword\">false</span>)</span><br><span class=\"line\">\t\t\t\tdfs(g, s, s);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Graph g, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)</span><br><span class=\"line\">\t\t\t\tdfs(g, w, v);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (w != p)</span><br><span class=\"line\">\t\t\t\thasCycle = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasCycle</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> hasCycle;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"双色问题\"><a href=\"#双色问题\" class=\"headerlink\" title=\"双色问题\"></a>双色问题</h3><p>能够用两种颜色将图的所有顶点着色，使得任意一条边的两个端点的颜色都不相同吗？（这是一幅二分图吗？）</p>\n<h4 id=\"实现-7\"><a href=\"#实现-7\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TwoColor</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] color;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isTwoColorable;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TwoColor</span><span class=\"params\">(Graph g)</span></span>&#123;</span><br><span class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</span><br><span class=\"line\">\t\tcolor = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</span><br><span class=\"line\">\t\tisTwoColorable = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> s = <span class=\"number\">0</span>; s &lt; g.V(); s++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[s] == <span class=\"keyword\">false</span>)</span><br><span class=\"line\">\t\t\t\tdfs(g, s);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Graph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)&#123;</span><br><span class=\"line\">\t\t\t\tcolor[w] = !color[v];</span><br><span class=\"line\">\t\t\t\tdfs(g, w);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (color[w] == color[v])</span><br><span class=\"line\">\t\t\t\tisTwoColorable = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBipartite</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> isTwoColorable;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"有向图\"><a href=\"#有向图\" class=\"headerlink\" title=\"有向图\"></a>有向图</h2><h3 id=\"深度优先搜索-1\"><a href=\"#深度优先搜索-1\" class=\"headerlink\" title=\"深度优先搜索\"></a>深度优先搜索</h3><h4 id=\"实现-8\"><a href=\"#实现-8\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DepthFirstDirectedPaths</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> s;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] edgeTo;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DepthFirstDirectedPaths</span><span class=\"params\">(Digraph g, <span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.s = s;</span><br><span class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</span><br><span class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[g.V()];</span><br><span class=\"line\">\t\tdfs(g, s);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Digraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)&#123;</span><br><span class=\"line\">\t\t\t\tedgeTo[w] = v;</span><br><span class=\"line\">\t\t\t\tdfs(g, w);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> marked[v];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">pathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!hasPathTo(v))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tStack&lt;Integer&gt; path = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\">\t\tpath.push(v);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (v != s)&#123;</span><br><span class=\"line\">\t\t\tpath.push(edgeTo[v]);</span><br><span class=\"line\">\t\t\tv = edgeTo[v];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> path;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"特点-6\"><a href=\"#特点-6\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>在有向图中，深度优先搜索标记由一个集合的顶点可达的所有顶点所需的时间与被标记的所有顶点的出度之和成正比。</p>\n<p>单向有向路径给定一幅有向图和一个起点s，回答“从s到给定目的顶点v是否存在一条有向路径？如果有，找出这条路径。”等类似问题。</p>\n<h3 id=\"广度优先搜索-1\"><a href=\"#广度优先搜索-1\" class=\"headerlink\" title=\"广度优先搜索\"></a>广度优先搜索</h3><h4 id=\"实现-9\"><a href=\"#实现-9\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BreadthFirstDirectedPaths</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> s;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] edgeTo;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BreadthFirstDirectedPaths</span><span class=\"params\">(Digraph g, <span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.s = s;</span><br><span class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</span><br><span class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[g.V()];</span><br><span class=\"line\">\t\tbfs(g, s);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(Digraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\tQueue&lt;Integer&gt; queue = <span class=\"keyword\">new</span> Queue&lt;Integer&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\tqueue.enqueue(v);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (!queue.isEmpty())&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> x = queue.dequeue();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(x))&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tmarked[w] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t\tedgeTo[w] = x;</span><br><span class=\"line\">\t\t\t\t\tqueue.enqueue(w);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> marked[v];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">pathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!hasPathTo(v))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tStack&lt;Integer&gt; path = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\">\t\tpath.push(v);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (v != s)&#123;</span><br><span class=\"line\">\t\t\tpath.push(edgeTo[v]);</span><br><span class=\"line\">\t\t\tv = edgeTo[v];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> path;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"特点-7\"><a href=\"#特点-7\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>单点最短有向路径给定一幅有向图和一个起点s，回答“从s到给定目的顶点v是否存在一条有向路径？如果有，找出其中最短的那条（所含边数最少）。”等类似问题。</p>\n<h3 id=\"有向环检测\"><a href=\"#有向环检测\" class=\"headerlink\" title=\"有向环检测\"></a>有向环检测</h3><p>给定的有向图中包含有向环吗？如果有，按照路径的方向从某个顶点并返回自己来找到环上的所有顶点。</p>\n<h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>有向无环图（DAG）就是一幅不含有环的有向图。</p>\n<h4 id=\"示意-6\"><a href=\"#示意-6\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i2.muimg.com/1949/bbfa85a5cd288ecd.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-10\"><a href=\"#实现-10\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirectedCycle</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] edgeTo;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] onStack;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Stack&lt;Integer&gt; cycle;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DirectedCycle</span><span class=\"params\">(Digraph g)</span></span>&#123;</span><br><span class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</span><br><span class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[g.V()];</span><br><span class=\"line\">\t\tonStack = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; g.V(); v++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[v] == <span class=\"keyword\">false</span>)</span><br><span class=\"line\">\t\t\t\tdfs(g, v);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Digraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\tonStack[v] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (hasCycle())</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)&#123;</span><br><span class=\"line\">\t\t\t\tedgeTo[w] = v;</span><br><span class=\"line\">\t\t\t\tdfs(g, w);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (onStack[w] == <span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">\t\t\t\tcycle = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> x = v;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\tcycle.push(x);</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (x != w)&#123;</span><br><span class=\"line\">\t\t\t\t\tcycle.push(edgeTo[x]);</span><br><span class=\"line\">\t\t\t\t\tx = edgeTo[x];</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\tcycle.push(v);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tonStack[v] = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasCycle</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> cycle != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">cycle</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> cycle;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h3><p>给定一幅有向图，将所有的顶点排序，使得所有的有向边均从排在前面的元素指向排在后面的元素（或者说明无法做到这一点）。</p>\n<h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>当且仅当一幅有向图是无环图时它才能进行拓扑排序。</p>\n<p>一幅有向无环图的拓扑排序即为所有顶点的逆后序排列。</p>\n<h4 id=\"基于深度优先搜索的顶点排序\"><a href=\"#基于深度优先搜索的顶点排序\" class=\"headerlink\" title=\"基于深度优先搜索的顶点排序\"></a>基于深度优先搜索的顶点排序</h4><p>将dfs的参数顶点保存在一个数据结构中，遍历这个数据结构实际上就能访问图中的所有顶点。顶点有以下三种排列顺序：</p>\n<ol>\n<li>前序：在递归调用之前将顶点加入队列</li>\n<li>后序：在递归调用之后将顶点加入队列</li>\n<li>逆后序：在递归调用之后将顶点压入栈</li>\n</ol>\n<h5 id=\"示意-7\"><a href=\"#示意-7\" class=\"headerlink\" title=\"示意\"></a>示意</h5><p><img src=\"http://i2.muimg.com/1949/049d82a3e4c670be.png\" alt=\"Markdown\"></p>\n<h5 id=\"实现-11\"><a href=\"#实现-11\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DepthFirstOrder</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Queue&lt;Integer&gt; pre;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Queue&lt;Integer&gt; post;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Stack&lt;Integer&gt; reversePost;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DepthFirstOrder</span><span class=\"params\">(Digraph g)</span></span>&#123;</span><br><span class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</span><br><span class=\"line\">\t\tpre = <span class=\"keyword\">new</span> Queue&lt;Integer&gt;();</span><br><span class=\"line\">\t\tpost = <span class=\"keyword\">new</span> Queue&lt;Integer&gt;();</span><br><span class=\"line\">\t\treversePost = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; g.V(); v++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[v] == <span class=\"keyword\">false</span>)</span><br><span class=\"line\">\t\t\t\tdfs(g, v);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Digraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\tpre.enqueue(v);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)</span><br><span class=\"line\">\t\t\t\tdfs(g, w);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tpost.enqueue(v);</span><br><span class=\"line\">\t\treversePost.push(v);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">pre</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">post</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> post;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">reversePost</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> reversePost;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"示意-8\"><a href=\"#示意-8\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/3e80d583c02a2ab5.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-12\"><a href=\"#实现-12\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Topological</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Iterable&lt;Integer&gt; order;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Topological</span><span class=\"params\">(Digraph g)</span></span>&#123;</span><br><span class=\"line\">\t\tDirectedCycle cycle = <span class=\"keyword\">new</span> DirectedCycle(g);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cycle.hasCycle())&#123;</span><br><span class=\"line\">\t\t\tDepthFirstOrder dfs = <span class=\"keyword\">new</span> DepthFirstOrder(g);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\torder = dfs.reversePost();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">order</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> order;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isDAG</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> order != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"特点-8\"><a href=\"#特点-8\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>使用深度优先搜索对有向无环图进行拓扑排序所需的时间和V+E成正比。</p>\n<h3 id=\"强连通性\"><a href=\"#强连通性\" class=\"headerlink\" title=\"强连通性\"></a>强连通性</h3><p>使用深度优先搜索查找给定有向图G的反向图G’，根据由此得到的所有顶点的逆后序再次用深度优先搜索处理有向图G（Kosaraju算法），其构造函数中的每一次递归调用所标记的顶点都在同一个强连通分量之中。</p>\n<h4 id=\"示意-9\"><a href=\"#示意-9\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/bec441ce218db0b9.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-13\"><a href=\"#实现-13\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KosarajuSCC</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">KosarajuSCC</span><span class=\"params\">(Digraph g)</span></span>&#123;</span><br><span class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</span><br><span class=\"line\">\t\tid = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[g.V()];</span><br><span class=\"line\">\t\tcount = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tDepthFirstOrder order = <span class=\"keyword\">new</span> DepthFirstOrder(g.reverse());</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v : order.reversePost())&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[v] == <span class=\"keyword\">false</span>)&#123;</span><br><span class=\"line\">\t\t\t\tdfs(g, v);</span><br><span class=\"line\">\t\t\t\tcount++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Digraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\tid[v] = count;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)</span><br><span class=\"line\">\t\t\t\tdfs(g, w);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">stronglyConnected</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id[v] == id[w];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">id</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id[v];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"特点-9\"><a href=\"#特点-9\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>Kosaraju算法的预处理所需的时间和空间与V+E成正比且支持常数时间的有向图强连通性的查询。</p>\n<p>给定一幅有向图，回答“给定的两个顶点是强连通的吗？这幅有向图中含有多少个强连通分量？”等类似问题。</p>\n<h2 id=\"最小生成树\"><a href=\"#最小生成树\" class=\"headerlink\" title=\"最小生成树\"></a>最小生成树</h2><h3 id=\"Prim算法\"><a href=\"#Prim算法\" class=\"headerlink\" title=\"Prim算法\"></a>Prim算法</h3><p>每一步都会为一棵生长中的树添加一条边。一开始这棵树只有一个顶点，然后会向它添加V-1条边，每次总是将下一条连接树中的顶点与不在树中的顶点且权重最小的边（黑色表示）加入树中（即由树中的顶点所定义的切分中的一条横向边）。</p>\n<p>每当向树中添加了一条边之后，也向树中添加了一个顶点。要维护一个包含所有横切边的集合，就要将连接这个顶点和其他所有不在树中的顶点的边加入优先队列。但，连接新加入树中的顶点与其他已经在树中顶点的所有边都失效了。（这样的边都已经不是横切边了，因为它的两个顶点都在树中。）</p>\n<h4 id=\"示意-10\"><a href=\"#示意-10\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/8a0d924a7b467969.png\" alt=\"Markdown\"></p>\n<h4 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>Prim算法能够得到任意加权无向图的最小生成树。</p>\n<h4 id=\"延时实现\"><a href=\"#延时实现\" class=\"headerlink\" title=\"延时实现\"></a>延时实现</h4><p>将失效的边先留在优先队列中，等到要删除它们的时候再检查边的有效性。</p>\n<h5 id=\"示意-11\"><a href=\"#示意-11\" class=\"headerlink\" title=\"示意\"></a>示意</h5><p><img src=\"http://i2.muimg.com/1949/6bc3fc9f01231433.png\" alt=\"Markdown\"></p>\n<h5 id=\"实现-14\"><a href=\"#实现-14\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazyPrimMST</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> weight;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Queue&lt;Edge&gt; mst;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> MinPQ&lt;Edge&gt; pq;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LazyPrimMST</span><span class=\"params\">(EdgeWeightedGraph g)</span></span>&#123;</span><br><span class=\"line\">\t\tweight = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</span><br><span class=\"line\">\t\tmst = <span class=\"keyword\">new</span> Queue&lt;Edge&gt;();</span><br><span class=\"line\">\t\tpq = <span class=\"keyword\">new</span> MinPQ&lt;Edge&gt;(g.E());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tprim(g);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">prim</span><span class=\"params\">(EdgeWeightedGraph g)</span></span>&#123;</span><br><span class=\"line\">\t\tvisit(g, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (!pq.isEmpty())&#123;</span><br><span class=\"line\">\t\t\tEdge e = pq.delMin();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> v = e.either();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = e.other(v);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[v] == <span class=\"keyword\">true</span> &amp;&amp; marked[w] == <span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tweight += e.weight();</span><br><span class=\"line\">\t\t\tmst.enqueue(e);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[v] == <span class=\"keyword\">false</span>)</span><br><span class=\"line\">\t\t\t\tvisit(g, v);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)</span><br><span class=\"line\">\t\t\t\tvisit(g, w);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(EdgeWeightedGraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Edge e : g.adj(v))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[e.other(v)] == <span class=\"keyword\">false</span>)</span><br><span class=\"line\">\t\t\t\tpq.insert(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Edge&gt; <span class=\"title\">edges</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> mst;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">weight</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> weight;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"特点-10\"><a href=\"#特点-10\" class=\"headerlink\" title=\"特点\"></a>特点</h5><p>Prim算法的延时实现计算一幅含有V个顶点和E条边的连通加权无向图的最小生成树所需的空间与E成正比，所需的时间与ElogE成正比（最坏情况）。</p>\n<h4 id=\"即时实现\"><a href=\"#即时实现\" class=\"headerlink\" title=\"即时实现\"></a>即时实现</h4><p>只会在优先队列中保存每个非树顶点w的一条边：将它与树中的顶点连接起来的权重最小的那条边。将w和树的顶点连接起来的其他权重较大的边迟早都会失效，所以没必要在优先队列中保存它们。</p>\n<h5 id=\"示意-12\"><a href=\"#示意-12\" class=\"headerlink\" title=\"示意\"></a>示意</h5><p><img src=\"http://i4.buimg.com/1949/1b05ce43e01383e7.png\" alt=\"Markdown\"></p>\n<h5 id=\"实现-15\"><a href=\"#实现-15\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrimMST</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Edge[] edgeTo;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span>[] distTo;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> IndexMinPQ&lt;Double&gt; pq;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PrimMST</span><span class=\"params\">(EdgeWeightedGraph g)</span></span>&#123;</span><br><span class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</span><br><span class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> Edge[g.V()];</span><br><span class=\"line\">\t\tdistTo = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[g.V()];</span><br><span class=\"line\">\t\tpq = <span class=\"keyword\">new</span> IndexMinPQ&lt;Double&gt;(g.V());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; g.V(); v++)</span><br><span class=\"line\">\t\t\tdistTo[v] = Double.POSITIVE_INFINITY;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tprim(g);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">prim</span><span class=\"params\">(EdgeWeightedGraph g)</span></span>&#123;</span><br><span class=\"line\">\t\tpq.insert(<span class=\"number\">0</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (!pq.isEmpty())</span><br><span class=\"line\">\t\t\tvisit(g, pq.delMin());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(EdgeWeightedGraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Edge e : g.adj(v))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = e.other(v);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (e.weight() &lt; distTo[w])&#123;</span><br><span class=\"line\">\t\t\t\tdistTo[w] = e.weight();</span><br><span class=\"line\">\t\t\t\tedgeTo[w] = e;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (pq.contains(w))</span><br><span class=\"line\">\t\t\t\t\tpq.change(w, distTo[w]);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t\tpq.insert(w, distTo[w]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Edge&gt; <span class=\"title\">edges</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tQueue&lt;Edge&gt; mst = <span class=\"keyword\">new</span> Queue&lt;Edge&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">1</span>; v &lt; edgeTo.length; v++)</span><br><span class=\"line\">\t\t\tmst.enqueue(edgeTo[v]);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> mst;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">weight</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> weight = <span class=\"number\">0.0</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">1</span>; v &lt; distTo.length; v++)</span><br><span class=\"line\">\t\t\tweight += distTo[v];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> weight;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"特点-11\"><a href=\"#特点-11\" class=\"headerlink\" title=\"特点\"></a>特点</h5><p>Prim算法的即时实现计算一幅含有V个顶点和E条边的连通加权无向图的最小生成树所需的空间和V成正比，所需的时间和ElogV成正比（最坏情况）。</p>\n<h3 id=\"Kruskal算法\"><a href=\"#Kruskal算法\" class=\"headerlink\" title=\"Kruskal算法\"></a>Kruskal算法</h3><p>按照边的权重顺序（从小到大）处理它们，将边加入最小生成树中，加入的边不会与已经加入的边构成环，直到树中含有V-1条边为止。这些黑色的边逐渐由一片森林合并为一棵树，也就是图的最小生成树。</p>\n<h4 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>Kruskal算法能够计算任意加权无向图的最小生成树。</p>\n<h4 id=\"示意-13\"><a href=\"#示意-13\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i2.muimg.com/1949/362be3c027985b40.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-16\"><a href=\"#实现-16\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KruskalMST</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Queue&lt;Edge&gt; mst;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> MinPQ&lt;Edge&gt; pq;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> UnionFind uf;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> weight;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">KruskalMST</span><span class=\"params\">(EdgeWeightedGraph g)</span></span>&#123;</span><br><span class=\"line\">\t\tweight = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tmst = <span class=\"keyword\">new</span> Queue&lt;Edge&gt;();</span><br><span class=\"line\">\t\tpq = <span class=\"keyword\">new</span> MinPQ&lt;Edge&gt;(g.E());</span><br><span class=\"line\">\t\tuf = <span class=\"keyword\">new</span> UnionFind(g.V());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Edge e : g.edges())</span><br><span class=\"line\">\t\t\tpq.insert(e);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tkruskal(g);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">kruskal</span><span class=\"params\">(EdgeWeightedGraph g)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (!pq.isEmpty() &amp;&amp; mst.size() &lt; g.V())&#123;</span><br><span class=\"line\">\t\t\tEdge e = pq.delMin();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> v = e.either();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = e.other(v);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (uf.connected(v, w))</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tuf.union(v, w);</span><br><span class=\"line\">\t\t\tmst.enqueue(e);</span><br><span class=\"line\">\t\t\tweight += e.weight();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Edge&gt; <span class=\"title\">edges</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> mst;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">weight</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> weight;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"特点-12\"><a href=\"#特点-12\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>Kruskal算法计算一幅含有V个顶点和E条边的连通加权无向图的最小生成树所需的空间和E成正比，所需的时间和ElogE成正比（最坏情况）。</p>\n<h4 id=\"比较-2\"><a href=\"#比较-2\" class=\"headerlink\" title=\"比较\"></a>比较</h4><p>Prim算法是一条边一条边地来构造最小生成树，每一步都为一棵树添加一条边。 Kruskal算法构造最小生成树的时候也是一条边一条边地构造，但不同的是它寻找的边会连接一片森林中的两棵树。从一片由V棵单顶点的树构成的森林开始并不断将两棵树合并（用可以找到的最短边）直到只剩下一棵树，它就是最小生成树。</p>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><img src=\"http://i1.piimg.com/1949/4bc5dd0a181d708d.png\" alt=\"Markdown\"></p>\n<h2 id=\"最短路径树\"><a href=\"#最短路径树\" class=\"headerlink\" title=\"最短路径树\"></a>最短路径树</h2><h3 id=\"Dijkstra算法\"><a href=\"#Dijkstra算法\" class=\"headerlink\" title=\"Dijkstra算法\"></a>Dijkstra算法</h3><p>采用了类似Prim算法的方法来计算最短路径树。</p>\n<h4 id=\"定义-4\"><a href=\"#定义-4\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>Dijkstra算法能够解决边权重非负的加权有向图的单起点最短路径问题。</p>\n<h4 id=\"示意-14\"><a href=\"#示意-14\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/8733dad4678b9290.png\" alt=\"Markdown\"><br><img src=\"http://i4.buimg.com/1949/240e62aa975ae40f.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-17\"><a href=\"#实现-17\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DijkstraSPT</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> DirectedEdge[] edgeTo;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span>[] distTo;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> IndexMinPQ&lt;Double&gt; pq;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> s;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DijkstraSPT</span><span class=\"params\">(EdgeWeightedDigraph g, <span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> DirectedEdge[g.V()];</span><br><span class=\"line\">\t\tdistTo = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[g.V()];</span><br><span class=\"line\">\t\tpq = <span class=\"keyword\">new</span> IndexMinPQ&lt;Double&gt;(g.V());</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.s = s;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; g.V(); v++)</span><br><span class=\"line\">\t\t\tdistTo[v] = Double.POSITIVE_INFINITY;</span><br><span class=\"line\">\t\tdistTo[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tpq.insert(s, <span class=\"number\">0.0</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (!pq.isEmpty())</span><br><span class=\"line\">\t\t\trelax(g, pq.delMin());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">relax</span><span class=\"params\">(EdgeWeightedDigraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (DirectedEdge e : g.adj(v))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = e.to();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (distTo[v] + e.weight() &lt; distTo[w])&#123;</span><br><span class=\"line\">\t\t\t\tdistTo[w] = distTo[v] + e.weight();</span><br><span class=\"line\">\t\t\t\tedgeTo[w] = e;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (pq.contains(w))</span><br><span class=\"line\">\t\t\t\t\tpq.change(w, distTo[w]);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t\tpq.insert(w, distTo[w]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">distTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> distTo[v];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> distTo[v] &lt; Double.POSITIVE_INFINITY;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;DirectedEdge&gt; <span class=\"title\">pathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!hasPathTo(v))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tStack&lt;DirectedEdge&gt; path = <span class=\"keyword\">new</span> Stack&lt;DirectedEdge&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tDirectedEdge e = edgeTo[v];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (e.from() != s)&#123;</span><br><span class=\"line\">\t\t\tpath.push(e);</span><br><span class=\"line\">\t\t\te = edgeTo[e.from()];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tpath.push(e);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> path;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"特点-13\"><a href=\"#特点-13\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>在一幅含有V个顶点和E条边的加权有向图中，使用Dijkstra算法计算根结点为给定起点的最短路径树所需的空间与V成正比，时间与ElogV成正比（最坏情况下）。</p>\n<h4 id=\"比较-3\"><a href=\"#比较-3\" class=\"headerlink\" title=\"比较\"></a>比较</h4><p>Prim算法每次添加的都是离树最近的非树顶点，Dijkstra算法每次添加的都是离起点最近的非树顶点。</p>\n<h3 id=\"拓扑排序-1\"><a href=\"#拓扑排序-1\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h3><p>将顶点的放松和拓扑排序结合起来。</p>\n<h4 id=\"示意-15\"><a href=\"#示意-15\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/16378a692db6d55e.png\" alt=\"Markdown\"><br><img src=\"http://i4.buimg.com/1949/9caad83078acc930.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-18\"><a href=\"#实现-18\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AcyclicSPT</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> DirectedEdge[] edgeTo;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span>[] distTo;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> s;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AcyclicSPT</span><span class=\"params\">(EdgeWeightedDigraph g, <span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> DirectedEdge[g.V()];</span><br><span class=\"line\">\t\tdistTo = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[g.V()];</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.s = s;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; g.V(); v++)</span><br><span class=\"line\">\t\t\tdistTo[v] = Double.POSITIVE_INFINITY;</span><br><span class=\"line\">\t\tdistTo[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tTopological t = <span class=\"keyword\">new</span> Topological(g);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v : t.order())</span><br><span class=\"line\">\t\t\trelax(g, v);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">relax</span><span class=\"params\">(EdgeWeightedDigraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (DirectedEdge e : g.adj(v))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = e.to();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (distTo[v] + e.weight() &lt; distTo[w])&#123;</span><br><span class=\"line\">\t\t\t\tdistTo[w] = distTo[v] + e.weight();</span><br><span class=\"line\">\t\t\t\tedgeTo[w] = e;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">distTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> distTo[v];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> distTo[v] &lt; Double.POSITIVE_INFINITY;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;DirectedEdge&gt; <span class=\"title\">pathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!hasPathTo(v))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tStack&lt;DirectedEdge&gt; path = <span class=\"keyword\">new</span> Stack&lt;DirectedEdge&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tDirectedEdge e = edgeTo[v];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (e.from() != s)&#123;</span><br><span class=\"line\">\t\t\tpath.push(e);</span><br><span class=\"line\">\t\t\te = edgeTo[e.from()];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tpath.push(e);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> path;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"特点-14\"><a href=\"#特点-14\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>按照拓扑排序放松顶点，就能在和E+V成正比的时间内解决无环有向图的单点最短路径问题。</p>\n<ol>\n<li>能够在线性时间内解决单点最短路径问题</li>\n<li>能够处理负权重的边</li>\n<li>能够解决相关的问题，例如找出最长的路径</li>\n</ol>\n<h3 id=\"Bellman-Ford算法\"><a href=\"#Bellman-Ford算法\" class=\"headerlink\" title=\"Bellman-Ford算法\"></a>Bellman-Ford算法</h3><p>解决一般有向图中的以下问题：</p>\n<ol>\n<li>负权重环的检测。给定的加权有向图中含有负权重环吗？如果有，找到它。</li>\n<li>负权重环不可达时的单点最短路径。给定一幅加权有向图和一个起点s且从s无法到达任何负权重环，回答“是否存在一条从s到给定的顶点v的有向路径？如果有，找出最短（总权重最小）的那条路径。“等类似问题。</li>\n</ol>\n<h4 id=\"定义-5\"><a href=\"#定义-5\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>在任意含有V个顶点的加权有向图中给定起点s，从s无法到达任何负权重环，以下算法能够解决其中的单点最短路径问题：以任意顺序放松有向图的所有边，重复V轮。</p>\n<h4 id=\"示意-16\"><a href=\"#示意-16\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/df93ee57234d2ba9.png\" alt=\"Markdown\"><br><img src=\"http://i1.piimg.com/1949/e1a0706c291bbb2f.png\" alt=\"Markdown\"></p>\n<h4 id=\"负权重环的检测\"><a href=\"#负权重环的检测\" class=\"headerlink\" title=\"负权重环的检测\"></a>负权重环的检测</h4><p>在将所有边放松V轮之后当且仅当队列非空时有向图中才存在从起点可达的负权重环。</p>\n<h5 id=\"示意-17\"><a href=\"#示意-17\" class=\"headerlink\" title=\"示意\"></a>示意</h5><p><img src=\"http://i1.piimg.com/1949/1898c8704c79fb60.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-19\"><a href=\"#实现-19\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BellmanFordSPT</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> DirectedEdge[] edgeTo;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span>[] distTo;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Iterable&lt;DirectedEdge&gt; cycle;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Queue&lt;Integer&gt; queue;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] onQ;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> s;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> cost;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BellmanFordSPT</span><span class=\"params\">(EdgeWeightedDigraph g, <span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.s = s;</span><br><span class=\"line\">\t\tcost = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> DirectedEdge[g.V()];</span><br><span class=\"line\">\t\tdistTo = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[g.V()];</span><br><span class=\"line\">\t\tonQ = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</span><br><span class=\"line\">\t\tqueue = <span class=\"keyword\">new</span> Queue&lt;Integer&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; g.V(); v++)</span><br><span class=\"line\">\t\t\tdistTo[v] = Double.POSITIVE_INFINITY;</span><br><span class=\"line\">\t\tdistTo[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tonQ[s] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\tqueue.enqueue(s);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (!queue.isEmpty() &amp;&amp; !hasNegativeCycle())&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> v = queue.dequeue();</span><br><span class=\"line\">\t\t\tonQ[v] = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\trelax(g, v);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (++cost % g.V() == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\tfindNegativeCycle();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">relax</span><span class=\"params\">(EdgeWeightedDigraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (DirectedEdge e : g.adj(v))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = e.to();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (distTo[v] + e.weight() &lt; distTo[w])&#123;</span><br><span class=\"line\">\t\t\t\tdistTo[w] = distTo[v] + e.weight();</span><br><span class=\"line\">\t\t\t\tedgeTo[w] = e;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (onQ[w] == <span class=\"keyword\">false</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tonQ[w] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t\tqueue.enqueue(w);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">findNegativeCycle</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> V = edgeTo.length;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tEdgeWeightedDigraph g = <span class=\"keyword\">new</span> EdgeWeightedDigraph(V);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; V; v++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (edgeTo[v] != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t\tg.addEdge(edgeTo[v]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tEdgeWeightedDirectedCycle c = <span class=\"keyword\">new</span> EdgeWeightedDirectedCycle(g);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tcycle = c.cycle();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNegativeCycle</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> cycle != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;DirectedEdge&gt; <span class=\"title\">negativeCycle</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> cycle;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">distTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> distTo[v];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> distTo[v] &lt; Double.POSITIVE_INFINITY;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;DirectedEdge&gt; <span class=\"title\">pathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!hasPathTo(v))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tStack&lt;DirectedEdge&gt; path = <span class=\"keyword\">new</span> Stack&lt;DirectedEdge&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tDirectedEdge e = edgeTo[v];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (e.from() != s)&#123;</span><br><span class=\"line\">\t\t\tpath.push(e);</span><br><span class=\"line\">\t\t\te = edgeTo[e.from()];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tpath.push(e);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> path;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"特点-15\"><a href=\"#特点-15\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>对于任意含有V个顶点的加权有向图和给定的起点s，在最坏情况下基于队列的Bellman-Ford算法解决最短路径问题（或者找到从s可达的负权重环）所需的时间和EV成正比，空间和V成正比。</p>\n<h3 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><img src=\"http://i1.piimg.com/1949/5019ec6bc1ced557.png\" alt=\"Markdown\"></p>\n","categories":["Algorithm","Data Structure"],"tags":["Algorithm"]},{"title":"【算法】查找","url":"http://yoursite.com/2017/04/16/【算法】查找/","content":"<h2 id=\"顺序查找（无序链表）\"><a href=\"#顺序查找（无序链表）\" class=\"headerlink\" title=\"顺序查找（无序链表）\"></a>顺序查找（无序链表）</h2><p>符号表中使用的数据结构的一个简单选择是链表，每个结点存储一个键值对。</p>\n<h3 id=\"示意\"><a href=\"#示意\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i1.piimg.com/1949/a47128266118b83b.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SequentialSearch</span>&lt;<span class=\"title\">Key</span>, <span class=\"title\">Value</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node first;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</span><br><span class=\"line\">\t\tKey key;</span><br><span class=\"line\">\t\tValue value;</span><br><span class=\"line\">\t\tNode next;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span> <span class=\"params\">(Key key, Value value, Node next)</span></span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Node x = first; x != <span class=\"keyword\">null</span>; x = x.next)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (key.equals(x.key))&#123;</span><br><span class=\"line\">\t\t\t\tx.value = value;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfirst = <span class=\"keyword\">new</span> Node(key, value, first);</span><br><span class=\"line\">\t\tn++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Node x = first; x != <span class=\"keyword\">null</span>; x = x.next)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (key.equals(x.key))</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x.value;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty())</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (key.equals(first.key))</span><br><span class=\"line\">\t\t\tfirst = first.next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tdeleteNode(first, key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tn--;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteNode</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (key.equals(x.next.key))</span><br><span class=\"line\">\t\t\tx.next = x.next.next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tdeleteNode(x.next, key);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tQueue&lt;Key&gt; queue = <span class=\"keyword\">new</span> Queue&lt;Key&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Node x = first; x != <span class=\"keyword\">null</span>; x = x.next)</span><br><span class=\"line\">\t\t\tqueue.enqueue(x.key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> queue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> size() == <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> get(key) != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>在含有N对键值的基于（无序）链表的符号表中，未命名的查找和插入操作都需要N次比较。命中的查找在最坏情况下需要N次比较。特别地，向一个空表中插入N个不同的键需要~N^2/2次比较。</p>\n<h2 id=\"二分查找（有序数组）\"><a href=\"#二分查找（有序数组）\" class=\"headerlink\" title=\"二分查找（有序数组）\"></a>二分查找（有序数组）</h2><p>符号表使用的数据结构是一对平行的数组，一个存储键一个存储值。</p>\n<p>计算小于给定键的键的数量：首先将key和中间键比较，如果相等则返回其索引；如果小于中间键则在左半部分查找；大于则在右半部分查找。</p>\n<h3 id=\"示意-1\"><a href=\"#示意-1\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i2.muimg.com/1949/a340ca0bc218a588.png\" alt=\"Markdown\"><br><img src=\"http://i2.muimg.com/1949/b74a9d4a067f70a2.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinarySearch</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;, <span class=\"title\">Value</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Key[] keys;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Value[] values;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BinarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span></span>&#123;</span><br><span class=\"line\">\t\tkeys = (Key[]) <span class=\"keyword\">new</span> Comparable[capacity];</span><br><span class=\"line\">\t\tvalues = (Value[]) <span class=\"keyword\">new</span> Object[capacity];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = rank(key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i &lt; n &amp;&amp; key.compareTo(keys[i]) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\tvalues[i] = value;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = n; j &gt; i; j--)&#123;</span><br><span class=\"line\">\t\t\tkeys[j] = keys[j-<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\tvalues[j] = values[j-<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tkeys[i] = key;</span><br><span class=\"line\">\t\tvalues[i] = value;</span><br><span class=\"line\">\t\tn++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty())</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = rank(key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i &lt; n &amp;&amp; key.compareTo(keys[i]) == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> values[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> lo = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> hi = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (lo &lt;= hi)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> mid = lo + (hi - lo) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> compare = key.compareTo(keys[mid]);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\thi = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\tlo = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> lo;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty())</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = rank(key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (key.compareTo(keys[i]) != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">\t\t\tkeys[j-<span class=\"number\">1</span>] = keys[j];</span><br><span class=\"line\">\t\t\tvalues[j-<span class=\"number\">1</span>] = values[j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tkeys[n] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tvalues[n] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tn--;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">(Key lo, Key hi)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (hi.compareTo(lo) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (contains(hi))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(hi) - rank(lo) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(hi) - rank(lo);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">floor</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = rank(key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i &lt; n &amp;&amp; key.compareTo(keys[i]) == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> keys[i];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> keys[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">ceiling</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = rank(key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> keys[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> keys(min(), max());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">(Key lo, Key hi)</span></span>&#123;</span><br><span class=\"line\">\t\tQueue&lt;Key&gt; queue = <span class=\"keyword\">new</span> Queue&lt;Key&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = rank(lo); i &lt; rank(hi); i++)</span><br><span class=\"line\">\t\t\tqueue.enqueue(keys[i]);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (contains(hi))</span><br><span class=\"line\">\t\t\tqueue.enqueue(hi);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> queue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> size() == <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> get(key) != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">min</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> keys[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">max</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> keys[n-<span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">select</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> keys[k];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMin</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tdelete(min());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMax</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tdelete(max());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>在N个键的有序数组中进行二分查找最多需要（lgN+1）次比较（无论是否成功）。</p>\n<p>向大小为N的有序数组中插入一个新的元素在最坏情况下需要访问～2N次数组，因此向一个空符号表中插入N个元素在最坏情况下需要访问~N^2次数组。</p>\n<h3 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h3><p><img src=\"http://i2.muimg.com/1949/d23f6043a2502391.png\" alt=\"Markdown\"></p>\n<h2 id=\"二叉查找树\"><a href=\"#二叉查找树\" class=\"headerlink\" title=\"二叉查找树\"></a>二叉查找树</h2><p>定义一个类表示二叉查找树上的一个结点。每个结点都含有一个键、一个值、一条左链接、一条右链接和一个结点计数器。左链接指向一棵由小于该结点的所有键组成的二叉查找树，右链接指向一棵由大于该结点的所有键组成的二叉查找树。变量N给出了以该结点为根的子树的结点总数。</p>\n<h3 id=\"示意-2\"><a href=\"#示意-2\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i1.piimg.com/1949/15034c3f80c18e29.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-2\"><a href=\"#实现-2\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinarySearchTree</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;, <span class=\"title\">Value</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node root;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</span><br><span class=\"line\">\t\tKey key;</span><br><span class=\"line\">\t\tValue value;</span><br><span class=\"line\">\t\tNode left;</span><br><span class=\"line\">\t\tNode right;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Key key, Value value, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.n = n;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span></span>&#123;\t\t</span><br><span class=\"line\">\t\troot = put(root, key, value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">put</span><span class=\"params\">(Node x, Key key, Value value)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(key, value, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tx.left = put(x.left, key, value);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tx.right = put(x.right, key, value);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tx.value = value;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tx.n = size(x.left) + size(x.right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> get(root, key);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Value <span class=\"title\">get</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> get(x.left, key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> get(x.right, key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\troot = delete(root, key);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">delete</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tx.left = delete(x.left, key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tx.right = delete(x.right, key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x.left == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x.right;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x.right == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x.left;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tNode t = x;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tx = min(t.right);</span><br><span class=\"line\">\t\t\tx.right = deleteMin(t.right);</span><br><span class=\"line\">\t\t\tx.left = t.left;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tx.n = size(x.left) + size(x.right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMin</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\troot = deleteMin(root);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">deleteMin</span><span class=\"params\">(Node x)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x.left == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.right;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tx.left = deleteMin(x.left);</span><br><span class=\"line\">\t\tx.n = size(x.left) + size(x.right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMax</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\troot = deleteMax(root);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">deleteMax</span><span class=\"params\">(Node x)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x.right == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.left;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tx.right = deleteMax(x.right);</span><br><span class=\"line\">\t\tx.n = size(x.left) + size(x.right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">min</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> min(root).key;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">min</span><span class=\"params\">(Node x)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x.left == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> min(x.left);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">max</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> max(root).key;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">max</span><span class=\"params\">(Node x)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x.right == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> max(x.right);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">floor</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\tNode x = floor(root, key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.key;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">floor</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (compare == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> floor(x.left, key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tNode y = floor(x.right, key);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (y != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> y;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rank(root, key);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(x.left, key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(x.right, key) + size(x.left) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> size(x.left);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">select</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> select(root, k).key;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">select</span><span class=\"params\">(Node x, <span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> t = size(x.left);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (t &gt; k)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> select(x.left, k);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &lt; k)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> select(x.right, k-t-<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">ceiling</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\tNode x = ceiling(root, key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.key;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">ceiling</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (compare == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ceiling(x.right, key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tNode y = ceiling(x.left, key);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (y != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> y;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> size(root);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">(Node x)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">(Key lo, Key hi)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (hi.compareTo(lo) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (contains(hi))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(hi) - rank(lo) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(hi) - rank(lo);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> keys(min(), max());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">(Key lo, Key hi)</span></span>&#123;</span><br><span class=\"line\">\t\tQueue&lt;Key&gt; queue = <span class=\"keyword\">new</span> Queue&lt;Key&gt;();</span><br><span class=\"line\">\t\tkeys(root, queue, lo, hi);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> queue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">keys</span> <span class=\"params\">(Node x, Queue&lt;Key&gt; queue, Key lo, Key hi)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> compareLo = lo.compareTo(x.key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> compareHi = hi.compareTo(x.key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (compareLo &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tkeys(x.left, queue, lo, hi);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (compareLo &lt;= <span class=\"number\">0</span> &amp;&amp; compareHi &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tqueue.enqueue(x.key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (compareHi &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tkeys(x.right, queue, lo, hi);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> size() == <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> get(key) != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>在由N个随机键构造的二叉查找树中，查找命中平均所需的比较次数为~2lnN（约为1.39lgN），插入操作和查找未命中平均所需的比较次数为~2lnN（约为1.39lgN）。</p>\n<p>在一棵二叉查找树中，所有操作在最坏情况下所需的时间都和树的高度成正比。</p>\n<h3 id=\"比较-1\"><a href=\"#比较-1\" class=\"headerlink\" title=\"比较\"></a>比较</h3><p><img src=\"http://i4.buimg.com/1949/070e9df0ff688b4a.png\" alt=\"Markdown\"></p>\n<h2 id=\"红黑二叉查找树\"><a href=\"#红黑二叉查找树\" class=\"headerlink\" title=\"红黑二叉查找树\"></a>红黑二叉查找树</h2><p>只要谨慎地使用左旋转、右旋转和颜色转换这三种简单的操作，就能够保证插入操作后红黑树和2-3树的一一对应关系：</p>\n<ol>\n<li>如果右子结点是红色的而左子结点是黑色的，进行左旋转</li>\n<li>如果左子结点是红色的且它的左子结点也是红色的，进行右旋转</li>\n<li>如果左右子结点均为红色，进行颜色转换</li>\n</ol>\n<h3 id=\"示意-3\"><a href=\"#示意-3\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i1.piimg.com/1949/ccc450dbaa5f0bac.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-3\"><a href=\"#实现-3\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedBlackTree</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;, <span class=\"title\">Value</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> RED = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> BLACK = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node root;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</span><br><span class=\"line\">\t\tKey key;</span><br><span class=\"line\">\t\tValue value;</span><br><span class=\"line\">\t\tNode left;</span><br><span class=\"line\">\t\tNode right;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> color;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Key key, Value value, <span class=\"keyword\">int</span> n, <span class=\"keyword\">boolean</span> color)</span></span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.n = n;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isRed</span><span class=\"params\">(Node x)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> BLACK;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x.color == RED;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">rotateLeft</span><span class=\"params\">(Node h)</span></span>&#123;</span><br><span class=\"line\">\t\tNode x = h.right;</span><br><span class=\"line\">\t\th.right = x.left;</span><br><span class=\"line\">\t\tx.left = h;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tx.color = h.color;</span><br><span class=\"line\">\t\th.color = RED;</span><br><span class=\"line\">\t\tx.n = h.n;</span><br><span class=\"line\">\t\th.n = size(h.left) + size(h.right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">rotateRight</span><span class=\"params\">(Node h)</span></span>&#123;</span><br><span class=\"line\">\t\tNode x = h.left;</span><br><span class=\"line\">\t\th.left = x.right;</span><br><span class=\"line\">\t\tx.right = h;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tx.color = h.color;</span><br><span class=\"line\">\t\th.color = RED;</span><br><span class=\"line\">\t\tx.n = h.n;</span><br><span class=\"line\">\t\th.n = size(h.left) + size(h.right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">flipColors</span><span class=\"params\">(Node h)</span></span>&#123;</span><br><span class=\"line\">\t\th.left.color = !h.left.color;</span><br><span class=\"line\">\t\th.right.color = !h.right.color;</span><br><span class=\"line\">\t\th.color = !h.color;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">balance</span><span class=\"params\">(Node h)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isRed(h.left) &amp;&amp; isRed(h.left.left))</span><br><span class=\"line\">\t\t\th = rotateRight(h);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isRed(h.right))\t</span><br><span class=\"line\">\t\t\th = rotateLeft(h);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isRed(h.left) &amp;&amp; isRed(h.right))</span><br><span class=\"line\">\t\t\tflipColors(h);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\th.n = size(h.left) + size(h.right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> h;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">moveRedLeft</span><span class=\"params\">(Node h)</span></span>&#123;</span><br><span class=\"line\">\t\tflipColors(h);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isRed(h.right.left))&#123;</span><br><span class=\"line\">\t\t\th.right = rotateRight(h.right);</span><br><span class=\"line\">\t\t\th = rotateLeft(h);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> h;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">moveRedRight</span><span class=\"params\">(Node h)</span></span>&#123;</span><br><span class=\"line\">\t\tflipColors(h);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isRed(h.left.left))</span><br><span class=\"line\">\t\t\th = rotateRight(h);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> h;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span></span>&#123;</span><br><span class=\"line\">\t\troot = put(root, key, value);</span><br><span class=\"line\">\t\troot.color = BLACK;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">put</span><span class=\"params\">(Node h, Key key, Value value)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (h == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(key, value, <span class=\"number\">1</span>, RED);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(h.key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\th.left = put(h.left, key, value);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\th.right = put(h.right, key, value);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\th.value = value;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isRed(h.left) &amp;&amp; isRed(h.left.left))</span><br><span class=\"line\">\t\t\th = rotateRight(h);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!isRed(h.left) &amp;&amp; isRed(h.right))\t</span><br><span class=\"line\">\t\t\th = rotateLeft(h);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isRed(h.left) &amp;&amp; isRed(h.right))</span><br><span class=\"line\">\t\t\tflipColors(h);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\th.n = size(h.left) + size(h.right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> h;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> get(root, key);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Value <span class=\"title\">get</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (x != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\tx = x.left;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\tx = x.right;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x.value;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!isRed(root.left) &amp;&amp; !isRed(root.right))</span><br><span class=\"line\">\t\t\troot.color = RED;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\troot = delete(root, key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!isEmpty())</span><br><span class=\"line\">\t\t\troot.color = BLACK;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">delete</span><span class=\"params\">(Node h, Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (key.compareTo(h.key) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!isRed(h.left) &amp;&amp; !isRed(h.left.left))</span><br><span class=\"line\">\t\t\t\th = moveRedLeft(h);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\th.left = delete(h.left, key);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isRed(h.left))</span><br><span class=\"line\">\t\t\t\th = rotateRight(h);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果被查找的键在树的底部，可以直接删除它</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (h.right == <span class=\"keyword\">null</span> &amp;&amp; key.compareTo(h.key) == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!isRed(h.right) &amp;&amp; !isRed(h.right.left))</span><br><span class=\"line\">\t\t\t\th = moveRedRight(h);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果不在，需要将它和它的后继结点交换</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (key.compareTo(h.key) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\th.key = min(h.right).key;</span><br><span class=\"line\">\t\t\t\th.value = get(h.right, min(h.right).key);</span><br><span class=\"line\">\t\t\t\th.right = deleteMin(h.right);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\th.right = delete(h.right, key);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> balance(h);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMin</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!isRed(root.left) &amp;&amp; !isRed(root.right))</span><br><span class=\"line\">\t\t\troot.color = RED;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\troot = deleteMin(root);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!isEmpty())</span><br><span class=\"line\">\t\t\troot.color = BLACK;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">deleteMin</span><span class=\"params\">(Node h)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (h.left == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!isRed(h.left) &amp;&amp; !isRed(h.left.left))</span><br><span class=\"line\">\t\t\th = moveRedLeft(h);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\th.left = deleteMin(h.left);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> balance(h);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMax</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!isRed(root.left) &amp;&amp; !isRed(root.right))</span><br><span class=\"line\">\t\t\troot.color = RED;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\troot = deleteMax(root);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!isEmpty())</span><br><span class=\"line\">\t\t\troot.color = BLACK;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">deleteMax</span><span class=\"params\">(Node h)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isRed(h.left))</span><br><span class=\"line\">\t\t\th = rotateRight(h);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (h.right == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!isRed(h.right) &amp;&amp; !isRed(h.right.left))</span><br><span class=\"line\">\t\t\th = moveRedRight(h);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\th.right = deleteMax(h.right);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> balance(h);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> size(root);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">(Node x)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">(Key lo, Key hi)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (hi.compareTo(lo) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (contains(hi))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(hi) - rank(lo) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(hi) - rank(lo);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rank(root, key);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(x.left, key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(x.right, key) + size(x.left) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> size(x.left);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">select</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> select(root, k).key;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">select</span><span class=\"params\">(Node x, <span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> t = size(x.left);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (t &gt; k)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> select(x.left, k);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &lt; k)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> select(x.right, k-t-<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">floor</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\tNode x = floor(root, key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.key;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">floor</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (compare == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> floor(x.left, key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tNode y = floor(x.right, key);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (y != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> y;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">ceiling</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\tNode x = ceiling(root, key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.key;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">ceiling</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (compare == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ceiling(x.right, key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tNode y = ceiling(x.left, key);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (y != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> y;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">min</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> min(root).key;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">min</span><span class=\"params\">(Node x)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x.left == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> min(x.left);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">max</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> max(root).key;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">max</span><span class=\"params\">(Node x)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x.right == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> max(x.right);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> keys(min(), max());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">(Key lo, Key hi)</span></span>&#123;</span><br><span class=\"line\">\t\tQueue&lt;Key&gt; queue = <span class=\"keyword\">new</span> Queue&lt;Key&gt;();</span><br><span class=\"line\">\t\tkeys(root, queue, lo, hi);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> queue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">keys</span> <span class=\"params\">(Node x, Queue&lt;Key&gt; queue, Key lo, Key hi)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> compareLo = lo.compareTo(x.key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> compareHi = hi.compareTo(x.key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (compareLo &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tkeys(x.left, queue, lo, hi);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (compareLo &lt;= <span class=\"number\">0</span> &amp;&amp; compareHi &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tqueue.enqueue(x.key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (compareHi &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tkeys(x.right, queue, lo, hi);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> get(key) != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> size() == <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"特点-3\"><a href=\"#特点-3\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>一棵大小为N的红黑树的高度不会超过2lgN。</p>\n<p>一棵大小为N的红黑树中，根结点到任意结点的平均路径长度为~1.00lgN。</p>\n<p>在一棵红黑树中，以下操作在最坏情况下所需的时间是对数级别的：查找（get）、插入（put）、查找最小键、查找最大键、floor、ceiling、rank、select、删除最小键（deleteMin）、删除最大键（deleteMax）、删除（delete）和范围查询。</p>\n<h3 id=\"比较-2\"><a href=\"#比较-2\" class=\"headerlink\" title=\"比较\"></a>比较</h3><p><img src=\"http://i4.buimg.com/1949/43a6fb2559a670cd.png\" alt=\"Markdown\"></p>\n<h2 id=\"散列\"><a href=\"#散列\" class=\"headerlink\" title=\"散列\"></a>散列</h2><p>使用散列的查找算法分为两步。第一步是用散列函数将被查找的键转化为数组的一个索引（散列函数）；第二步就是一个处理碰撞冲突的过程（拉链法和线性探测法）。</p>\n<p>因为需要的是数组的索引而不是一个32位的整数，在实现中会将默认的hashCode()方法和除留余数法结合起来产生一个0到M-1的整数，方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Key x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x.hashCode() &amp; <span class=\"number\">0x7fffffff</span>) % M;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码会将符号位屏蔽（将一个32位整数变为一个31位非负整数），然后用除留余数法计算它除以M的余数。在使用这样的代码一般会将数组的大小M取为素数以充分利用原散列值的所有位。</p>\n<h3 id=\"基于拉链法的散列表（链表数组）\"><a href=\"#基于拉链法的散列表（链表数组）\" class=\"headerlink\" title=\"基于拉链法的散列表（链表数组）\"></a>基于拉链法的散列表（链表数组）</h3><p>将大小为M的数组中的每个元素指向一条链表，链表中的每个结点都存储了散列值为该元素的索引的键值对。</p>\n<p>查找分两步：首先根据散列值找到对应的链表，然后沿着链表顺序查找相应的键。</p>\n<h4 id=\"示意-4\"><a href=\"#示意-4\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/b20715922f16c78d.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-4\"><a href=\"#实现-4\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SeparateChainHash</span>&lt;<span class=\"title\">Key</span>, <span class=\"title\">Value</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> M;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> SequentialSearch&lt;Key, Value&gt;[] st;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SeparateChainHash</span><span class=\"params\">(<span class=\"keyword\">int</span> M)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.M = M;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.N = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tst = (SequentialSearch&lt;Key, Value&gt;[]) <span class=\"keyword\">new</span> SequentialSearch[M];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; M; i++)</span><br><span class=\"line\">\t\t\tst[i] = <span class=\"keyword\">new</span> SequentialSearch();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Key x)</span></span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> (x.hashCode() &amp; <span class=\"number\">0x7fffffff</span>) % M;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> m = hash(key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!contains(key))</span><br><span class=\"line\">\t\t\tN++;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tst[m].put(key, value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> m = hash(key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> st[m].get(key);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> m = hash(key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (contains(key))</span><br><span class=\"line\">\t\t\tN--;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tst[m].delete(key);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tQueue&lt;Key&gt; queue = <span class=\"keyword\">new</span> Queue&lt;Key&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; st.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Key key : st[i].keys())</span><br><span class=\"line\">\t\t\t\tqueue.enqueue(key);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> queue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> get(key) != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> N;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> size() == <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"特点-4\"><a href=\"#特点-4\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>在一张含有M条链表和N个键的散列表中，任意一条链表中的键的数量均在N/M的常熟因子范围内的概率无限趋于1，未命中查找和插入操作所需的比较次数为～N/M。</p>\n<h3 id=\"基于线性探测法的散列表（并行数组）\"><a href=\"#基于线性探测法的散列表（并行数组）\" class=\"headerlink\" title=\"基于线性探测法的散列表（并行数组）\"></a>基于线性探测法的散列表（并行数组）</h3><p>用大小为M的数组保存N个键值对，其中M&gt;N，需要依靠数组中的空位解决碰撞冲突。基于这种策略的所有方法被统称为开放地址散列表。</p>\n<p>最简单的方法叫做线性探测法：当碰撞发生时（当一个键的散列值已经被另一个不同的键占用），直接检查散列表中的下一个位置（将索引值加1）。这样的线性探测可能会产生三种结果：</p>\n<ol>\n<li>命中，该位置的键和被查找的键相同</li>\n<li>未命中，键为空（该位置没有键）</li>\n<li>继续查找，该位置的键和被查找的键不同</li>\n</ol>\n<h4 id=\"示意-5\"><a href=\"#示意-5\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/8ad232c2dbd2892a.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-5\"><a href=\"#实现-5\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinearProbingHash</span>&lt;<span class=\"title\">Key</span>, <span class=\"title\">Value</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> M;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Key[] keys;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Value[] values;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LinearProbingHash</span><span class=\"params\">(<span class=\"keyword\">int</span> M)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.M = M;</span><br><span class=\"line\">\t\tkeys = (Key[]) <span class=\"keyword\">new</span> Object[M];</span><br><span class=\"line\">\t\tvalues = (Value[]) <span class=\"keyword\">new</span> Object[M];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Key x)</span></span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> (x.hashCode() &amp; <span class=\"number\">0x7fffffff</span>) % M;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">int</span> m)</span></span>&#123;</span><br><span class=\"line\">\t\tLinearProbingHash&lt;Key, Value&gt; tmp = <span class=\"keyword\">new</span> LinearProbingHash&lt;Key, Value&gt;(m);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; M; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (keys[i] != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t\ttmp.put(keys[i], values[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.M = m;</span><br><span class=\"line\">\t\tkeys = tmp.keys;</span><br><span class=\"line\">\t\tvalues = tmp.values;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (N &gt;= M / <span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t\tresize(<span class=\"number\">2</span> * M);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> m = hash(key);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (m = hash(key); keys[m] != <span class=\"keyword\">null</span>; m = (m + <span class=\"number\">1</span>) % M)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (keys[m].equals(key))&#123;</span><br><span class=\"line\">\t\t\t\tvalues[m] = value;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tkeys[m] = key;</span><br><span class=\"line\">\t\tvalues[m] = value;</span><br><span class=\"line\">\t\tN++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> m = hash(key); keys[m] != <span class=\"keyword\">null</span>; m = (m + <span class=\"number\">1</span>) % M)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (keys[m].equals(key))</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> values[m];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> m;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (m = hash(key); keys[m] != <span class=\"keyword\">null</span>; m = (m + <span class=\"number\">1</span>) % M)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (keys[m].equals(key))&#123;</span><br><span class=\"line\">\t\t\t\tkeys[m] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\tvalues[m] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (m = (m + <span class=\"number\">1</span>) % M; keys[m] != <span class=\"keyword\">null</span>; m = (m + <span class=\"number\">1</span>) % M)&#123;</span><br><span class=\"line\">\t\t\tKey k = keys[m];</span><br><span class=\"line\">\t\t\tValue v = values[m];</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tkeys[m] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\tvalues[m] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tput(k, v);</span><br><span class=\"line\">\t\t\tN--;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tN--;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (N &gt; <span class=\"number\">0</span> &amp;&amp; N == M / <span class=\"number\">8</span>)</span><br><span class=\"line\">\t\t\tresize(M / <span class=\"number\">2</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tQueue&lt;Key&gt; queue = <span class=\"keyword\">new</span> Queue&lt;Key&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; M; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (keys[i] != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t\tqueue.enqueue(keys[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> queue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> get(key) != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> N;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> size() == <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"特点-5\"><a href=\"#特点-5\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>在一张大小为M并含有N=aM个键的基于线性探测的散列表中，命中和未命中的查找所需的探测次数分别为：</p>\n<p><img src=\"http://i2.muimg.com/1949/e14e5b0fae6829b4.png\" alt=\"Markdown\"></p>\n<p>假设一张散列表能够自己调整数组的大小，初始为空。执行任意数序的t次查找、插入和删除操作所需的时间和t成正比，所使用的内存量总是在表中的键的总数的常数因子范围内。</p>\n<ol>\n<li>线性探测的平均成本取决于元素在插入数组后聚集成的一组连续的条目，也叫做键簇。短小的键簇才能保证较高的效率，因此需要动态调整数组的大小来保证使用率在1/8到1/2之间。</li>\n</ol>\n<h4 id=\"比较-3\"><a href=\"#比较-3\" class=\"headerlink\" title=\"比较\"></a>比较</h4><p>将a=N/M称为散列表的使用率。对于基于拉链法的散列表，a是每条链表的长度，因此一般大于1；对于基于线性探测的散列表，a是表中已被占用的空间的比例，它是不可能大于1的。</p>\n<h3 id=\"特点-6\"><a href=\"#特点-6\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ol>\n<li>每种类型的键都需要一个优秀的散列函数</li>\n<li>性能保证来自于散列函数的质量</li>\n<li>散列函数的计算可能复杂而且昂贵</li>\n<li>难以支持有序性相关的符号表操作</li>\n</ol>\n<h3 id=\"比较-4\"><a href=\"#比较-4\" class=\"headerlink\" title=\"比较\"></a>比较</h3><p><img src=\"http://i4.buimg.com/1949/39f17afd0f7dc23c.png\" alt=\"Markdown\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><img src=\"http://i2.muimg.com/1949/95d69b5d605ec62a.png\" alt=\"Markdown\"><br><img src=\"http://i1.piimg.com/1949/57df48f1b0bb28b0.png\" alt=\"Markdown\"></p>\n","categories":["Algorithm","Data Structure"],"tags":["Algorithm"]},{"title":"【算法】排序","url":"http://yoursite.com/2017/04/13/【算法】排序/","content":"<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><p>首先，找到数组中最小的那个元素，其次，将它和数组的第一个元素交换位置（如果第一个元素就是最小元素那么它就和自己交换）。再次，在剩下的元素中找到最小的元素，将它与数组的第二个元素交换位置。如此往复，直到将整个数组排序。</p>\n<h3 id=\"示意\"><a href=\"#示意\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/37c5303b947c2871.png\" alt=\"Markdown\"><br><img src=\"http://i4.buimg.com/1949/2e4a7fde5bb8cead.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Selection</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> minIndex = i;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; a.length; j++)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!less(a[minIndex], a[j]))</span><br><span class=\"line\">\t\t\t\t\tminIndex = j;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\texch(a, i, minIndex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(Comparable a, Comparable b)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a.compareTo(b) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">\t\tComparable t = a[i];</span><br><span class=\"line\">\t\ta[i] = a[j];</span><br><span class=\"line\">\t\ta[j] = t;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</span><br><span class=\"line\">\t\t\tSystem.out.print(a[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>对于长度为N的数组，选择排序需要大约N^2/2次比较和N次交换。</p>\n<ol>\n<li>运行时间和输入无关</li>\n<li>数据移动是最少的</li>\n</ol>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><p>将元素插入到其他已经有序的数组中的适当位置。为了要给插入的元素腾出空间，需要将其余所有元素在插入之前都向右移动一位。</p>\n<h3 id=\"示意-1\"><a href=\"#示意-1\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/58ff4414ea0b0aa8.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Insertion</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; a.length; i++)&#123;\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &gt; <span class=\"number\">0</span> &amp;&amp; less(a[j], a[j-<span class=\"number\">1</span>]); j--)</span><br><span class=\"line\">\t\t\t\texch(a, j-<span class=\"number\">1</span>, j);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(Comparable a, Comparable b)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a.compareTo(b) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">\t\tComparable t = a[i];</span><br><span class=\"line\">\t\ta[i] = a[j];</span><br><span class=\"line\">\t\ta[j] = t;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</span><br><span class=\"line\">\t\t\tSystem.out.print(a[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>对于随机排列的长度为N且主键不重复的数组，平均情况下插入排序需要～N^2/2次比较以及~N^2/4次交换。最坏情况下需要～N^2/2次比较和～N^2/2次交换，最好情况下需要N-1次比较和0次交换。</p>\n<p>插入排序需要的交换操作和数组中倒置的数量相同，需要的比较次数大于等于倒置的数量，小于等于倒置的数量加上数组的大小再减一。</p>\n<ol>\n<li>所需的时间取决于输入中元素的初始顺序，对于部分有序的数组十分高效，也很适合小规模数组</li>\n</ol>\n<h3 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h3><p>对于随机排序的无重复主键的数组，插入排序和选择排序的运行时间是平方级别的，两者之比应该是一个较小的常数。</p>\n<ol>\n<li>插入排序不会访问索引右侧的元素，而选择排序不会访问索引左侧的元素</li>\n<li>插入排序所需的比较次数平均只有选择排序的一半</li>\n</ol>\n<h2 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h2><p>希尔排序的思想是使数组中任意间隔为h的元素都是有序的。这样的数组被称为h有序数组。在进行排序时，如果h很大，就能将元素移动到很远的地方，为实现更小的h有序创造方便。用这种方式，对于任意以1结尾的h序列，都能够将数组排序。</p>\n<h3 id=\"示意-2\"><a href=\"#示意-2\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/cd9e7723e4a03206.png\" alt=\"Markdown\"><br><img src=\"http://i4.buimg.com/1949/dea476cb7d030f95.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-2\"><a href=\"#实现-2\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shell</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> h = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (h &lt;= a.length / <span class=\"number\">3</span>)</span><br><span class=\"line\">\t\t\th = <span class=\"number\">3</span> * h + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (h &gt;= <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = h; i &lt; a.length; i++)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &gt; h &amp;&amp; less(a[j], a[j-h]); j -= h)</span><br><span class=\"line\">\t\t\t\t\texch(a, j-h, j);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\th = (h - <span class=\"number\">1</span>) / <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(Comparable a, Comparable b)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a.compareTo(b) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">\t\tComparable t = a[i];</span><br><span class=\"line\">\t\ta[i] = a[j];</span><br><span class=\"line\">\t\ta[j] = t;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</span><br><span class=\"line\">\t\t\tSystem.out.print(a[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>使用递增序列1，4，13，40，121，364…的希尔排序所需的比较次数不会超出N的若干倍数乘以递增序列的长度。</p>\n<ol>\n<li>希尔排序更高效的原因是它权衡了子数组的规模和有序性。排序之初，各个子数组都很短，排序之后子数组都是部分有序的，这两种情况都很适合插入排序。</li>\n<li>希尔排序可以用于大型数组。它对任意排序（不一定是随机的）的数组表现也很好。</li>\n<li>希尔排序对于中等大小的数组它的运行时间是可以接受的。它的代码量很小，且不需要使用额外的内存空间。</li>\n</ol>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><p>要将一个数组排序，可以先（递归地）将它分成两半分别排序，然后将结果归并起来。</p>\n<p>递归实现的归并排序是算法设计中<em>分治思想</em>的典型应用。</p>\n<h3 id=\"示意-3\"><a href=\"#示意-3\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/36a6409cbc7bd58d.png\" alt=\"Markdown\"></p>\n<h3 id=\"特点-3\"><a href=\"#特点-3\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ol>\n<li>能够保证将任意长度为N的数组排序所需时间和NlogN成正比，所需的额外空间和N成正比。</li>\n<li>可以用归并排序处理数百万甚至更大规模的数组，这是插入排序或者选择排序做不到的。</li>\n</ol>\n<h3 id=\"自顶向下的归并排序\"><a href=\"#自顶向下的归并排序\" class=\"headerlink\" title=\"自顶向下的归并排序\"></a>自顶向下的归并排序</h3><h4 id=\"示意-4\"><a href=\"#示意-4\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/a840c99994a6f5a6.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-3\"><a href=\"#实现-3\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Merge</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Comparable[] aux;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</span><br><span class=\"line\">\t\taux = <span class=\"keyword\">new</span> Comparable[a.length];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tsort(a, <span class=\"number\">0</span>, a.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (lo == hi)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = (hi + lo) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tsort(a, lo, mid);</span><br><span class=\"line\">\t\tsort(a, mid+<span class=\"number\">1</span>, hi);</span><br><span class=\"line\">\t\tmerge(a, lo, mid, hi);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> hi)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> j = lo;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> k = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lo; i &lt;= hi; i++)</span><br><span class=\"line\">\t\t\taux[i] = a[i];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lo; i &lt;= hi; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j &gt; mid)</span><br><span class=\"line\">\t\t\t\ta[i] = aux[k++];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k &gt; hi)</span><br><span class=\"line\">\t\t\t\ta[i] = aux[j++];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (less(aux[j], aux[k]))</span><br><span class=\"line\">\t\t\t\ta[i] = aux[j++];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\ta[i] = aux[k++];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(Comparable a, Comparable b)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a.compareTo(b) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</span><br><span class=\"line\">\t\t\tSystem.out.print(a[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"特点-4\"><a href=\"#特点-4\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>对于长度为N的任意数组，自顶向下的归并排序需要1/2*NlgN至NlgN次比较，最多需要访问数组6NlgN次。</p>\n<h3 id=\"自底向上的归并排序\"><a href=\"#自底向上的归并排序\" class=\"headerlink\" title=\"自底向上的归并排序\"></a>自底向上的归并排序</h3><h4 id=\"示意-5\"><a href=\"#示意-5\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/0029f5c2ef45566b.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-4\"><a href=\"#实现-4\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Merge</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Comparable[] aux;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</span><br><span class=\"line\">\t\taux = <span class=\"keyword\">new</span> Comparable[a.length];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; a.length; i *= <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; a.length; j += <span class=\"number\">2</span>*i)</span><br><span class=\"line\">\t\t\t\tmerge(a, j, j+i-<span class=\"number\">1</span>, Math.min(j+<span class=\"number\">2</span>*i-<span class=\"number\">1</span>, a.length-<span class=\"number\">1</span>));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> hi)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> j = lo;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> k = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lo; i &lt;= hi; i++)</span><br><span class=\"line\">\t\t\taux[i] = a[i];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lo; i &lt;= hi; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j &gt; mid)</span><br><span class=\"line\">\t\t\t\ta[i] = aux[k++];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k &gt; hi)</span><br><span class=\"line\">\t\t\t\ta[i] = aux[j++];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (less(aux[j], aux[k]))</span><br><span class=\"line\">\t\t\t\ta[i] = aux[j++];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\ta[i] = aux[k++];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(Comparable a, Comparable b)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a.compareTo(b) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</span><br><span class=\"line\">\t\t\tSystem.out.print(a[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"特点-5\"><a href=\"#特点-5\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>对于长度为N的任意数组，自底向上的归并排序需要1/2*NlgN至NlgN次比较，最多访问数组6NlgN次。</p>\n<ol>\n<li>比较适合用链表组织的数据。只需要重新组织链表链接就能将链表原地排序（不需要创建任何的链表结点）。</li>\n<li>归并排序是一种渐进最优的基于比较排序的算法。</li>\n</ol>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><p>快速排序是一种分治的排序算法。它将一个数组分成两个子数组，将两部分独立地排序。</p>\n<h3 id=\"示意-6\"><a href=\"#示意-6\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/788a2666f6f460b3.png\" alt=\"Markdown\"><br><img src=\"http://i4.buimg.com/1949/839068374a31bf98.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-5\"><a href=\"#实现-5\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Quick</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Random random;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> seed;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        seed = System.currentTimeMillis();</span><br><span class=\"line\">        random = <span class=\"keyword\">new</span> Random(seed);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</span><br><span class=\"line\">\t\tshuffle(a);</span><br><span class=\"line\">\t\tsort(a, <span class=\"number\">0</span>, a.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (hi &lt;= lo)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = partition(a, lo, hi);</span><br><span class=\"line\">\t\tsort(a, lo, i-<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tsort(a, i+<span class=\"number\">1</span>, hi);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = lo;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> j = hi;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (i &lt; j)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (i &lt; j &amp;&amp; less(a[i], a[lo]))</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (i &lt; j &amp;&amp; less(a[lo], a[j]))</span><br><span class=\"line\">\t\t\t\tj--;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\texch(a, i, j);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\texch(a, lo, i);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(Comparable a, Comparable b)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a.compareTo(b) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">\t\tComparable t = a[i];</span><br><span class=\"line\">\t\ta[i] = a[j];</span><br><span class=\"line\">\t\ta[j] = t;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</span><br><span class=\"line\">\t\t\tSystem.out.print(a[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shuffle</span><span class=\"params\">(Object[] a)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"argument array is null\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = a.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> r = i + uniform(n-i);</span><br><span class=\"line\">            Object temp = a[i];</span><br><span class=\"line\">            a[i] = a[r];</span><br><span class=\"line\">            a[r] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">uniform</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"argument must be positive\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> random.nextInt(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"特点-6\"><a href=\"#特点-6\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>将长度为N的无重复数组排序，快速排序平均需要~2NlnN次比较（以及1/6的交换），最多需要约N^2/2次比较，但随机打乱数组能够预防这种情况。</p>\n<ol>\n<li>快速排序实现简单、适用于各种不同的输入数据且在一般应用中比其他排序算法都要快得多。</li>\n<li>快速排序是原地排序（只需要一个很小的辅助栈），且将长度为N的数组排序所需的时间和NlgN成正比。</li>\n<li>非常脆弱，在实现时要非常小心才能避免低劣的性能。</li>\n</ol>\n<h3 id=\"比较-1\"><a href=\"#比较-1\" class=\"headerlink\" title=\"比较\"></a>比较</h3><p>快速排序和归并排序是互补的：归并排序将数组分成两个子数组分别排序，并将有序的子数组归并以将整个数组排序；而快速排序将数组排序的方式则是当两个子数组都有序时整个数组也就自然有序了。</p>\n<p>在第一种情况中，递归调用发生在处理整个数组之前；在第二种情况中，递归调用发生在处理整个数组之后。</p>\n<p>在归并排序中，一个数组被等分为两半；在快速排序中，切分的位置取决于数组的内容。</p>\n<h3 id=\"三向切分的快速排序\"><a href=\"#三向切分的快速排序\" class=\"headerlink\" title=\"三向切分的快速排序\"></a>三向切分的快速排序</h3><p>在有大量重复元素的情况下，快速排序的递归性会使元素全部重复的子数组经常出现。一个简单的想法是将数组切分为三部分，分别对应小于、等于和大于切分元素的数组元素。这样的切分能够将和切分元素相等的元素归位，就不会被包含在递归调用处理的子数组之中了。</p>\n<p>对于包含大量重复元素的数组，三向切分的快速排序将排序时间从线性对数级降低到了线性级别。</p>\n<h4 id=\"示意-7\"><a href=\"#示意-7\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i2.muimg.com/1949/4ef1978a61e4d2ed.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-6\"><a href=\"#实现-6\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Quick</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Random random;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> seed;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        seed = System.currentTimeMillis();</span><br><span class=\"line\">        random = <span class=\"keyword\">new</span> Random(seed);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</span><br><span class=\"line\">\t\tshuffle(a);</span><br><span class=\"line\">\t\tsort(a, <span class=\"number\">0</span>, a.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (hi &lt;= lo)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> lt = lo;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> gt = hi;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = lo + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tComparable v = a[lo];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (i &lt;= gt)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (a[i].compareTo(v) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\texch(a, lt, i);</span><br><span class=\"line\">\t\t\t\tlt++;</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a[i].compareTo(v) &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\texch(a, gt, i);</span><br><span class=\"line\">\t\t\t\tgt--;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tsort(a, lo, lt-<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tsort(a, gt+<span class=\"number\">1</span>, hi);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">\t\tComparable t = a[i];</span><br><span class=\"line\">\t\ta[i] = a[j];</span><br><span class=\"line\">\t\ta[j] = t;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</span><br><span class=\"line\">\t\t\tSystem.out.print(a[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shuffle</span><span class=\"params\">(Object[] a)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"argument array is null\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = a.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> r = i + uniform(n-i);</span><br><span class=\"line\">            Object temp = a[i];</span><br><span class=\"line\">            a[i] = a[r];</span><br><span class=\"line\">            a[r] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">uniform</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"argument must be positive\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> random.nextInt(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"特点-7\"><a href=\"#特点-7\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>对于大小为N的数组，三向切分的快速排序需要~(2ln2)NH次比较。其中H为由主键值出现频率定义的香农信息量。</p>\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><p>堆排序可以分为两个阶段。在堆的构造阶段中，将原始数组重新组织安排进一个堆中（从右至左用sink函数构造子堆）；然后在下沉排序阶段，从堆中按递减顺序取出所有元素得到排序结果（将堆中的最大元素删除，然后放入堆缩小后数组空出的位置）。</p>\n<h3 id=\"示意-8\"><a href=\"#示意-8\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i1.piimg.com/1949/940fc4273ab8f243.png\" alt=\"Markdown\"><br><img src=\"http://i1.piimg.com/1949/f91b943a1d066418.png\" alt=\"Markdown\"><br><img src=\"http://i1.piimg.com/1949/820fe5415a95d65a.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-7\"><a href=\"#实现-7\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Heap</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n = a.length;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n / <span class=\"number\">2</span>; i &gt;= <span class=\"number\">1</span>; i--)</span><br><span class=\"line\">\t\t\tsink(a, i, n);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (n &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\texch(a, <span class=\"number\">0</span>, n-<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\tsink(a, <span class=\"number\">1</span>, --n);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(Comparable a, Comparable b)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a.compareTo(b) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">\t\tComparable t = a[i];</span><br><span class=\"line\">\t\ta[i] = a[j];</span><br><span class=\"line\">\t\ta[j] = t;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sink</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"number\">2</span> * k &lt;= n)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> j = <span class=\"number\">2</span> * k;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j &lt; n &amp;&amp; less(a[j-<span class=\"number\">1</span>], a[j]))</span><br><span class=\"line\">\t\t\t\tj++;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!less(a[k-<span class=\"number\">1</span>], a[j-<span class=\"number\">1</span>]))</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\texch(a, k-<span class=\"number\">1</span>, j-<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tk = j;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</span><br><span class=\"line\">\t\t\tSystem.out.print(a[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"特点-8\"><a href=\"#特点-8\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>用下沉操作由N个元素构造堆只需少于2N次比较以及少于N次交换。</p>\n<p>将N个元素排序，堆排序只需少于（2NlgN+2N）次比较（以及一半次数的交换）。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>快速排序是最快的通用排序算法。</p>\n<p><img src=\"http://i1.piimg.com/1949/5fb571a8e7c4ba4b.png\" alt=\"Markdown\"></p>\n","categories":["Algorithm","Data Structure"],"tags":["Algorithm"]},{"title":"【算法】基础","url":"http://yoursite.com/2017/04/13/【算法】基础/","content":"<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><p>链表是一种递归的数据结构，它或者为空（null），或者是指向一个结点（node）的引用，该结点含有一个泛型的元素和一个指向另一条链表的引用。</p>\n<h3 id=\"结点记录\"><a href=\"#结点记录\" class=\"headerlink\" title=\"结点记录\"></a>结点记录</h3><p>用一个嵌套类来定义结点的抽象数据类型。一个Node对象含有两个实例变量，类型分别为Item（参数类型）和Node。调用的结果是一个指向Node对象的引用，它的实例变量均被初始化为null。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</span><br><span class=\"line\">\tItem item;</span><br><span class=\"line\">\tNode next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造链表\"><a href=\"#构造链表\" class=\"headerlink\" title=\"构造链表\"></a>构造链表</h3><p><img src=\"http://i2.muimg.com/1949/2fae2b9aa25cf46c.png\" alt=\"Markdown\"></p>\n<h3 id=\"在表头插入结点\"><a href=\"#在表头插入结点\" class=\"headerlink\" title=\"在表头插入结点\"></a>在表头插入结点</h3><p><img src=\"http://i2.muimg.com/1949/b3feac44119e5385.png\" alt=\"Markdown\"></p>\n<h3 id=\"从表头删除结点\"><a href=\"#从表头删除结点\" class=\"headerlink\" title=\"从表头删除结点\"></a>从表头删除结点</h3><p><img src=\"http://i2.muimg.com/1949/a353747333a6df9a.png\" alt=\"Markdown\"></p>\n<h3 id=\"在表尾插入结点\"><a href=\"#在表尾插入结点\" class=\"headerlink\" title=\"在表尾插入结点\"></a>在表尾插入结点</h3><p><img src=\"http://i2.muimg.com/1949/99b757251fa0d3ae.png\" alt=\"Markdown\"></p>\n<h3 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (Node x = first; x != <span class=\"keyword\">null</span>; x = x.next)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//处理x.item</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li>可以处理任意类型的数据</li>\n<li>所需的空间总是和集合的大小成正比</li>\n<li>操作所需的时间总是和集合的大小无关</li>\n</ol>\n<h2 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h2><p>栈是一种基于后进先出（LIFO）策略的集合类型。</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>将栈保存为一条链表，栈的顶部即为表头，实例变量first指向栈顶。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">E</span>&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node first;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</span><br><span class=\"line\">\t\tE e;</span><br><span class=\"line\">\t\tNode next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n == <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(E e)</span></span>&#123;</span><br><span class=\"line\">\t\tNode oldFirst = first;</span><br><span class=\"line\">\t\tfirst = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">\t\tfirst.e = e;</span><br><span class=\"line\">\t\tfirst.next = oldFirst;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tn++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">pop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tE e = first.e;</span><br><span class=\"line\">\t\tfirst = first.next;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tn--;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> e;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ListIterator();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt;</span>&#123;</span><br><span class=\"line\">\t\tNode current = first;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> current != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tE e = current.e;</span><br><span class=\"line\">\t\t\tcurrent = current.next;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> e;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><p>队列是一种基于先进先出（FIFO）策略的集合类型。</p>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>将队列表示为一条从最早插入的元素到最近插入的元素的链表，实例变量first指向队列的开头，实例变量last指向队列的结尾。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">E</span>&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node first;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node last;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</span><br><span class=\"line\">\t\tE e;</span><br><span class=\"line\">\t\tNode next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n == <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">enqueue</span><span class=\"params\">(E e)</span></span>&#123;</span><br><span class=\"line\">\t\tNode oldLast = last;</span><br><span class=\"line\">\t\tlast = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">\t\tlast.e = e;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty())</span><br><span class=\"line\">\t\t\tfirst = last;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\toldLast.next = last;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tn++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">dequeue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tE e = first.e;</span><br><span class=\"line\">\t\tfirst = first.next;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty())</span><br><span class=\"line\">\t\t\tlast = first;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tn--;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> e;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ListIterator();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt;</span>&#123;</span><br><span class=\"line\">\t\tNode current = first;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> current != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tE e = current.e;</span><br><span class=\"line\">\t\t\tcurrent = current.next;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> e;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二叉堆\"><a href=\"#二叉堆\" class=\"headerlink\" title=\"二叉堆\"></a>二叉堆</h2><p>在二叉堆的数组中，每个元素都要保证大于等于另两个特定位置的元素。相应地，这些位置的元素又至少要大于等于数组中的另两个元素，以此类推。</p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>当一棵二叉树的结点都大于等于它的两个子结点时，它被称为堆有序。</p>\n<p>二叉堆是一组能够用堆有序的完全二叉树排序的元素，并在数组中按照层级存储（不使用数组的第一个位置）。</p>\n<ol>\n<li>根结点是堆有序的二叉树中的最大结点</li>\n<li>一棵大小为N的完全二叉树的高度为floor(lgN)</li>\n</ol>\n<h3 id=\"示意\"><a href=\"#示意\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/2bd7dc7c0a5c6f3c.png\" alt=\"Markdown\"></p>\n<h3 id=\"由下至上的堆有序化（上浮）\"><a href=\"#由下至上的堆有序化（上浮）\" class=\"headerlink\" title=\"由下至上的堆有序化（上浮）\"></a>由下至上的堆有序化（上浮）</h3><p>如果堆的有序状态因为某个结点变得比它的父结点更大而被打破，那么就需要通过交换它和它的父结点来修复堆。</p>\n<h4 id=\"示意-1\"><a href=\"#示意-1\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/1a7c19e6c147a7a9.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-2\"><a href=\"#实现-2\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swim</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (k &gt; <span class=\"number\">1</span> &amp;&amp; less(k/<span class=\"number\">2</span>, k))&#123;</span><br><span class=\"line\">\t\texch(k, k/<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tk /= <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"由上至下的堆有序化（下沉）\"><a href=\"#由上至下的堆有序化（下沉）\" class=\"headerlink\" title=\"由上至下的堆有序化（下沉）\"></a>由上至下的堆有序化（下沉）</h3><p>如果堆的有序状态因为某个结点变得比它的两个子结点或是其中之一更小了而被打破了，那么可以通过将它和它的两个子结点中的较大者交换来恢复堆。</p>\n<h4 id=\"示意-2\"><a href=\"#示意-2\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/89505058e58013f5.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-3\"><a href=\"#实现-3\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sink</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">2</span> * k &lt;= n)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> j = <span class=\"number\">2</span> * k;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (j &lt; n &amp;&amp; less(j, j+<span class=\"number\">1</span>))</span><br><span class=\"line\">\t\t\tj++;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!less(k, j))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\texch(k, j);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tk = j;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"优先队列\"><a href=\"#优先队列\" class=\"headerlink\" title=\"优先队列\"></a>优先队列</h2><p>优先队列是一种抽象数据类型，它表示了一组值和对这些值的操作。优先队列最重要的操作就是删除最大元素delMax()和插入元素insert()。</p>\n<h3 id=\"示意-3\"><a href=\"#示意-3\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/0fea3523976b8835.png\" alt=\"Markdown\"></p>\n<h3 id=\"插入元素\"><a href=\"#插入元素\" class=\"headerlink\" title=\"插入元素\"></a>插入元素</h3><p>将新元素加到数组末尾，增加堆的大小并让这个新元素上浮到合适的位置。</p>\n<p><img src=\"http://i4.buimg.com/1949/d0ca8c6eedd7b9a5.png\" alt=\"Markdown\"></p>\n<h3 id=\"删除最大元素\"><a href=\"#删除最大元素\" class=\"headerlink\" title=\"删除最大元素\"></a>删除最大元素</h3><p>从数组顶端删去最大的元素并将数组的最后一个元素放到顶端，减小堆的大小并让这个元素下沉到合适的位置。</p>\n<p><img src=\"http://i4.buimg.com/1949/0669587c1214742e.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-4\"><a href=\"#实现-4\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MaxPQ</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Key[] pq;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MaxPQ</span><span class=\"params\">(<span class=\"keyword\">int</span> max)</span></span>&#123;</span><br><span class=\"line\">\t\tpq = (Key[]) <span class=\"keyword\">new</span> Comparable[max+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n == <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Key k)</span></span>&#123;</span><br><span class=\"line\">\t\tpq[++n] = k;</span><br><span class=\"line\">\t\tswim(n);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">delMax</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tKey k = pq[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\texch(<span class=\"number\">1</span>, n);</span><br><span class=\"line\">\t\tn--;</span><br><span class=\"line\">\t\tpq[n+<span class=\"number\">1</span>] = <span class=\"keyword\">null</span>; </span><br><span class=\"line\">\t\tsink(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> k;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pq[i].compareTo(pq[j]) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">\t\tKey t = pq[i];</span><br><span class=\"line\">\t\tpq[i] = pq[j];</span><br><span class=\"line\">\t\tpq[j] = t;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swim</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (k &gt; <span class=\"number\">1</span> &amp;&amp; less(k/<span class=\"number\">2</span>, k))&#123;</span><br><span class=\"line\">\t\t\texch(k, k/<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t\tk /= <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sink</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"number\">2</span> * k &lt;= n)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> j = <span class=\"number\">2</span> * k;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j &lt; n &amp;&amp; less(j, j+<span class=\"number\">1</span>))</span><br><span class=\"line\">\t\t\t\tj++;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!less(k, j))</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\texch(k, j);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tk = j;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>对于一个含有N个元素的基于堆的优先队列，插入元素操作只需不超过（lgN+1）次比较，删除最大元素的操作需要不超过2lgN次比较。</p>\n<h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><p>二叉树由结点组成，结点包含的链接可以指向空（null）或者其他结点。在二叉树中，每个结点只能有一个父结点指向自己（只有一个例外，也就是根结点，它没有父结点），而且每个结点都只有左右两个链接，分别指向自己的左子结点和右子结点。</p>\n<h3 id=\"示意-4\"><a href=\"#示意-4\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/a7eb66a889f94fda.png\" alt=\"Markdown\"></p>\n<h2 id=\"二叉查找树\"><a href=\"#二叉查找树\" class=\"headerlink\" title=\"二叉查找树\"></a>二叉查找树</h2><p>一棵二叉查找树（BST）是一棵二叉树，其中每个结点都含有一个Comparable的键（以及相关联的值）且每个结点的键都大于其左子树中的任意结点的键而小于右子树的任意结点的键。</p>\n<h3 id=\"示意-5\"><a href=\"#示意-5\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/3dac73f08016efaa.png\" alt=\"Markdown\"></p>\n<h3 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h3><p><img src=\"http://i1.piimg.com/1949/ac9f0373e2f6eaea.png\" alt=\"Markdown\"></p>\n<h3 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h3><p><img src=\"http://i1.piimg.com/1949/60048b17572f2981.png\" alt=\"Markdown\"></p>\n<h3 id=\"向下取整\"><a href=\"#向下取整\" class=\"headerlink\" title=\"向下取整\"></a>向下取整</h3><p><img src=\"http://i1.piimg.com/1949/2ab50411f56bb58b.png\" alt=\"Markdown\"></p>\n<h3 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h3><p><img src=\"http://i1.piimg.com/1949/3e77615b752ffe0d.png\" alt=\"Markdown\"></p>\n<h3 id=\"删除最小键\"><a href=\"#删除最小键\" class=\"headerlink\" title=\"删除最小键\"></a>删除最小键</h3><p><img src=\"http://i1.piimg.com/1949/f4195cae1bdf13a9.png\" alt=\"Markdown\"></p>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p><img src=\"http://i1.piimg.com/1949/ca452c8fd1292456.png\" alt=\"Markdown\"></p>\n<h3 id=\"范围查找\"><a href=\"#范围查找\" class=\"headerlink\" title=\"范围查找\"></a>范围查找</h3><p>需要一个遍历二叉查找树的基本方法，叫做中序遍历。</p>\n<p><img src=\"http://i1.piimg.com/1949/faf9f99b7542d5ea.png\" alt=\"Markdown\"></p>\n<h2 id=\"平衡查找树\"><a href=\"#平衡查找树\" class=\"headerlink\" title=\"平衡查找树\"></a>平衡查找树</h2><p>在一棵含有N个结点的树中，树高为～lgN。</p>\n<h3 id=\"2-3查找树\"><a href=\"#2-3查找树\" class=\"headerlink\" title=\"2-3查找树\"></a>2-3查找树</h3><p>一棵2-3查找树或为一棵空树，或由以下结点组成：</p>\n<ol>\n<li>2-结点，含有一个键（及其对应的值）和两条链接，左链接指向的2-3树中的键都小于该结点，右链接指向的2-3树中的键都大于该结点。</li>\n<li>3-结点，含有两个键（及其对应的值）和三条链接，左链接指向的2-3树中的键都小于该结点，中链接指向的2-3树中的键都位于该结点的两个键之间，右链接指向的2-3树中的键都大于该结点。</li>\n</ol>\n<p>将指向一棵空树的链接称为空链接。</p>\n<p>一棵完美平衡的2-3查找树中的所有空链接到根结点的距离都应该是相同的。</p>\n<h4 id=\"示意-6\"><a href=\"#示意-6\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/c13139f2c2dfe965.png\" alt=\"Markdown\"><br><img src=\"http://i1.piimg.com/1949/e79a6807de668bd7.png\" alt=\"Markdown\"></p>\n<h4 id=\"查找-1\"><a href=\"#查找-1\" class=\"headerlink\" title=\"查找\"></a>查找</h4><p><img src=\"http://i1.piimg.com/1949/d546e5595bf8c444.png\" alt=\"Markdown\"></p>\n<h4 id=\"插入-1\"><a href=\"#插入-1\" class=\"headerlink\" title=\"插入\"></a>插入</h4><h5 id=\"向2-结点中插入新键\"><a href=\"#向2-结点中插入新键\" class=\"headerlink\" title=\"向2-结点中插入新键\"></a>向2-结点中插入新键</h5><p><img src=\"http://i1.piimg.com/1949/23e6a42f3239e670.png\" alt=\"Markdown\"></p>\n<h5 id=\"向一棵只含有一个3-结点的树中插入新键\"><a href=\"#向一棵只含有一个3-结点的树中插入新键\" class=\"headerlink\" title=\"向一棵只含有一个3-结点的树中插入新键\"></a>向一棵只含有一个3-结点的树中插入新键</h5><p><img src=\"http://i1.piimg.com/1949/1194c64a618adf69.png\" alt=\"Markdown\"></p>\n<h5 id=\"向一个父结点为2-结点的3-结点中插入新键\"><a href=\"#向一个父结点为2-结点的3-结点中插入新键\" class=\"headerlink\" title=\"向一个父结点为2-结点的3-结点中插入新键\"></a>向一个父结点为2-结点的3-结点中插入新键</h5><p><img src=\"http://i2.muimg.com/1949/fa81da5c45e21cd2.png\" alt=\"Markdown\"></p>\n<h5 id=\"向一个父结点为3-结点的3-结点中插入新键\"><a href=\"#向一个父结点为3-结点的3-结点中插入新键\" class=\"headerlink\" title=\"向一个父结点为3-结点的3-结点中插入新键\"></a>向一个父结点为3-结点的3-结点中插入新键</h5><p><img src=\"http://i4.buimg.com/1949/f7cf69a22112237e.png\" alt=\"Markdown\"></p>\n<h5 id=\"分解根结点\"><a href=\"#分解根结点\" class=\"headerlink\" title=\"分解根结点\"></a>分解根结点</h5><p><img src=\"http://i1.piimg.com/1949/233af11e545fc9c8.png\" alt=\"Markdown\"></p>\n<h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>在一棵大小为N的2-3树中，查找和插入操作访问的结点必然不超过lgN个。</p>\n<ol>\n<li>2-3树插入算法的根本在于这些变换都是局部的：除了相关的结点和链接之外不必修改或者检查树的其他部分。</li>\n<li>这些局部变换不会影响树的全局有序性和平衡性：任意空链接到根结点的路径长度都是相等的。</li>\n</ol>\n<h4 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h4><p>和标准的二叉查找树由上向下生长不同，2-3树的生长是由下向上的。</p>\n<p>需要维护两种不同类型的结点，将被查找的键和结点中的每个键进行比较，将链接和其他信息从一种结点复制到另一种结点，将结点从一种数据类型转换到另一种数据类型等等。实现这些不仅需要大量的代码，而且它们所产生的额外开销可能会使算法比标准的二叉查找树更慢。</p>\n<h3 id=\"红黑二叉查找树\"><a href=\"#红黑二叉查找树\" class=\"headerlink\" title=\"红黑二叉查找树\"></a>红黑二叉查找树</h3><p>红黑二叉查找树背后的基本思想是用标准的二叉查找树（完全由2-结点构成）和一些额外的信息（替换3-结点）来表示2-3树。将树中的链接分为两种类型：</p>\n<ol>\n<li>红链接：将两个2-结点连接起来构成一个3-结点</li>\n<li>黑链接：2-3树中的普通链接。</li>\n</ol>\n<p>确切的说，将3-结点表示为由一条左斜的红色链接（两个2-结点其中之一是另一个的左子结点）相连的两个2-结点。</p>\n<h4 id=\"示意-7\"><a href=\"#示意-7\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/8477f275f5314089.png\" alt=\"Markdown\"><br><img src=\"http://i2.muimg.com/1949/000923f1d00e52b8.png\" alt=\"Markdown\"></p>\n<h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>红黑树是含有红黑链接并满足下列条件的二叉查找树：</p>\n<ol>\n<li>红链接均为左链接</li>\n<li>没有任何一个结点同时和两条红链接相连</li>\n<li>该树是完美黑色平衡的，即任意空链接到根结点的路径上的黑链接数量相同</li>\n</ol>\n<h4 id=\"颜色表示\"><a href=\"#颜色表示\" class=\"headerlink\" title=\"颜色表示\"></a>颜色表示</h4><p><img src=\"http://i1.piimg.com/1949/a2e6553a3a65f988.png\" alt=\"Markdown\"></p>\n<h4 id=\"颜色转换\"><a href=\"#颜色转换\" class=\"headerlink\" title=\"颜色转换\"></a>颜色转换</h4><p><img src=\"http://i2.muimg.com/1949/1ea6d6e50aaae209.png\" alt=\"Markdown\"><br><img src=\"http://i1.piimg.com/1949/5983c53313227279.png\" alt=\"Markdown\"></p>\n<h4 id=\"旋转\"><a href=\"#旋转\" class=\"headerlink\" title=\"旋转\"></a>旋转</h4><p><img src=\"http://i1.piimg.com/1949/ee04b318b328c5af.png\" alt=\"Markdown\"><br><img src=\"http://i1.piimg.com/1949/8af590b360b2f790.png\" alt=\"Markdown\"></p>\n<h5 id=\"实现-5\"><a href=\"#实现-5\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">rotateLeft</span><span class=\"params\">(Node h)</span></span>&#123;</span><br><span class=\"line\">\tNode x = h.right;</span><br><span class=\"line\">\th.right = x.left;</span><br><span class=\"line\">\tx.left = h;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tx.color = h.color;</span><br><span class=\"line\">\th.color = RED;</span><br><span class=\"line\">\tx.n = h.n;</span><br><span class=\"line\">\th.n = size(h.left) + size(h.right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">rotateRight</span><span class=\"params\">(Node h)</span></span>&#123;</span><br><span class=\"line\">\tNode x = h.left;</span><br><span class=\"line\">\th.left = x.right;</span><br><span class=\"line\">\tx.right = h;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tx.color = h.color;</span><br><span class=\"line\">\th.color = RED;</span><br><span class=\"line\">\tx.n = h.n;</span><br><span class=\"line\">\th.n = size(h.left) + size(h.right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"插入-2\"><a href=\"#插入-2\" class=\"headerlink\" title=\"插入\"></a>插入</h4><h5 id=\"向2-结点中插入新键-1\"><a href=\"#向2-结点中插入新键-1\" class=\"headerlink\" title=\"向2-结点中插入新键\"></a>向2-结点中插入新键</h5><p><img src=\"http://i4.buimg.com/1949/0b8bbef6cc6aee83.png\" alt=\"Markdown\"></p>\n<h5 id=\"向树底部的2-结点插入新键\"><a href=\"#向树底部的2-结点插入新键\" class=\"headerlink\" title=\"向树底部的2-结点插入新键\"></a>向树底部的2-结点插入新键</h5><p><img src=\"http://i2.muimg.com/1949/6bd301d8d00e1546.png\" alt=\"Markdown\"></p>\n<h5 id=\"向一棵双键树（即一个3-结点）中插入新键\"><a href=\"#向一棵双键树（即一个3-结点）中插入新键\" class=\"headerlink\" title=\"向一棵双键树（即一个3-结点）中插入新键\"></a>向一棵双键树（即一个3-结点）中插入新键</h5><p><img src=\"http://i2.muimg.com/1949/a35d435ca7cf05c6.png\" alt=\"Markdown\"></p>\n<h5 id=\"向树底部的3-结点插入新键\"><a href=\"#向树底部的3-结点插入新键\" class=\"headerlink\" title=\"向树底部的3-结点插入新键\"></a>向树底部的3-结点插入新键</h5><p><img src=\"http://i1.piimg.com/1949/1a9a7c08fe68f4b2.png\" alt=\"Markdown\"></p>\n<h4 id=\"删除-1\"><a href=\"#删除-1\" class=\"headerlink\" title=\"删除\"></a>删除</h4><p>不仅要在构造临时4-结点时沿着查找路径向下进行变换，还要在分解遗留的4-结点时沿着查找路径向上进行变换。</p>\n<h5 id=\"删除最小键-1\"><a href=\"#删除最小键-1\" class=\"headerlink\" title=\"删除最小键\"></a>删除最小键</h5><p><img src=\"http://i4.buimg.com/1949/551767262f0d3a7c.png\" alt=\"Markdown\"></p>\n<h4 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ol>\n<li>对于任意的2-3树，只要对结点进行转换，都可以立即派生出一棵对应的二叉查找树。</li>\n<li>红黑树既是二叉查找树，也是2-3树。</li>\n</ol>\n<h2 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h2><h3 id=\"示意-8\"><a href=\"#示意-8\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i2.muimg.com/1949/a1e95a1dfec7c611.png\" alt=\"Markdown\"></p>\n<h3 id=\"散列函数\"><a href=\"#散列函数\" class=\"headerlink\" title=\"散列函数\"></a>散列函数</h3><p>如果有一个能够保存M个键值对的数组，那么就需要一个能够将任意键转化为该数组范围内的索引（[0, M-1]范围内的整数）的散列函数。要找的散列函数应该易于计算并且能够均匀分布所有的键，即对于任意键，0到M-1之间的每个整数都有相等的可能性与之对应（与键无关）。</p>\n<h3 id=\"特点-3\"><a href=\"#特点-3\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>散列表是算法在时间和空间上作出权衡的经典例子。不必重写代码，只需要调整散列算法的参数就可以在空间和时间之间作出取舍。</p>\n<h2 id=\"邻接表\"><a href=\"#邻接表\" class=\"headerlink\" title=\"邻接表\"></a>邻接表</h2><p>将每个顶点的所有相邻顶点都保存在该顶点对应的元素所指向的一张链表中。</p>\n<h3 id=\"示意-9\"><a href=\"#示意-9\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i1.piimg.com/1949/117718a60bfb2d62.png\" alt=\"Markdown\"></p>\n<h3 id=\"特点-4\"><a href=\"#特点-4\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ol>\n<li>使用的空间和V+E成正比</li>\n<li>添加一条边所需的时间为常数</li>\n<li>遍历顶点v的所有相邻顶点所需的时间和v的度数成正比（处理每个相邻顶点所需的时间为常数）</li>\n</ol>\n<h2 id=\"无向图\"><a href=\"#无向图\" class=\"headerlink\" title=\"无向图\"></a>无向图</h2><p>边仅仅是两个顶点之间的连接。</p>\n<p>当两个顶点通过一条边相连时，称这两个顶点是相邻的，并称该连接依附于这两个顶点。某个顶点的度数即为依附于它的边的总数。子图是由一幅图的所有边的一个子集（以及它们所依附的所有顶点）组成的图。</p>\n<p>当两个顶点之间存在一条连接双方的路径时，称一个顶点和另一个顶点是连通的。</p>\n<p>特殊的图：</p>\n<ol>\n<li>自环，即一条连接一个顶点和其自身的边</li>\n<li>连接同一对顶点的两条边称为平行边</li>\n</ol>\n<p>当且仅当一幅含有V个结点的图G满足下列5个条件之一时，它就是一棵树：</p>\n<ol>\n<li>G有V-1条边且不含有环</li>\n<li>G有V-1条边且是连通的</li>\n<li>G是连通的，但删除任意一条边都会使它不再连通</li>\n<li>G是无环图，但添加任意一条边都会产生一条环</li>\n<li>G中的任意一对顶点之间仅存在一条简单路径</li>\n</ol>\n<p>图的密度是指已经连接的顶点对占所有可能被连接的顶点对的比例。在稀疏图中，被连接的顶点对很少；而在稠密图中，只有少部分顶点对之间没有边连接。</p>\n<p>二分图是一种能够将所有结点分为两部分的图，其中图的每条边所连接的两个顶点都分别属于不同的部分。</p>\n<h3 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>图是由一组顶点和一组能够将两个顶点相连的边组成的。</p>\n<p>在图中，路径是由边顺序连接的一系列顶点。简单路径是一条没有重复顶点的路径。环是一条至少含有一条边且起点和终点相同的路径，简单环是一条（除了起点和终点必须相同之外）不含有重复顶点和边的环。路径或者环的长度为其中所包含的边数。</p>\n<p>如果从任意一个顶点都存在一条路径到达另一个任意顶点，称这幅图是连通图。一幅非连通的图由若干连通的部分组成，它们都是其极大连通子图。</p>\n<p>树是一幅无环连通图。互不相连的树组成的集合称为森林。连通图的生成树是它的一幅子图，它含有图中的所有顶点且是一棵树。图的生成树森林是它的所有连通子图的生成树的集合。</p>\n<h3 id=\"示意-10\"><a href=\"#示意-10\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/0865c64aa1cbe6ca.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-6\"><a href=\"#实现-6\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Graph</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> V;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> E;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Stack&lt;Integer&gt;[] adj;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Graph</span><span class=\"params\">(<span class=\"keyword\">int</span> V)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.V = V;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.E = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tadj = (Stack&lt;Integer&gt;[]) <span class=\"keyword\">new</span> Stack[V];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; V; v++)</span><br><span class=\"line\">\t\t\tadj[v] = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">V</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> V;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">E</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> E;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span></span>&#123;</span><br><span class=\"line\">\t\tadj[v].push(w);</span><br><span class=\"line\">\t\tadj[w].push(v);</span><br><span class=\"line\">\t\tE++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">adj</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> adj[v];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"有向图\"><a href=\"#有向图\" class=\"headerlink\" title=\"有向图\"></a>有向图</h2><p>边是单向的：每条边所连接的两个顶点都是一个有序对，它们的邻接性是单向的。</p>\n<p>一个顶点的出度为由该顶点指出的边的总数；一个顶点的入度为指向该顶点的边的总数。</p>\n<p>一条有向边的第一个顶点称为它的头，第二个顶点则被称为它的尾。</p>\n<p>两个顶点是强连通的当且仅当它们都在一个普通的有向环中。</p>\n<p>有向图中的强连通性是一种顶点之间平等关系，因为它有着以下性质：</p>\n<ol>\n<li>自反性：任意顶点v和自己都是强连通的。</li>\n<li>对称性：如果v和w是强连通的，那么w和v也是强连通的。</li>\n<li>传递性：如果v和w是强连通的且w和x也是强连通的，那么v和x也是强连通的。</li>\n</ol>\n<p>作为一种平等关系，强连通行将所有顶点分为了一些平等的部分，每个部分都是由相互均为强连通的顶点的最大子集组成的，将这些子集称为强连通分量。一个含有V个顶点的有向图含有1～V个强连通分量，一个强连通图只含有一个强连通分量，而一个有向无环图中则含有V个强连通分量。</p>\n<h3 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>一幅有方向性的图（或有向图）是由一组顶点和一组有方向的边组成的，每条有方向的边都连接着有序的一对顶点。</p>\n<p>在一幅有向图中，有向路径由一系列顶点组成，对于其中的每个顶点都存在一条有向边从它指向序列中的下一个顶点。有向环为一条至少含有一条边且起点和终点相同的有向路径。简单有向环是一条（除了起点和终点必须相同之外）不含有重复的顶点和边的环。路径或者环的长度即为其中所包含的边数。</p>\n<p>如果两个顶点v和w是互相可达的，则称它们为强连通的。也就是说，既存在一条从v到w的有向路径，也存在一条从w到v的有向路径。如果一幅有向图中的任意两个顶点都是强连通的，则称这幅有向图也是强连通的。</p>\n<h3 id=\"示意-11\"><a href=\"#示意-11\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i2.muimg.com/1949/8f5117d2843fd6ed.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-7\"><a href=\"#实现-7\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Digraph</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> V;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> E;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Stack&lt;Integer&gt;[] adj;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Digraph</span><span class=\"params\">(<span class=\"keyword\">int</span> V)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.V = V;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.E = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tadj = (Stack&lt;Integer&gt;[]) <span class=\"keyword\">new</span> Stack[V];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; V; v++)&#123;</span><br><span class=\"line\">\t\t\tadj[v] = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">V</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> V;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">E</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> E;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span></span>&#123;</span><br><span class=\"line\">\t\tadj[v].push(w);</span><br><span class=\"line\">\t\tE++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">adj</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> adj[v];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Digraph <span class=\"title\">reverse</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tDigraph tmp = <span class=\"keyword\">new</span> Digraph(V);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; V; v++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : adj[v])</span><br><span class=\"line\">\t\t\t\ttmp.addEdge(w, v);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"加权无向图\"><a href=\"#加权无向图\" class=\"headerlink\" title=\"加权无向图\"></a>加权无向图</h2><p>加权图是一种为每条边关联一个权值或是成本的图模型。</p>\n<h3 id=\"示意-12\"><a href=\"#示意-12\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/3e0b4aa2190cd2cd.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-8\"><a href=\"#实现-8\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Edge</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Edge</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> v;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> w;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> weight;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Edge</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w, <span class=\"keyword\">double</span> weight)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.v = v;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.w = w;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.weight = weight;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">weight</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> weight;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">either</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> v;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">other</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (vertex == v)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> w;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> v;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Edge that)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Double.compare(<span class=\"keyword\">this</span>.weight, that.weight);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EdgeWeightedGraph</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> V;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> E;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Stack&lt;Edge&gt;[] adj;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EdgeWeightedGraph</span><span class=\"params\">(<span class=\"keyword\">int</span> V)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.V = V;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.E = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tadj = (Stack&lt;Edge&gt;[]) <span class=\"keyword\">new</span> Stack[V];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; V; v++)</span><br><span class=\"line\">\t\t\tadj[v] = <span class=\"keyword\">new</span> Stack&lt;Edge&gt;();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">V</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> V;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">E</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> E;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(Edge e)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> v = e.either();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> w = e.other(v);</span><br><span class=\"line\">\t\tadj[v].push(e);</span><br><span class=\"line\">\t\tadj[w].push(e);</span><br><span class=\"line\">\t\tE++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Edge&gt; <span class=\"title\">adj</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> adj[v];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Edge&gt; <span class=\"title\">edges</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tStack&lt;Edge&gt; stack = <span class=\"keyword\">new</span> Stack&lt;Edge&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; V; v++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(Edge e : adj[v])&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (e.other(v) &gt; v)</span><br><span class=\"line\">\t\t\t\t\tstack.push(e);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> stack;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最小生成树\"><a href=\"#最小生成树\" class=\"headerlink\" title=\"最小生成树\"></a>最小生成树</h2><h3 id=\"定义-4\"><a href=\"#定义-4\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>图的生成树是它的一棵含有其所有顶点的无环连通子图。一幅加权无向图的最小生成树（MST）是它的一棵权值（树中所有边的权值之和）最小的生成树。</p>\n<h3 id=\"示意-13\"><a href=\"#示意-13\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i2.muimg.com/1949/e5eea683c1af8b4c.png\" alt=\"Markdown\"></p>\n<h3 id=\"切分定理\"><a href=\"#切分定理\" class=\"headerlink\" title=\"切分定理\"></a>切分定理</h3><p>把加权图中的所有顶点分为两个集合、检查横跨两个集合的所有边并识别哪条边应属于图的最小生成树。通常，通过指定一个顶点集并隐式地认为它的补集为另一个顶点集来指定一个切分。这样，一条横切边就是连接该集合的一个顶点和不在该集合中的另一个顶点的一条边。</p>\n<h4 id=\"定义-5\"><a href=\"#定义-5\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>图的一种切分是将图的所有顶点分为两个非空且不重复的两个集合。横切边是一条连接两个属于不同集合的顶点的边。</p>\n<p>在一幅加权图中，给定任意的切分，它的横切边中的权重最小者必然属于图的最小生成树。</p>\n<h4 id=\"示意-14\"><a href=\"#示意-14\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i2.muimg.com/1949/b1ee2a6de3297463.png\" alt=\"Markdown\"></p>\n<h3 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h3><p>使用切分定理找到最小生成树的一条边，不断重复直到找到最小生成树的所有边。</p>\n<h4 id=\"定义-6\"><a href=\"#定义-6\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>将含有V个顶点的任意加权连通图中属于最小生成树的边标记为黑色：初始状态下所有边均为灰色，找到一种切分，它产生的横切边均不为黑色。将它权重最小的横切边标记为黑色。反复，直到标记了V-1条黑色边为止。</p>\n<h4 id=\"示意-15\"><a href=\"#示意-15\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i2.muimg.com/1949/90008faa2bf66c84.png\" alt=\"Markdown\"></p>\n<h2 id=\"加权有向图\"><a href=\"#加权有向图\" class=\"headerlink\" title=\"加权有向图\"></a>加权有向图</h2><p>在加权有向图中，每条有向路径都有一个与之关联的路径权重。</p>\n<h3 id=\"示意-16\"><a href=\"#示意-16\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i1.piimg.com/1949/675425f71207174c.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-9\"><a href=\"#实现-9\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirectedEdge</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> v;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> w;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> weight;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DirectedEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w, <span class=\"keyword\">double</span> weight)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.v = v;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.w = w;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.weight = weight;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">weight</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> weight;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">from</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> v;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">to</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> w;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EdgeWeightedDigraph</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> V;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> E;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Stack&lt;DirectedEdge&gt;[] adj;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EdgeWeightedDigraph</span><span class=\"params\">(<span class=\"keyword\">int</span> V)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.V = V;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.E = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tadj = (Stack&lt;DirectedEdge&gt;[]) <span class=\"keyword\">new</span> Stack[V];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; V; v++)</span><br><span class=\"line\">\t\t\tadj[v] = <span class=\"keyword\">new</span> Stack&lt;DirectedEdge&gt;();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">V</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> V;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">E</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> E;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(DirectedEdge e)</span></span>&#123;</span><br><span class=\"line\">\t\tadj[e.from()].push(e);</span><br><span class=\"line\">\t\tE++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;DirectedEdge&gt; <span class=\"title\">adj</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> adj[v];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;DirectedEdge&gt; <span class=\"title\">edges</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tStack&lt;DirectedEdge&gt; stack = <span class=\"keyword\">new</span> Stack&lt;DirectedEdge&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; V; v++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(DirectedEdge e : adj[v])</span><br><span class=\"line\">\t\t\t\tstack.push(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> stack;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最短路径树\"><a href=\"#最短路径树\" class=\"headerlink\" title=\"最短路径树\"></a>最短路径树</h2><h3 id=\"最短路径\"><a href=\"#最短路径\" class=\"headerlink\" title=\"最短路径\"></a>最短路径</h3><h4 id=\"定义-7\"><a href=\"#定义-7\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>在一幅加权有向图中，从顶点s到顶点t的最短路径是所有从s到t的路径中的权重最小者。</p>\n<h4 id=\"示意-17\"><a href=\"#示意-17\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/3d4dec96dec81332.png\" alt=\"Markdown\"></p>\n<h3 id=\"定义-8\"><a href=\"#定义-8\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>给定一幅加权有向图和一个顶点s，以s为起点的一棵最短路径树是图的一幅子图，它包含s和从s可达的所有顶点。这棵有向树的根结点为s，树的每条路径都是有向图中的一条最短路径。</p>\n<h3 id=\"示意-18\"><a href=\"#示意-18\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i1.piimg.com/1949/479256bbdfa48501.png\" alt=\"Markdown\"></p>\n<h3 id=\"边的松弛\"><a href=\"#边的松弛\" class=\"headerlink\" title=\"边的松弛\"></a>边的松弛</h3><p>放松边v-&gt;w意味着检查从s到w的最短路径是否是先从s到v，然后再由v到w。如果是，则根据这个情况更新数据结构的内容。</p>\n<h4 id=\"示意-19\"><a href=\"#示意-19\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/c4abf1f956bffcda.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-10\"><a href=\"#实现-10\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">relax</span><span class=\"params\">(DirectedEdge e)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> v = e.from();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> w = e.to();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (distTo[v] + e.weight() &lt; distTo[w])&#123;</span><br><span class=\"line\">\t\tdistTo[w] = distTo[v] + e.weight();</span><br><span class=\"line\">\t\tedgeTo[w] = e;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"顶点的松弛\"><a href=\"#顶点的松弛\" class=\"headerlink\" title=\"顶点的松弛\"></a>顶点的松弛</h3><p>放松从一个给定顶点指出的所有边。</p>\n<h4 id=\"示意-20\"><a href=\"#示意-20\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/0ae698d2004e7964.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-11\"><a href=\"#实现-11\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">relax</span><span class=\"params\">(EdgeWeightedDigraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (DirectedEdge e : g.adj(v))&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> w = e.to();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (distTo[v] + e.weight() &lt; distTo[w])&#123;</span><br><span class=\"line\">\t\t\tdistTo[w] = distTo[v] + e.weight();</span><br><span class=\"line\">\t\t\tedgeTo[w] = e;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"负权重的环\"><a href=\"#负权重的环\" class=\"headerlink\" title=\"负权重的环\"></a>负权重的环</h3><h4 id=\"示意-21\"><a href=\"#示意-21\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/218b65660839ba34.png\" alt=\"Markdown\"></p>\n<h4 id=\"定义-9\"><a href=\"#定义-9\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>加权有向图中的负权重环是一个总权重（环上的所有边的权重之和）为负的有向环。</p>\n<p><img src=\"http://i2.muimg.com/1949/faeb01f3f7da5e8d.png\" alt=\"Markdown\"></p>\n<p>当且仅当加权有向图中至少存在一条从s到v的有向路径且所有从s到v的有向路径上的任意顶点都不存在于任何负权重环中时，s到v的最短路径才是存在的。</p>\n","categories":["Algorithm","Data Structure"],"tags":["Algorithm"]},{"title":"[hihoCoder] Problem 1288 - Font Size","url":"http://yoursite.com/2017/04/01/hihoCoder-Problem-1288-Font-Size/","content":"<p>Steven loves reading book on his phone. The book he reads now consists of N paragraphs and the i-th paragraph contains ai characters.</p>\n<p>Steven wants to make the characters easier to read, so he decides to increase the font size of characters. But the size of Steven’s phone screen is limited. Its width is W and height is H. As a result, if the font size of characters is S then it can only show ⌊W / S⌋ characters in a line and ⌊H / S⌋ lines in a page. (⌊x⌋ is the largest integer no more than x)  </p>\n<p>So here’s the question, if Steven wants to control the number of pages no more than P, what’s the maximum font size he can set? Note that paragraphs must start in a new line and there is no empty line between paragraphs.</p>\n<p>Time Limit:10000ms<br>Case Time Limit:1000ms<br>Memory Limit:256MB</p>\n<h2 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h2><p>Input may contain multiple test cases.</p>\n<p>The first line is an integer TASKS, representing the number of test cases.</p>\n<p>For each test case, the first line contains four integers N, P, W and H, as described above.</p>\n<p>The second line contains N integers a1, a2, … aN, indicating the number of characters in each paragraph.</p>\n<p>For all test cases,</p>\n<p>1 &lt;= N &lt;= 10^3,</p>\n<p>1 &lt;= W, H, ai &lt;= 10^3,</p>\n<p>1 &lt;= P &lt;= 10^6,</p>\n<p>There is always a way to control the number of pages no more than P.</p>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><p>For each testcase, output a line with an integer Ans, indicating the maximum font size Steven can set.</p>\n<h2 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h2><p>2<br>1 10 4 3<br>10<br>2 10 4 3<br>10 10</p>\n<h2 id=\"Sample-Output\"><a href=\"#Sample-Output\" class=\"headerlink\" title=\"Sample Output\"></a>Sample Output</h2><p>3<br>2</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> t = sc.nextInt();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; t; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> p = sc.nextInt();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = sc.nextInt();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> h = sc.nextInt();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">1000</span> || w &lt; <span class=\"number\">1</span> || w &gt; <span class=\"number\">1000</span> || h &lt; <span class=\"number\">1</span> || h &gt; <span class=\"number\">1000</span> || p &lt; <span class=\"number\">1</span> || p &gt; <span class=\"number\">1000000</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (x &lt; <span class=\"number\">1</span> || x &gt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\ta[j] = x;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> result = binarySearch(w, h, p, a);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tSystem.out.println(result);</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">validatePages</span><span class=\"params\">(<span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span>[] a)</span> </span>&#123;\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> charactersPerLine = w / mid;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> linesPerPage = h / mid;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> lines = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</span><br><span class=\"line\">\t\t\tlines += Math.ceil(a[i] / charactersPerLine);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> pages = Math.ceil(lines / linesPerPage);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pages;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span>[] a)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> right = Math.min(w, h);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (validatePages(mid, w, h, a) &lt;= p)&#123;</span><br><span class=\"line\">\t\t\t\tresult = mid;</span><br><span class=\"line\">\t\t\t\tleft = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t\t\tright = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm"],"tags":["OJ","Algorithm"]},{"title":"[LightOJ] Problem 1138 - Trailing Zeroes (III)","url":"http://yoursite.com/2017/04/01/LightOJ-Problem-1138-Trailing-Zeroes-III/","content":"<p>You task is to find minimal natural number N, so that N! contains exactly Q zeroes on the trail in decimal notation. As you know N! = 1<em>2</em>…*N. For example, 5! = 120, 120 contains one zero on the trail.</p>\n<p>Time Limit: 2 second(s)<br>Memory Limit: 32 MB</p>\n<h2 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h2><p>Input starts with an integer T (≤ 10000), denoting the number of test cases.</p>\n<p>Each case contains an integer Q (1 ≤ Q ≤ 10^8) in a line.</p>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><p>For each case, print the case number and N. If no solution is found then print ‘impossible’.</p>\n<h2 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h2><p>3<br>1<br>2<br>5</p>\n<h2 id=\"Output-for-Sample-Input\"><a href=\"#Output-for-Sample-Input\" class=\"headerlink\" title=\"Output for Sample Input\"></a>Output for Sample Input</h2><p>Case 1: 5<br>Case 2: 10<br>Case 3: impossible</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> t = sc.nextInt();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (t &lt; <span class=\"number\">1</span> || t &gt; <span class=\"number\">10000</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= t; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x &lt; <span class=\"number\">1</span> || x &gt; Math.pow(<span class=\"number\">10</span>, <span class=\"number\">8</span>))</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">long</span> result = binarySearch(<span class=\"number\">1</span>, Long.MAX_VALUE, x);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (result != -<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"Case \"</span> + i + <span class=\"string\">\": \"</span> + result);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"Case \"</span> + i + <span class=\"string\">\": impossible\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">trailingZeroes</span><span class=\"params\">(<span class=\"keyword\">long</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n == <span class=\"number\">0</span> ? <span class=\"number\">0</span> : n / <span class=\"number\">5</span> + trailingZeroes(n / <span class=\"number\">5</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">long</span> left, <span class=\"keyword\">long</span> right, <span class=\"keyword\">long</span> key)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">long</span> mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (trailingZeroes(mid) == key &amp;&amp; trailingZeroes(mid - <span class=\"number\">1</span>) &lt; key) </span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (trailingZeroes(mid) &lt; key) </span><br><span class=\"line\">\t\t\t\tleft = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t\t\tright = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Algorithm"],"tags":["OJ","Algorithm"]},{"title":"Torch Demo","url":"http://yoursite.com/2017/03/18/Torch-Demo/","content":"<p>We have <strong><em>5 steps</em></strong> to do in training a torch neural network.</p>\n<blockquote><p><em>(1) Load and normalize data; </em><br><em>(2) Define Neural Network; </em><br><em>(3) Define Loss function; </em><br><em>(4) Train network on training data; </em><br><em>(5) Test network on test data. </em></p>\n<footer><strong>Tutorial</strong><cite><a href=\"https://github.com/soumith/cvpr2015/blob/master/Deep%20Learning%20with%20Torch.ipynb\" target=\"_blank\" rel=\"noopener\">cvpr2015/Deep Learning with Torch.ipynb</a></cite></footer></blockquote>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">'paths'</span></span><br><span class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">'nn'</span></span><br><span class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">'torch'</span></span><br><span class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">'cunn'</span></span><br><span class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">'cutorch'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Load-and-normalize-data\"><a href=\"#Load-and-normalize-data\" class=\"headerlink\" title=\"Load and normalize data\"></a>Load and normalize data</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">not</span> paths.filep(<span class=\"string\">\"cifar10torchsmall.zip\"</span>)) <span class=\"keyword\">then</span></span><br><span class=\"line\">    os.execute(<span class=\"string\">'wget -c https://s3.amazonaws.com/torch7/data/cifar10torchsmall.zip'</span>)</span><br><span class=\"line\">    os.execute(<span class=\"string\">'unzip cifar10torchsmall.zip'</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">trainset = torch.<span class=\"built_in\">load</span>(<span class=\"string\">'cifar10-train.t7'</span>)</span><br><span class=\"line\">testset = torch.<span class=\"built_in\">load</span>(<span class=\"string\">'cifar10-test.t7'</span>)</span><br><span class=\"line\">classes = &#123;<span class=\"string\">'airplane'</span>, <span class=\"string\">'automobile'</span>, <span class=\"string\">'bird'</span>, <span class=\"string\">'cat'</span>,</span><br><span class=\"line\">           <span class=\"string\">'deer'</span>, <span class=\"string\">'dog'</span>, <span class=\"string\">'frog'</span>, <span class=\"string\">'horse'</span>, <span class=\"string\">'ship'</span>, <span class=\"string\">'truck'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setmetatable</span>(trainset,</span><br><span class=\"line\">    &#123;<span class=\"built_in\">__index</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(t, i)</span></span></span><br><span class=\"line\">                   <span class=\"keyword\">return</span> &#123;t.data[i], t.label[i]&#125;</span><br><span class=\"line\">               <span class=\"keyword\">end</span>&#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trainset:size</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.data:size(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trainset.data = trainset.data:double()</span><br><span class=\"line\">testset.data = testset.data:double()</span><br><span class=\"line\"></span><br><span class=\"line\">mean = &#123;&#125;</span><br><span class=\"line\">stdv  = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1</span>,<span class=\"number\">3</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    mean[i] = trainset.data[&#123; &#123;&#125;, &#123;i&#125;, &#123;&#125;, &#123;&#125;  &#125;]:mean()</span><br><span class=\"line\">    <span class=\"comment\">--print('Channel ' .. i .. ', Mean: ' .. mean[i])</span></span><br><span class=\"line\">    trainset.data[&#123; &#123;&#125;, &#123;i&#125;, &#123;&#125;, &#123;&#125;  &#125;]:add(-mean[i])   </span><br><span class=\"line\">    stdv[i] = trainset.data[&#123; &#123;&#125;, &#123;i&#125;, &#123;&#125;, &#123;&#125;  &#125;]:std()</span><br><span class=\"line\">    <span class=\"comment\">--print('Channel ' .. i .. ', Standard Deviation: ' .. stdv[i])</span></span><br><span class=\"line\">    trainset.data[&#123; &#123;&#125;, &#123;i&#125;, &#123;&#125;, &#123;&#125;  &#125;]:div(stdv[i])</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1</span>,<span class=\"number\">3</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    testset.data[&#123; &#123;&#125;, &#123;i&#125;, &#123;&#125;, &#123;&#125; &#125;]:add(-mean[i])</span><br><span class=\"line\">    testset.data[&#123; &#123;&#125;, &#123;i&#125;, &#123;&#125;, &#123;&#125; &#125;]:div(stdv[i])</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Define-neural-network\"><a href=\"#Define-neural-network\" class=\"headerlink\" title=\"Define neural network\"></a>Define neural network</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net = nn.Sequential()</span><br><span class=\"line\">net:add(nn.SpatialConvolution(<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>)) <span class=\"comment\">-- 3 input image channels, 6 output channels, 5x5 convolution kernel</span></span><br><span class=\"line\">net:add(nn.ReLU())                         <span class=\"comment\">-- non-linearity</span></span><br><span class=\"line\">net:add(nn.SpatialMaxPooling(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>))     <span class=\"comment\">-- A max-pooling operation that looks at 2x2 windows and finds the max.</span></span><br><span class=\"line\">net:add(nn.SpatialConvolution(<span class=\"number\">6</span>, <span class=\"number\">16</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">net:add(nn.ReLU())                         <span class=\"comment\">-- non-linearity</span></span><br><span class=\"line\">net:add(nn.SpatialMaxPooling(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\">net:add(nn.View(<span class=\"number\">16</span>*<span class=\"number\">5</span>*<span class=\"number\">5</span>))                   <span class=\"comment\">-- reshapes from a 3D tensor of 16x5x5 into 1D tensor of 16*5*5</span></span><br><span class=\"line\">net:add(nn.Linear(<span class=\"number\">16</span>*<span class=\"number\">5</span>*<span class=\"number\">5</span>, <span class=\"number\">120</span>))            <span class=\"comment\">-- fully connected layer (matrix multiplication between input and weights)</span></span><br><span class=\"line\">net:add(nn.ReLU())                         <span class=\"comment\">-- non-linearity</span></span><br><span class=\"line\">net:add(nn.Linear(<span class=\"number\">120</span>, <span class=\"number\">84</span>))</span><br><span class=\"line\">net:add(nn.ReLU())                         <span class=\"comment\">-- non-linearity</span></span><br><span class=\"line\">net:add(nn.Linear(<span class=\"number\">84</span>, <span class=\"number\">10</span>))                 <span class=\"comment\">-- 10 is the number of outputs of the network (in this case, 10 digits)</span></span><br><span class=\"line\">net:add(nn.LogSoftMax())                   <span class=\"comment\">-- converts the output to a log-probability. Useful for classification problems</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Define-the-Loss-function\"><a href=\"#Define-the-Loss-function\" class=\"headerlink\" title=\"Define the Loss function\"></a>Define the Loss function</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">criterion = nn.ClassNLLCriterion()</span><br></pre></td></tr></table></figure>\n<h3 id=\"Train-the-neural-network\"><a href=\"#Train-the-neural-network\" class=\"headerlink\" title=\"Train the neural network\"></a>Train the neural network</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trainer = nn.StochasticGradient(net, criterion)</span><br><span class=\"line\">trainer.learningRate = <span class=\"number\">0.001</span></span><br><span class=\"line\">trainer.maxIteration = <span class=\"number\">5</span></span><br><span class=\"line\">trainer:train(trainset)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- train on GPU</span></span><br><span class=\"line\">net = net:cuda()</span><br><span class=\"line\">criterion = criterion:cuda()</span><br><span class=\"line\">trainset.data = trainset.data:cuda()</span><br><span class=\"line\">trainset.label = trainset.label:cuda()</span><br><span class=\"line\">testset.data = testset.data:cuda()</span><br><span class=\"line\">testset.label = testset.label:cuda()</span><br></pre></td></tr></table></figure>\n<h3 id=\"Test-the-network-print-accuracy\"><a href=\"#Test-the-network-print-accuracy\" class=\"headerlink\" title=\"Test the network, print accuracy\"></a>Test the network, print accuracy</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">correct = <span class=\"number\">0</span></span><br><span class=\"line\">class_performance = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1</span>,<span class=\"number\">10000</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> groundtruth = testset.label[i]</span><br><span class=\"line\">    <span class=\"keyword\">local</span> prediction = net:forward(testset.data[i])</span><br><span class=\"line\">    <span class=\"keyword\">local</span> confidences, indices = torch.sort(prediction, <span class=\"literal\">true</span>)  <span class=\"comment\">-- true means sort in descending order</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> groundtruth == indices[<span class=\"number\">1</span>] <span class=\"keyword\">then</span></span><br><span class=\"line\">        correct = correct + <span class=\"number\">1</span></span><br><span class=\"line\">        class_performance[groundtruth] = class_performance[groundtruth] + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(correct, <span class=\"number\">100</span>*correct/<span class=\"number\">10000</span> .. <span class=\"string\">\" % \"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1</span>,#classes <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(classes[i], <span class=\"number\">100</span>*class_performance[i]/<span class=\"number\">1000</span> .. <span class=\"string\">' %'</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Result\"><a href=\"#Result\" class=\"headerlink\" title=\"Result\"></a>Result</h2><p>It’ll take around 30 minutes to get the result on CPU. However, it’ll cost less than 10 minutes on GPU.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">th filename.lua</span><br></pre></td></tr></table></figure>\n<h3 id=\"On-CPU\"><a href=\"#On-CPU\" class=\"headerlink\" title=\"On CPU\"></a>On CPU</h3><p><img src=\"http://p1.bqimg.com/4851/2292e852a2790f62.png\" alt=\"cpu\"></p>\n<h3 id=\"On-GPU\"><a href=\"#On-GPU\" class=\"headerlink\" title=\"On GPU\"></a>On GPU</h3><p><img src=\"http://p1.bqimg.com/4851/d63d92b0f0d14405.png\" alt=\"gpu\"></p>\n","categories":["Deep Learning"],"tags":["Deep Learning","Torch"]},{"title":"Hello World","url":"http://yoursite.com/2017/03/17/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","categories":[],"tags":[]},{"title":"tags","url":"http://yoursite.com/tags/index.html","content":"","categories":[],"tags":[]},{"title":"categories","url":"http://yoursite.com/categories/index.html","content":"","categories":[],"tags":[]}]