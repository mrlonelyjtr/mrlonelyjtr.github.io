[{"title":"【算法】图","url":"http://yoursite.com/2017/04/16/【算法】图/","content":"<h2 id=\"union-find算法\"><a href=\"#union-find算法\" class=\"headerlink\" title=\"union-find算法\"></a>union-find算法</h2><h3 id=\"动态连通性\"><a href=\"#动态连通性\" class=\"headerlink\" title=\"动态连通性\"></a>动态连通性</h3><p><img src=\"http://i1.piimg.com/1949/7830aa780246348a.png\" alt=\"Markdown\"></p>\n<h3 id=\"quick-find算法\"><a href=\"#quick-find算法\" class=\"headerlink\" title=\"quick-find算法\"></a>quick-find算法</h3><h4 id=\"示意\"><a href=\"#示意\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i2.muimg.com/1949/9456a8293d32c9ef.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">union</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> pID = find(p);</div><div class=\"line\">\t<span class=\"keyword\">int</span> qID = find(q);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pID == qID)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; id.length; i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (id[i] == pID)</div><div class=\"line\">\t\t\tid[i] = qID;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tcount--;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> id[p];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>在quick-find算法中，每次find调用只需要访问数组一次，而归并两个分量的union操作访问数组的次数在N+3到2N+1之间。</p>\n<h3 id=\"quick-union算法\"><a href=\"#quick-union算法\" class=\"headerlink\" title=\"quick-union算法\"></a>quick-union算法</h3><h4 id=\"示意-1\"><a href=\"#示意-1\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i2.muimg.com/1949/23a364290eea1782.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">union</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> pRoot = find(p);</div><div class=\"line\">\t<span class=\"keyword\">int</span> qRoot = find(q);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pRoot == qRoot)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t</div><div class=\"line\">\tid[pRoot] = qRoot;</div><div class=\"line\">\t</div><div class=\"line\">\tcount--;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;\t\t</div><div class=\"line\">\t<span class=\"keyword\">while</span> (id[p] != p)</div><div class=\"line\">\t\tp = id[p];</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> id[p];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p><img src=\"http://i2.muimg.com/1949/d63e558f3cd8e654.png\" alt=\"Markdown\"></p>\n<p>quick-union算法中的find方法访问数组的次数为1加上给定触点所对应的节点的深度的两倍。union和connected访问数组的次数为两次find操作（如果union中给定的两个触点分别在不同的树中则还需要加1）。</p>\n<h3 id=\"加权quick-union算法\"><a href=\"#加权quick-union算法\" class=\"headerlink\" title=\"加权quick-union算法\"></a>加权quick-union算法</h3><p>记录每一棵树的大小并总是将较小的树连接到较大的树上。</p>\n<h4 id=\"示意-2\"><a href=\"#示意-2\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/a3c8a2c34bb44f5c.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-2\"><a href=\"#实现-2\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnionFind</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] size;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UnionFind</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">\t\tcount = n;</div><div class=\"line\">\t\tid = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\tsize = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\tid[i] = i;</div><div class=\"line\">\t\t\tsize[i] = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> count;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">connected</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> find(p) == find(q);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">union</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> pRoot = find(p);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> qRoot = find(q);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pRoot == qRoot)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (size[pRoot] &lt; size[qRoot])&#123;</div><div class=\"line\">\t\t\tid[pRoot] = qRoot;</div><div class=\"line\">\t\t\tsize[qRoot] += size[pRoot];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\tid[qRoot] = pRoot;</div><div class=\"line\">\t\t\tsize[pRoot] += size[qRoot];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tcount--;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (id[p] != p)</div><div class=\"line\">\t\t\tp = id[p];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id[p];</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>对于N个触点，加权quick-union算法构造的森林中的任意节点的深度最多为lgN。</p>\n<p>对于加权quick-union算法和N个触点，在最坏情况下find、connected和union的成本的增长数量级为lgN。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><img src=\"http://i1.piimg.com/1949/974c6a77edb3dacf.png\" alt=\"Markdown\"></p>\n<h2 id=\"无向图\"><a href=\"#无向图\" class=\"headerlink\" title=\"无向图\"></a>无向图</h2><h3 id=\"深度优先搜索\"><a href=\"#深度优先搜索\" class=\"headerlink\" title=\"深度优先搜索\"></a>深度优先搜索</h3><p>要搜索一幅图，只需用一个递归方法来遍历所有顶点。在访问其中一个顶点时：</p>\n<ol>\n<li>将它标记为已访问</li>\n<li>递归地访问它的所有没有被标记过的邻居顶点</li>\n</ol>\n<p>如果图是连通的，每个连接链表中的元素都会被检查到。</p>\n<h4 id=\"示意-3\"><a href=\"#示意-3\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/0264195b993311fb.png\" alt=\"Markdown\"><br><img src=\"http://i1.piimg.com/1949/7a07a3fd3f50eb8d.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-3\"><a href=\"#实现-3\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DepthFirstPaths</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> s;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] edgeTo;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DepthFirstPaths</span><span class=\"params\">(Graph g, <span class=\"keyword\">int</span> s)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[g.V()];</div><div class=\"line\">\t\tdfs(g, s);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Graph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)&#123;</div><div class=\"line\">\t\t\t\tedgeTo[w] = v;</div><div class=\"line\">\t\t\t\tdfs(g, w);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> marked[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">pathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!hasPathTo(v))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tStack&lt;Integer&gt; path = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</div><div class=\"line\">\t\tpath.push(v);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (v != s)&#123;</div><div class=\"line\">\t\t\tpath.push(edgeTo[v]);</div><div class=\"line\">\t\t\tv = edgeTo[v];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> path;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-3\"><a href=\"#特点-3\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>深度优先搜索标记与起点连通的所有顶点所需的时间和顶点的度数之和成正比。</p>\n<p>使用深度优先搜索得到从给定起点到任意标记顶点的路径所需的时间与路径的长度成正比。</p>\n<p>单点路径：给定一幅图和一个起点s，回答“从s到给定目的顶点v是否存在一条路径？如果有，找出这条路径。”等类似问题。</p>\n<h3 id=\"广度优先搜索\"><a href=\"#广度优先搜索\" class=\"headerlink\" title=\"广度优先搜索\"></a>广度优先搜索</h3><p>使用一个队列来保存所有已经被标记过但其邻接表还未被检查过的顶点。先将起点加入队列，然后重复以下步骤直到队列为空：</p>\n<ol>\n<li>取队列中的下一个顶点v并标记它</li>\n<li>将与v相邻的所有未被标记过的顶点加入队列</li>\n</ol>\n<h4 id=\"示意-4\"><a href=\"#示意-4\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/3c2eaf4cb946acf8.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-4\"><a href=\"#实现-4\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BreadthFirstPaths</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> s;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] edgeTo;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BreadthFirstPaths</span><span class=\"params\">(Graph g, <span class=\"keyword\">int</span> s)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[g.V()];</div><div class=\"line\">\t\tbfs(g, s);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(Graph g, <span class=\"keyword\">int</span> s)</span></span>&#123;</div><div class=\"line\">\t\tQueue&lt;Integer&gt; queue = <span class=\"keyword\">new</span> Queue&lt;Integer&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tmarked[s] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\tqueue.enqueue(s);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(!queue.isEmpty())&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> v = queue.dequeue();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)&#123;</div><div class=\"line\">\t\t\t\t\tmarked[w] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t\t\tqueue.enqueue(w);</div><div class=\"line\">\t\t\t\t\tedgeTo[w] = v;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> marked[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">pathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!hasPathTo(v))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tStack&lt;Integer&gt; path = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</div><div class=\"line\">\t\tpath.push(v);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (v != s)&#123;</div><div class=\"line\">\t\t\tpath.push(edgeTo[v]);</div><div class=\"line\">\t\t\tv = edgeTo[v];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> path;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-4\"><a href=\"#特点-4\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>对于从s可达的任意顶点v，广度优先搜索都能找到一条从s到v的最短路径（没有其他从s到v的路径所含的边比这条路径更少）。</p>\n<p>广度优先搜索所需的时间在最坏情况下和V+E成正比。</p>\n<p>单点最短路径：给定一幅图和一个起点s，回答“从s到给定目的顶点v是否存在一条路径？如果有，找出其中最短的那条（所含边数最少）。”等类似问题。</p>\n<h4 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h4><p>在搜索中都会先将起点存入数据结构中，然后重复以下步骤直到数据结构被清空：</p>\n<ol>\n<li>取其中的下一个顶点并标记它</li>\n<li>将v的所有相邻而又未被标记的顶点加入数据结构</li>\n</ol>\n<p>这两个算法的不同之处仅在于从数据结构中获取下一个顶点的规则（对于广度优先搜索来说是最早加入的顶点，对于深度优先搜索来说是最晚加入的顶点）。</p>\n<h3 id=\"连通分量\"><a href=\"#连通分量\" class=\"headerlink\" title=\"连通分量\"></a>连通分量</h3><p>深度优先搜索的直接应用是找出一幅图的所有连通分量。它能够将所有顶点切分为等价类。</p>\n<h4 id=\"示意-5\"><a href=\"#示意-5\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/639ea2cba5992960.png\" alt=\"Markdown\"><br><img src=\"http://i4.buimg.com/1949/e7a39bc32cca0ce8.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-5\"><a href=\"#实现-5\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConnectedComponents</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] id;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConnectedComponents</span><span class=\"params\">(Graph g)</span></span>&#123;</div><div class=\"line\">\t\tcount = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tid = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[g.V()];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> s = <span class=\"number\">0</span>; s &lt; g.V(); s++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[s] == <span class=\"keyword\">false</span>)&#123;</div><div class=\"line\">\t\t\t\tdfs(g, s);</div><div class=\"line\">\t\t\t\tcount++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Graph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\tid[v] = count;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)</div><div class=\"line\">\t\t\t\tdfs(g, w);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">connected</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id[v] == id[w];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">id</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> count;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-5\"><a href=\"#特点-5\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>深度优先搜索的预处理使用的时间和空间与V+E成正比且可以在常数时间内处理关于图的连通性查询。</p>\n<h4 id=\"比较-1\"><a href=\"#比较-1\" class=\"headerlink\" title=\"比较\"></a>比较</h4><p>union-find算法其实更快，因为它不需要完整地构造并表示一幅图，是一种动态算法（在任何时候都能用接近常数的时间检查两个顶点是否连通，甚至是在添加一条边的时候），但深度优先搜索则必须要对图进行预处理。因此，在完成只需要判断连通性或是需要完成有大量连通性查询和插入操作混合等类似的任务时，更倾向使用union-find算法，而深度优先搜索则更适合实现图的抽象数据类型，因为它能更有效地利用已有的数据结构。</p>\n<h3 id=\"检测环\"><a href=\"#检测环\" class=\"headerlink\" title=\"检测环\"></a>检测环</h3><p>给定的图是无环图吗？</p>\n<h4 id=\"实现-6\"><a href=\"#实现-6\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cycle</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> hasCycle;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cycle</span><span class=\"params\">(Graph g)</span></span>&#123;</div><div class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\thasCycle = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> s = <span class=\"number\">0</span>; s &lt; g.V(); s++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[s] == <span class=\"keyword\">false</span>)</div><div class=\"line\">\t\t\t\tdfs(g, s, s);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Graph g, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> p)</span></span>&#123;</div><div class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)</div><div class=\"line\">\t\t\t\tdfs(g, w, v);</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (w != p)</div><div class=\"line\">\t\t\t\thasCycle = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasCycle</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> hasCycle;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"双色问题\"><a href=\"#双色问题\" class=\"headerlink\" title=\"双色问题\"></a>双色问题</h3><p>能够用两种颜色将图的所有顶点着色，使得任意一条边的两个端点的颜色都不相同吗？（这是一幅二分图吗？）</p>\n<h4 id=\"实现-7\"><a href=\"#实现-7\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TwoColor</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] color;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isTwoColorable;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TwoColor</span><span class=\"params\">(Graph g)</span></span>&#123;</div><div class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tcolor = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tisTwoColorable = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> s = <span class=\"number\">0</span>; s &lt; g.V(); s++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[s] == <span class=\"keyword\">false</span>)</div><div class=\"line\">\t\t\t\tdfs(g, s);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Graph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)&#123;</div><div class=\"line\">\t\t\t\tcolor[w] = !color[v];</div><div class=\"line\">\t\t\t\tdfs(g, w);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (color[w] == color[v])</div><div class=\"line\">\t\t\t\tisTwoColorable = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBipartite</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> isTwoColorable;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"有向图\"><a href=\"#有向图\" class=\"headerlink\" title=\"有向图\"></a>有向图</h2><h3 id=\"深度优先搜索-1\"><a href=\"#深度优先搜索-1\" class=\"headerlink\" title=\"深度优先搜索\"></a>深度优先搜索</h3><h4 id=\"实现-8\"><a href=\"#实现-8\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DepthFirstDirectedPaths</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> s;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] edgeTo;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DepthFirstDirectedPaths</span><span class=\"params\">(Digraph g, <span class=\"keyword\">int</span> s)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[g.V()];</div><div class=\"line\">\t\tdfs(g, s);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Digraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)&#123;</div><div class=\"line\">\t\t\t\tedgeTo[w] = v;</div><div class=\"line\">\t\t\t\tdfs(g, w);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> marked[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">pathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!hasPathTo(v))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tStack&lt;Integer&gt; path = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</div><div class=\"line\">\t\tpath.push(v);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (v != s)&#123;</div><div class=\"line\">\t\t\tpath.push(edgeTo[v]);</div><div class=\"line\">\t\t\tv = edgeTo[v];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> path;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-6\"><a href=\"#特点-6\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>在有向图中，深度优先搜索标记由一个集合的顶点可达的所有顶点所需的时间与被标记的所有顶点的出度之和成正比。</p>\n<p>单向有向路径给定一幅有向图和一个起点s，回答“从s到给定目的顶点v是否存在一条有向路径？如果有，找出这条路径。”等类似问题。</p>\n<h3 id=\"广度优先搜索-1\"><a href=\"#广度优先搜索-1\" class=\"headerlink\" title=\"广度优先搜索\"></a>广度优先搜索</h3><h4 id=\"实现-9\"><a href=\"#实现-9\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BreadthFirstDirectedPaths</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> s;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] edgeTo;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BreadthFirstDirectedPaths</span><span class=\"params\">(Digraph g, <span class=\"keyword\">int</span> s)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[g.V()];</div><div class=\"line\">\t\tbfs(g, s);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(Digraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\tQueue&lt;Integer&gt; queue = <span class=\"keyword\">new</span> Queue&lt;Integer&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\tqueue.enqueue(v);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (!queue.isEmpty())&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> x = queue.dequeue();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(x))&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)&#123;</div><div class=\"line\">\t\t\t\t\tmarked[w] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t\t\tedgeTo[w] = x;</div><div class=\"line\">\t\t\t\t\tqueue.enqueue(w);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> marked[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">pathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!hasPathTo(v))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tStack&lt;Integer&gt; path = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</div><div class=\"line\">\t\tpath.push(v);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (v != s)&#123;</div><div class=\"line\">\t\t\tpath.push(edgeTo[v]);</div><div class=\"line\">\t\t\tv = edgeTo[v];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> path;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-7\"><a href=\"#特点-7\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>单点最短有向路径给定一幅有向图和一个起点s，回答“从s到给定目的顶点v是否存在一条有向路径？如果有，找出其中最短的那条（所含边数最少）。”等类似问题。</p>\n<h3 id=\"有向环检测\"><a href=\"#有向环检测\" class=\"headerlink\" title=\"有向环检测\"></a>有向环检测</h3><p>给定的有向图中包含有向环吗？如果有，按照路径的方向从某个顶点并返回自己来找到环上的所有顶点。</p>\n<h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>有向无环图（DAG）就是一幅不含有环的有向图。</p>\n<h4 id=\"示意-6\"><a href=\"#示意-6\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i2.muimg.com/1949/bbfa85a5cd288ecd.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-10\"><a href=\"#实现-10\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirectedCycle</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] edgeTo;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] onStack;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Stack&lt;Integer&gt; cycle;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DirectedCycle</span><span class=\"params\">(Digraph g)</span></span>&#123;</div><div class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[g.V()];</div><div class=\"line\">\t\tonStack = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; g.V(); v++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[v] == <span class=\"keyword\">false</span>)</div><div class=\"line\">\t\t\t\tdfs(g, v);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Digraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\tonStack[v] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (hasCycle())</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)&#123;</div><div class=\"line\">\t\t\t\tedgeTo[w] = v;</div><div class=\"line\">\t\t\t\tdfs(g, w);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (onStack[w] == <span class=\"keyword\">true</span>)&#123;</div><div class=\"line\">\t\t\t\tcycle = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> x = v;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\tcycle.push(x);</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (x != w)&#123;</div><div class=\"line\">\t\t\t\t\tcycle.push(edgeTo[x]);</div><div class=\"line\">\t\t\t\t\tx = edgeTo[x];</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\tcycle.push(v);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tonStack[v] = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasCycle</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> cycle != <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">cycle</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> cycle;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h3><p>给定一幅有向图，将所有的顶点排序，使得所有的有向边均从排在前面的元素指向排在后面的元素（或者说明无法做到这一点）。</p>\n<h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>当且仅当一幅有向图是无环图时它才能进行拓扑排序。</p>\n<p>一幅有向无环图的拓扑排序即为所有顶点的逆后序排列。</p>\n<h4 id=\"基于深度优先搜索的顶点排序\"><a href=\"#基于深度优先搜索的顶点排序\" class=\"headerlink\" title=\"基于深度优先搜索的顶点排序\"></a>基于深度优先搜索的顶点排序</h4><p>将dfs的参数顶点保存在一个数据结构中，遍历这个数据结构实际上就能访问图中的所有顶点。顶点有以下三种排列顺序：</p>\n<ol>\n<li>前序：在递归调用之前将顶点加入队列</li>\n<li>后序：在递归调用之后将顶点加入队列</li>\n<li>逆后序：在递归调用之后将顶点压入栈</li>\n</ol>\n<h5 id=\"示意-7\"><a href=\"#示意-7\" class=\"headerlink\" title=\"示意\"></a>示意</h5><p><img src=\"http://i2.muimg.com/1949/049d82a3e4c670be.png\" alt=\"Markdown\"></p>\n<h5 id=\"实现-11\"><a href=\"#实现-11\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DepthFirstOrder</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Queue&lt;Integer&gt; pre;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Queue&lt;Integer&gt; post;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Stack&lt;Integer&gt; reversePost;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DepthFirstOrder</span><span class=\"params\">(Digraph g)</span></span>&#123;</div><div class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tpre = <span class=\"keyword\">new</span> Queue&lt;Integer&gt;();</div><div class=\"line\">\t\tpost = <span class=\"keyword\">new</span> Queue&lt;Integer&gt;();</div><div class=\"line\">\t\treversePost = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; g.V(); v++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[v] == <span class=\"keyword\">false</span>)</div><div class=\"line\">\t\t\t\tdfs(g, v);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Digraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\tpre.enqueue(v);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)</div><div class=\"line\">\t\t\t\tdfs(g, w);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tpost.enqueue(v);</div><div class=\"line\">\t\treversePost.push(v);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">pre</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> pre;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">post</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> post;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">reversePost</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> reversePost;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"示意-8\"><a href=\"#示意-8\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/3e80d583c02a2ab5.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-12\"><a href=\"#实现-12\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Topological</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Iterable&lt;Integer&gt; order;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Topological</span><span class=\"params\">(Digraph g)</span></span>&#123;</div><div class=\"line\">\t\tDirectedCycle cycle = <span class=\"keyword\">new</span> DirectedCycle(g);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!cycle.hasCycle())&#123;</div><div class=\"line\">\t\t\tDepthFirstOrder dfs = <span class=\"keyword\">new</span> DepthFirstOrder(g);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\torder = dfs.reversePost();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">order</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> order;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isDAG</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> order != <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-8\"><a href=\"#特点-8\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>使用深度优先搜索对有向无环图进行拓扑排序所需的时间和V+E成正比。</p>\n<h3 id=\"强连通性\"><a href=\"#强连通性\" class=\"headerlink\" title=\"强连通性\"></a>强连通性</h3><p>使用深度优先搜索查找给定有向图G的反向图G’，根据由此得到的所有顶点的逆后序再次用深度优先搜索处理有向图G（Kosaraju算法），其构造函数中的每一次递归调用所标记的顶点都在同一个强连通分量之中。</p>\n<h4 id=\"示意-9\"><a href=\"#示意-9\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/bec441ce218db0b9.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-13\"><a href=\"#实现-13\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KosarajuSCC</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">KosarajuSCC</span><span class=\"params\">(Digraph g)</span></span>&#123;</div><div class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tid = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[g.V()];</div><div class=\"line\">\t\tcount = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tDepthFirstOrder order = <span class=\"keyword\">new</span> DepthFirstOrder(g.reverse());</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v : order.reversePost())&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[v] == <span class=\"keyword\">false</span>)&#123;</div><div class=\"line\">\t\t\t\tdfs(g, v);</div><div class=\"line\">\t\t\t\tcount++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Digraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\tid[v] = count;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)</div><div class=\"line\">\t\t\t\tdfs(g, w);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">stronglyConnected</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id[v] == id[w];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">id</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> count;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-9\"><a href=\"#特点-9\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>Kosaraju算法的预处理所需的时间和空间与V+E成正比且支持常数时间的有向图强连通性的查询。</p>\n<p>给定一幅有向图，回答“给定的两个顶点是强连通的吗？这幅有向图中含有多少个强连通分量？”等类似问题。</p>\n<h2 id=\"最小生成树\"><a href=\"#最小生成树\" class=\"headerlink\" title=\"最小生成树\"></a>最小生成树</h2><h3 id=\"Prim算法\"><a href=\"#Prim算法\" class=\"headerlink\" title=\"Prim算法\"></a>Prim算法</h3><p>每一步都会为一棵生长中的树添加一条边。一开始这棵树只有一个顶点，然后会向它添加V-1条边，每次总是将下一条连接树中的顶点与不在树中的顶点且权重最小的边（黑色表示）加入树中（即由树中的顶点所定义的切分中的一条横向边）。</p>\n<p>每当向树中添加了一条边之后，也向树中添加了一个顶点。要维护一个包含所有横切边的集合，就要将连接这个顶点和其他所有不在树中的顶点的边加入优先队列。但，连接新加入树中的顶点与其他已经在树中顶点的所有边都失效了。（这样的边都已经不是横切边了，因为它的两个顶点都在树中。）</p>\n<h4 id=\"示意-10\"><a href=\"#示意-10\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/8a0d924a7b467969.png\" alt=\"Markdown\"></p>\n<h4 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>Prim算法能够得到任意加权无向图的最小生成树。</p>\n<h4 id=\"延时实现\"><a href=\"#延时实现\" class=\"headerlink\" title=\"延时实现\"></a>延时实现</h4><p>将失效的边先留在优先队列中，等到要删除它们的时候再检查边的有效性。</p>\n<h5 id=\"示意-11\"><a href=\"#示意-11\" class=\"headerlink\" title=\"示意\"></a>示意</h5><p><img src=\"http://i2.muimg.com/1949/6bc3fc9f01231433.png\" alt=\"Markdown\"></p>\n<h5 id=\"实现-14\"><a href=\"#实现-14\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazyPrimMST</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> weight;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Queue&lt;Edge&gt; mst;</div><div class=\"line\">\t<span class=\"keyword\">private</span> MinPQ&lt;Edge&gt; pq;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LazyPrimMST</span><span class=\"params\">(EdgeWeightedGraph g)</span></span>&#123;</div><div class=\"line\">\t\tweight = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tmst = <span class=\"keyword\">new</span> Queue&lt;Edge&gt;();</div><div class=\"line\">\t\tpq = <span class=\"keyword\">new</span> MinPQ&lt;Edge&gt;(g.E());</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tprim(g);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">prim</span><span class=\"params\">(EdgeWeightedGraph g)</span></span>&#123;</div><div class=\"line\">\t\tvisit(g, <span class=\"number\">0</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (!pq.isEmpty())&#123;</div><div class=\"line\">\t\t\tEdge e = pq.delMin();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> v = e.either();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = e.other(v);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[v] == <span class=\"keyword\">true</span> &amp;&amp; marked[w] == <span class=\"keyword\">true</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tweight += e.weight();</div><div class=\"line\">\t\t\tmst.enqueue(e);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[v] == <span class=\"keyword\">false</span>)</div><div class=\"line\">\t\t\t\tvisit(g, v);</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">false</span>)</div><div class=\"line\">\t\t\t\tvisit(g, w);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(EdgeWeightedGraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (Edge e : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[e.other(v)] == <span class=\"keyword\">false</span>)</div><div class=\"line\">\t\t\t\tpq.insert(e);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Edge&gt; <span class=\"title\">edges</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> mst;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">weight</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> weight;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"特点-10\"><a href=\"#特点-10\" class=\"headerlink\" title=\"特点\"></a>特点</h5><p>Prim算法的延时实现计算一幅含有V个顶点和E条边的连通加权无向图的最小生成树所需的空间与E成正比，所需的时间与ElogE成正比（最坏情况）。</p>\n<h4 id=\"即时实现\"><a href=\"#即时实现\" class=\"headerlink\" title=\"即时实现\"></a>即时实现</h4><p>只会在优先队列中保存每个非树顶点w的一条边：将它与树中的顶点连接起来的权重最小的那条边。将w和树的顶点连接起来的其他权重较大的边迟早都会失效，所以没必要在优先队列中保存它们。</p>\n<h5 id=\"示意-12\"><a href=\"#示意-12\" class=\"headerlink\" title=\"示意\"></a>示意</h5><p><img src=\"http://i4.buimg.com/1949/1b05ce43e01383e7.png\" alt=\"Markdown\"></p>\n<h5 id=\"实现-15\"><a href=\"#实现-15\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrimMST</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Edge[] edgeTo;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span>[] distTo;</div><div class=\"line\">\t<span class=\"keyword\">private</span> IndexMinPQ&lt;Double&gt; pq;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PrimMST</span><span class=\"params\">(EdgeWeightedGraph g)</span></span>&#123;</div><div class=\"line\">\t\tmarked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> Edge[g.V()];</div><div class=\"line\">\t\tdistTo = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[g.V()];</div><div class=\"line\">\t\tpq = <span class=\"keyword\">new</span> IndexMinPQ&lt;Double&gt;(g.V());</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; g.V(); v++)</div><div class=\"line\">\t\t\tdistTo[v] = Double.POSITIVE_INFINITY;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tprim(g);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">prim</span><span class=\"params\">(EdgeWeightedGraph g)</span></span>&#123;</div><div class=\"line\">\t\tpq.insert(<span class=\"number\">0</span>, <span class=\"number\">0.0</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (!pq.isEmpty())</div><div class=\"line\">\t\t\tvisit(g, pq.delMin());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(EdgeWeightedGraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\tmarked[v] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (Edge e : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = e.other(v);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (marked[w] == <span class=\"keyword\">true</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (e.weight() &lt; distTo[w])&#123;</div><div class=\"line\">\t\t\t\tdistTo[w] = e.weight();</div><div class=\"line\">\t\t\t\tedgeTo[w] = e;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (pq.contains(w))</div><div class=\"line\">\t\t\t\t\tpq.change(w, distTo[w]);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t\tpq.insert(w, distTo[w]);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Edge&gt; <span class=\"title\">edges</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tQueue&lt;Edge&gt; mst = <span class=\"keyword\">new</span> Queue&lt;Edge&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">1</span>; v &lt; edgeTo.length; v++)</div><div class=\"line\">\t\t\tmst.enqueue(edgeTo[v]);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> mst;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">weight</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">double</span> weight = <span class=\"number\">0.0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">1</span>; v &lt; distTo.length; v++)</div><div class=\"line\">\t\t\tweight += distTo[v];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> weight;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"特点-11\"><a href=\"#特点-11\" class=\"headerlink\" title=\"特点\"></a>特点</h5><p>Prim算法的即时实现计算一幅含有V个顶点和E条边的连通加权无向图的最小生成树所需的空间和V成正比，所需的时间和ElogV成正比（最坏情况）。</p>\n<h3 id=\"Kruskal算法\"><a href=\"#Kruskal算法\" class=\"headerlink\" title=\"Kruskal算法\"></a>Kruskal算法</h3><p>按照边的权重顺序（从小到大）处理它们，将边加入最小生成树中，加入的边不会与已经加入的边构成环，直到树中含有V-1条边为止。这些黑色的边逐渐由一片森林合并为一棵树，也就是图的最小生成树。</p>\n<h4 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>Kruskal算法能够计算任意加权无向图的最小生成树。</p>\n<h4 id=\"示意-13\"><a href=\"#示意-13\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i2.muimg.com/1949/362be3c027985b40.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-16\"><a href=\"#实现-16\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KruskalMST</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Queue&lt;Edge&gt; mst;</div><div class=\"line\">\t<span class=\"keyword\">private</span> MinPQ&lt;Edge&gt; pq;</div><div class=\"line\">\t<span class=\"keyword\">private</span> UnionFind uf;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> weight;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">KruskalMST</span><span class=\"params\">(EdgeWeightedGraph g)</span></span>&#123;</div><div class=\"line\">\t\tweight = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tmst = <span class=\"keyword\">new</span> Queue&lt;Edge&gt;();</div><div class=\"line\">\t\tpq = <span class=\"keyword\">new</span> MinPQ&lt;Edge&gt;(g.E());</div><div class=\"line\">\t\tuf = <span class=\"keyword\">new</span> UnionFind(g.V());</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (Edge e : g.edges())</div><div class=\"line\">\t\t\tpq.insert(e);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tkruskal(g);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">kruskal</span><span class=\"params\">(EdgeWeightedGraph g)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (!pq.isEmpty() &amp;&amp; mst.size() &lt; g.V())&#123;</div><div class=\"line\">\t\t\tEdge e = pq.delMin();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> v = e.either();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = e.other(v);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (uf.connected(v, w))</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tuf.union(v, w);</div><div class=\"line\">\t\t\tmst.enqueue(e);</div><div class=\"line\">\t\t\tweight += e.weight();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Edge&gt; <span class=\"title\">edges</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> mst;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">weight</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> weight;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-12\"><a href=\"#特点-12\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>Kruskal算法计算一幅含有V个顶点和E条边的连通加权无向图的最小生成树所需的空间和E成正比，所需的时间和ElogE成正比（最坏情况）。</p>\n<h4 id=\"比较-2\"><a href=\"#比较-2\" class=\"headerlink\" title=\"比较\"></a>比较</h4><p>Prim算法是一条边一条边地来构造最小生成树，每一步都为一棵树添加一条边。 Kruskal算法构造最小生成树的时候也是一条边一条边地构造，但不同的是它寻找的边会连接一片森林中的两棵树。从一片由V棵单顶点的树构成的森林开始并不断将两棵树合并（用可以找到的最短边）直到只剩下一棵树，它就是最小生成树。</p>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><img src=\"http://i1.piimg.com/1949/4bc5dd0a181d708d.png\" alt=\"Markdown\"></p>\n<h2 id=\"最短路径树\"><a href=\"#最短路径树\" class=\"headerlink\" title=\"最短路径树\"></a>最短路径树</h2><h3 id=\"Dijkstra算法\"><a href=\"#Dijkstra算法\" class=\"headerlink\" title=\"Dijkstra算法\"></a>Dijkstra算法</h3><p>采用了类似Prim算法的方法来计算最短路径树。</p>\n<h4 id=\"定义-4\"><a href=\"#定义-4\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>Dijkstra算法能够解决边权重非负的加权有向图的单起点最短路径问题。</p>\n<h4 id=\"示意-14\"><a href=\"#示意-14\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/8733dad4678b9290.png\" alt=\"Markdown\"><br><img src=\"http://i4.buimg.com/1949/240e62aa975ae40f.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-17\"><a href=\"#实现-17\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DijkstraSPT</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> DirectedEdge[] edgeTo;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span>[] distTo;</div><div class=\"line\">\t<span class=\"keyword\">private</span> IndexMinPQ&lt;Double&gt; pq;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> s;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DijkstraSPT</span><span class=\"params\">(EdgeWeightedDigraph g, <span class=\"keyword\">int</span> s)</span></span>&#123;</div><div class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> DirectedEdge[g.V()];</div><div class=\"line\">\t\tdistTo = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[g.V()];</div><div class=\"line\">\t\tpq = <span class=\"keyword\">new</span> IndexMinPQ&lt;Double&gt;(g.V());</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; g.V(); v++)</div><div class=\"line\">\t\t\tdistTo[v] = Double.POSITIVE_INFINITY;</div><div class=\"line\">\t\tdistTo[s] = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tpq.insert(s, <span class=\"number\">0.0</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (!pq.isEmpty())</div><div class=\"line\">\t\t\trelax(g, pq.delMin());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">relax</span><span class=\"params\">(EdgeWeightedDigraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (DirectedEdge e : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = e.to();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (distTo[v] + e.weight() &lt; distTo[w])&#123;</div><div class=\"line\">\t\t\t\tdistTo[w] = distTo[v] + e.weight();</div><div class=\"line\">\t\t\t\tedgeTo[w] = e;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (pq.contains(w))</div><div class=\"line\">\t\t\t\t\tpq.change(w, distTo[w]);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t\tpq.insert(w, distTo[w]);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">distTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> distTo[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> distTo[v] &lt; Double.POSITIVE_INFINITY;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;DirectedEdge&gt; <span class=\"title\">pathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!hasPathTo(v))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tStack&lt;DirectedEdge&gt; path = <span class=\"keyword\">new</span> Stack&lt;DirectedEdge&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tDirectedEdge e = edgeTo[v];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (e.from() != s)&#123;</div><div class=\"line\">\t\t\tpath.push(e);</div><div class=\"line\">\t\t\te = edgeTo[e.from()];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tpath.push(e);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> path;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-13\"><a href=\"#特点-13\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>在一幅含有V个顶点和E条边的加权有向图中，使用Dijkstra算法计算根结点为给定起点的最短路径树所需的空间与V成正比，时间与ElogV成正比（最坏情况下）。</p>\n<h4 id=\"比较-3\"><a href=\"#比较-3\" class=\"headerlink\" title=\"比较\"></a>比较</h4><p>Prim算法每次添加的都是离树最近的非树顶点，Dijkstra算法每次添加的都是离起点最近的非树顶点。</p>\n<h3 id=\"拓扑排序-1\"><a href=\"#拓扑排序-1\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h3><p>将顶点的放松和拓扑排序结合起来。</p>\n<h4 id=\"示意-15\"><a href=\"#示意-15\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/16378a692db6d55e.png\" alt=\"Markdown\"><br><img src=\"http://i4.buimg.com/1949/9caad83078acc930.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-18\"><a href=\"#实现-18\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AcyclicSPT</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> DirectedEdge[] edgeTo;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span>[] distTo;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> s;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AcyclicSPT</span><span class=\"params\">(EdgeWeightedDigraph g, <span class=\"keyword\">int</span> s)</span></span>&#123;</div><div class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> DirectedEdge[g.V()];</div><div class=\"line\">\t\tdistTo = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[g.V()];</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; g.V(); v++)</div><div class=\"line\">\t\t\tdistTo[v] = Double.POSITIVE_INFINITY;</div><div class=\"line\">\t\tdistTo[s] = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tTopological t = <span class=\"keyword\">new</span> Topological(g);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v : t.order())</div><div class=\"line\">\t\t\trelax(g, v);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">relax</span><span class=\"params\">(EdgeWeightedDigraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (DirectedEdge e : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = e.to();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (distTo[v] + e.weight() &lt; distTo[w])&#123;</div><div class=\"line\">\t\t\t\tdistTo[w] = distTo[v] + e.weight();</div><div class=\"line\">\t\t\t\tedgeTo[w] = e;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">distTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> distTo[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> distTo[v] &lt; Double.POSITIVE_INFINITY;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;DirectedEdge&gt; <span class=\"title\">pathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!hasPathTo(v))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tStack&lt;DirectedEdge&gt; path = <span class=\"keyword\">new</span> Stack&lt;DirectedEdge&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tDirectedEdge e = edgeTo[v];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (e.from() != s)&#123;</div><div class=\"line\">\t\t\tpath.push(e);</div><div class=\"line\">\t\t\te = edgeTo[e.from()];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tpath.push(e);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> path;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-14\"><a href=\"#特点-14\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>按照拓扑排序放松顶点，就能在和E+V成正比的时间内解决无环有向图的单点最短路径问题。</p>\n<ol>\n<li>能够在线性时间内解决单点最短路径问题</li>\n<li>能够处理负权重的边</li>\n<li>能够解决相关的问题，例如找出最长的路径</li>\n</ol>\n<h3 id=\"Bellman-Ford算法\"><a href=\"#Bellman-Ford算法\" class=\"headerlink\" title=\"Bellman-Ford算法\"></a>Bellman-Ford算法</h3><p>解决一般有向图中的以下问题：</p>\n<ol>\n<li>负权重环的检测。给定的加权有向图中含有负权重环吗？如果有，找到它。</li>\n<li>负权重环不可达时的单点最短路径。给定一幅加权有向图和一个起点s且从s无法到达任何负权重环，回答“是否存在一条从s到给定的顶点v的有向路径？如果有，找出最短（总权重最小）的那条路径。“等类似问题。</li>\n</ol>\n<h4 id=\"定义-5\"><a href=\"#定义-5\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>在任意含有V个顶点的加权有向图中给定起点s，从s无法到达任何负权重环，以下算法能够解决其中的单点最短路径问题：以任意顺序放松有向图的所有边，重复V轮。</p>\n<h4 id=\"示意-16\"><a href=\"#示意-16\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/df93ee57234d2ba9.png\" alt=\"Markdown\"><br><img src=\"http://i1.piimg.com/1949/e1a0706c291bbb2f.png\" alt=\"Markdown\"></p>\n<h4 id=\"负权重环的检测\"><a href=\"#负权重环的检测\" class=\"headerlink\" title=\"负权重环的检测\"></a>负权重环的检测</h4><p>在将所有边放松V轮之后当且仅当队列非空时有向图中才存在从起点可达的负权重环。</p>\n<h5 id=\"示意-17\"><a href=\"#示意-17\" class=\"headerlink\" title=\"示意\"></a>示意</h5><p><img src=\"http://i1.piimg.com/1949/1898c8704c79fb60.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-19\"><a href=\"#实现-19\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BellmanFordSPT</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> DirectedEdge[] edgeTo;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span>[] distTo;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Iterable&lt;DirectedEdge&gt; cycle;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Queue&lt;Integer&gt; queue;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] onQ;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> s;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> cost;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BellmanFordSPT</span><span class=\"params\">(EdgeWeightedDigraph g, <span class=\"keyword\">int</span> s)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">\t\tcost = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tedgeTo = <span class=\"keyword\">new</span> DirectedEdge[g.V()];</div><div class=\"line\">\t\tdistTo = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[g.V()];</div><div class=\"line\">\t\tonQ = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[g.V()];</div><div class=\"line\">\t\tqueue = <span class=\"keyword\">new</span> Queue&lt;Integer&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; g.V(); v++)</div><div class=\"line\">\t\t\tdistTo[v] = Double.POSITIVE_INFINITY;</div><div class=\"line\">\t\tdistTo[s] = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tonQ[s] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\tqueue.enqueue(s);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (!queue.isEmpty() &amp;&amp; !hasNegativeCycle())&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> v = queue.dequeue();</div><div class=\"line\">\t\t\tonQ[v] = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\trelax(g, v);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (++cost % g.V() == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\tfindNegativeCycle();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">relax</span><span class=\"params\">(EdgeWeightedDigraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (DirectedEdge e : g.adj(v))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = e.to();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (distTo[v] + e.weight() &lt; distTo[w])&#123;</div><div class=\"line\">\t\t\t\tdistTo[w] = distTo[v] + e.weight();</div><div class=\"line\">\t\t\t\tedgeTo[w] = e;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (onQ[w] == <span class=\"keyword\">false</span>)&#123;</div><div class=\"line\">\t\t\t\t\tonQ[w] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t\t\tqueue.enqueue(w);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">findNegativeCycle</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> V = edgeTo.length;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tEdgeWeightedDigraph g = <span class=\"keyword\">new</span> EdgeWeightedDigraph(V);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; V; v++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (edgeTo[v] != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\tg.addEdge(edgeTo[v]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tEdgeWeightedDirectedCycle c = <span class=\"keyword\">new</span> EdgeWeightedDirectedCycle(g);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tcycle = c.cycle();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNegativeCycle</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> cycle != <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;DirectedEdge&gt; <span class=\"title\">negativeCycle</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> cycle;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">distTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> distTo[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> distTo[v] &lt; Double.POSITIVE_INFINITY;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;DirectedEdge&gt; <span class=\"title\">pathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!hasPathTo(v))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tStack&lt;DirectedEdge&gt; path = <span class=\"keyword\">new</span> Stack&lt;DirectedEdge&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tDirectedEdge e = edgeTo[v];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (e.from() != s)&#123;</div><div class=\"line\">\t\t\tpath.push(e);</div><div class=\"line\">\t\t\te = edgeTo[e.from()];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tpath.push(e);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> path;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-15\"><a href=\"#特点-15\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>对于任意含有V个顶点的加权有向图和给定的起点s，在最坏情况下基于队列的Bellman-Ford算法解决最短路径问题（或者找到从s可达的负权重环）所需的时间和EV成正比，空间和V成正比。</p>\n<h3 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><img src=\"http://i1.piimg.com/1949/5019ec6bc1ced557.png\" alt=\"Markdown\"></p>\n","categories":["Algorithm","Graph"],"tags":["Algorithm","Graph"]},{"title":"【算法】查找","url":"http://yoursite.com/2017/04/16/【算法】查找/","content":"<h2 id=\"顺序查找（无序链表）\"><a href=\"#顺序查找（无序链表）\" class=\"headerlink\" title=\"顺序查找（无序链表）\"></a>顺序查找（无序链表）</h2><p>符号表中使用的数据结构的一个简单选择是链表，每个结点存储一个键值对。</p>\n<h3 id=\"示意\"><a href=\"#示意\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i1.piimg.com/1949/a47128266118b83b.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SequentialSearch</span>&lt;<span class=\"title\">Key</span>, <span class=\"title\">Value</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Node first;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> n;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</div><div class=\"line\">\t\tKey key;</div><div class=\"line\">\t\tValue value;</div><div class=\"line\">\t\tNode next;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span> <span class=\"params\">(Key key, Value value, Node next)</span></span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.key = key;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.next = next;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (Node x = first; x != <span class=\"keyword\">null</span>; x = x.next)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (key.equals(x.key))&#123;</div><div class=\"line\">\t\t\t\tx.value = value;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tfirst = <span class=\"keyword\">new</span> Node(key, value, first);</div><div class=\"line\">\t\tn++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (Node x = first; x != <span class=\"keyword\">null</span>; x = x.next)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (key.equals(x.key))</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x.value;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty())</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (key.equals(first.key))</div><div class=\"line\">\t\t\tfirst = first.next;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\tdeleteNode(first, key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tn--;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteNode</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x.next == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (key.equals(x.next.key))</div><div class=\"line\">\t\t\tx.next = x.next.next;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\tdeleteNode(x.next, key);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tQueue&lt;Key&gt; queue = <span class=\"keyword\">new</span> Queue&lt;Key&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (Node x = first; x != <span class=\"keyword\">null</span>; x = x.next)</div><div class=\"line\">\t\t\tqueue.enqueue(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> queue;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> n;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> size() == <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> get(key) != <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>在含有N对键值的基于（无序）链表的符号表中，未命名的查找和插入操作都需要N次比较。命中的查找在最坏情况下需要N次比较。特别地，向一个空表中插入N个不同的键需要~N^2/2次比较。</p>\n<h2 id=\"二分查找（有序数组）\"><a href=\"#二分查找（有序数组）\" class=\"headerlink\" title=\"二分查找（有序数组）\"></a>二分查找（有序数组）</h2><p>符号表使用的数据结构是一对平行的数组，一个存储键一个存储值。</p>\n<p>计算小于给定键的键的数量：首先将key和中间键比较，如果相等则返回其索引；如果小于中间键则在左半部分查找；大于则在右半部分查找。</p>\n<h3 id=\"示意-1\"><a href=\"#示意-1\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i2.muimg.com/1949/a340ca0bc218a588.png\" alt=\"Markdown\"><br><img src=\"http://i2.muimg.com/1949/b74a9d4a067f70a2.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinarySearch</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;, <span class=\"title\">Value</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> n;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Key[] keys;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Value[] values;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BinarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span></span>&#123;</div><div class=\"line\">\t\tkeys = (Key[]) <span class=\"keyword\">new</span> Comparable[capacity];</div><div class=\"line\">\t\tvalues = (Value[]) <span class=\"keyword\">new</span> Object[capacity];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = rank(key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (i &lt; n &amp;&amp; key.compareTo(keys[i]) == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\tvalues[i] = value;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = n; j &gt; i; j--)&#123;</div><div class=\"line\">\t\t\tkeys[j] = keys[j-<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\tvalues[j] = values[j-<span class=\"number\">1</span>];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tkeys[i] = key;</div><div class=\"line\">\t\tvalues[i] = value;</div><div class=\"line\">\t\tn++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty())</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = rank(key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (i &lt; n &amp;&amp; key.compareTo(keys[i]) == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> values[i];</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> lo = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> hi = n - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (lo &lt;= hi)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> mid = lo + (hi - lo) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> compare = key.compareTo(keys[mid]);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\thi = mid - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\tlo = mid + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> mid;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> lo;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty())</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = rank(key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (key.compareTo(keys[i]) != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; j++)&#123;</div><div class=\"line\">\t\t\tkeys[j-<span class=\"number\">1</span>] = keys[j];</div><div class=\"line\">\t\t\tvalues[j-<span class=\"number\">1</span>] = values[j];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tkeys[n] = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\tvalues[n] = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\tn--;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> n;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">(Key lo, Key hi)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (hi.compareTo(lo) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (contains(hi))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(hi) - rank(lo) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(hi) - rank(lo);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">floor</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = rank(key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (i &lt; n &amp;&amp; key.compareTo(keys[i]) == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> keys[i];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> keys[i-<span class=\"number\">1</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">ceiling</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = rank(key);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> keys[i];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> keys(min(), max());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">(Key lo, Key hi)</span></span>&#123;</div><div class=\"line\">\t\tQueue&lt;Key&gt; queue = <span class=\"keyword\">new</span> Queue&lt;Key&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = rank(lo); i &lt; rank(hi); i++)</div><div class=\"line\">\t\t\tqueue.enqueue(keys[i]);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (contains(hi))</div><div class=\"line\">\t\t\tqueue.enqueue(hi);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> queue;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> size() == <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> get(key) != <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">min</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> keys[<span class=\"number\">0</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">max</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> keys[n-<span class=\"number\">1</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">select</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> keys[k];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMin</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tdelete(min());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMax</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tdelete(max());</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>在N个键的有序数组中进行二分查找最多需要（lgN+1）次比较（无论是否成功）。</p>\n<p>向大小为N的有序数组中插入一个新的元素在最坏情况下需要访问～2N次数组，因此向一个空符号表中插入N个元素在最坏情况下需要访问~N^2次数组。</p>\n<h3 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h3><p><img src=\"http://i2.muimg.com/1949/d23f6043a2502391.png\" alt=\"Markdown\"></p>\n<h2 id=\"二叉查找树\"><a href=\"#二叉查找树\" class=\"headerlink\" title=\"二叉查找树\"></a>二叉查找树</h2><p>定义一个类表示二叉查找树上的一个结点。每个结点都含有一个键、一个值、一条左链接、一条右链接和一个结点计数器。左链接指向一棵由小于该结点的所有键组成的二叉查找树，右链接指向一棵由大于该结点的所有键组成的二叉查找树。变量N给出了以该结点为根的子树的结点总数。</p>\n<h3 id=\"示意-2\"><a href=\"#示意-2\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i1.piimg.com/1949/15034c3f80c18e29.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-2\"><a href=\"#实现-2\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinarySearchTree</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;, <span class=\"title\">Value</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Node root;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</div><div class=\"line\">\t\tKey key;</div><div class=\"line\">\t\tValue value;</div><div class=\"line\">\t\tNode left;</div><div class=\"line\">\t\tNode right;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Key key, Value value, <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.key = key;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.n = n;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span></span>&#123;\t\t</div><div class=\"line\">\t\troot = put(root, key, value);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">put</span><span class=\"params\">(Node x, Key key, Value value)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(key, value, <span class=\"number\">1</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tx.left = put(x.left, key, value);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tx.right = put(x.right, key, value);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\tx.value = value;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tx.n = size(x.left) + size(x.right) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> get(root, key);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Value <span class=\"title\">get</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> get(x.left, key);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> get(x.right, key);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.value;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\troot = delete(root, key);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">delete</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tx.left = delete(x.left, key);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tx.right = delete(x.right, key);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x.left == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x.right;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x.right == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x.left;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tNode t = x;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tx = min(t.right);</div><div class=\"line\">\t\t\tx.right = deleteMin(t.right);</div><div class=\"line\">\t\t\tx.left = t.left;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tx.n = size(x.left) + size(x.right) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMin</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\troot = deleteMin(root);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">deleteMin</span><span class=\"params\">(Node x)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x.left == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.right;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tx.left = deleteMin(x.left);</div><div class=\"line\">\t\tx.n = size(x.left) + size(x.right) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMax</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\troot = deleteMax(root);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">deleteMax</span><span class=\"params\">(Node x)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x.right == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.left;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tx.right = deleteMax(x.right);</div><div class=\"line\">\t\tx.n = size(x.left) + size(x.right) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">min</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> min(root).key;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">min</span><span class=\"params\">(Node x)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x.left == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> min(x.left);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">max</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> max(root).key;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">max</span><span class=\"params\">(Node x)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x.right == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> max(x.right);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">floor</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\tNode x = floor(root, key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.key;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">floor</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compare == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> floor(x.left, key);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tNode y = floor(x.right, key);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (y != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> y;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> rank(root, key);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(x.left, key);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(x.right, key) + size(x.left) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> size(x.left);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">select</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> select(root, k).key;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">select</span><span class=\"params\">(Node x, <span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> t = size(x.left);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t &gt; k)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> select(x.left, k);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &lt; k)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> select(x.right, k-t-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">ceiling</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\tNode x = ceiling(root, key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.key;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">ceiling</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compare == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> ceiling(x.right, key);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tNode y = ceiling(x.left, key);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (y != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> y;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> size(root);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">(Node x)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.n;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">(Key lo, Key hi)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (hi.compareTo(lo) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (contains(hi))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(hi) - rank(lo) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(hi) - rank(lo);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> keys(min(), max());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">(Key lo, Key hi)</span></span>&#123;</div><div class=\"line\">\t\tQueue&lt;Key&gt; queue = <span class=\"keyword\">new</span> Queue&lt;Key&gt;();</div><div class=\"line\">\t\tkeys(root, queue, lo, hi);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> queue;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">keys</span> <span class=\"params\">(Node x, Queue&lt;Key&gt; queue, Key lo, Key hi)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compareLo = lo.compareTo(x.key);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compareHi = hi.compareTo(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compareLo &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tkeys(x.left, queue, lo, hi);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compareLo &lt;= <span class=\"number\">0</span> &amp;&amp; compareHi &gt;= <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tqueue.enqueue(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compareHi &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tkeys(x.right, queue, lo, hi);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> size() == <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> get(key) != <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>在由N个随机键构造的二叉查找树中，查找命中平均所需的比较次数为~2lnN（约为1.39lgN），插入操作和查找未命中平均所需的比较次数为~2lnN（约为1.39lgN）。</p>\n<p>在一棵二叉查找树中，所有操作在最坏情况下所需的时间都和树的高度成正比。</p>\n<h3 id=\"比较-1\"><a href=\"#比较-1\" class=\"headerlink\" title=\"比较\"></a>比较</h3><p><img src=\"http://i4.buimg.com/1949/070e9df0ff688b4a.png\" alt=\"Markdown\"></p>\n<h2 id=\"红黑二叉查找树\"><a href=\"#红黑二叉查找树\" class=\"headerlink\" title=\"红黑二叉查找树\"></a>红黑二叉查找树</h2><p>只要谨慎地使用左旋转、右旋转和颜色转换这三种简单的操作，就能够保证插入操作后红黑树和2-3树的一一对应关系：</p>\n<ol>\n<li>如果右子结点是红色的而左子结点是黑色的，进行左旋转</li>\n<li>如果左子结点是红色的且它的左子结点也是红色的，进行右旋转</li>\n<li>如果左右子结点均为红色，进行颜色转换</li>\n</ol>\n<h3 id=\"示意-3\"><a href=\"#示意-3\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i1.piimg.com/1949/ccc450dbaa5f0bac.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-3\"><a href=\"#实现-3\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedBlackTree</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;, <span class=\"title\">Value</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> RED = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> BLACK = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Node root;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</div><div class=\"line\">\t\tKey key;</div><div class=\"line\">\t\tValue value;</div><div class=\"line\">\t\tNode left;</div><div class=\"line\">\t\tNode right;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n;</div><div class=\"line\">\t\t<span class=\"keyword\">boolean</span> color;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Key key, Value value, <span class=\"keyword\">int</span> n, <span class=\"keyword\">boolean</span> color)</span></span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.key = key;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.n = n;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.color = color;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isRed</span><span class=\"params\">(Node x)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> BLACK;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> x.color == RED;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">rotateLeft</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">\t\tNode x = h.right;</div><div class=\"line\">\t\th.right = x.left;</div><div class=\"line\">\t\tx.left = h;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tx.color = h.color;</div><div class=\"line\">\t\th.color = RED;</div><div class=\"line\">\t\tx.n = h.n;</div><div class=\"line\">\t\th.n = size(h.left) + size(h.right) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">rotateRight</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">\t\tNode x = h.left;</div><div class=\"line\">\t\th.left = x.right;</div><div class=\"line\">\t\tx.right = h;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tx.color = h.color;</div><div class=\"line\">\t\th.color = RED;</div><div class=\"line\">\t\tx.n = h.n;</div><div class=\"line\">\t\th.n = size(h.left) + size(h.right) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">flipColors</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">\t\th.left.color = !h.left.color;</div><div class=\"line\">\t\th.right.color = !h.right.color;</div><div class=\"line\">\t\th.color = !h.color;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">balance</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isRed(h.left) &amp;&amp; isRed(h.left.left))</div><div class=\"line\">\t\t\th = rotateRight(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isRed(h.right))\t</div><div class=\"line\">\t\t\th = rotateLeft(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isRed(h.left) &amp;&amp; isRed(h.right))</div><div class=\"line\">\t\t\tflipColors(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\th.n = size(h.left) + size(h.right) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> h;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">moveRedLeft</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">\t\tflipColors(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isRed(h.right.left))&#123;</div><div class=\"line\">\t\t\th.right = rotateRight(h.right);</div><div class=\"line\">\t\t\th = rotateLeft(h);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> h;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">moveRedRight</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">\t\tflipColors(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isRed(h.left.left))</div><div class=\"line\">\t\t\th = rotateRight(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> h;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span></span>&#123;</div><div class=\"line\">\t\troot = put(root, key, value);</div><div class=\"line\">\t\troot.color = BLACK;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">put</span><span class=\"params\">(Node h, Key key, Value value)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (h == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(key, value, <span class=\"number\">1</span>, RED);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(h.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\th.left = put(h.left, key, value);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\th.right = put(h.right, key, value);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\th.value = value;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isRed(h.left) &amp;&amp; isRed(h.left.left))</div><div class=\"line\">\t\t\th = rotateRight(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!isRed(h.left) &amp;&amp; isRed(h.right))\t</div><div class=\"line\">\t\t\th = rotateLeft(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isRed(h.left) &amp;&amp; isRed(h.right))</div><div class=\"line\">\t\t\tflipColors(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\th.n = size(h.left) + size(h.right) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> h;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> get(root, key);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Value <span class=\"title\">get</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (x != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\tx = x.left;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\tx = x.right;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x.value;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!isRed(root.left) &amp;&amp; !isRed(root.right))</div><div class=\"line\">\t\t\troot.color = RED;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\troot = delete(root, key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!isEmpty())</div><div class=\"line\">\t\t\troot.color = BLACK;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">delete</span><span class=\"params\">(Node h, Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (key.compareTo(h.key) &lt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!isRed(h.left) &amp;&amp; !isRed(h.left.left))</div><div class=\"line\">\t\t\t\th = moveRedLeft(h);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\th.left = delete(h.left, key);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isRed(h.left))</div><div class=\"line\">\t\t\t\th = rotateRight(h);</div><div class=\"line\">\t\t\t<span class=\"comment\">//如果被查找的键在树的底部，可以直接删除它</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (h.right == <span class=\"keyword\">null</span> &amp;&amp; key.compareTo(h.key) == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!isRed(h.right) &amp;&amp; !isRed(h.right.left))</div><div class=\"line\">\t\t\t\th = moveRedRight(h);</div><div class=\"line\">\t\t\t<span class=\"comment\">//如果不在，需要将它和它的后继结点交换</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (key.compareTo(h.key) == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\th.key = min(h.right).key;</div><div class=\"line\">\t\t\t\th.value = get(h.right, min(h.right).key);</div><div class=\"line\">\t\t\t\th.right = deleteMin(h.right);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\th.right = delete(h.right, key);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> balance(h);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMin</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!isRed(root.left) &amp;&amp; !isRed(root.right))</div><div class=\"line\">\t\t\troot.color = RED;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\troot = deleteMin(root);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!isEmpty())</div><div class=\"line\">\t\t\troot.color = BLACK;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">deleteMin</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (h.left == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!isRed(h.left) &amp;&amp; !isRed(h.left.left))</div><div class=\"line\">\t\t\th = moveRedLeft(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\th.left = deleteMin(h.left);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> balance(h);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMax</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!isRed(root.left) &amp;&amp; !isRed(root.right))</div><div class=\"line\">\t\t\troot.color = RED;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\troot = deleteMax(root);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!isEmpty())</div><div class=\"line\">\t\t\troot.color = BLACK;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">deleteMax</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isRed(h.left))</div><div class=\"line\">\t\t\th = rotateRight(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (h.right == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!isRed(h.right) &amp;&amp; !isRed(h.right.left))</div><div class=\"line\">\t\t\th = moveRedRight(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\th.right = deleteMax(h.right);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> balance(h);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> size(root);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">(Node x)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.n;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">(Key lo, Key hi)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (hi.compareTo(lo) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (contains(hi))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(hi) - rank(lo) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(hi) - rank(lo);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> rank(root, key);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(x.left, key);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> rank(x.right, key) + size(x.left) + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> size(x.left);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">select</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> select(root, k).key;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">select</span><span class=\"params\">(Node x, <span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> t = size(x.left);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t &gt; k)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> select(x.left, k);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &lt; k)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> select(x.right, k-t-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">floor</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\tNode x = floor(root, key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.key;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">floor</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compare == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> floor(x.left, key);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tNode y = floor(x.right, key);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (y != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> y;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">ceiling</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\tNode x = ceiling(root, key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x.key;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">ceiling</span><span class=\"params\">(Node x, Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compare = key.compareTo(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compare == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> ceiling(x.right, key);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tNode y = ceiling(x.left, key);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (y != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> y;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">min</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> min(root).key;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">min</span><span class=\"params\">(Node x)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x.left == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> min(x.left);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">max</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> max(root).key;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">max</span><span class=\"params\">(Node x)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x.right == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> max(x.right);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> keys(min(), max());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">(Key lo, Key hi)</span></span>&#123;</div><div class=\"line\">\t\tQueue&lt;Key&gt; queue = <span class=\"keyword\">new</span> Queue&lt;Key&gt;();</div><div class=\"line\">\t\tkeys(root, queue, lo, hi);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> queue;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">keys</span> <span class=\"params\">(Node x, Queue&lt;Key&gt; queue, Key lo, Key hi)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compareLo = lo.compareTo(x.key);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> compareHi = hi.compareTo(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compareLo &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tkeys(x.left, queue, lo, hi);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compareLo &lt;= <span class=\"number\">0</span> &amp;&amp; compareHi &gt;= <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tqueue.enqueue(x.key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (compareHi &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tkeys(x.right, queue, lo, hi);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> get(key) != <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> size() == <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"特点-3\"><a href=\"#特点-3\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>一棵大小为N的红黑树的高度不会超过2lgN。</p>\n<p>一棵大小为N的红黑树中，根结点到任意结点的平均路径长度为~1.00lgN。</p>\n<p>在一棵红黑树中，以下操作在最坏情况下所需的时间是对数级别的：查找（get）、插入（put）、查找最小键、查找最大键、floor、ceiling、rank、select、删除最小键（deleteMin）、删除最大键（deleteMax）、删除（delete）和范围查询。</p>\n<h3 id=\"比较-2\"><a href=\"#比较-2\" class=\"headerlink\" title=\"比较\"></a>比较</h3><p><img src=\"http://i4.buimg.com/1949/43a6fb2559a670cd.png\" alt=\"Markdown\"></p>\n<h2 id=\"散列\"><a href=\"#散列\" class=\"headerlink\" title=\"散列\"></a>散列</h2><p>使用散列的查找算法分为两步。第一步是用散列函数将被查找的键转化为数组的一个索引（散列函数）；第二步就是一个处理碰撞冲突的过程（拉链法和线性探测法）。</p>\n<p>因为需要的是数组的索引而不是一个32位的整数，在实现中会将默认的hashCode()方法和除留余数法结合起来产生一个0到M-1的整数，方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Key x)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (x.hashCode() &amp; <span class=\"number\">0x7fffffff</span>) % M;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这段代码会将符号位屏蔽（将一个32位整数变为一个31位非负整数），然后用除留余数法计算它除以M的余数。在使用这样的代码一般会将数组的大小M取为素数以充分利用原散列值的所有位。</p>\n<h3 id=\"基于拉链法的散列表（链表数组）\"><a href=\"#基于拉链法的散列表（链表数组）\" class=\"headerlink\" title=\"基于拉链法的散列表（链表数组）\"></a>基于拉链法的散列表（链表数组）</h3><p>将大小为M的数组中的每个元素指向一条链表，链表中的每个结点都存储了散列值为该元素的索引的键值对。</p>\n<p>查找分两步：首先根据散列值找到对应的链表，然后沿着链表顺序查找相应的键。</p>\n<h4 id=\"示意-4\"><a href=\"#示意-4\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/b20715922f16c78d.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-4\"><a href=\"#实现-4\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SeparateChainHash</span>&lt;<span class=\"title\">Key</span>, <span class=\"title\">Value</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> M;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</div><div class=\"line\">\t<span class=\"keyword\">private</span> SequentialSearch&lt;Key, Value&gt;[] st;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SeparateChainHash</span><span class=\"params\">(<span class=\"keyword\">int</span> M)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.M = M;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.N = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tst = (SequentialSearch&lt;Key, Value&gt;[]) <span class=\"keyword\">new</span> SequentialSearch[M];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; M; i++)</div><div class=\"line\">\t\t\tst[i] = <span class=\"keyword\">new</span> SequentialSearch();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Key x)</span></span>&#123;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> (x.hashCode() &amp; <span class=\"number\">0x7fffffff</span>) % M;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> m = hash(key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!contains(key))</div><div class=\"line\">\t\t\tN++;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tst[m].put(key, value);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> m = hash(key);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> st[m].get(key);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> m = hash(key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (contains(key))</div><div class=\"line\">\t\t\tN--;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tst[m].delete(key);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tQueue&lt;Key&gt; queue = <span class=\"keyword\">new</span> Queue&lt;Key&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; st.length; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Key key : st[i].keys())</div><div class=\"line\">\t\t\t\tqueue.enqueue(key);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> queue;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> get(key) != <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> N;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> size() == <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-4\"><a href=\"#特点-4\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>在一张含有M条链表和N个键的散列表中，任意一条链表中的键的数量均在N/M的常熟因子范围内的概率无限趋于1，未命中查找和插入操作所需的比较次数为～N/M。</p>\n<h3 id=\"基于线性探测法的散列表（并行数组）\"><a href=\"#基于线性探测法的散列表（并行数组）\" class=\"headerlink\" title=\"基于线性探测法的散列表（并行数组）\"></a>基于线性探测法的散列表（并行数组）</h3><p>用大小为M的数组保存N个键值对，其中M&gt;N，需要依靠数组中的空位解决碰撞冲突。基于这种策略的所有方法被统称为开放地址散列表。</p>\n<p>最简单的方法叫做线性探测法：当碰撞发生时（当一个键的散列值已经被另一个不同的键占用），直接检查散列表中的下一个位置（将索引值加1）。这样的线性探测可能会产生三种结果：</p>\n<ol>\n<li>命中，该位置的键和被查找的键相同</li>\n<li>未命中，键为空（该位置没有键）</li>\n<li>继续查找，该位置的键和被查找的键不同</li>\n</ol>\n<h4 id=\"示意-5\"><a href=\"#示意-5\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/8ad232c2dbd2892a.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-5\"><a href=\"#实现-5\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinearProbingHash</span>&lt;<span class=\"title\">Key</span>, <span class=\"title\">Value</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> M;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Key[] keys;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Value[] values;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LinearProbingHash</span><span class=\"params\">(<span class=\"keyword\">int</span> M)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.M = M;</div><div class=\"line\">\t\tkeys = (Key[]) <span class=\"keyword\">new</span> Object[M];</div><div class=\"line\">\t\tvalues = (Value[]) <span class=\"keyword\">new</span> Object[M];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Key x)</span></span>&#123;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> (x.hashCode() &amp; <span class=\"number\">0x7fffffff</span>) % M;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">int</span> m)</span></span>&#123;</div><div class=\"line\">\t\tLinearProbingHash&lt;Key, Value&gt; tmp = <span class=\"keyword\">new</span> LinearProbingHash&lt;Key, Value&gt;(m);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; M; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (keys[i] != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\ttmp.put(keys[i], values[i]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.M = m;</div><div class=\"line\">\t\tkeys = tmp.keys;</div><div class=\"line\">\t\tvalues = tmp.values;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (N &gt;= M / <span class=\"number\">2</span>)</div><div class=\"line\">\t\t\tresize(<span class=\"number\">2</span> * M);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> m = hash(key);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (m = hash(key); keys[m] != <span class=\"keyword\">null</span>; m = (m + <span class=\"number\">1</span>) % M)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (keys[m].equals(key))&#123;</div><div class=\"line\">\t\t\t\tvalues[m] = value;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tkeys[m] = key;</div><div class=\"line\">\t\tvalues[m] = value;</div><div class=\"line\">\t\tN++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> m = hash(key); keys[m] != <span class=\"keyword\">null</span>; m = (m + <span class=\"number\">1</span>) % M)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (keys[m].equals(key))</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> values[m];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> m;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (m = hash(key); keys[m] != <span class=\"keyword\">null</span>; m = (m + <span class=\"number\">1</span>) % M)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (keys[m].equals(key))&#123;</div><div class=\"line\">\t\t\t\tkeys[m] = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\t\tvalues[m] = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (m = (m + <span class=\"number\">1</span>) % M; keys[m] != <span class=\"keyword\">null</span>; m = (m + <span class=\"number\">1</span>) % M)&#123;</div><div class=\"line\">\t\t\tKey k = keys[m];</div><div class=\"line\">\t\t\tValue v = values[m];</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tkeys[m] = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\tvalues[m] = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tput(k, v);</div><div class=\"line\">\t\t\tN--;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tN--;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (N &gt; <span class=\"number\">0</span> &amp;&amp; N == M / <span class=\"number\">8</span>)</div><div class=\"line\">\t\t\tresize(M / <span class=\"number\">2</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tQueue&lt;Key&gt; queue = <span class=\"keyword\">new</span> Queue&lt;Key&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; M; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (keys[i] != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\tqueue.enqueue(keys[i]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> queue;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Key key)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> get(key) != <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> N;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> size() == <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-5\"><a href=\"#特点-5\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>在一张大小为M并含有N=aM个键的基于线性探测的散列表中，命中和未命中的查找所需的探测次数分别为：</p>\n<p><img src=\"http://i2.muimg.com/1949/e14e5b0fae6829b4.png\" alt=\"Markdown\"></p>\n<p>假设一张散列表能够自己调整数组的大小，初始为空。执行任意数序的t次查找、插入和删除操作所需的时间和t成正比，所使用的内存量总是在表中的键的总数的常数因子范围内。</p>\n<ol>\n<li>线性探测的平均成本取决于元素在插入数组后聚集成的一组连续的条目，也叫做键簇。短小的键簇才能保证较高的效率，因此需要动态调整数组的大小来保证使用率在1/8到1/2之间。</li>\n</ol>\n<h4 id=\"比较-3\"><a href=\"#比较-3\" class=\"headerlink\" title=\"比较\"></a>比较</h4><p>将a=N/M称为散列表的使用率。对于基于拉链法的散列表，a是每条链表的长度，因此一般大于1；对于基于线性探测的散列表，a是表中已被占用的空间的比例，它是不可能大于1的。</p>\n<h3 id=\"特点-6\"><a href=\"#特点-6\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ol>\n<li>每种类型的键都需要一个优秀的散列函数</li>\n<li>性能保证来自于散列函数的质量</li>\n<li>散列函数的计算可能复杂而且昂贵</li>\n<li>难以支持有序性相关的符号表操作</li>\n</ol>\n<h3 id=\"比较-4\"><a href=\"#比较-4\" class=\"headerlink\" title=\"比较\"></a>比较</h3><p><img src=\"http://i4.buimg.com/1949/39f17afd0f7dc23c.png\" alt=\"Markdown\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><img src=\"http://i2.muimg.com/1949/95d69b5d605ec62a.png\" alt=\"Markdown\"><br><img src=\"http://i1.piimg.com/1949/57df48f1b0bb28b0.png\" alt=\"Markdown\"></p>\n","categories":["Algorithm","Search"],"tags":["Algorithm","Search"]},{"title":"【算法】排序","url":"http://yoursite.com/2017/04/13/【算法】排序/","content":"<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><p>首先，找到数组中最小的那个元素，其次，将它和数组的第一个元素交换位置（如果第一个元素就是最小元素那么它就和自己交换）。再次，在剩下的元素中找到最小的元素，将它与数组的第二个元素交换位置。如此往复，直到将整个数组排序。</p>\n<h3 id=\"示意\"><a href=\"#示意\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/37c5303b947c2871.png\" alt=\"Markdown\"><br><img src=\"http://i4.buimg.com/1949/2e4a7fde5bb8cead.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Selection</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length - <span class=\"number\">1</span>; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> minIndex = i;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; a.length; j++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!less(a[minIndex], a[j]))</div><div class=\"line\">\t\t\t\t\tminIndex = j;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\texch(a, i, minIndex);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(Comparable a, Comparable b)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a.compareTo(b) &lt; <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</div><div class=\"line\">\t\tComparable t = a[i];</div><div class=\"line\">\t\ta[i] = a[j];</div><div class=\"line\">\t\ta[j] = t;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</div><div class=\"line\">\t\t\tSystem.out.print(a[i] + <span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>对于长度为N的数组，选择排序需要大约N^2/2次比较和N次交换。</p>\n<ol>\n<li>运行时间和输入无关</li>\n<li>数据移动是最少的</li>\n</ol>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><p>将元素插入到其他已经有序的数组中的适当位置。为了要给插入的元素腾出空间，需要将其余所有元素在插入之前都向右移动一位。</p>\n<h3 id=\"示意-1\"><a href=\"#示意-1\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/58ff4414ea0b0aa8.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Insertion</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; a.length; i++)&#123;\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &gt; <span class=\"number\">0</span> &amp;&amp; less(a[j], a[j-<span class=\"number\">1</span>]); j--)</div><div class=\"line\">\t\t\t\texch(a, j-<span class=\"number\">1</span>, j);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(Comparable a, Comparable b)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a.compareTo(b) &lt; <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</div><div class=\"line\">\t\tComparable t = a[i];</div><div class=\"line\">\t\ta[i] = a[j];</div><div class=\"line\">\t\ta[j] = t;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</div><div class=\"line\">\t\t\tSystem.out.print(a[i] + <span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>对于随机排列的长度为N且主键不重复的数组，平均情况下插入排序需要～N^2/2次比较以及~N^2/4次交换。最坏情况下需要～N^2/2次比较和～N^2/2次交换，最好情况下需要N-1次比较和0次交换。</p>\n<p>插入排序需要的交换操作和数组中倒置的数量相同，需要的比较次数大于等于倒置的数量，小于等于倒置的数量加上数组的大小再减一。</p>\n<ol>\n<li>所需的时间取决于输入中元素的初始顺序，对于部分有序的数组十分高效，也很适合小规模数组</li>\n</ol>\n<h3 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h3><p>对于随机排序的无重复主键的数组，插入排序和选择排序的运行时间是平方级别的，两者之比应该是一个较小的常数。</p>\n<ol>\n<li>插入排序不会访问索引右侧的元素，而选择排序不会访问索引左侧的元素</li>\n<li>插入排序所需的比较次数平均只有选择排序的一半</li>\n</ol>\n<h2 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h2><p>希尔排序的思想是使数组中任意间隔为h的元素都是有序的。这样的数组被称为h有序数组。在进行排序时，如果h很大，就能将元素移动到很远的地方，为实现更小的h有序创造方便。用这种方式，对于任意以1结尾的h序列，都能够将数组排序。</p>\n<h3 id=\"示意-2\"><a href=\"#示意-2\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/cd9e7723e4a03206.png\" alt=\"Markdown\"><br><img src=\"http://i4.buimg.com/1949/dea476cb7d030f95.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-2\"><a href=\"#实现-2\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shell</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> h = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (h &lt;= a.length / <span class=\"number\">3</span>)</div><div class=\"line\">\t\t\th = <span class=\"number\">3</span> * h + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (h &gt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = h; i &lt; a.length; i++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &gt; h &amp;&amp; less(a[j], a[j-h]); j -= h)</div><div class=\"line\">\t\t\t\t\texch(a, j-h, j);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\th = (h - <span class=\"number\">1</span>) / <span class=\"number\">3</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(Comparable a, Comparable b)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a.compareTo(b) &lt; <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</div><div class=\"line\">\t\tComparable t = a[i];</div><div class=\"line\">\t\ta[i] = a[j];</div><div class=\"line\">\t\ta[j] = t;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</div><div class=\"line\">\t\t\tSystem.out.print(a[i] + <span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>使用递增序列1，4，13，40，121，364…的希尔排序所需的比较次数不会超出N的若干倍数乘以递增序列的长度。</p>\n<ol>\n<li>希尔排序更高效的原因是它权衡了子数组的规模和有序性。排序之初，各个子数组都很短，排序之后子数组都是部分有序的，这两种情况都很适合插入排序。</li>\n<li>希尔排序可以用于大型数组。它对任意排序（不一定是随机的）的数组表现也很好。</li>\n<li>希尔排序对于中等大小的数组它的运行时间是可以接受的。它的代码量很小，且不需要使用额外的内存空间。</li>\n</ol>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><p>要将一个数组排序，可以先（递归地）将它分成两半分别排序，然后将结果归并起来。</p>\n<p>递归实现的归并排序是算法设计中<em>分治思想</em>的典型应用。</p>\n<h3 id=\"示意-3\"><a href=\"#示意-3\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/36a6409cbc7bd58d.png\" alt=\"Markdown\"></p>\n<h3 id=\"特点-3\"><a href=\"#特点-3\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ol>\n<li>能够保证将任意长度为N的数组排序所需时间和NlogN成正比，所需的额外空间和N成正比。</li>\n<li>可以用归并排序处理数百万甚至更大规模的数组，这是插入排序或者选择排序做不到的。</li>\n</ol>\n<h3 id=\"自顶向下的归并排序\"><a href=\"#自顶向下的归并排序\" class=\"headerlink\" title=\"自顶向下的归并排序\"></a>自顶向下的归并排序</h3><h4 id=\"示意-4\"><a href=\"#示意-4\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/a840c99994a6f5a6.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-3\"><a href=\"#实现-3\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Merge</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Comparable[] aux;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\taux = <span class=\"keyword\">new</span> Comparable[a.length];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tsort(a, <span class=\"number\">0</span>, a.length-<span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (lo == hi)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> mid = (hi + lo) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tsort(a, lo, mid);</div><div class=\"line\">\t\tsort(a, mid+<span class=\"number\">1</span>, hi);</div><div class=\"line\">\t\tmerge(a, lo, mid, hi);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> hi)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> j = lo;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> k = mid + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lo; i &lt;= hi; i++)</div><div class=\"line\">\t\t\taux[i] = a[i];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lo; i &lt;= hi; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j &gt; mid)</div><div class=\"line\">\t\t\t\ta[i] = aux[k++];</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k &gt; hi)</div><div class=\"line\">\t\t\t\ta[i] = aux[j++];</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (less(aux[j], aux[k]))</div><div class=\"line\">\t\t\t\ta[i] = aux[j++];</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\ta[i] = aux[k++];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(Comparable a, Comparable b)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a.compareTo(b) &lt; <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</div><div class=\"line\">\t\t\tSystem.out.print(a[i] + <span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-4\"><a href=\"#特点-4\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>对于长度为N的任意数组，自顶向下的归并排序需要1/2*NlgN至NlgN次比较，最多需要访问数组6NlgN次。</p>\n<h3 id=\"自底向上的归并排序\"><a href=\"#自底向上的归并排序\" class=\"headerlink\" title=\"自底向上的归并排序\"></a>自底向上的归并排序</h3><h4 id=\"示意-5\"><a href=\"#示意-5\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/0029f5c2ef45566b.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-4\"><a href=\"#实现-4\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Merge</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Comparable[] aux;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\taux = <span class=\"keyword\">new</span> Comparable[a.length];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; a.length; i *= <span class=\"number\">2</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; a.length; j += <span class=\"number\">2</span>*i)</div><div class=\"line\">\t\t\t\tmerge(a, j, j+i-<span class=\"number\">1</span>, Math.min(j+<span class=\"number\">2</span>*i-<span class=\"number\">1</span>, a.length-<span class=\"number\">1</span>));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> hi)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> j = lo;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> k = mid + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lo; i &lt;= hi; i++)</div><div class=\"line\">\t\t\taux[i] = a[i];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lo; i &lt;= hi; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j &gt; mid)</div><div class=\"line\">\t\t\t\ta[i] = aux[k++];</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k &gt; hi)</div><div class=\"line\">\t\t\t\ta[i] = aux[j++];</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (less(aux[j], aux[k]))</div><div class=\"line\">\t\t\t\ta[i] = aux[j++];</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\ta[i] = aux[k++];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(Comparable a, Comparable b)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a.compareTo(b) &lt; <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</div><div class=\"line\">\t\t\tSystem.out.print(a[i] + <span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-5\"><a href=\"#特点-5\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>对于长度为N的任意数组，自底向上的归并排序需要1/2*NlgN至NlgN次比较，最多访问数组6NlgN次。</p>\n<ol>\n<li>比较适合用链表组织的数据。只需要重新组织链表链接就能将链表原地排序（不需要创建任何的链表结点）。</li>\n<li>归并排序是一种渐进最优的基于比较排序的算法。</li>\n</ol>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><p>快速排序是一种分治的排序算法。它将一个数组分成两个子数组，将两部分独立地排序。</p>\n<h3 id=\"示意-6\"><a href=\"#示意-6\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/788a2666f6f460b3.png\" alt=\"Markdown\"><br><img src=\"http://i4.buimg.com/1949/839068374a31bf98.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-5\"><a href=\"#实现-5\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Quick</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Random random;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> seed;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        seed = System.currentTimeMillis();</div><div class=\"line\">        random = <span class=\"keyword\">new</span> Random(seed);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\tshuffle(a);</div><div class=\"line\">\t\tsort(a, <span class=\"number\">0</span>, a.length-<span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (hi &lt;= lo)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = partition(a, lo, hi);</div><div class=\"line\">\t\tsort(a, lo, i-<span class=\"number\">1</span>);</div><div class=\"line\">\t\tsort(a, i+<span class=\"number\">1</span>, hi);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = lo;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> j = hi;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (i &lt; j)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (i &lt; j &amp;&amp; less(a[i], a[lo]))</div><div class=\"line\">\t\t\t\ti++;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (i &lt; j &amp;&amp; less(a[lo], a[j]))</div><div class=\"line\">\t\t\t\tj--;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\texch(a, i, j);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\texch(a, lo, i);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> i;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(Comparable a, Comparable b)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a.compareTo(b) &lt; <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</div><div class=\"line\">\t\tComparable t = a[i];</div><div class=\"line\">\t\ta[i] = a[j];</div><div class=\"line\">\t\ta[j] = t;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</div><div class=\"line\">\t\t\tSystem.out.print(a[i] + <span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shuffle</span><span class=\"params\">(Object[] a)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"argument array is null\"</span>);</div><div class=\"line\">        <span class=\"keyword\">int</span> n = a.length;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> r = i + uniform(n-i);</div><div class=\"line\">            Object temp = a[i];</div><div class=\"line\">            a[i] = a[r];</div><div class=\"line\">            a[r] = temp;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">uniform</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"argument must be positive\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> random.nextInt(n);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"特点-6\"><a href=\"#特点-6\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>将长度为N的无重复数组排序，快速排序平均需要~2NlnN次比较（以及1/6的交换），最多需要约N^2/2次比较，但随机打乱数组能够预防这种情况。</p>\n<ol>\n<li>快速排序实现简单、适用于各种不同的输入数据且在一般应用中比其他排序算法都要快得多。</li>\n<li>快速排序是原地排序（只需要一个很小的辅助栈），且将长度为N的数组排序所需的时间和NlgN成正比。</li>\n<li>非常脆弱，在实现时要非常小心才能避免低劣的性能。</li>\n</ol>\n<h3 id=\"比较-1\"><a href=\"#比较-1\" class=\"headerlink\" title=\"比较\"></a>比较</h3><p>快速排序和归并排序是互补的：归并排序将数组分成两个子数组分别排序，并将有序的子数组归并以将整个数组排序；而快速排序将数组排序的方式则是当两个子数组都有序时整个数组也就自然有序了。</p>\n<p>在第一种情况中，递归调用发生在处理整个数组之前；在第二种情况中，递归调用发生在处理整个数组之后。</p>\n<p>在归并排序中，一个数组被等分为两半；在快速排序中，切分的位置取决于数组的内容。</p>\n<h3 id=\"三向切分的快速排序\"><a href=\"#三向切分的快速排序\" class=\"headerlink\" title=\"三向切分的快速排序\"></a>三向切分的快速排序</h3><p>在有大量重复元素的情况下，快速排序的递归性会使元素全部重复的子数组经常出现。一个简单的想法是将数组切分为三部分，分别对应小于、等于和大于切分元素的数组元素。这样的切分能够将和切分元素相等的元素归位，就不会被包含在递归调用处理的子数组之中了。</p>\n<p>对于包含大量重复元素的数组，三向切分的快速排序将排序时间从线性对数级降低到了线性级别。</p>\n<h4 id=\"示意-7\"><a href=\"#示意-7\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i2.muimg.com/1949/4ef1978a61e4d2ed.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-6\"><a href=\"#实现-6\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Quick</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Random random;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> seed;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        seed = System.currentTimeMillis();</div><div class=\"line\">        random = <span class=\"keyword\">new</span> Random(seed);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\tshuffle(a);</div><div class=\"line\">\t\tsort(a, <span class=\"number\">0</span>, a.length-<span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (hi &lt;= lo)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> lt = lo;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> gt = hi;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = lo + <span class=\"number\">1</span>;</div><div class=\"line\">\t\tComparable v = a[lo];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (i &lt;= gt)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (a[i].compareTo(v) &lt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\texch(a, lt, i);</div><div class=\"line\">\t\t\t\tlt++;</div><div class=\"line\">\t\t\t\ti++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a[i].compareTo(v) &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\texch(a, gt, i);</div><div class=\"line\">\t\t\t\tgt--;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\ti++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tsort(a, lo, lt-<span class=\"number\">1</span>);</div><div class=\"line\">\t\tsort(a, gt+<span class=\"number\">1</span>, hi);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</div><div class=\"line\">\t\tComparable t = a[i];</div><div class=\"line\">\t\ta[i] = a[j];</div><div class=\"line\">\t\ta[j] = t;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</div><div class=\"line\">\t\t\tSystem.out.print(a[i] + <span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shuffle</span><span class=\"params\">(Object[] a)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"argument array is null\"</span>);</div><div class=\"line\">        <span class=\"keyword\">int</span> n = a.length;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> r = i + uniform(n-i);</div><div class=\"line\">            Object temp = a[i];</div><div class=\"line\">            a[i] = a[r];</div><div class=\"line\">            a[r] = temp;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">uniform</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"argument must be positive\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> random.nextInt(n);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-7\"><a href=\"#特点-7\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>对于大小为N的数组，三向切分的快速排序需要~(2ln2)NH次比较。其中H为由主键值出现频率定义的香农信息量。</p>\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><p>堆排序可以分为两个阶段。在堆的构造阶段中，将原始数组重新组织安排进一个堆中（从右至左用sink函数构造子堆）；然后在下沉排序阶段，从堆中按递减顺序取出所有元素得到排序结果（将堆中的最大元素删除，然后放入堆缩小后数组空出的位置）。</p>\n<h3 id=\"示意-8\"><a href=\"#示意-8\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i1.piimg.com/1949/940fc4273ab8f243.png\" alt=\"Markdown\"><br><img src=\"http://i1.piimg.com/1949/f91b943a1d066418.png\" alt=\"Markdown\"><br><img src=\"http://i1.piimg.com/1949/820fe5415a95d65a.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-7\"><a href=\"#实现-7\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Heap</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = a.length;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n / <span class=\"number\">2</span>; i &gt;= <span class=\"number\">1</span>; i--)</div><div class=\"line\">\t\t\tsink(a, i, n);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (n &gt; <span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\texch(a, <span class=\"number\">0</span>, n-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t\tsink(a, <span class=\"number\">1</span>, --n);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(Comparable a, Comparable b)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a.compareTo(b) &lt; <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</div><div class=\"line\">\t\tComparable t = a[i];</div><div class=\"line\">\t\ta[i] = a[j];</div><div class=\"line\">\t\ta[j] = t;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sink</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"number\">2</span> * k &lt;= n)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> j = <span class=\"number\">2</span> * k;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j &lt; n &amp;&amp; less(a[j-<span class=\"number\">1</span>], a[j]))</div><div class=\"line\">\t\t\t\tj++;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!less(a[k-<span class=\"number\">1</span>], a[j-<span class=\"number\">1</span>]))</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\texch(a, k-<span class=\"number\">1</span>, j-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tk = j;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(Comparable[] a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</div><div class=\"line\">\t\t\tSystem.out.print(a[i] + <span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"特点-8\"><a href=\"#特点-8\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>用下沉操作由N个元素构造堆只需少于2N次比较以及少于N次交换。</p>\n<p>将N个元素排序，堆排序只需少于（2NlgN+2N）次比较（以及一半次数的交换）。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>快速排序是最快的通用排序算法。</p>\n<p><img src=\"http://i1.piimg.com/1949/5fb571a8e7c4ba4b.png\" alt=\"Markdown\"></p>\n","categories":["Algorithm","Sort"],"tags":["Algorithm","Sort"]},{"title":"【算法】基础","url":"http://yoursite.com/2017/04/13/【算法】基础/","content":"<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><p>链表是一种递归的数据结构，它或者为空（null），或者是指向一个结点（node）的引用，该结点含有一个泛型的元素和一个指向另一条链表的引用。</p>\n<h3 id=\"结点记录\"><a href=\"#结点记录\" class=\"headerlink\" title=\"结点记录\"></a>结点记录</h3><p>用一个嵌套类来定义结点的抽象数据类型。一个Node对象含有两个实例变量，类型分别为Item（参数类型）和Node。调用的结果是一个指向Node对象的引用，它的实例变量均被初始化为null。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</div><div class=\"line\">\tItem item;</div><div class=\"line\">\tNode next;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"构造链表\"><a href=\"#构造链表\" class=\"headerlink\" title=\"构造链表\"></a>构造链表</h3><p><img src=\"http://i2.muimg.com/1949/2fae2b9aa25cf46c.png\" alt=\"Markdown\"></p>\n<h3 id=\"在表头插入结点\"><a href=\"#在表头插入结点\" class=\"headerlink\" title=\"在表头插入结点\"></a>在表头插入结点</h3><p><img src=\"http://i2.muimg.com/1949/b3feac44119e5385.png\" alt=\"Markdown\"></p>\n<h3 id=\"从表头删除结点\"><a href=\"#从表头删除结点\" class=\"headerlink\" title=\"从表头删除结点\"></a>从表头删除结点</h3><p><img src=\"http://i2.muimg.com/1949/a353747333a6df9a.png\" alt=\"Markdown\"></p>\n<h3 id=\"在表尾插入结点\"><a href=\"#在表尾插入结点\" class=\"headerlink\" title=\"在表尾插入结点\"></a>在表尾插入结点</h3><p><img src=\"http://i2.muimg.com/1949/99b757251fa0d3ae.png\" alt=\"Markdown\"></p>\n<h3 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (Node x = first; x != <span class=\"keyword\">null</span>; x = x.next)&#123;</div><div class=\"line\">\t<span class=\"comment\">//处理x.item</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li>可以处理任意类型的数据</li>\n<li>所需的空间总是和集合的大小成正比</li>\n<li>操作所需的时间总是和集合的大小无关</li>\n</ol>\n<h2 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h2><p>栈是一种基于后进先出（LIFO）策略的集合类型。</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>将栈保存为一条链表，栈的顶部即为表头，实例变量first指向栈顶。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">E</span>&gt;</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> n;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Node first;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</div><div class=\"line\">\t\tE e;</div><div class=\"line\">\t\tNode next;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> n == <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> n;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(E e)</span></span>&#123;</div><div class=\"line\">\t\tNode oldFirst = first;</div><div class=\"line\">\t\tfirst = <span class=\"keyword\">new</span> Node();</div><div class=\"line\">\t\tfirst.e = e;</div><div class=\"line\">\t\tfirst.next = oldFirst;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tn++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">pop</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tE e = first.e;</div><div class=\"line\">\t\tfirst = first.next;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tn--;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> e;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ListIterator();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt;</span>&#123;</div><div class=\"line\">\t\tNode current = first;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> current != <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\tE e = current.e;</div><div class=\"line\">\t\t\tcurrent = current.next;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> e;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><p>队列是一种基于先进先出（FIFO）策略的集合类型。</p>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>将队列表示为一条从最早插入的元素到最近插入的元素的链表，实例变量first指向队列的开头，实例变量last指向队列的结尾。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">E</span>&gt;</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> n;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Node first;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Node last;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</div><div class=\"line\">\t\tE e;</div><div class=\"line\">\t\tNode next;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> n == <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> n;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">enqueue</span><span class=\"params\">(E e)</span></span>&#123;</div><div class=\"line\">\t\tNode oldLast = last;</div><div class=\"line\">\t\tlast = <span class=\"keyword\">new</span> Node();</div><div class=\"line\">\t\tlast.e = e;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty())</div><div class=\"line\">\t\t\tfirst = last;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\toldLast.next = last;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tn++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">dequeue</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tE e = first.e;</div><div class=\"line\">\t\tfirst = first.next;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty())</div><div class=\"line\">\t\t\tlast = first;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tn--;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> e;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ListIterator();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt;</span>&#123;</div><div class=\"line\">\t\tNode current = first;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> current != <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\tE e = current.e;</div><div class=\"line\">\t\t\tcurrent = current.next;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> e;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"二叉堆\"><a href=\"#二叉堆\" class=\"headerlink\" title=\"二叉堆\"></a>二叉堆</h2><p>在二叉堆的数组中，每个元素都要保证大于等于另两个特定位置的元素。相应地，这些位置的元素又至少要大于等于数组中的另两个元素，以此类推。</p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>当一棵二叉树的结点都大于等于它的两个子结点时，它被称为堆有序。</p>\n<p>二叉堆是一组能够用堆有序的完全二叉树排序的元素，并在数组中按照层级存储（不使用数组的第一个位置）。</p>\n<ol>\n<li>根结点是堆有序的二叉树中的最大结点</li>\n<li>一棵大小为N的完全二叉树的高度为floor(lgN)</li>\n</ol>\n<h3 id=\"示意\"><a href=\"#示意\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/2bd7dc7c0a5c6f3c.png\" alt=\"Markdown\"></p>\n<h3 id=\"由下至上的堆有序化（上浮）\"><a href=\"#由下至上的堆有序化（上浮）\" class=\"headerlink\" title=\"由下至上的堆有序化（上浮）\"></a>由下至上的堆有序化（上浮）</h3><p>如果堆的有序状态因为某个结点变得比它的父结点更大而被打破，那么就需要通过交换它和它的父结点来修复堆。</p>\n<h4 id=\"示意-1\"><a href=\"#示意-1\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/1a7c19e6c147a7a9.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-2\"><a href=\"#实现-2\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swim</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (k &gt; <span class=\"number\">1</span> &amp;&amp; less(k/<span class=\"number\">2</span>, k))&#123;</div><div class=\"line\">\t\texch(k, k/<span class=\"number\">2</span>);</div><div class=\"line\">\t\tk /= <span class=\"number\">2</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"由上至下的堆有序化（下沉）\"><a href=\"#由上至下的堆有序化（下沉）\" class=\"headerlink\" title=\"由上至下的堆有序化（下沉）\"></a>由上至下的堆有序化（下沉）</h3><p>如果堆的有序状态因为某个结点变得比它的两个子结点或是其中之一更小了而被打破了，那么可以通过将它和它的两个子结点中的较大者交换来恢复堆。</p>\n<h4 id=\"示意-2\"><a href=\"#示意-2\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/89505058e58013f5.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-3\"><a href=\"#实现-3\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sink</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">2</span> * k &lt;= n)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> j = <span class=\"number\">2</span> * k;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (j &lt; n &amp;&amp; less(j, j+<span class=\"number\">1</span>))</div><div class=\"line\">\t\t\tj++;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!less(k, j))</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\texch(k, j);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tk = j;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"优先队列\"><a href=\"#优先队列\" class=\"headerlink\" title=\"优先队列\"></a>优先队列</h2><p>优先队列是一种抽象数据类型，它表示了一组值和对这些值的操作。优先队列最重要的操作就是删除最大元素delMax()和插入元素insert()。</p>\n<h3 id=\"示意-3\"><a href=\"#示意-3\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/0fea3523976b8835.png\" alt=\"Markdown\"></p>\n<h3 id=\"插入元素\"><a href=\"#插入元素\" class=\"headerlink\" title=\"插入元素\"></a>插入元素</h3><p>将新元素加到数组末尾，增加堆的大小并让这个新元素上浮到合适的位置。</p>\n<p><img src=\"http://i4.buimg.com/1949/d0ca8c6eedd7b9a5.png\" alt=\"Markdown\"></p>\n<h3 id=\"删除最大元素\"><a href=\"#删除最大元素\" class=\"headerlink\" title=\"删除最大元素\"></a>删除最大元素</h3><p>从数组顶端删去最大的元素并将数组的最后一个元素放到顶端，减小堆的大小并让这个元素下沉到合适的位置。</p>\n<p><img src=\"http://i4.buimg.com/1949/0669587c1214742e.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-4\"><a href=\"#实现-4\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MaxPQ</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Key[] pq;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MaxPQ</span><span class=\"params\">(<span class=\"keyword\">int</span> max)</span></span>&#123;</div><div class=\"line\">\t\tpq = (Key[]) <span class=\"keyword\">new</span> Comparable[max+<span class=\"number\">1</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> n == <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> n;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Key k)</span></span>&#123;</div><div class=\"line\">\t\tpq[++n] = k;</div><div class=\"line\">\t\tswim(n);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">delMax</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tKey k = pq[<span class=\"number\">1</span>];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\texch(<span class=\"number\">1</span>, n);</div><div class=\"line\">\t\tn--;</div><div class=\"line\">\t\tpq[n+<span class=\"number\">1</span>] = <span class=\"keyword\">null</span>; </div><div class=\"line\">\t\tsink(<span class=\"number\">1</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> k;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> pq[i].compareTo(pq[j]) &lt; <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</div><div class=\"line\">\t\tKey t = pq[i];</div><div class=\"line\">\t\tpq[i] = pq[j];</div><div class=\"line\">\t\tpq[j] = t;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swim</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (k &gt; <span class=\"number\">1</span> &amp;&amp; less(k/<span class=\"number\">2</span>, k))&#123;</div><div class=\"line\">\t\t\texch(k, k/<span class=\"number\">2</span>);</div><div class=\"line\">\t\t\tk /= <span class=\"number\">2</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sink</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"number\">2</span> * k &lt;= n)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> j = <span class=\"number\">2</span> * k;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j &lt; n &amp;&amp; less(j, j+<span class=\"number\">1</span>))</div><div class=\"line\">\t\t\t\tj++;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!less(k, j))</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\texch(k, j);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tk = j;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>对于一个含有N个元素的基于堆的优先队列，插入元素操作只需不超过（lgN+1）次比较，删除最大元素的操作需要不超过2lgN次比较。</p>\n<h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><p>二叉树由结点组成，结点包含的链接可以指向空（null）或者其他结点。在二叉树中，每个结点只能有一个父结点指向自己（只有一个例外，也就是根结点，它没有父结点），而且每个结点都只有左右两个链接，分别指向自己的左子结点和右子结点。</p>\n<h3 id=\"示意-4\"><a href=\"#示意-4\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/a7eb66a889f94fda.png\" alt=\"Markdown\"></p>\n<h2 id=\"二叉查找树\"><a href=\"#二叉查找树\" class=\"headerlink\" title=\"二叉查找树\"></a>二叉查找树</h2><p>一棵二叉查找树（BST）是一棵二叉树，其中每个结点都含有一个Comparable的键（以及相关联的值）且每个结点的键都大于其左子树中的任意结点的键而小于右子树的任意结点的键。</p>\n<h3 id=\"示意-5\"><a href=\"#示意-5\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/3dac73f08016efaa.png\" alt=\"Markdown\"></p>\n<h3 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h3><p><img src=\"http://i1.piimg.com/1949/ac9f0373e2f6eaea.png\" alt=\"Markdown\"></p>\n<h3 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h3><p><img src=\"http://i1.piimg.com/1949/60048b17572f2981.png\" alt=\"Markdown\"></p>\n<h3 id=\"向下取整\"><a href=\"#向下取整\" class=\"headerlink\" title=\"向下取整\"></a>向下取整</h3><p><img src=\"http://i1.piimg.com/1949/2ab50411f56bb58b.png\" alt=\"Markdown\"></p>\n<h3 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h3><p><img src=\"http://i1.piimg.com/1949/3e77615b752ffe0d.png\" alt=\"Markdown\"></p>\n<h3 id=\"删除最小键\"><a href=\"#删除最小键\" class=\"headerlink\" title=\"删除最小键\"></a>删除最小键</h3><p><img src=\"http://i1.piimg.com/1949/f4195cae1bdf13a9.png\" alt=\"Markdown\"></p>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p><img src=\"http://i1.piimg.com/1949/ca452c8fd1292456.png\" alt=\"Markdown\"></p>\n<h3 id=\"范围查找\"><a href=\"#范围查找\" class=\"headerlink\" title=\"范围查找\"></a>范围查找</h3><p>需要一个遍历二叉查找树的基本方法，叫做中序遍历。</p>\n<p><img src=\"http://i1.piimg.com/1949/faf9f99b7542d5ea.png\" alt=\"Markdown\"></p>\n<h2 id=\"平衡查找树\"><a href=\"#平衡查找树\" class=\"headerlink\" title=\"平衡查找树\"></a>平衡查找树</h2><p>在一棵含有N个结点的树中，树高为～lgN。</p>\n<h3 id=\"2-3查找树\"><a href=\"#2-3查找树\" class=\"headerlink\" title=\"2-3查找树\"></a>2-3查找树</h3><p>一棵2-3查找树或为一棵空树，或由以下结点组成：</p>\n<ol>\n<li>2-结点，含有一个键（及其对应的值）和两条链接，左链接指向的2-3树中的键都小于该结点，右链接指向的2-3树中的键都大于该结点。</li>\n<li>3-结点，含有两个键（及其对应的值）和三条链接，左链接指向的2-3树中的键都小于该结点，中链接指向的2-3树中的键都位于该结点的两个键之间，右链接指向的2-3树中的键都大于该结点。</li>\n</ol>\n<p>将指向一棵空树的链接称为空链接。</p>\n<p>一棵完美平衡的2-3查找树中的所有空链接到根结点的距离都应该是相同的。</p>\n<h4 id=\"示意-6\"><a href=\"#示意-6\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/c13139f2c2dfe965.png\" alt=\"Markdown\"><br><img src=\"http://i1.piimg.com/1949/e79a6807de668bd7.png\" alt=\"Markdown\"></p>\n<h4 id=\"查找-1\"><a href=\"#查找-1\" class=\"headerlink\" title=\"查找\"></a>查找</h4><p><img src=\"http://i1.piimg.com/1949/d546e5595bf8c444.png\" alt=\"Markdown\"></p>\n<h4 id=\"插入-1\"><a href=\"#插入-1\" class=\"headerlink\" title=\"插入\"></a>插入</h4><h5 id=\"向2-结点中插入新键\"><a href=\"#向2-结点中插入新键\" class=\"headerlink\" title=\"向2-结点中插入新键\"></a>向2-结点中插入新键</h5><p><img src=\"http://i1.piimg.com/1949/23e6a42f3239e670.png\" alt=\"Markdown\"></p>\n<h5 id=\"向一棵只含有一个3-结点的树中插入新键\"><a href=\"#向一棵只含有一个3-结点的树中插入新键\" class=\"headerlink\" title=\"向一棵只含有一个3-结点的树中插入新键\"></a>向一棵只含有一个3-结点的树中插入新键</h5><p><img src=\"http://i1.piimg.com/1949/1194c64a618adf69.png\" alt=\"Markdown\"></p>\n<h5 id=\"向一个父结点为2-结点的3-结点中插入新键\"><a href=\"#向一个父结点为2-结点的3-结点中插入新键\" class=\"headerlink\" title=\"向一个父结点为2-结点的3-结点中插入新键\"></a>向一个父结点为2-结点的3-结点中插入新键</h5><p><img src=\"http://i2.muimg.com/1949/fa81da5c45e21cd2.png\" alt=\"Markdown\"></p>\n<h5 id=\"向一个父结点为3-结点的3-结点中插入新键\"><a href=\"#向一个父结点为3-结点的3-结点中插入新键\" class=\"headerlink\" title=\"向一个父结点为3-结点的3-结点中插入新键\"></a>向一个父结点为3-结点的3-结点中插入新键</h5><p><img src=\"http://i4.buimg.com/1949/f7cf69a22112237e.png\" alt=\"Markdown\"></p>\n<h5 id=\"分解根结点\"><a href=\"#分解根结点\" class=\"headerlink\" title=\"分解根结点\"></a>分解根结点</h5><p><img src=\"http://i1.piimg.com/1949/233af11e545fc9c8.png\" alt=\"Markdown\"></p>\n<h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>在一棵大小为N的2-3树中，查找和插入操作访问的结点必然不超过lgN个。</p>\n<ol>\n<li>2-3树插入算法的根本在于这些变换都是局部的：除了相关的结点和链接之外不必修改或者检查树的其他部分。</li>\n<li>这些局部变换不会影响树的全局有序性和平衡性：任意空链接到根结点的路径长度都是相等的。</li>\n</ol>\n<h4 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h4><p>和标准的二叉查找树由上向下生长不同，2-3树的生长是由下向上的。</p>\n<p>需要维护两种不同类型的结点，将被查找的键和结点中的每个键进行比较，将链接和其他信息从一种结点复制到另一种结点，将结点从一种数据类型转换到另一种数据类型等等。实现这些不仅需要大量的代码，而且它们所产生的额外开销可能会使算法比标准的二叉查找树更慢。</p>\n<h3 id=\"红黑二叉查找树\"><a href=\"#红黑二叉查找树\" class=\"headerlink\" title=\"红黑二叉查找树\"></a>红黑二叉查找树</h3><p>红黑二叉查找树背后的基本思想是用标准的二叉查找树（完全由2-结点构成）和一些额外的信息（替换3-结点）来表示2-3树。将树中的链接分为两种类型：</p>\n<ol>\n<li>红链接：将两个2-结点连接起来构成一个3-结点</li>\n<li>黑链接：2-3树中的普通链接。</li>\n</ol>\n<p>确切的说，将3-结点表示为由一条左斜的红色链接（两个2-结点其中之一是另一个的左子结点）相连的两个2-结点。</p>\n<h4 id=\"示意-7\"><a href=\"#示意-7\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/8477f275f5314089.png\" alt=\"Markdown\"><br><img src=\"http://i2.muimg.com/1949/000923f1d00e52b8.png\" alt=\"Markdown\"></p>\n<h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>红黑树是含有红黑链接并满足下列条件的二叉查找树：</p>\n<ol>\n<li>红链接均为左链接</li>\n<li>没有任何一个结点同时和两条红链接相连</li>\n<li>该树是完美黑色平衡的，即任意空链接到根结点的路径上的黑链接数量相同</li>\n</ol>\n<h4 id=\"颜色表示\"><a href=\"#颜色表示\" class=\"headerlink\" title=\"颜色表示\"></a>颜色表示</h4><p><img src=\"http://i1.piimg.com/1949/a2e6553a3a65f988.png\" alt=\"Markdown\"></p>\n<h4 id=\"颜色转换\"><a href=\"#颜色转换\" class=\"headerlink\" title=\"颜色转换\"></a>颜色转换</h4><p><img src=\"http://i2.muimg.com/1949/1ea6d6e50aaae209.png\" alt=\"Markdown\"><br><img src=\"http://i1.piimg.com/1949/5983c53313227279.png\" alt=\"Markdown\"></p>\n<h4 id=\"旋转\"><a href=\"#旋转\" class=\"headerlink\" title=\"旋转\"></a>旋转</h4><p><img src=\"http://i1.piimg.com/1949/ee04b318b328c5af.png\" alt=\"Markdown\"><br><img src=\"http://i1.piimg.com/1949/8af590b360b2f790.png\" alt=\"Markdown\"></p>\n<h5 id=\"实现-5\"><a href=\"#实现-5\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">rotateLeft</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">\tNode x = h.right;</div><div class=\"line\">\th.right = x.left;</div><div class=\"line\">\tx.left = h;</div><div class=\"line\">\t</div><div class=\"line\">\tx.color = h.color;</div><div class=\"line\">\th.color = RED;</div><div class=\"line\">\tx.n = h.n;</div><div class=\"line\">\th.n = size(h.left) + size(h.right) + <span class=\"number\">1</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">rotateRight</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">\tNode x = h.left;</div><div class=\"line\">\th.left = x.right;</div><div class=\"line\">\tx.right = h;</div><div class=\"line\">\t</div><div class=\"line\">\tx.color = h.color;</div><div class=\"line\">\th.color = RED;</div><div class=\"line\">\tx.n = h.n;</div><div class=\"line\">\th.n = size(h.left) + size(h.right) + <span class=\"number\">1</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"插入-2\"><a href=\"#插入-2\" class=\"headerlink\" title=\"插入\"></a>插入</h4><h5 id=\"向2-结点中插入新键-1\"><a href=\"#向2-结点中插入新键-1\" class=\"headerlink\" title=\"向2-结点中插入新键\"></a>向2-结点中插入新键</h5><p><img src=\"http://i4.buimg.com/1949/0b8bbef6cc6aee83.png\" alt=\"Markdown\"></p>\n<h5 id=\"向树底部的2-结点插入新键\"><a href=\"#向树底部的2-结点插入新键\" class=\"headerlink\" title=\"向树底部的2-结点插入新键\"></a>向树底部的2-结点插入新键</h5><p><img src=\"http://i2.muimg.com/1949/6bd301d8d00e1546.png\" alt=\"Markdown\"></p>\n<h5 id=\"向一棵双键树（即一个3-结点）中插入新键\"><a href=\"#向一棵双键树（即一个3-结点）中插入新键\" class=\"headerlink\" title=\"向一棵双键树（即一个3-结点）中插入新键\"></a>向一棵双键树（即一个3-结点）中插入新键</h5><p><img src=\"http://i2.muimg.com/1949/a35d435ca7cf05c6.png\" alt=\"Markdown\"></p>\n<h5 id=\"向树底部的3-结点插入新键\"><a href=\"#向树底部的3-结点插入新键\" class=\"headerlink\" title=\"向树底部的3-结点插入新键\"></a>向树底部的3-结点插入新键</h5><p><img src=\"http://i1.piimg.com/1949/1a9a7c08fe68f4b2.png\" alt=\"Markdown\"></p>\n<h4 id=\"删除-1\"><a href=\"#删除-1\" class=\"headerlink\" title=\"删除\"></a>删除</h4><p>不仅要在构造临时4-结点时沿着查找路径向下进行变换，还要在分解遗留的4-结点时沿着查找路径向上进行变换。</p>\n<h5 id=\"删除最小键-1\"><a href=\"#删除最小键-1\" class=\"headerlink\" title=\"删除最小键\"></a>删除最小键</h5><p><img src=\"http://i4.buimg.com/1949/551767262f0d3a7c.png\" alt=\"Markdown\"></p>\n<h4 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ol>\n<li>对于任意的2-3树，只要对结点进行转换，都可以立即派生出一棵对应的二叉查找树。</li>\n<li>红黑树既是二叉查找树，也是2-3树。</li>\n</ol>\n<h2 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h2><h3 id=\"示意-8\"><a href=\"#示意-8\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i2.muimg.com/1949/a1e95a1dfec7c611.png\" alt=\"Markdown\"></p>\n<h3 id=\"散列函数\"><a href=\"#散列函数\" class=\"headerlink\" title=\"散列函数\"></a>散列函数</h3><p>如果有一个能够保存M个键值对的数组，那么就需要一个能够将任意键转化为该数组范围内的索引（[0, M-1]范围内的整数）的散列函数。要找的散列函数应该易于计算并且能够均匀分布所有的键，即对于任意键，0到M-1之间的每个整数都有相等的可能性与之对应（与键无关）。</p>\n<h3 id=\"特点-3\"><a href=\"#特点-3\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>散列表是算法在时间和空间上作出权衡的经典例子。不必重写代码，只需要调整散列算法的参数就可以在空间和时间之间作出取舍。</p>\n<h2 id=\"邻接表\"><a href=\"#邻接表\" class=\"headerlink\" title=\"邻接表\"></a>邻接表</h2><p>将每个顶点的所有相邻顶点都保存在该顶点对应的元素所指向的一张链表中。</p>\n<h3 id=\"示意-9\"><a href=\"#示意-9\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i1.piimg.com/1949/117718a60bfb2d62.png\" alt=\"Markdown\"></p>\n<h3 id=\"特点-4\"><a href=\"#特点-4\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ol>\n<li>使用的空间和V+E成正比</li>\n<li>添加一条边所需的时间为常数</li>\n<li>遍历顶点v的所有相邻顶点所需的时间和v的度数成正比（处理每个相邻顶点所需的时间为常数）</li>\n</ol>\n<h2 id=\"无向图\"><a href=\"#无向图\" class=\"headerlink\" title=\"无向图\"></a>无向图</h2><p>边仅仅是两个顶点之间的连接。</p>\n<p>当两个顶点通过一条边相连时，称这两个顶点是相邻的，并称该连接依附于这两个顶点。某个顶点的度数即为依附于它的边的总数。子图是由一幅图的所有边的一个子集（以及它们所依附的所有顶点）组成的图。</p>\n<p>当两个顶点之间存在一条连接双方的路径时，称一个顶点和另一个顶点是连通的。</p>\n<p>特殊的图：</p>\n<ol>\n<li>自环，即一条连接一个顶点和其自身的边</li>\n<li>连接同一对顶点的两条边称为平行边</li>\n</ol>\n<p>当且仅当一幅含有V个结点的图G满足下列5个条件之一时，它就是一棵树：</p>\n<ol>\n<li>G有V-1条边且不含有环</li>\n<li>G有V-1条边且是连通的</li>\n<li>G是连通的，但删除任意一条边都会使它不再连通</li>\n<li>G是无环图，但添加任意一条边都会产生一条环</li>\n<li>G中的任意一对顶点之间仅存在一条简单路径</li>\n</ol>\n<p>图的密度是指已经连接的顶点对占所有可能被连接的顶点对的比例。在稀疏图中，被连接的顶点对很少；而在稠密图中，只有少部分顶点对之间没有边连接。</p>\n<p>二分图是一种能够将所有结点分为两部分的图，其中图的每条边所连接的两个顶点都分别属于不同的部分。</p>\n<h3 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>图是由一组顶点和一组能够将两个顶点相连的边组成的。</p>\n<p>在图中，路径是由边顺序连接的一系列顶点。简单路径是一条没有重复顶点的路径。环是一条至少含有一条边且起点和终点相同的路径，简单环是一条（除了起点和终点必须相同之外）不含有重复顶点和边的环。路径或者环的长度为其中所包含的边数。</p>\n<p>如果从任意一个顶点都存在一条路径到达另一个任意顶点，称这幅图是连通图。一幅非连通的图由若干连通的部分组成，它们都是其极大连通子图。</p>\n<p>树是一幅无环连通图。互不相连的树组成的集合称为森林。连通图的生成树是它的一幅子图，它含有图中的所有顶点且是一棵树。图的生成树森林是它的所有连通子图的生成树的集合。</p>\n<h3 id=\"示意-10\"><a href=\"#示意-10\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/0865c64aa1cbe6ca.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-6\"><a href=\"#实现-6\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Graph</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> V;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> E;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Stack&lt;Integer&gt;[] adj;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Graph</span><span class=\"params\">(<span class=\"keyword\">int</span> V)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.V = V;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.E = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tadj = (Stack&lt;Integer&gt;[]) <span class=\"keyword\">new</span> Stack[V];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; V; v++)</div><div class=\"line\">\t\t\tadj[v] = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">V</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> V;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">E</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> E;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span></span>&#123;</div><div class=\"line\">\t\tadj[v].push(w);</div><div class=\"line\">\t\tadj[w].push(v);</div><div class=\"line\">\t\tE++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">adj</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> adj[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"有向图\"><a href=\"#有向图\" class=\"headerlink\" title=\"有向图\"></a>有向图</h2><p>边是单向的：每条边所连接的两个顶点都是一个有序对，它们的邻接性是单向的。</p>\n<p>一个顶点的出度为由该顶点指出的边的总数；一个顶点的入度为指向该顶点的边的总数。</p>\n<p>一条有向边的第一个顶点称为它的头，第二个顶点则被称为它的尾。</p>\n<p>两个顶点是强连通的当且仅当它们都在一个普通的有向环中。</p>\n<p>有向图中的强连通性是一种顶点之间平等关系，因为它有着以下性质：</p>\n<ol>\n<li>自反性：任意顶点v和自己都是强连通的。</li>\n<li>对称性：如果v和w是强连通的，那么w和v也是强连通的。</li>\n<li>传递性：如果v和w是强连通的且w和x也是强连通的，那么v和x也是强连通的。</li>\n</ol>\n<p>作为一种平等关系，强连通行将所有顶点分为了一些平等的部分，每个部分都是由相互均为强连通的顶点的最大子集组成的，将这些子集称为强连通分量。一个含有V个顶点的有向图含有1～V个强连通分量，一个强连通图只含有一个强连通分量，而一个有向无环图中则含有V个强连通分量。</p>\n<h3 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>一幅有方向性的图（或有向图）是由一组顶点和一组有方向的边组成的，每条有方向的边都连接着有序的一对顶点。</p>\n<p>在一幅有向图中，有向路径由一系列顶点组成，对于其中的每个顶点都存在一条有向边从它指向序列中的下一个顶点。有向环为一条至少含有一条边且起点和终点相同的有向路径。简单有向环是一条（除了起点和终点必须相同之外）不含有重复的顶点和边的环。路径或者环的长度即为其中所包含的边数。</p>\n<p>如果两个顶点v和w是互相可达的，则称它们为强连通的。也就是说，既存在一条从v到w的有向路径，也存在一条从w到v的有向路径。如果一幅有向图中的任意两个顶点都是强连通的，则称这幅有向图也是强连通的。</p>\n<h3 id=\"示意-11\"><a href=\"#示意-11\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i2.muimg.com/1949/8f5117d2843fd6ed.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-7\"><a href=\"#实现-7\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Digraph</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> V;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> E;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Stack&lt;Integer&gt;[] adj;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Digraph</span><span class=\"params\">(<span class=\"keyword\">int</span> V)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.V = V;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.E = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tadj = (Stack&lt;Integer&gt;[]) <span class=\"keyword\">new</span> Stack[V];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; V; v++)&#123;</div><div class=\"line\">\t\t\tadj[v] = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">V</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> V;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">E</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> E;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span></span>&#123;</div><div class=\"line\">\t\tadj[v].push(w);</div><div class=\"line\">\t\tE++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">adj</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> adj[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Digraph <span class=\"title\">reverse</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tDigraph tmp = <span class=\"keyword\">new</span> Digraph(V);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; V; v++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : adj[v])</div><div class=\"line\">\t\t\t\ttmp.addEdge(w, v);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> tmp;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"加权无向图\"><a href=\"#加权无向图\" class=\"headerlink\" title=\"加权无向图\"></a>加权无向图</h2><p>加权图是一种为每条边关联一个权值或是成本的图模型。</p>\n<h3 id=\"示意-12\"><a href=\"#示意-12\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i4.buimg.com/1949/3e0b4aa2190cd2cd.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-8\"><a href=\"#实现-8\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Edge</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Edge</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> v;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> w;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> weight;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Edge</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w, <span class=\"keyword\">double</span> weight)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.v = v;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.w = w;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.weight = weight;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">weight</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> weight;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">either</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> v;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">other</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (vertex == v)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> w;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> v;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Edge that)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> Double.compare(<span class=\"keyword\">this</span>.weight, that.weight);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EdgeWeightedGraph</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> V;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> E;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Stack&lt;Edge&gt;[] adj;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EdgeWeightedGraph</span><span class=\"params\">(<span class=\"keyword\">int</span> V)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.V = V;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.E = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tadj = (Stack&lt;Edge&gt;[]) <span class=\"keyword\">new</span> Stack[V];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; V; v++)</div><div class=\"line\">\t\t\tadj[v] = <span class=\"keyword\">new</span> Stack&lt;Edge&gt;();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">V</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> V;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">E</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> E;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(Edge e)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> v = e.either();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> w = e.other(v);</div><div class=\"line\">\t\tadj[v].push(e);</div><div class=\"line\">\t\tadj[w].push(e);</div><div class=\"line\">\t\tE++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Edge&gt; <span class=\"title\">adj</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> adj[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Edge&gt; <span class=\"title\">edges</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tStack&lt;Edge&gt; stack = <span class=\"keyword\">new</span> Stack&lt;Edge&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; V; v++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(Edge e : adj[v])&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (e.other(v) &gt; v)</div><div class=\"line\">\t\t\t\t\tstack.push(e);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> stack;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"最小生成树\"><a href=\"#最小生成树\" class=\"headerlink\" title=\"最小生成树\"></a>最小生成树</h2><h3 id=\"定义-4\"><a href=\"#定义-4\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>图的生成树是它的一棵含有其所有顶点的无环连通子图。一幅加权无向图的最小生成树（MST）是它的一棵权值（树中所有边的权值之和）最小的生成树。</p>\n<h3 id=\"示意-13\"><a href=\"#示意-13\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i2.muimg.com/1949/e5eea683c1af8b4c.png\" alt=\"Markdown\"></p>\n<h3 id=\"切分定理\"><a href=\"#切分定理\" class=\"headerlink\" title=\"切分定理\"></a>切分定理</h3><p>把加权图中的所有顶点分为两个集合、检查横跨两个集合的所有边并识别哪条边应属于图的最小生成树。通常，通过指定一个顶点集并隐式地认为它的补集为另一个顶点集来指定一个切分。这样，一条横切边就是连接该集合的一个顶点和不在该集合中的另一个顶点的一条边。</p>\n<h4 id=\"定义-5\"><a href=\"#定义-5\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>图的一种切分是将图的所有顶点分为两个非空且不重复的两个集合。横切边是一条连接两个属于不同集合的顶点的边。</p>\n<p>在一幅加权图中，给定任意的切分，它的横切边中的权重最小者必然属于图的最小生成树。</p>\n<h4 id=\"示意-14\"><a href=\"#示意-14\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i2.muimg.com/1949/b1ee2a6de3297463.png\" alt=\"Markdown\"></p>\n<h3 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h3><p>使用切分定理找到最小生成树的一条边，不断重复直到找到最小生成树的所有边。</p>\n<h4 id=\"定义-6\"><a href=\"#定义-6\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>将含有V个顶点的任意加权连通图中属于最小生成树的边标记为黑色：初始状态下所有边均为灰色，找到一种切分，它产生的横切边均不为黑色。将它权重最小的横切边标记为黑色。反复，直到标记了V-1条黑色边为止。</p>\n<h4 id=\"示意-15\"><a href=\"#示意-15\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i2.muimg.com/1949/90008faa2bf66c84.png\" alt=\"Markdown\"></p>\n<h2 id=\"加权有向图\"><a href=\"#加权有向图\" class=\"headerlink\" title=\"加权有向图\"></a>加权有向图</h2><p>在加权有向图中，每条有向路径都有一个与之关联的路径权重。</p>\n<h3 id=\"示意-16\"><a href=\"#示意-16\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i1.piimg.com/1949/675425f71207174c.png\" alt=\"Markdown\"></p>\n<h3 id=\"实现-9\"><a href=\"#实现-9\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirectedEdge</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> v;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> w;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> weight;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DirectedEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w, <span class=\"keyword\">double</span> weight)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.v = v;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.w = w;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.weight = weight;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">weight</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> weight;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">from</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> v;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">to</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> w;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EdgeWeightedDigraph</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> V;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> E;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Stack&lt;DirectedEdge&gt;[] adj;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EdgeWeightedDigraph</span><span class=\"params\">(<span class=\"keyword\">int</span> V)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.V = V;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.E = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tadj = (Stack&lt;DirectedEdge&gt;[]) <span class=\"keyword\">new</span> Stack[V];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; V; v++)</div><div class=\"line\">\t\t\tadj[v] = <span class=\"keyword\">new</span> Stack&lt;DirectedEdge&gt;();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">V</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> V;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">E</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> E;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(DirectedEdge e)</span></span>&#123;</div><div class=\"line\">\t\tadj[e.from()].push(e);</div><div class=\"line\">\t\tE++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;DirectedEdge&gt; <span class=\"title\">adj</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> adj[v];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;DirectedEdge&gt; <span class=\"title\">edges</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tStack&lt;DirectedEdge&gt; stack = <span class=\"keyword\">new</span> Stack&lt;DirectedEdge&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; V; v++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(DirectedEdge e : adj[v])</div><div class=\"line\">\t\t\t\tstack.push(e);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> stack;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"最短路径树\"><a href=\"#最短路径树\" class=\"headerlink\" title=\"最短路径树\"></a>最短路径树</h2><h3 id=\"最短路径\"><a href=\"#最短路径\" class=\"headerlink\" title=\"最短路径\"></a>最短路径</h3><h4 id=\"定义-7\"><a href=\"#定义-7\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>在一幅加权有向图中，从顶点s到顶点t的最短路径是所有从s到t的路径中的权重最小者。</p>\n<h4 id=\"示意-17\"><a href=\"#示意-17\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/3d4dec96dec81332.png\" alt=\"Markdown\"></p>\n<h3 id=\"定义-8\"><a href=\"#定义-8\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>给定一幅加权有向图和一个顶点s，以s为起点的一棵最短路径树是图的一幅子图，它包含s和从s可达的所有顶点。这棵有向树的根结点为s，树的每条路径都是有向图中的一条最短路径。</p>\n<h3 id=\"示意-18\"><a href=\"#示意-18\" class=\"headerlink\" title=\"示意\"></a>示意</h3><p><img src=\"http://i1.piimg.com/1949/479256bbdfa48501.png\" alt=\"Markdown\"></p>\n<h3 id=\"边的松弛\"><a href=\"#边的松弛\" class=\"headerlink\" title=\"边的松弛\"></a>边的松弛</h3><p>放松边v-&gt;w意味着检查从s到w的最短路径是否是先从s到v，然后再由v到w。如果是，则根据这个情况更新数据结构的内容。</p>\n<h4 id=\"示意-19\"><a href=\"#示意-19\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i1.piimg.com/1949/c4abf1f956bffcda.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-10\"><a href=\"#实现-10\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">relax</span><span class=\"params\">(DirectedEdge e)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> v = e.from();</div><div class=\"line\">\t<span class=\"keyword\">int</span> w = e.to();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (distTo[v] + e.weight() &lt; distTo[w])&#123;</div><div class=\"line\">\t\tdistTo[w] = distTo[v] + e.weight();</div><div class=\"line\">\t\tedgeTo[w] = e;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"顶点的松弛\"><a href=\"#顶点的松弛\" class=\"headerlink\" title=\"顶点的松弛\"></a>顶点的松弛</h3><p>放松从一个给定顶点指出的所有边。</p>\n<h4 id=\"示意-20\"><a href=\"#示意-20\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/0ae698d2004e7964.png\" alt=\"Markdown\"></p>\n<h4 id=\"实现-11\"><a href=\"#实现-11\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">relax</span><span class=\"params\">(EdgeWeightedDigraph g, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (DirectedEdge e : g.adj(v))&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> w = e.to();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (distTo[v] + e.weight() &lt; distTo[w])&#123;</div><div class=\"line\">\t\t\tdistTo[w] = distTo[v] + e.weight();</div><div class=\"line\">\t\t\tedgeTo[w] = e;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"负权重的环\"><a href=\"#负权重的环\" class=\"headerlink\" title=\"负权重的环\"></a>负权重的环</h3><h4 id=\"示意-21\"><a href=\"#示意-21\" class=\"headerlink\" title=\"示意\"></a>示意</h4><p><img src=\"http://i4.buimg.com/1949/218b65660839ba34.png\" alt=\"Markdown\"></p>\n<h4 id=\"定义-9\"><a href=\"#定义-9\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>加权有向图中的负权重环是一个总权重（环上的所有边的权重之和）为负的有向环。</p>\n<p><img src=\"http://i2.muimg.com/1949/faeb01f3f7da5e8d.png\" alt=\"Markdown\"></p>\n<p>当且仅当加权有向图中至少存在一条从s到v的有向路径且所有从s到v的有向路径上的任意顶点都不存在于任何负权重环中时，s到v的最短路径才是存在的。</p>\n","categories":["Algorithm","Data Structure"],"tags":["Algorithm","Data Structure"]},{"title":"Algorithm from NowCoder (5)","url":"http://yoursite.com/2017/04/09/Algorithm-from-NowCoder-5/","content":"<h2 id=\"No-1-最长公共连续子串\"><a href=\"#No-1-最长公共连续子串\" class=\"headerlink\" title=\"No. 1 最长公共连续子串\"></a>No. 1 最长公共连续子串</h2><p>牛牛有两个字符串（可能包含空格）,牛牛想找出其中最长的公共连续子串,希望你能帮助他,并输出其长度。 </p>\n<h3 id=\"输入描述\"><a href=\"#输入描述\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入为两行字符串（可能包含空格），长度均小于等于50.</p>\n<h3 id=\"输出描述\"><a href=\"#输出描述\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出为一个整数，表示最长公共连续子串的长度。</p>\n<h3 id=\"输入例子\"><a href=\"#输入例子\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>abcde<br>abgde</p>\n<h3 id=\"输出例子\"><a href=\"#输出例子\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>2</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tString s1 = sc.nextLine();</div><div class=\"line\">\t\tString s2 = sc.nextLine();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (s1.length() &gt; <span class=\"number\">50</span> || s2.length() &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[s1.length()+<span class=\"number\">1</span>][s2.length()+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s1.length(); i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; s2.length(); j++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (s1.charAt(i) == s2.charAt(j))</div><div class=\"line\">\t\t\t\t\tdp[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>] = dp[i][j] + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= s1.length(); i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= s2.length(); j++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (dp[i][j] &gt; max)</div><div class=\"line\">\t\t\t\t\tmax = dp[i][j];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(max);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-2-找整除\"><a href=\"#No-2-找整除\" class=\"headerlink\" title=\"No. 2 找整除\"></a>No. 2 找整除</h2><p>牛牛想在[a, b]区间内找到一些数满足可以被一个整数c整除,现在你需要帮助牛牛统计区间内一共有多少个这样的数满足条件？ </p>\n<h3 id=\"输入描述-1\"><a href=\"#输入描述-1\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>首先输入两个整数a,b,（-5<em>10^8 ≤ a ≤ b ≤ 5</em>10^8)<br>接着是一个正整数c（1 &lt;= c &lt;= 1000）</p>\n<h3 id=\"输出描述-1\"><a href=\"#输出描述-1\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一个整数表示个数。</p>\n<h3 id=\"输入例子-1\"><a href=\"#输入例子-1\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>0 14 5</p>\n<h3 id=\"输出例子-1\"><a href=\"#输出例子-1\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>3</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> a = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> b = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> c = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (a &lt; -<span class=\"number\">5</span> * Math.pow(<span class=\"number\">10</span>, <span class=\"number\">8</span>) || a &gt; <span class=\"number\">5</span> * Math.pow(<span class=\"number\">10</span>, <span class=\"number\">8</span>) || b &lt; -<span class=\"number\">5</span> * Math.pow(<span class=\"number\">10</span>, <span class=\"number\">8</span>) || b &gt; <span class=\"number\">5</span> * Math.pow(<span class=\"number\">10</span>, <span class=\"number\">8</span>)</div><div class=\"line\">\t\t\t\t|| c &lt; <span class=\"number\">1</span> || c &gt; <span class=\"number\">1000</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (b % c != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tb--;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println((b - a) / c + <span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-3-组装三角形\"><a href=\"#No-3-组装三角形\" class=\"headerlink\" title=\"No. 3 组装三角形\"></a>No. 3 组装三角形</h2><p>牛牛手里有N根木棒,分别编号为1~N,现在他从N根里想取出三根木棒，使得三根木棒构成一个三角形,你能计算出牛牛有多少种取法吗?(考虑两种取法中使用的木棒编号有一个不一样就认为是不同的取法)。 </p>\n<h3 id=\"输入描述-2\"><a href=\"#输入描述-2\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>首先输入一个正整数N，接下来的一行共有N个正整数表示每个木棒的长度。</p>\n<p>N ≤ 50, 木棒的长度 ≤ 10000.</p>\n<h3 id=\"输出描述-2\"><a href=\"#输出描述-2\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一个整数表示方法数。</p>\n<h3 id=\"输入例子-2\"><a href=\"#输入例子-2\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>5<br>1 2 3 4 5</p>\n<h3 id=\"输出例子-2\"><a href=\"#输出例子-2\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>3</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x &gt; <span class=\"number\">10000</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\ta[i] = x;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tArrays.sort(a);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">2</span>; i--)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">1</span> &amp;&amp; <span class=\"number\">2</span> * a[j] &gt;= a[i]; j--)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = j - <span class=\"number\">1</span>; k &gt;=<span class=\"number\">0</span>; k--)&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (a[j] + a[k] &lt;= a[i])</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">\t\t\t\t\tcount++;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(count);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-4-最小的矩形\"><a href=\"#No-4-最小的矩形\" class=\"headerlink\" title=\"No. 4 最小的矩形\"></a>No. 4 最小的矩形</h2><p>牛牛在二维坐标系中画了N个点，且都是整点。现在牛牛想画出一个矩形，使得这N个点都在矩形内或者在矩形上。<br>矩形的边均平行于坐标轴。牛牛希望矩形的面积最小。请你帮助牛牛计算下最小矩形的面积。 </p>\n<h3 id=\"输入描述-3\"><a href=\"#输入描述-3\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>首先输入一个正整数N表示点的个数（2 &lt;= N &lt;= 50）</p>\n<p>接下来N行每行两个整数x, y，表示该点的坐标。绝对值均小于等于100.</p>\n<h3 id=\"输出描述-3\"><a href=\"#输出描述-3\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>一个整数表示最小矩形的面积。</p>\n<h3 id=\"输入例子-3\"><a href=\"#输入例子-3\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>2<br>0 1<br>1 0</p>\n<h3 id=\"输出例子-3\"><a href=\"#输出例子-3\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>1</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span> || n &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] xPos = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] yPos = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> y = sc.nextInt();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Math.abs(x) &gt; <span class=\"number\">100</span> || Math.abs(y) &gt; <span class=\"number\">100</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\txPos[i] = x;</div><div class=\"line\">\t\t\tyPos[i] = y;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tArrays.sort(xPos);</div><div class=\"line\">\t\tArrays.sort(yPos);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println((xPos[n-<span class=\"number\">1</span>] - xPos[<span class=\"number\">0</span>]) * (yPos[n-<span class=\"number\">1</span>] - yPos[<span class=\"number\">0</span>]));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-5-平衡数\"><a href=\"#No-5-平衡数\" class=\"headerlink\" title=\"No. 5 平衡数\"></a>No. 5 平衡数</h2><p>牛牛在研究他自己独创的平衡数，平衡数的定义是：将一个数分成左右两部分，分别成为两个新的数。<br>左右部分必须满足以下两点：<br>1，左边和右边至少存在一位。<br>2，左边的数每一位相乘如果等于右边的数每一位相乘，则这个数称为平衡数。<br>例如：1221这个数，分成12和21的话，1<em>2=2</em>1，则称1221为平衡数，再例如：1236这个数，可以分成123和1<em>2</em>3=6，所以1236也是平衡数。而1234无论怎样分也不满足平衡数。</p>\n<h3 id=\"输入描述-4\"><a href=\"#输入描述-4\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入一个正整数（int范围内）。</p>\n<h3 id=\"输出描述-4\"><a href=\"#输出描述-4\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>如果该数是平衡数，输出 “YES”, 否则输出 “NO”。</p>\n<h3 id=\"输入例子-4\"><a href=\"#输入例子-4\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>1221<br>1234</p>\n<h3 id=\"输出例子-4\"><a href=\"#输出例子-4\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>YES<br>NO</p>\n<h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (sc.hasNext())&#123;</div><div class=\"line\">\t\t\tString n = sc.next();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (n.length() &lt; <span class=\"number\">2</span>)&#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"NO\"</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span>[] digit = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n.length()];</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n.length(); i++)</div><div class=\"line\">\t\t\t\tdigit[i] = n.charAt(i) - <span class=\"string\">'0'</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> head = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> tail = n.length() - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> left = digit[head];</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> right = digit[tail];</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (head &lt; tail - <span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ((left &lt;= right &amp;&amp; left != <span class=\"number\">0</span>) || right == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\t\thead++;</div><div class=\"line\">\t\t\t\t\tleft *= digit[head];</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((left &gt; right &amp;&amp; right != <span class=\"number\">0</span>) || left == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\t\ttail--;</div><div class=\"line\">\t\t\t\t\tright *= digit[tail];</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (left != right)</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"NO\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"YES\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-6-字符串分类\"><a href=\"#No-6-字符串分类\" class=\"headerlink\" title=\"No. 6 字符串分类\"></a>No. 6 字符串分类</h2><p>牛牛有N个字符串，他想将这些字符串分类，他认为两个字符串A和B属于同一类需要满足以下条件：<br>A中交换任意位置的两个字符，最终可以得到B，交换的次数不限。比如：abc与bca就是同一类字符串。<br>现在牛牛想知道这N个字符串可以分成几类。</p>\n<h3 id=\"输入描述-5\"><a href=\"#输入描述-5\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>首先输入一个正整数N（1 &lt;= N &lt;= 50），接下来输入N个字符串，每个字符串长度不超过50。</p>\n<h3 id=\"输出描述-5\"><a href=\"#输出描述-5\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一个整数表示分类的个数。</p>\n<h3 id=\"输入例子-5\"><a href=\"#输入例子-5\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>4<br>abcd<br>abdc<br>dabc<br>bacd</p>\n<h3 id=\"输出例子-5\"><a href=\"#输出例子-5\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>1</p>\n<h3 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSet&lt;String&gt; set = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">char</span>[] ch = sc.next().toCharArray();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tArrays.sort(ch);</div><div class=\"line\">\t\t\tset.add(String.valueOf(ch));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(set.size());</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-7-创造新世界\"><a href=\"#No-7-创造新世界\" class=\"headerlink\" title=\"No. 7 创造新世界\"></a>No. 7 创造新世界</h2><p>众所周知计算机代码底层计算都是0和1的计算，牛牛知道这点之后就想使用0和1创造一个新世界！牛牛现在手里有n个0和m个1，给出牛牛可以创造的x种物品，每种物品都由一个01串表示。牛牛想知道当前手中的0和1可以最多创造出多少种物品。</p>\n<h3 id=\"输入描述-6\"><a href=\"#输入描述-6\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入数据包括x+1行：<br>第一行包括三个整数x(2 ≤ x ≤ 20)，n(0 ≤ n ≤ 500)，m(0 ≤ m ≤ 500)，以空格分隔<br>接下来的x行，每行一个01串item[i]，表示第i个物品。每个物品的长度length(1 ≤ length ≤ 50)</p>\n<h3 id=\"输出描述-6\"><a href=\"#输出描述-6\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一个整数，表示牛牛最多能创造多少种物品</p>\n<h3 id=\"输入例子-6\"><a href=\"#输入例子-6\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>3 3 1<br>1<br>00<br>100</p>\n<h3 id=\"输出例子-6\"><a href=\"#输出例子-6\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>2</p>\n<h3 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> m = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x &lt; <span class=\"number\">2</span> || x &gt; <span class=\"number\">20</span> || n &lt; <span class=\"number\">0</span> || n &gt; <span class=\"number\">500</span> || m &lt; <span class=\"number\">0</span> || m &gt; <span class=\"number\">500</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] zero = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[x];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] one = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[x];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; x; i++)&#123;</div><div class=\"line\">\t\t\tString item = sc.next();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (item.length() &lt; <span class=\"number\">1</span> || item.length() &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; item.length(); j++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (item.charAt(j) == <span class=\"string\">'0'</span>)</div><div class=\"line\">\t\t\t\t\tzero[i]++;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t\tone[i]++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n+<span class=\"number\">1</span>][m+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; x; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> u = n; u &gt;= zero[i]; u--)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = m; v &gt;= one[i]; v--)</div><div class=\"line\">\t\t\t\t\tdp[u][v] = Math.max(dp[u][v], dp[u-zero[i]][v-one[i]]+<span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(dp[n][m]);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-8-优美的回文串\"><a href=\"#No-8-优美的回文串\" class=\"headerlink\" title=\"No. 8 优美的回文串\"></a>No. 8 优美的回文串</h2><p>牛牛在书上看到一种字符串叫做回文串,当一个字符串从左到右和从右到左读都是一样的,就称这个字符串为回文串。牛牛又从好朋友羊羊那里了解到一种被称为优美的回文串的字符串,考虑一个长度为N只包含大写字母的字符串,写出它所有长度为M的连续子串(包含所有可能的起始位置的子串,相同的子串也要计入),如果这个字符串至少有K个子串都是回文串,我们就叫这个字符串为优美的回文串。现在给出一个N,牛牛希望你能帮他计算出长度为N的字符串有多少个是优美的回文串(每个位置都可以是’A’~’Z’的一个。)</p>\n<h3 id=\"输入描述-7\"><a href=\"#输入描述-7\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入数据包括三个整数N, M, K(2 ≤ N ≤ 11, 2 ≤ M ≤ N, 0 ≤ K ≤ 11).</p>\n<h3 id=\"输出描述-7\"><a href=\"#输出描述-7\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一个整数,表示所求的字符串个数.</p>\n<h3 id=\"输入例子-7\"><a href=\"#输入例子-7\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>2 2 1</p>\n<h3 id=\"输出例子-7\"><a href=\"#输出例子-7\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>26<br>长度为2的字符串,它长度为2的子串只有它自身。长度为2的回文串有”AA”,”BB”,”CC”…”ZZ”,一共26种。</p>\n<h3 id=\"代码-7\"><a href=\"#代码-7\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> n, m, k;</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">long</span> result = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">long</span>[] count = <span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[<span class=\"number\">12</span>];</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] pattern = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">12</span>];</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tn = sc.nextInt();</div><div class=\"line\">\t\tm = sc.nextInt();</div><div class=\"line\">\t\tk = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span> || n &gt; <span class=\"number\">11</span> || m &lt; <span class=\"number\">2</span> || m &gt; n || k &lt; <span class=\"number\">0</span> || k &gt; <span class=\"number\">11</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tcount[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">\t\t\tcount[i] = count[i-<span class=\"number\">1</span>] * (<span class=\"number\">26</span> - i + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tfind(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(result);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> num)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pos == n)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (check())</div><div class=\"line\">\t\t\t\tresult += count[num];</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; num; i++)&#123;</div><div class=\"line\">\t\t\tpattern[pos] = i;</div><div class=\"line\">\t\t\tfind(pos + <span class=\"number\">1</span>, num);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tpattern[pos] = num;</div><div class=\"line\">\t\tfind(pos + <span class=\"number\">1</span>, num + <span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">check</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n - m; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">boolean</span> isPalindrome = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m / <span class=\"number\">2</span> &amp;&amp; isPalindrome == <span class=\"keyword\">true</span>; j++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (pattern[i+j] != pattern[m+i-<span class=\"number\">1</span>-j])</div><div class=\"line\">\t\t\t\t\tisPalindrome = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isPalindrome == <span class=\"keyword\">true</span>)</div><div class=\"line\">\t\t\t\tsum++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (sum &gt;= k);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm"],"tags":["OJ","Algorithm"]},{"title":"[hihoCoder] Problem 1288 - Font Size","url":"http://yoursite.com/2017/04/01/hihoCoder-Problem-1288-Font-Size/","content":"<p>Steven loves reading book on his phone. The book he reads now consists of N paragraphs and the i-th paragraph contains ai characters.</p>\n<p>Steven wants to make the characters easier to read, so he decides to increase the font size of characters. But the size of Steven’s phone screen is limited. Its width is W and height is H. As a result, if the font size of characters is S then it can only show ⌊W / S⌋ characters in a line and ⌊H / S⌋ lines in a page. (⌊x⌋ is the largest integer no more than x)  </p>\n<p>So here’s the question, if Steven wants to control the number of pages no more than P, what’s the maximum font size he can set? Note that paragraphs must start in a new line and there is no empty line between paragraphs.</p>\n<p>Time Limit:10000ms<br>Case Time Limit:1000ms<br>Memory Limit:256MB</p>\n<h2 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h2><p>Input may contain multiple test cases.</p>\n<p>The first line is an integer TASKS, representing the number of test cases.</p>\n<p>For each test case, the first line contains four integers N, P, W and H, as described above.</p>\n<p>The second line contains N integers a1, a2, … aN, indicating the number of characters in each paragraph.</p>\n<p>For all test cases,</p>\n<p>1 &lt;= N &lt;= 10^3,</p>\n<p>1 &lt;= W, H, ai &lt;= 10^3,</p>\n<p>1 &lt;= P &lt;= 10^6,</p>\n<p>There is always a way to control the number of pages no more than P.</p>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><p>For each testcase, output a line with an integer Ans, indicating the maximum font size Steven can set.</p>\n<h2 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h2><p>2<br>1 10 4 3<br>10<br>2 10 4 3<br>10 10</p>\n<h2 id=\"Sample-Output\"><a href=\"#Sample-Output\" class=\"headerlink\" title=\"Sample Output\"></a>Sample Output</h2><p>3<br>2</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> t = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; t; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> p = sc.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = sc.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> h = sc.nextInt();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">1000</span> || w &lt; <span class=\"number\">1</span> || w &gt; <span class=\"number\">1000</span> || h &lt; <span class=\"number\">1</span> || h &gt; <span class=\"number\">1000</span> || p &lt; <span class=\"number\">1</span> || p &gt; <span class=\"number\">1000000</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (x &lt; <span class=\"number\">1</span> || x &gt; <span class=\"number\">1000</span>)</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\ta[j] = x;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> result = binarySearch(w, h, p, a);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tSystem.out.println(result);</div><div class=\"line\">\t\t&#125;\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">validatePages</span><span class=\"params\">(<span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span>[] a)</span> </span>&#123;\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">double</span> charactersPerLine = w / mid;</div><div class=\"line\">\t\t<span class=\"keyword\">double</span> linesPerPage = h / mid;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> lines = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</div><div class=\"line\">\t\t\tlines += Math.ceil(a[i] / charactersPerLine);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">double</span> pages = Math.ceil(lines / linesPerPage);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> pages;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span>[] a)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> right = Math.min(w, h);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (left &lt;= right)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> mid = (left + right) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (validatePages(mid, w, h, a) &lt;= p)&#123;</div><div class=\"line\">\t\t\t\tresult = mid;</div><div class=\"line\">\t\t\t\tleft = mid + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> </div><div class=\"line\">\t\t\t\tright = mid - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm"],"tags":["OJ","Algorithm"]},{"title":"[LightOJ] Problem 1138 - Trailing Zeroes (III)","url":"http://yoursite.com/2017/04/01/LightOJ-Problem-1138-Trailing-Zeroes-III/","content":"<p>You task is to find minimal natural number N, so that N! contains exactly Q zeroes on the trail in decimal notation. As you know N! = 1<em>2</em>…*N. For example, 5! = 120, 120 contains one zero on the trail.</p>\n<p>Time Limit: 2 second(s)<br>Memory Limit: 32 MB</p>\n<p>小明学习数学的时候遇到了两个新奇的函数f(x)和g(x)。f(x)的值为x的阶乘后导0的个数。g(x)的值为满足f(y)=x的最小值y，如果不存在y使f(y)=x, 那么g(x)的值为-1。现在小明已经知道如何计算f(x)了，他想让你帮他写段程序来计算g(x)。</p>\n<p>Hint<br>0!=1，1!=1，2!=1<em>2=2， 3!=1</em>2<em>3=6，4!=1</em>2<em>3</em>4=24，5!=1<em>2</em>3<em>4</em>5=120，5是最小数字使f(x)为1<br>为了清楚的表述，可引入另外一个函数h(x, p)为x的阶乘中因子p的个数。那么f(x) = h(x, 10)我们把10分解质因子10=2*5。那么有f(x) = min(h(x, 2), h(x, 5))。显然h(x, 2) &gt;= h(x, 5)，所以f(x)=h(x, 5)。我们可以推断出f(x)是一个非递减函数</p>\n<h2 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h2><p>Input starts with an integer T (≤ 10000), denoting the number of test cases.</p>\n<p>Each case contains an integer Q (1 ≤ Q ≤ 10^8) in a line.</p>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><p>For each case, print the case number and N. If no solution is found then print ‘impossible’.</p>\n<h2 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h2><p>3<br>1<br>2<br>5</p>\n<h2 id=\"Output-for-Sample-Input\"><a href=\"#Output-for-Sample-Input\" class=\"headerlink\" title=\"Output for Sample Input\"></a>Output for Sample Input</h2><p>Case 1: 5<br>Case 2: 10<br>Case 3: impossible</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> t = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t &lt; <span class=\"number\">1</span> || t &gt; <span class=\"number\">10000</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= t; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x &lt; <span class=\"number\">1</span> || x &gt; Math.pow(<span class=\"number\">10</span>, <span class=\"number\">8</span>))</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> result = binarySearch(<span class=\"number\">1</span>, Long.MAX_VALUE, x);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (result != -<span class=\"number\">1</span>)</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"Case \"</span> + i + <span class=\"string\">\": \"</span> + result);</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"Case \"</span> + i + <span class=\"string\">\": impossible\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">trailingZeroes</span><span class=\"params\">(<span class=\"keyword\">long</span> n)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> n == <span class=\"number\">0</span> ? <span class=\"number\">0</span> : n / <span class=\"number\">5</span> + trailingZeroes(n / <span class=\"number\">5</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">long</span> left, <span class=\"keyword\">long</span> right, <span class=\"keyword\">long</span> key)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (left &lt;= right)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> mid = (left + right) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (trailingZeroes(mid) == key &amp;&amp; trailingZeroes(mid - <span class=\"number\">1</span>) &lt; key) </div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> mid;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (trailingZeroes(mid) &lt; key) </div><div class=\"line\">\t\t\t\tleft = mid + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> </div><div class=\"line\">\t\t\t\tright = mid - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm"],"tags":["OJ","Algorithm"]},{"title":"Algorithm from NowCoder (4)","url":"http://yoursite.com/2017/03/27/Algorithm-from-NowCoder-4/","content":"<h2 id=\"No-1-好多鱼！\"><a href=\"#No-1-好多鱼！\" class=\"headerlink\" title=\"No. 1 好多鱼！\"></a>No. 1 好多鱼！</h2><p>牛牛有一个鱼缸。鱼缸里面已经有n条鱼，每条鱼的大小为fishSize[i] (1 ≤ i ≤ n,均为正整数)，牛牛现在想把新捕捉的鱼放入鱼缸。鱼缸内存在着大鱼吃小鱼的定律。经过观察，牛牛发现一条鱼A的大小为另外一条鱼B大小的2倍到10倍(包括2倍大小和10倍大小)，鱼A会吃掉鱼B。考虑到这个，牛牛要放入的鱼就需要保证：<br>1、放进去的鱼是安全的，不会被其他鱼吃掉<br>2、这条鱼放进去也不能吃掉其他鱼<br>鱼缸里面已经存在的鱼已经相处了很久，不考虑他们互相捕食。现在知道新放入鱼的大小范围[minSize,maxSize](考虑鱼的大小都是整数表示),牛牛想知道有多少种大小的鱼可以放入这个鱼缸。</p>\n<h3 id=\"输入描述\"><a href=\"#输入描述\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入数据包括3行.<br>第一行为新放入鱼的尺寸范围minSize,maxSize(1 ≤ minSize,maxSize ≤ 1000)，以空格分隔。</p>\n<p>第二行为鱼缸里面已经有鱼的数量n(1 ≤ n ≤ 50)</p>\n<p>第三行为已经有的鱼的大小fishSize[i](1 ≤ fishSize[i] ≤ 1000)，以空格分隔。</p>\n<h3 id=\"输出描述\"><a href=\"#输出描述\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出有多少种大小的鱼可以放入这个鱼缸。考虑鱼的大小都是整数表示</p>\n<h3 id=\"输入例子\"><a href=\"#输入例子\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>1 12<br>1<br>1</p>\n<h3 id=\"输出例子\"><a href=\"#输出例子\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>3</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> minSize = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> maxSize = sc.nextInt();</div><div class=\"line\">        <span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (minSize &lt; <span class=\"number\">1</span> || minSize &gt; <span class=\"number\">1000</span> || maxSize &lt; <span class=\"number\">1</span> || maxSize &gt; <span class=\"number\">1000</span> || n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] fishSize = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x &lt; <span class=\"number\">1</span> || x &gt; <span class=\"number\">1000</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tfishSize[i] = x;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = minSize; i &lt;= maxSize; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">boolean</span> isEaten = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n &amp;&amp; isEaten == <span class=\"keyword\">false</span>; j++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ((i &lt;= fishSize[j] * <span class=\"number\">10</span> &amp;&amp; i &gt;= fishSize[j] * <span class=\"number\">2</span>) || (<span class=\"number\">10</span> * i &gt;= fishSize[j] &amp;&amp; <span class=\"number\">2</span> * i &lt;= fishSize[j]))</div><div class=\"line\">\t\t\t\t\tisEaten = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!isEaten)</div><div class=\"line\">\t\t\t\tcount++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\tSystem.out.println(count);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-2-循环单词\"><a href=\"#No-2-循环单词\" class=\"headerlink\" title=\"No. 2 循环单词\"></a>No. 2 循环单词</h2><p>如果一个单词通过循环右移获得的单词，我们称这些单词都为一种循环单词。 例如：picture 和 turepic 就是属于同一种循环单词。 现在给出n个单词，需要统计这个n个单词中有多少种循环单词。 </p>\n<h3 id=\"输入描述-1\"><a href=\"#输入描述-1\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入包括n+1行：</p>\n<p>第一行为单词个数n(1 ≤ n ≤ 50)</p>\n<p>接下来的n行，每行一个单词word[i]，长度length(1 ≤ length ≤ 50)。由小写字母构成</p>\n<h3 id=\"输出描述-1\"><a href=\"#输出描述-1\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出循环单词的种数</p>\n<h3 id=\"输入例子-1\"><a href=\"#输入例子-1\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>5<br>picture<br>turepic<br>icturep<br>word<br>ordw</p>\n<h3 id=\"输出例子-1\"><a href=\"#输出例子-1\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>2</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tString[] word = <span class=\"keyword\">new</span> String[n];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\tString str = sc.next();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (str.length() &lt; <span class=\"number\">1</span> || str.length() &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tword[i] =str;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\tString str = word[i];</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!list.contains(str))&#123;</div><div class=\"line\">\t\t\t\tlist.add(str);</div><div class=\"line\">\t\t\t\tcount++;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; str.length(); j++)&#123;</div><div class=\"line\">\t\t\t\t\tString newString = <span class=\"keyword\">new</span> String();</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\"><span class=\"comment\">//\t\t\t\t\tnewString = str.substring(j) + str.substring(0, j);</span></div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">\t\t\t\t\tnewString = str + str;</div><div class=\"line\">\t\t\t\t\tnewString = newString.substring(j, j + str.length());</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">\t\t\t\t\tlist.add(newString);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(count);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-3-DNA合成\"><a href=\"#No-3-DNA合成\" class=\"headerlink\" title=\"No. 3 DNA合成\"></a>No. 3 DNA合成</h2><p>DNA分子是以4种脱氧核苷酸为单位连接而成的长链，这4种脱氧核苷酸分别含有A,T,C,G四种碱基。碱基互补配对原则：A和T是配对的，C和G是配对的。如果两条碱基链长度是相同的并且每个位置的碱基是配对的，那么他们就可以配对合成为DNA的双螺旋结构。现在给出两条碱基链，允许在其中一条上做替换操作：把序列上的某个位置的碱基更换为另外一种碱基。问最少需要多少次让两条碱基链配对成功 </p>\n<h3 id=\"输入描述-2\"><a href=\"#输入描述-2\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入包括一行：<br>包括两个字符串,分别表示两条链,两个字符串长度相同且长度均小于等于50。</p>\n<h3 id=\"输出描述-2\"><a href=\"#输出描述-2\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一个整数，即最少需要多少次让两条碱基链配对成功</p>\n<h3 id=\"输入例子-2\"><a href=\"#输入例子-2\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>ACGT TGCA</p>\n<h3 id=\"输出例子-2\"><a href=\"#输出例子-2\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>0</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tString str1 = sc.next();</div><div class=\"line\">\t\tString str2 = sc.next();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (str1.length() != str2.length() || str1.length() &gt; <span class=\"number\">50</span> || str2.length() &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"string\">'A'</span> + <span class=\"string\">'T'</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> b = <span class=\"string\">'C'</span> + <span class=\"string\">'G'</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str1.length(); i++)&#123;</div><div class=\"line\"><span class=\"comment\">//\t\t\tif ((str1.charAt(i) == 'A' &amp;&amp; str2.charAt(i) == 'T') || (str1.charAt(i) == 'T' &amp;&amp; str2.charAt(i) == 'A') || </span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\t\t(str1.charAt(i) == 'C' &amp;&amp; str2.charAt(i) == 'G') || (str1.charAt(i) == 'G' &amp;&amp; str2.charAt(i) == 'C'))</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\tcount++;</span></div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> c = str1.charAt(i) + str2.charAt(i);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (a != c &amp;&amp; b != c)</div><div class=\"line\">\t\t\t\tcount++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(str1.length() - count);</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(count);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-4-连续整数\"><a href=\"#No-4-连续整数\" class=\"headerlink\" title=\"No. 4 连续整数\"></a>No. 4 连续整数</h2><p>牛牛的好朋友羊羊在纸上写了n+1个整数，羊羊接着抹除掉了一个整数，给牛牛猜他抹除掉的数字是什么。牛牛知道羊羊写的整数神排序之后是一串连续的正整数，牛牛现在要猜出所有可能是抹除掉的整数。例如：<br>10 7 12 8 11 那么抹除掉的整数只可能是9<br>5 6 7 8 那么抹除掉的整数可能是4也可能是9</p>\n<h3 id=\"输入描述-3\"><a href=\"#输入描述-3\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入包括2行：</p>\n<p>第一行为整数n(1 &lt;= n &lt;= 50)，即抹除一个数之后剩下的数字个数</p>\n<p>第二行为n个整数num[i] (1 &lt;= num[i] &lt;= 1000000000)</p>\n<h3 id=\"输出描述-3\"><a href=\"#输出描述-3\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>在一行中输出所有可能是抹除掉的数,从小到大输出,用空格分割,行末无空格。如果没有可能的数，则输出mistake</p>\n<h3 id=\"输入例子-3\"><a href=\"#输入例子-3\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>2<br>3 6</p>\n<h3 id=\"输出例子-3\"><a href=\"#输出例子-3\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>mistake</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\"><span class=\"comment\">//\t\tint[] num = new int[n];</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> min = <span class=\"number\">1000000001</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x &lt; <span class=\"number\">1</span> || x &gt; <span class=\"number\">1000000000</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\"><span class=\"comment\">//\t\t\tnum[i] = x;</span></div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x &lt; min)</div><div class=\"line\">\t\t\t\tmin = x;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x &gt; max)</div><div class=\"line\">\t\t\t\tmax = x;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tres ^= x;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\"><span class=\"comment\">//\t\tArrays.sort(num);</span></div><div class=\"line\"><span class=\"comment\">//\t\t</span></div><div class=\"line\"><span class=\"comment\">//\t\tfor (int i = 0; i &lt; n - 1; i++)&#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\tif (num[i] == num[i+1])&#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\tSystem.out.println(\"mistake\");</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\treturn;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t&#125;</span></div><div class=\"line\"><span class=\"comment\">//\t\t&#125;</span></div><div class=\"line\"><span class=\"comment\">//\t\t</span></div><div class=\"line\"><span class=\"comment\">//\t\tif (num[n-1] - num[0] == n)&#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\tfor (int i = 0; i &lt; n - 1; i++)&#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\tif (num[i+1] - num[i] != 1)</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\t\tSystem.out.println(num[i] + 1);</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t&#125;</span></div><div class=\"line\"><span class=\"comment\">//\t\t&#125;</span></div><div class=\"line\"><span class=\"comment\">//\t\telse if (num[n-1] - num[0] == n - 1) &#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\tif (num[0] == 1)</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\tSystem.out.println(num[n-1] + 1);</span></div><div class=\"line\"><span class=\"comment\">//\t\t\telse </span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\tSystem.out.println((num[0] - 1) + \" \" + (num[n-1] + 1));</span></div><div class=\"line\"><span class=\"comment\">//\t\t&#125;</span></div><div class=\"line\"><span class=\"comment\">//\t\telse</span></div><div class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.println(\"mistake\");</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = min; i &lt;= max; i++)</div><div class=\"line\">\t\t\tres ^= i;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (res == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (min != <span class=\"number\">1</span>)</div><div class=\"line\">\t\t\t\tSystem.out.println((min - <span class=\"number\">1</span>) + <span class=\"string\">\" \"</span> + (max + <span class=\"number\">1</span>));</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\tSystem.out.println(max + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (res &lt;= min || res &gt;= max)</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"mistake\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\tSystem.out.println(res);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-5-超级素数幂\"><a href=\"#No-5-超级素数幂\" class=\"headerlink\" title=\"No. 5 超级素数幂\"></a>No. 5 超级素数幂</h2><p>如果一个数字能表示为p^q(^表示幂运算)且p为一个素数,q为大于1的正整数就称这个数叫做超级素数幂。现在给出一个正整数n,如果n是一个超级素数幂需要找出对应的p,q。</p>\n<h3 id=\"输入描述-4\"><a href=\"#输入描述-4\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入一个正整数n(2 ≤ n ≤ 10^18)</p>\n<h3 id=\"输出描述-4\"><a href=\"#输出描述-4\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>如果n是一个超级素数幂则输出p,q,以空格分隔,行末无空格。<br>如果n不是超级素数幂，则输出No</p>\n<h3 id=\"输入例子-4\"><a href=\"#输入例子-4\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>27</p>\n<h3 id=\"输出例子-4\"><a href=\"#输出例子-4\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>3 3</p>\n<h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> n = sc.nextLong();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span> || n &gt; Math.pow(<span class=\"number\">10</span>, <span class=\"number\">18</span>))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> q = <span class=\"number\">2</span>; q &lt;= Math.log(n) / Math.log(<span class=\"number\">2</span>); q++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">double</span> p = Math.pow(n, <span class=\"number\">1</span>d / q);</div><div class=\"line\">\t\t\t<span class=\"keyword\">boolean</span> isPrime = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= Math.sqrt(p) &amp;&amp; isPrime == <span class=\"keyword\">true</span>; i++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (p % i == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\t\tisPrime = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> ((<span class=\"keyword\">long</span>) p == p &amp;&amp; isPrime == <span class=\"keyword\">true</span>)&#123;</div><div class=\"line\">\t\t\t\tSystem.out.println((<span class=\"keyword\">long</span>) p + <span class=\"string\">\" \"</span> + q);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"No\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-6-序列和\"><a href=\"#No-6-序列和\" class=\"headerlink\" title=\"No. 6 序列和\"></a>No. 6 序列和</h2><p>给出一个正整数N和长度L，找出一段长度大于等于L的连续非负整数，他们的和恰好为N。答案可能有多个，我我们需要找出长度最小的那个。<br>例如 N = 18 L = 2：<br>5 + 6 + 7 = 18<br>3 + 4 + 5 + 6 = 18<br>都是满足要求的，但是我们输出更短的 5 6 7</p>\n<h3 id=\"输入描述-5\"><a href=\"#输入描述-5\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入数据包括一行：<br>两个正整数N(1 ≤ N ≤ 1000000000),L(2 ≤ L ≤ 100)</p>\n<h3 id=\"输出描述-5\"><a href=\"#输出描述-5\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>从小到大输出这段连续非负整数，以空格分隔，行末无空格。如果没有这样的序列或者找出的序列长度大于100，则输出No</p>\n<h3 id=\"输入例子-5\"><a href=\"#输入例子-5\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>18 2</p>\n<h3 id=\"输出例子-5\"><a href=\"#输出例子-5\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>5 6 7</p>\n<h3 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> l = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">1000000000</span> || l &lt; <span class=\"number\">2</span> || l &gt; <span class=\"number\">100</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = l; i &lt;= <span class=\"number\">100</span>; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> ((<span class=\"number\">2</span> * n - i * i + i) % (<span class=\"number\">2</span> * i) == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> a = (<span class=\"number\">2</span> * n - i * i + i) / (<span class=\"number\">2</span> * i);</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i - <span class=\"number\">1</span>; j++)</div><div class=\"line\">\t\t\t\t\tSystem.out.print(a + j + <span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\tSystem.out.print(a + i - <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"No\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-7-页码统计\"><a href=\"#No-7-页码统计\" class=\"headerlink\" title=\"No. 7 页码统计\"></a>No. 7 页码统计</h2><p>牛牛新买了一本算法书，算法书一共有n页，页码从1到n。牛牛于是想了一个算法题目：在这本算法书页码中0~9每个数字分别出现了多少次？</p>\n<h3 id=\"输入描述-6\"><a href=\"#输入描述-6\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入包括一个整数n(1 ≤ n ≤ 1,000,000,000)</p>\n<h3 id=\"输出描述-6\"><a href=\"#输出描述-6\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出包括一行10个整数，即0~9这些数字在页码中出现的次数，以空格分隔。行末无空格。</p>\n<h3 id=\"输入例子-6\"><a href=\"#输入例子-6\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>999</p>\n<h3 id=\"输出例子-6\"><a href=\"#输出例子-6\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>189 300 300 300 300 300 300 300 300 300</p>\n<h3 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">1000000000</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)&#123;</div><div class=\"line\">\t\t\tresult = count(n, i);</div><div class=\"line\">\t\t\tSystem.out.print(result + <span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tresult = count(n, <span class=\"number\">9</span>);</div><div class=\"line\">\t\tSystem.out.print(result);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> x)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> currentN = n;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (currentN &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> current = currentN % <span class=\"number\">10</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> high = currentN / <span class=\"number\">10</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> low = n - currentN * index;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (high != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\t\thigh--;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tsum += high * index;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (current &gt; x)</div><div class=\"line\">\t\t\t\tsum += index;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == x)</div><div class=\"line\">\t\t\t\tsum += low + <span class=\"number\">1</span>;\t</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tindex *= <span class=\"number\">10</span>;</div><div class=\"line\">\t\t\tcurrentN /= <span class=\"number\">10</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-8-01翻转\"><a href=\"#No-8-01翻转\" class=\"headerlink\" title=\"No. 8 01翻转\"></a>No. 8 01翻转</h2><p>牛牛正在挑战一款名为01翻转的游戏。游戏初始有A个0,B个1，牛牛的目标就是把所有的值都变为1，每次操作牛牛可以任意选择恰好K个数字，并将这K个数字的值进行翻转(0变为1，1变为0)。牛牛如果使用最少的操作次数完成这个游戏就可以获得奖品，牛牛想知道最少的操作次数是多少？<br>例如:A = 4 B = 0 K = 3<br>0000 -&gt; 1110 -&gt; 1001 -&gt; 0100 -&gt; 1111<br>需要的最少操作次数为4 </p>\n<h3 id=\"输入描述-7\"><a href=\"#输入描述-7\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入为一行：<br>一共三个整数A(0 ≤ A ≤ 100,000),B(0 ≤ B ≤ 100,000),K(1 ≤ K ≤100,000).以空格分隔</p>\n<h3 id=\"输出描述-7\"><a href=\"#输出描述-7\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一个整数，表示最少需要的操作次数。如果不能完成，则输出-1</p>\n<h3 id=\"输入例子-7\"><a href=\"#输入例子-7\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>4 0 3</p>\n<h3 id=\"输出例子-7\"><a href=\"#输出例子-7\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>4</p>\n<h3 id=\"代码-7\"><a href=\"#代码-7\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> a = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> b = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> k = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (a &lt; <span class=\"number\">0</span> || a &gt; <span class=\"number\">100000</span> || b &lt; <span class=\"number\">0</span> || b &gt; <span class=\"number\">100000</span> || k &lt; <span class=\"number\">1</span> || k &gt; <span class=\"number\">100000</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> n = <span class=\"number\">0</span>; n &lt; <span class=\"number\">200000</span>; n++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> x = n * k - a;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span> || x % <span class=\"number\">2</span> != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x / <span class=\"number\">2</span> &lt;= a * ((n - <span class=\"number\">1</span>) / <span class=\"number\">2</span>) + b * (n / <span class=\"number\">2</span>) || a == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(n);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(-<span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm"],"tags":["OJ","Algorithm"]},{"title":"Algorithm from NowCoder (3)","url":"http://yoursite.com/2017/03/25/Algorithm-from-NowCoder-3/","content":"<h2 id=\"No-1-构造回文\"><a href=\"#No-1-构造回文\" class=\"headerlink\" title=\"No. 1 构造回文\"></a>No. 1 构造回文</h2><p>给定一个字符串s，你可以从中删除一些字符，使得剩下的串是一个回文串。如何删除才能使得回文串最长呢？<br>输出需要删除的字符个数。</p>\n<h3 id=\"输入描述\"><a href=\"#输入描述\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入数据有多组，每组包含一个字符串s，且保证:1&lt;=s.length&lt;=1000.</p>\n<h3 id=\"输出描述\"><a href=\"#输出描述\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>对于每组数据，输出一个整数，代表最少需要删除的字符个数。</p>\n<h3 id=\"输入例子\"><a href=\"#输入例子\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>abcda<br>google</p>\n<h3 id=\"输出例子\"><a href=\"#输出例子\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>2<br>2</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (sc.hasNextLine()) &#123;</div><div class=\"line\">\t\t\tString str = sc.nextLine();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (str.length() &lt; <span class=\"number\">1</span> || str.length() &gt; <span class=\"number\">1000</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[str.length()+<span class=\"number\">1</span>][str.length()+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= str.length(); i++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= str.length(); j++)&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (str.charAt(i-<span class=\"number\">1</span>) == str.charAt(str.length()-j))</div><div class=\"line\">\t\t\t\t\t\tdp[i][j] = dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t\t\tdp[i][j] = Math.max(dp[i-<span class=\"number\">1</span>][j], dp[i][j-<span class=\"number\">1</span>]);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\tSystem.out.println(str.length() - dp[str.length()][str.length()]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-2-算法基础-字符移位\"><a href=\"#No-2-算法基础-字符移位\" class=\"headerlink\" title=\"No. 2 算法基础-字符移位\"></a>No. 2 算法基础-字符移位</h2><p>小Q最近遇到了一个难题：把一个字符串的大写字母放到字符串的后面，各个字符的相对位置不变，且不能申请额外的空间。<br>你能帮帮小Q吗？</p>\n<h3 id=\"输入描述-1\"><a href=\"#输入描述-1\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入数据有多组，每组包含一个字符串s，且保证:1&lt;=s.length&lt;=1000.</p>\n<h3 id=\"输出描述-1\"><a href=\"#输出描述-1\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>对于每组数据，输出移位后的字符串。</p>\n<h3 id=\"输入例子-1\"><a href=\"#输入例子-1\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>AkleBiCeilD</p>\n<h3 id=\"输出例子-1\"><a href=\"#输出例子-1\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>kleieilABCD</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (sc.hasNextLine()) &#123;</div><div class=\"line\">\t\t\tString str = sc.nextLine();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (str.length() &lt; <span class=\"number\">1</span> || str.length() &gt; <span class=\"number\">1000</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">char</span>[] ch = str.toCharArray();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = ch.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (ch[i] &gt;= <span class=\"string\">'A'</span> &amp;&amp; ch[i] &lt;= <span class=\"string\">'Z'</span>)&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt;= ch.length - <span class=\"number\">2</span>; j++)&#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (!Character.isUpperCase(ch[j+<span class=\"number\">1</span>]))&#123;\t</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">char</span> temp = ch[j+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t\t\t\t\tch[j+<span class=\"number\">1</span>] = ch[j];</div><div class=\"line\">\t\t\t\t\t\t\tch[j] = temp;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tSystem.out.println(String.valueOf(ch));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-3-有趣的数字\"><a href=\"#No-3-有趣的数字\" class=\"headerlink\" title=\"No. 3 有趣的数字\"></a>No. 3 有趣的数字</h2><p>小Q今天在上厕所时想到了这个问题：有n个数，两两组成二元组，差最小的有多少对呢？差最大呢？</p>\n<h3 id=\"输入描述-2\"><a href=\"#输入描述-2\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入包含多组测试数据。</p>\n<p>对于每组测试数据：</p>\n<p>N - 本组测试数据有n个数</p>\n<p>a1,a2…an - 需要计算的数据</p>\n<p>保证:</p>\n<p>1&lt;=N&lt;=100000,0&lt;=ai&lt;=INT_MAX.</p>\n<h3 id=\"输出描述-2\"><a href=\"#输出描述-2\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>对于每组数据，输出两个数，第一个数表示差最小的对数，第二个数表示差最大的对数。</p>\n<h3 id=\"输入例子-2\"><a href=\"#输入例子-2\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>6<br>45 12 45 32 5 6</p>\n<h3 id=\"输出例子-2\"><a href=\"#输出例子-2\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>1 2</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (sc.hasNext()) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">100000</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span> || x &gt; Integer.MAX_VALUE)</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\ta[i] = x;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tArrays.sort(a);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (a[<span class=\"number\">0</span>] == a[n-<span class=\"number\">1</span>])&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> x = n * (n - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t\tSystem.out.println(x + <span class=\"string\">\" \"</span> + x);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tMap&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;Integer, Integer&gt;();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (map.containsKey(a[i]))</div><div class=\"line\">\t\t\t\t\tmap.put(a[i], map.get(a[i]) + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t\tmap.put(a[i], <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> maxCount = map.get(a[<span class=\"number\">0</span>]) * map.get(a[n-<span class=\"number\">1</span>]);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> minCount = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (map.size() == n)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> min = a[<span class=\"number\">1</span>] - a[<span class=\"number\">0</span>];</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> x = a[i] - a[i-<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (x &lt; min)&#123;</div><div class=\"line\">\t\t\t\t\t\tmin = x;</div><div class=\"line\">\t\t\t\t\t\tminCount = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x == min)</div><div class=\"line\">\t\t\t\t\t\tminCount++;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (Integer key : map.keySet())&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> x = map.get(key);</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (x &gt; <span class=\"number\">1</span>)</div><div class=\"line\">\t\t\t\t\t\tminCount += x * (x - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tSystem.out.println(minCount + <span class=\"string\">\" \"</span> + maxCount);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm"],"tags":["OJ","Algorithm"]},{"title":"Algorithm from NowCoder (2)","url":"http://yoursite.com/2017/03/24/Algorithm-from-NowCoder-2/","content":"<h2 id=\"No-1-回文序列\"><a href=\"#No-1-回文序列\" class=\"headerlink\" title=\"No. 1 回文序列\"></a>No. 1 回文序列</h2><p>如果一个数字序列逆置之后跟原序列是一样的就称这样的数字序列为回文序列。例如：<br>{1, 2, 1}, {15, 78, 78, 15} , {112} 是回文序列,<br>{1, 2, 2}, {15, 78, 87, 51} ,{112, 2, 11} 不是回文序列。<br>现在给出一个数字序列，允许使用一种转换操作：<br>选择任意两个相邻的数，然后从序列移除这两个数，并用这两个数字的和插入到这两个数之前的位置(只插入一个和)。<br>现在对于所给序列要求出最少需要多少次操作可以将其变成回文序列。</p>\n<h3 id=\"输入描述\"><a href=\"#输入描述\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入为两行，第一行为序列长度n (1 ≤ n ≤ 50)<br>第二行为序列中的n个整数item[i]  (1 ≤ item[i] ≤ 10000)，以空格分隔。</p>\n<h3 id=\"输出描述\"><a href=\"#输出描述\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一个数，表示最少需要的转换次数</p>\n<h3 id=\"输入例子\"><a href=\"#输入例子\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>4<br>1 1 1 3</p>\n<h3 id=\"输出例子\"><a href=\"#输出例子\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>2</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] item = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x &lt; <span class=\"number\">1</span> || x &gt; <span class=\"number\">10000</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\titem[i] = x;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> head = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> tail = n - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\"><span class=\"comment\">//\t\twhile (head &lt; tail)&#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\tif (item[head] &lt; item[tail])&#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\thead++;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\titem[head] = item[head-1] + item[head];</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\tcount++;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t&#125;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\telse if (item[head] &gt; item[tail])&#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\ttail--;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\titem[tail] = item[tail] + item[tail+1];</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\tcount++;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t&#125;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\telse &#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\thead++;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\ttail--;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t&#125;</span></div><div class=\"line\"><span class=\"comment\">//\t\t&#125;</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\tcount = countOperations(head, tail, item);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(count);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">countOperations</span><span class=\"params\">(<span class=\"keyword\">int</span> head, <span class=\"keyword\">int</span> tail, <span class=\"keyword\">int</span>[] item)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (head &lt; tail &amp;&amp; item[head] != item[tail])&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (item[head] &lt; item[tail])&#123;</div><div class=\"line\">\t\t\t\thead++;</div><div class=\"line\">\t\t\t\titem[head] = item[head-<span class=\"number\">1</span>] + item[head];</div><div class=\"line\">\t\t\t\tcount++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\ttail--;</div><div class=\"line\">\t\t\t\titem[tail] = item[tail] + item[tail+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t\tcount++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (head &gt;= tail)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> count;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> </div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> count += countOperations(head+<span class=\"number\">1</span>, tail-<span class=\"number\">1</span>, item);\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-2-优雅的点\"><a href=\"#No-2-优雅的点\" class=\"headerlink\" title=\"No. 2 优雅的点\"></a>No. 2 优雅的点</h2><p>小易有一个圆心在坐标原点的圆，小易知道圆的半径的平方。小易认为在圆上的点而且横纵坐标都是整数的点是优雅的，小易现在想寻找一个算法计算出优雅的点的个数，请你来帮帮他。<br>例如：半径的平方如果为25<br>优雅的点就有：(+/-3, +/-4), (+/-4, +/-3), (0, +/-5) (+/-5, 0)，一共12个点。 </p>\n<h3 id=\"输入描述-1\"><a href=\"#输入描述-1\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入为一个整数，即为圆半径的平方,范围在32位int范围内。</p>\n<h3 id=\"输出描述-1\"><a href=\"#输出描述-1\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出为一个整数，即为优雅的点的个数</p>\n<h3 id=\"输入例子-1\"><a href=\"#输入例子-1\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>25</p>\n<h3 id=\"输出例子-1\"><a href=\"#输出例子-1\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>12</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> radius = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> a = (<span class=\"keyword\">int</span>) Math.sqrt(radius);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = -a; i &lt;= a; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">double</span> b = Math.sqrt(radius - i * i);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Math.round(b) == b)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\t\tcount++;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t\tcount += <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(count);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-3-跳石板\"><a href=\"#No-3-跳石板\" class=\"headerlink\" title=\"No. 3 跳石板\"></a>No. 3 跳石板</h2><p>小易来到了一条石板路前，每块石板上从1挨着编号为：1、2、3…….<br>这条石板路要根据特殊的规则才能前进：对于小易当前所在的编号为K的 石板，小易单次只能往前跳K的一个约数(不含1和K)步，即跳到K+X(X为K的一个非1和本身的约数)的位置。 小易当前处在编号为N的石板，他想跳到编号恰好为M的石板去，小易想知道最少需要跳跃几次可以到达。<br>例如：<br>N = 4，M = 24：<br>4-&gt;6-&gt;8-&gt;12-&gt;18-&gt;24<br>于是小易最少需要跳跃5次，就可以从4号石板跳到24号石板 </p>\n<h3 id=\"输入描述-2\"><a href=\"#输入描述-2\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入为一行，有两个整数N，M，以空格隔开。<br>(4 ≤ N ≤ 100000)<br>(N ≤ M ≤ 100000)</p>\n<h3 id=\"输出描述-2\"><a href=\"#输出描述-2\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出小易最少需要跳跃的步数,如果不能到达输出-1</p>\n<h3 id=\"输入例子-2\"><a href=\"#输入例子-2\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>4 24</p>\n<h3 id=\"输出例子-2\"><a href=\"#输出例子-2\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>5</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> m = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">4</span> || n &gt; <span class=\"number\">100000</span> || m &lt; n || m &gt; <span class=\"number\">100000</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[m+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= m; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i == n)</div><div class=\"line\">\t\t\t\tdp[i] = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\tdp[i] = Integer.MAX_VALUE;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n; i &lt;= m; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (dp[i] == Integer.MAX_VALUE)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tArrayList&lt;Integer&gt; divisor = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div><div class=\"line\">\t\t\tgetDivisor(divisor, i);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; divisor.size(); j++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (i + divisor.get(j) &lt;= m)</div><div class=\"line\">\t\t\t\t\tdp[i + divisor.get(j)] = Math.min(dp[i] + <span class=\"number\">1</span>, dp[i + divisor.get(j)]);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (dp[m] == Integer.MAX_VALUE)</div><div class=\"line\">\t\t\tSystem.out.println(-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\tSystem.out.println(dp[m]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">getDivisor</span><span class=\"params\">(ArrayList&lt;Integer&gt; divisor, <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= Math.sqrt(n); i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (n % i == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\tdivisor.add(i);</div><div class=\"line\">\t\t\t\tdivisor.add(n / i);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-4-暗黑的字符串\"><a href=\"#No-4-暗黑的字符串\" class=\"headerlink\" title=\"No. 4 暗黑的字符串\"></a>No. 4 暗黑的字符串</h2><p>一个只包含’A’、’B’和’C’的字符串，如果存在某一段长度为3的连续子串中恰好’A’、’B’和’C’各有一个，那么这个字符串就是纯净的，否则这个字符串就是暗黑的。例如：<br>BAACAACCBAAA 连续子串”CBA”中包含了’A’,’B’,’C’各一个，所以是纯净的字符串<br>AABBCCAABB 不存在一个长度为3的连续子串包含’A’,’B’,’C’,所以是暗黑的字符串<br>你的任务就是计算出长度为n的字符串(只包含’A’、’B’和’C’)，有多少个是暗黑的字符串。 </p>\n<h3 id=\"输入描述-3\"><a href=\"#输入描述-3\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入一个整数n，表示字符串长度(1 ≤ n ≤ 30)</p>\n<h3 id=\"输出描述-3\"><a href=\"#输出描述-3\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一个整数表示有多少个暗黑字符串</p>\n<h3 id=\"输入例子-3\"><a href=\"#输入例子-3\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>2<br>3</p>\n<h3 id=\"输出例子-3\"><a href=\"#输出例子-3\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>9<br>21</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (sc.hasNext())&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">30</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span>[] count = <span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[n];</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tcount[<span class=\"number\">0</span>] = <span class=\"number\">3</span>;</div><div class=\"line\">\t\t\tcount[<span class=\"number\">1</span>] = <span class=\"number\">9</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; n; i++)</div><div class=\"line\">\t\t\t\tcount[i] = <span class=\"number\">2</span> * count[i-<span class=\"number\">1</span>] + count[i-<span class=\"number\">2</span>];</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tSystem.out.println(count[n-<span class=\"number\">1</span>]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-5-数字翻转\"><a href=\"#No-5-数字翻转\" class=\"headerlink\" title=\"No. 5 数字翻转\"></a>No. 5 数字翻转</h2><p>对于一个整数X，定义操作rev(X)为将X按数位翻转过来，并且去除掉前导0。例如:<br>如果 X = 123，则rev(X) = 321;<br>如果 X = 100，则rev(X) = 1.<br>现在给出整数x和y,要求rev(rev(x) + rev(y))为多少？ </p>\n<h3 id=\"输入描述-4\"><a href=\"#输入描述-4\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入为一行，x、y(1 ≤ x、y ≤ 1000)，以空格隔开。</p>\n<h3 id=\"输出描述-4\"><a href=\"#输出描述-4\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出rev(rev(x) + rev(y))的值</p>\n<h3 id=\"输入例子-4\"><a href=\"#输入例子-4\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>123 100</p>\n<h3 id=\"输出例子-4\"><a href=\"#输出例子-4\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>223</p>\n<h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> y = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x &lt; <span class=\"number\">1</span> || y &lt; <span class=\"number\">1</span> || x &gt; <span class=\"number\">1000</span> || y &gt; <span class=\"number\">1000</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(reverse(reverse(x) + reverse(y)));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (a != <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\tresult = result * <span class=\"number\">10</span> + a % <span class=\"number\">10</span>;</div><div class=\"line\">\t\t\ta = a / <span class=\"number\">10</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-6-最大的奇约数\"><a href=\"#No-6-最大的奇约数\" class=\"headerlink\" title=\"No. 6 最大的奇约数\"></a>No. 6 最大的奇约数</h2><p>小易是一个数论爱好者，并且对于一个数的奇数约数十分感兴趣。一天小易遇到这样一个问题： 定义函数f(x)为x最大的奇数约数，x为正整数。 例如:f(44) = 11.<br>现在给出一个N，需要求出 f(1) + f(2) + f(3)…….f(N)<br>例如： N = 7<br>f(1) + f(2) + f(3) + f(4) + f(5) + f(6) + f(7) = 1 + 1 + 3 + 1 + 5 + 3 + 7 = 21<br>小易计算这个问题遇到了困难，需要你来设计一个算法帮助他。 </p>\n<h3 id=\"输入描述-5\"><a href=\"#输入描述-5\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入一个整数N (1 ≤ N ≤ 1000000000)</p>\n<h3 id=\"输出描述-5\"><a href=\"#输出描述-5\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一个整数，即为f(1) + f(2) + f(3)…….f(N)</p>\n<h3 id=\"输入例子-5\"><a href=\"#输入例子-5\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>7</p>\n<h3 id=\"输出例子-5\"><a href=\"#输出例子-5\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>21</p>\n<h3 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> n = sc.nextLong();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">1000000000</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> i = n; i &gt; <span class=\"number\">0</span>; i /= <span class=\"number\">2</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> temp = (i + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\tsum += temp * temp;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(sum);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-7-买苹果\"><a href=\"#No-7-买苹果\" class=\"headerlink\" title=\"No. 7 买苹果\"></a>No. 7 买苹果</h2><p>小易去附近的商店买苹果，奸诈的商贩使用了捆绑交易，只提供6个每袋和8个每袋的包装(包装不可拆分)。 可是小易现在只想购买恰好n个苹果，小易想购买尽量少的袋数方便携带。如果不能购买恰好n个苹果，小易将不会购买。 </p>\n<h3 id=\"输入描述-6\"><a href=\"#输入描述-6\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入一个整数n，表示小易想购买n(1 ≤ n ≤ 100)个苹果</p>\n<h3 id=\"输出描述-6\"><a href=\"#输出描述-6\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一个整数表示最少需要购买的袋数，如果不能买恰好n个苹果则输出-1</p>\n<h3 id=\"输入例子-6\"><a href=\"#输入例子-6\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>20</p>\n<h3 id=\"输出例子-6\"><a href=\"#输出例子-6\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>3</p>\n<h3 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">100</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\"><span class=\"comment\">//\t\tpackages(n);</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">8</span> || i == <span class=\"number\">6</span>)</div><div class=\"line\">\t\t\t\tdp[i] = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\tdp[i] = Integer.MAX_VALUE;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">6</span>; i &lt;= n; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (dp[i] == Integer.MAX_VALUE)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i + <span class=\"number\">6</span> &lt;= n)</div><div class=\"line\">\t\t\t\tdp[i+<span class=\"number\">6</span>] = Math.min(dp[i] + <span class=\"number\">1</span>, dp[i+<span class=\"number\">6</span>]);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i + <span class=\"number\">8</span> &lt;= n)</div><div class=\"line\">\t\t\t\tdp[i+<span class=\"number\">8</span>] = Math.min(dp[i] + <span class=\"number\">1</span>, dp[i+<span class=\"number\">8</span>]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (dp[n] == Integer.MAX_VALUE)</div><div class=\"line\">\t\t\tSystem.out.println(-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\tSystem.out.println(dp[n]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">packages</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n % <span class=\"number\">2</span> != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tSystem.out.println(-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n % <span class=\"number\">8</span> == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tSystem.out.println(n / <span class=\"number\">8</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n % <span class=\"number\">8</span> != <span class=\"number\">0</span>)&#123;</div><div class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.println(n / 8 + 1);</span></div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> count = n / <span class=\"number\">8</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> remain = n % <span class=\"number\">8</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (count &gt;= <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (remain % <span class=\"number\">6</span> == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(count + remain / <span class=\"number\">6</span>);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tcount -= remain % <span class=\"number\">3</span>;</div><div class=\"line\">\t\t\t\t\tremain += (remain % <span class=\"number\">3</span>) * <span class=\"number\">8</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-8-计算糖果\"><a href=\"#No-8-计算糖果\" class=\"headerlink\" title=\"No. 8 计算糖果\"></a>No. 8 计算糖果</h2><p>A,B,C三个人是好朋友,每个人手里都有一些糖果,我们不知道他们每个人手上具体有多少个糖果,但是我们知道以下的信息：<br>A - B, B - C, A + B, B + C. 这四个数值.每个字母代表每个人所拥有的糖果数.<br>现在需要通过这四个数值计算出每个人手里有多少个糖果,即A,B,C。这里保证最多只有一组整数A,B,C满足所有题设条件。</p>\n<h3 id=\"输入描述-7\"><a href=\"#输入描述-7\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>输入为一行，一共4个整数，分别为A - B，B - C，A + B，B + C，用空格隔开。<br>范围均在-30到30之间(闭区间)。</p>\n<h3 id=\"输出描述-7\"><a href=\"#输出描述-7\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出为一行，如果存在满足的整数A，B，C则按顺序输出A，B，C，用空格隔开，行末无空格。<br>如果不存在这样的整数A，B，C，则输出No</p>\n<h3 id=\"输入例子-7\"><a href=\"#输入例子-7\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>1 -2 3 4</p>\n<h3 id=\"输出例子-7\"><a href=\"#输出例子-7\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>2 1 3</p>\n<h3 id=\"代码-7\"><a href=\"#代码-7\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> j = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> m = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (i &lt; -<span class=\"number\">30</span> || i &gt; <span class=\"number\">30</span> || j &lt; -<span class=\"number\">30</span> || j &gt; <span class=\"number\">30</span> || m &lt; -<span class=\"number\">30</span> || m &gt; <span class=\"number\">30</span> || n &lt; -<span class=\"number\">30</span> || n &gt; <span class=\"number\">30</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((i + m) % <span class=\"number\">2</span> != <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"No\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> a = (i + m) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> b = m - a;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> c = b - j;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (b + c == n)</div><div class=\"line\">\t\t\tSystem.out.println(a + <span class=\"string\">\" \"</span> + b + <span class=\"string\">\" \"</span> + c);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"No\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm"],"tags":["OJ","Algorithm"]},{"title":"Algorithm from NowCoder (1)","url":"http://yoursite.com/2017/03/23/Algorithm-from-NowCoder-1/","content":"<h2 id=\"No-1-合唱团\"><a href=\"#No-1-合唱团\" class=\"headerlink\" title=\"No. 1 合唱团\"></a>No. 1 合唱团</h2><p>有 n 个学生站成一排，每个学生有一个能力值，牛牛想从这 n 个学生中按照顺序选取 k 名学生，要求相邻两个学生的位置编号的差不超过 d，使得这 k 个学生的能力值的乘积最大，你能返回最大的乘积吗？ </p>\n<h3 id=\"输入描述\"><a href=\"#输入描述\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>每个输入包含 1 个测试用例。每个测试数据的第一行包含一个整数 n (1 &lt;= n &lt;= 50)，表示学生的个数，接下来的一行，包含 n 个整数，按顺序表示每个学生的能力值 ai（-50 &lt;= ai &lt;= 50）。接下来的一行包含两个整数，k 和 d (1 &lt;= k &lt;= 10, 1 &lt;= d &lt;= 50)。</p>\n<h3 id=\"输出描述\"><a href=\"#输出描述\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一行表示最大的乘积。</p>\n<h3 id=\"输入例子\"><a href=\"#输入例子\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>3<br>7 4 7<br>2 50</p>\n<h3 id=\"输出例子\"><a href=\"#输出例子\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>49</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x &lt; -<span class=\"number\">50</span> || x &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\ta[i] = x;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> k = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> d = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (k &lt; <span class=\"number\">1</span> || k &gt; <span class=\"number\">10</span> || d &lt; <span class=\"number\">1</span> || d &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> dpMax[][] = <span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[k+<span class=\"number\">1</span>][n+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> dpMin[][] = <span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[k+<span class=\"number\">1</span>][n+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> result = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</div><div class=\"line\">\t\t\tdpMax[<span class=\"number\">1</span>][i] = a[i-<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\tdpMin[<span class=\"number\">1</span>][i] = a[i-<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> m = <span class=\"number\">2</span>; m &lt;= k; m++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i - <span class=\"number\">1</span>; j &gt;= i - d &amp;&amp; j &gt;<span class=\"number\">0</span>; j--)&#123;</div><div class=\"line\">\t\t\t\t\tdpMax[m][i] = Math.max(dpMax[m][i], Math.max(dpMax[m-<span class=\"number\">1</span>][j] * a[i-<span class=\"number\">1</span>], dpMin[m-<span class=\"number\">1</span>][j] * a[i-<span class=\"number\">1</span>]));</div><div class=\"line\">\t\t\t\t\tdpMin[m][i] = Math.min(dpMin[m][i], Math.min(dpMax[m-<span class=\"number\">1</span>][j] * a[i-<span class=\"number\">1</span>], dpMin[m-<span class=\"number\">1</span>][j] * a[i-<span class=\"number\">1</span>]));</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tresult = Math.max(result, dpMax[k][i]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(result);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-2-地牢逃脱\"><a href=\"#No-2-地牢逃脱\" class=\"headerlink\" title=\"No. 2 地牢逃脱\"></a>No. 2 地牢逃脱</h2><p>给定一个 n 行 m 列的地牢，其中 ‘.’ 表示可以通行的位置，’X’ 表示不可通行的障碍，牛牛从 (x0 , y0 ) 位置出发，遍历这个地牢，和一般的游戏所不同的是，他每一步只能按照一些指定的步长遍历地牢，要求每一步都不可以超过地牢的边界，也不能到达障碍上。地牢的出口可能在任意某个可以通行的位置上。牛牛想知道最坏情况下，他需要多少步才可以离开这个地牢。 </p>\n<h3 id=\"输入描述-1\"><a href=\"#输入描述-1\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>每个输入包含 1 个测试用例。每个测试用例的第一行包含两个整数 n 和 m（1 &lt;= n, m &lt;= 50），表示地牢的长和宽。接下来的 n 行，每行 m 个字符，描述地牢，地牢将至少包含两个 ‘.’。接下来的一行，包含两个整数 x0, y0，表示牛牛的出发位置（0 &lt;= x0 &lt; n, 0 &lt;= y0 &lt; m，左上角的坐标为 （0, 0），出发位置一定是 ‘.’）。之后的一行包含一个整数 k（0 &lt; k &lt;= 50）表示牛牛合法的步长数，接下来的 k 行，每行两个整数 dx, dy 表示每次可选择移动的行和列步长（-50 &lt;= dx, dy &lt;= 50）</p>\n<h3 id=\"输出描述-1\"><a href=\"#输出描述-1\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一行一个数字表示最坏情况下需要多少次移动可以离开地牢，如果永远无法离开，输出 -1。以下测试用例中，牛牛可以上下左右移动，在所有可通行的位置.上，地牢出口如果被设置在右下角，牛牛想离开需要移动的次数最多，为3次。</p>\n<h3 id=\"输入例子-1\"><a href=\"#输入例子-1\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>3 3<br>…<br>…<br>…<br>0 1<br>4<br>1 0<br>0 1<br>-1 0<br>0 -1</p>\n<h3 id=\"输出例子-1\"><a href=\"#输出例子-1\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>3</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Queue;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> m = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">50</span> || m &lt; <span class=\"number\">1</span> || m &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">char</span>[][] board = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[n][m];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[][] count = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n][m];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t\t\tboard[i] = sc.next().toCharArray();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> x0 = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> y0 = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> k = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x0 &lt; <span class=\"number\">0</span> || x0 &gt;= n || y0 &lt; <span class=\"number\">0</span> || y0 &gt;= m || k &lt;= <span class=\"number\">0</span> || k &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tList&lt;<span class=\"keyword\">int</span>[]&gt; steps = <span class=\"keyword\">new</span> LinkedList&lt;<span class=\"keyword\">int</span>[]&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> x = sc.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> y = sc.nextInt();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x &lt; -<span class=\"number\">50</span> || x &gt; <span class=\"number\">50</span> || y &lt; -<span class=\"number\">50</span> || y &gt; <span class=\"number\">50</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\tsteps.add(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;x, y&#125;);</div><div class=\"line\">\t\t&#125;\t</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tBFS(count, board, steps, <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;x0, y0&#125;);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (count[i][j] == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (count[i][j] != -<span class=\"number\">1</span>)</div><div class=\"line\">\t\t\t\t\tmax = Math.max(count[i][j], max);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(max - <span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">BFS</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] count, <span class=\"keyword\">char</span>[][] board, List&lt;<span class=\"keyword\">int</span>[]&gt; steps, <span class=\"keyword\">int</span>[] start)</span></span>&#123;</div><div class=\"line\">\t\tQueue&lt;<span class=\"keyword\">int</span>[]&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;<span class=\"keyword\">int</span>[]&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tcount[start[<span class=\"number\">0</span>]][start[<span class=\"number\">1</span>]] = <span class=\"number\">1</span>;</div><div class=\"line\">\t\tqueue.add(start);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (!queue.isEmpty())&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span>[] current = queue.poll();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; steps.size(); i++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> nextX = current[<span class=\"number\">0</span>]+steps.get(i)[<span class=\"number\">0</span>];</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> nextY = current[<span class=\"number\">1</span>]+steps.get(i)[<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (nextX &lt; <span class=\"number\">0</span> || nextX &gt;= board.length || nextY &lt; <span class=\"number\">0</span> || nextY&gt;= board[<span class=\"number\">0</span>].length)</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (count[nextX][nextY] == <span class=\"number\">0</span> &amp;&amp; board[nextX][nextY] == <span class=\"string\">'.'</span>)&#123;</div><div class=\"line\">\t\t\t\t\tcount[nextX][nextY] = count[current[<span class=\"number\">0</span>]][current[<span class=\"number\">1</span>]] + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\tqueue.add(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;nextX, nextY&#125;);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (board[nextX][nextY] != <span class=\"string\">'.'</span>)</div><div class=\"line\">\t\t\t\t\tcount[nextX][nextY] = -<span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t&#125;\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-3-下厨房\"><a href=\"#No-3-下厨房\" class=\"headerlink\" title=\"No. 3 下厨房\"></a>No. 3 下厨房</h2><p>牛牛想尝试一些新的料理，每个料理需要一些不同的材料，问完成所有的料理需要准备多少种不同的材料。 </p>\n<h3 id=\"输入描述-2\"><a href=\"#输入描述-2\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>每个输入包含 1 个测试用例。每个测试用例的第 i 行，表示完成第 i 件料理需要哪些材料，各个材料用空格隔开，输入只包含大写英文字母和空格，输入文件不超过 50 行，每一行不超过 50 个字符。</p>\n<h3 id=\"输出描述-2\"><a href=\"#输出描述-2\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一行一个数字表示完成所有料理需要多少种不同的材料。</p>\n<h3 id=\"输入例子-2\"><a href=\"#输入例子-2\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>BUTTER FLOUR<br>HONEY FLOUR EGG</p>\n<h3 id=\"输出例子-2\"><a href=\"#输出例子-2\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>4</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSet&lt;String&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; sc.hasNextLine() &amp;&amp; i &lt;= <span class=\"number\">50</span>; i++)&#123;</div><div class=\"line\">\t\t\tString[] strs = sc.nextLine().split(<span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (String str : strs)</div><div class=\"line\">\t\t\t\tset.add(str);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(set.size());</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-4-分田地\"><a href=\"#No-4-分田地\" class=\"headerlink\" title=\"No. 4 分田地\"></a>No. 4 分田地</h2><p>牛牛和 15 个朋友来玩打土豪分田地的游戏，牛牛决定让你来分田地，地主的田地可以看成是一个矩形，每个位置有一个价值。分割田地的方法是横竖各切三刀，分成 16 份，作为领导干部，牛牛总是会选择其中总价值最小的一份田地， 作为牛牛最好的朋友，你希望牛牛取得的田地的价值和尽可能大，你知道这个值最大可以是多少吗？ </p>\n<h3 id=\"输入描述-3\"><a href=\"#输入描述-3\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>每个输入包含 1 个测试用例。每个测试用例的第一行包含两个整数 n 和 m（1 &lt;= n, m &lt;= 75），表示田地的大小，接下来的 n 行，每行包含 m 个 0-9 之间的数字，表示每块位置的价值。</p>\n<h3 id=\"输出描述-3\"><a href=\"#输出描述-3\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一行表示牛牛所能取得的最大的价值。</p>\n<h3 id=\"输入例子-3\"><a href=\"#输入例子-3\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>4 4<br>3332<br>3233<br>3332<br>2323</p>\n<h3 id=\"输出例子-3\"><a href=\"#输出例子-3\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>2</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[][] sum;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> m = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">75</span> || m &lt; <span class=\"number\">1</span> || m &gt; <span class=\"number\">75</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tsum = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n+<span class=\"number\">1</span>][m+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</div><div class=\"line\">\t\t\tString str = sc.next();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++)</div><div class=\"line\">\t\t\t\tsum[i][j] = sum[i-<span class=\"number\">1</span>][j] + sum[i][j-<span class=\"number\">1</span>] - sum[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] + (str.charAt(j-<span class=\"number\">1</span>) - <span class=\"string\">'0'</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> right = sum[n][m];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tmax = binarySearch(left, right);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(max);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (left &lt;= right)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> middle = (left + right) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isMin(middle))&#123;</div><div class=\"line\">\t\t\t\tleft = middle + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\tmax = middle;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> </div><div class=\"line\">\t\t\t\tright = middle - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> max;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMin</span><span class=\"params\">(<span class=\"keyword\">int</span> middle)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> m = sum[<span class=\"number\">0</span>].length - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m - <span class=\"number\">3</span>; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt;= m - <span class=\"number\">2</span>; j++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = j + <span class=\"number\">1</span>; k &lt;= m - <span class=\"number\">1</span>; k++)&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> prev = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> l = <span class=\"number\">1</span>; l &lt;= sum.length - <span class=\"number\">1</span>; l++)&#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">int</span> value1 = getValue(prev, <span class=\"number\">0</span>, l, i);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">int</span> value2 = getValue(prev, i, l, j);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">int</span> value3 = getValue(prev, j, l, k);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">int</span> value4 = getValue(prev, k, l, m);</div><div class=\"line\">\t\t\t\t\t\t</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (value1 &gt;= middle &amp;&amp; value2 &gt;= middle &amp;&amp; value3 &gt;= middle &amp;&amp; value4 &gt;= middle)&#123;</div><div class=\"line\">\t\t\t\t\t\t\tcount++;</div><div class=\"line\">\t\t\t\t\t\t\tprev = l;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (count &gt;= <span class=\"number\">4</span>)</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> sum[x][y] - sum[x][j] - sum[i][y] + sum[i][j];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-5-分苹果\"><a href=\"#No-5-分苹果\" class=\"headerlink\" title=\"No. 5 分苹果\"></a>No. 5 分苹果</h2><p>n 只奶牛坐在一排，每个奶牛拥有 ai 个苹果，现在你要在它们之间转移苹果，使得最后所有奶牛拥有的苹果数都相同，每一次，你只能从一只奶牛身上拿走恰好两个苹果到另一个奶牛上，问最少需要移动多少次可以平分苹果，如果方案不存在输出 -1。</p>\n<h3 id=\"输入描述-4\"><a href=\"#输入描述-4\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>每个输入包含一个测试用例。每个测试用例的第一行包含一个整数 n（1 &lt;= n &lt;= 100），接下来的一行包含 n 个整数 ai（1 &lt;= ai &lt;= 100）。</p>\n<h3 id=\"输出描述-4\"><a href=\"#输出描述-4\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一行表示最少需要移动多少次可以平分苹果，如果方案不存在则输出 -1。</p>\n<h3 id=\"输入例子-4\"><a href=\"#输入例子-4\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>4<br>7 15 9 5</p>\n<h3 id=\"输出例子-4\"><a href=\"#输出例子-4\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>3</p>\n<h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span> || n &gt; <span class=\"number\">100</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">\t\t\ta[i] = sc.nextInt();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (a[i] &lt; <span class=\"number\">1</span> || a[i] &gt; <span class=\"number\">100</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tsum += a[i];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (sum % a.length != <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\tSystem.out.println(-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> avg = sum / a.length;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> move = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Math.abs(a[i] - avg) % <span class=\"number\">2</span> != <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (a[i] &gt; avg)</div><div class=\"line\">\t\t\t\tmove += a[i] - avg;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(move / <span class=\"number\">2</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-6-星际穿越\"><a href=\"#No-6-星际穿越\" class=\"headerlink\" title=\"No. 6 星际穿越\"></a>No. 6 星际穿越</h2><p>航天飞行器是一项复杂而又精密的仪器，飞行器的损耗主要集中在发射和降落的过程，科学家根据实验数据估计，如果在发射过程中，产生了 x 程度的损耗，那么在降落的过程中就会产生 x2 程度的损耗，如果飞船的总损耗超过了它的耐久度，飞行器就会爆炸坠毁。问一艘耐久度为 h 的飞行器，假设在飞行过程中不产生损耗，那么为了保证其可以安全的到达目的地，只考虑整数解，至多发射过程中可以承受多少程度的损耗？ </p>\n<h3 id=\"输入描述-5\"><a href=\"#输入描述-5\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>每个输入包含一个测试用例。每个测试用例包含一行一个整数 h （1 &lt;= h &lt;= 10^18）。</p>\n<h3 id=\"输出描述-5\"><a href=\"#输出描述-5\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一行一个整数表示结果。</p>\n<h3 id=\"输入例子-5\"><a href=\"#输入例子-5\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>10</p>\n<h3 id=\"输出例子-5\"><a href=\"#输出例子-5\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>2</p>\n<h3 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> h = sc.nextLong();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (h &lt; <span class=\"number\">0</span> || h &gt; Math.pow(<span class=\"number\">10</span>, <span class=\"number\">18</span>))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> x = (<span class=\"keyword\">long</span>) Math.sqrt(h);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (; x &gt;= <span class=\"number\">0</span>; x--)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x * x + x &lt;= h)&#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(x);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-7-藏宝图\"><a href=\"#No-7-藏宝图\" class=\"headerlink\" title=\"No. 7 藏宝图\"></a>No. 7 藏宝图</h2><p>牛牛拿到了一个藏宝图，顺着藏宝图的指示，牛牛发现了一个藏宝盒，藏宝盒上有一个机关，机关每次会显示两个字符串 s 和 t，根据古老的传说，牛牛需要每次都回答 t 是否是 s 的子序列。注意，子序列不要求在原字符串中是连续的，例如串 abc，它的子序列就有 {空串, a, b, c, ab, ac, bc, abc} 8 种。 </p>\n<h3 id=\"输入描述-6\"><a href=\"#输入描述-6\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>每个输入包含一个测试用例。每个测试用例包含两行长度不超过 10 的不包含空格的可见 ASCII 字符串。</p>\n<h3 id=\"输出描述-6\"><a href=\"#输出描述-6\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一行 “Yes” 或者 “No” 表示结果。</p>\n<h3 id=\"输入例子-6\"><a href=\"#输入例子-6\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>x.nowcoder.com<br>ooo</p>\n<h3 id=\"输出例子-6\"><a href=\"#输出例子-6\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>Yes</p>\n<h3 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tString s = sc.nextLine();</div><div class=\"line\">\t\tString t = sc.nextLine();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span> || t == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"No\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (; i &lt; t.length() &amp;&amp; j &lt; s.length(); j++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (t.charAt(i) == s.charAt(j))</div><div class=\"line\">\t\t\t\ti++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (i == t.length())</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Yes\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> </div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"No\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"No-8-数列还原\"><a href=\"#No-8-数列还原\" class=\"headerlink\" title=\"No. 8 数列还原\"></a>No. 8 数列还原</h2><p>牛牛的作业薄上有一个长度为 n 的排列 A，这个排列包含了从1到n的n个数，但是因为一些原因，其中有一些位置（不超过 10 个）看不清了，但是牛牛记得这个数列顺序对的数量是 k，顺序对是指满足 i &lt; j 且 A[i] &lt; A[j] 的对数，请帮助牛牛计算出，符合这个要求的合法排列的数目。 </p>\n<h3 id=\"输入描述-7\"><a href=\"#输入描述-7\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h3><p>每个输入包含一个测试用例。每个测试用例的第一行包含两个整数 n 和 k（1 &lt;= n &lt;= 100, 0 &lt;= k &lt;= 1000000000），接下来的 1 行，包含 n 个数字表示排列 A，其中等于0的项表示看不清的位置（不超过 10 个）。</p>\n<h3 id=\"输出描述-7\"><a href=\"#输出描述-7\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h3><p>输出一行表示合法的排列数目。</p>\n<h3 id=\"输入例子-7\"><a href=\"#输入例子-7\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><p>5 5<br>4 0 0 2 0</p>\n<h3 id=\"输出例子-7\"><a href=\"#输出例子-7\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><p>2</p>\n<h3 id=\"代码-7\"><a href=\"#代码-7\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> k = sc.nextInt();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || n &gt; <span class=\"number\">100</span> || k &lt; <span class=\"number\">0</span> || k &gt; <span class=\"number\">1000000000</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tArrayList&lt;Integer&gt; a = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t\t\ta.add(sc.nextInt());</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tArrayList&lt;Integer&gt; number = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div><div class=\"line\">\t\tArrayList&lt;Integer&gt; copy = (ArrayList&lt;Integer&gt;) a.clone();</div><div class=\"line\">\t\tList&lt;ArrayList&lt;Integer&gt;&gt; perms = <span class=\"keyword\">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!a.contains(i))</div><div class=\"line\">\t\t\t\tnumber.add(i);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tpermutation(perms, number, <span class=\"number\">0</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (ArrayList&lt;Integer&gt; perm : perms)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.size(); i++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (a.get(i) == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\t\tcopy.set(i, perm.get(index));</div><div class=\"line\">\t\t\t\t\tindex++;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> pairs = calculatePairs(copy);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (pairs == k)</div><div class=\"line\">\t\t\t\tcount++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(count);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">permutation</span><span class=\"params\">(List&lt;ArrayList&lt;Integer&gt;&gt; perm, ArrayList&lt;Integer&gt; number, <span class=\"keyword\">int</span> index)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (index == number.size())</div><div class=\"line\">\t\t\tperm.add(<span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;(number));</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = index; i &lt; number.size(); i++)&#123;</div><div class=\"line\">\t\t\t\tCollections.swap(number, i, index);</div><div class=\"line\">\t\t\t\tpermutation(perm, number, index + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\tCollections.swap(number, i, index);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculatePairs</span><span class=\"params\">(ArrayList&lt;Integer&gt; a)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> pairs = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.size() - <span class=\"number\">1</span>; i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; a.size(); j++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (a.get(i) &lt; a.get(j))</div><div class=\"line\">\t\t\t\t\tpairs++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> pairs;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["Algorithm"],"tags":["OJ","Algorithm"]},{"title":"DL Intro","url":"http://yoursite.com/2017/03/20/DL-Intro/","content":"<p>A brief introduction about deep learning, which will cover models, libraries and so on.</p>\n<h2 id=\"Deep-Learning-Models\"><a href=\"#Deep-Learning-Models\" class=\"headerlink\" title=\"Deep Learning Models\"></a>Deep Learning Models</h2><ol>\n<li>Restricted Boltzmann Machine (RBM)</li>\n<li>Deep Belief Network (DBN)</li>\n<li>Convolutional Neural Net</li>\n<li>Recurrent Nets<ul>\n<li>Gating units (LSTM, GRU)</li>\n<li>Gradient clipping</li>\n<li>Steeper gates</li>\n<li>Better optimizers</li>\n</ul>\n</li>\n<li>Autoencoders</li>\n<li>Recursive Neural Tensor Nets</li>\n</ol>\n<h2 id=\"Use-Cases\"><a href=\"#Use-Cases\" class=\"headerlink\" title=\"Use Cases\"></a>Use Cases</h2><ol>\n<li>Machine Vision<ul>\n<li>Image Classification</li>\n<li>Object Recognition: <a href=\"https://www.clarifai.com\" target=\"_blank\" rel=\"external\">clarifai</a></li>\n<li>Video Recognition</li>\n</ul>\n</li>\n<li>Speech Recognition</li>\n<li>Text Processing<ul>\n<li>Fact Extraction</li>\n<li>Machine Translation</li>\n<li>Sentiment Analysis: metamind</li>\n<li>Character level text processing</li>\n</ul>\n</li>\n<li>Medical<ul>\n<li>Cancer detection</li>\n<li>Drug discovery</li>\n<li>Radiology</li>\n</ul>\n</li>\n<li>Finance</li>\n<li>Digital advertising</li>\n<li>Fraud detection</li>\n<li>Customer intel</li>\n</ol>\n<h2 id=\"How-to-choose-a-deep-net\"><a href=\"#How-to-choose-a-deep-net\" class=\"headerlink\" title=\"How to choose a deep net ?\"></a>How to choose a deep net ?</h2><h3 id=\"Unlabelled\"><a href=\"#Unlabelled\" class=\"headerlink\" title=\"Unlabelled\"></a>Unlabelled</h3><p>Feature Extraction<br>Unsupervised Learning<br>Pattern Recognition</p>\n<ol>\n<li>RBM</li>\n<li>Autoencoders</li>\n</ol>\n<h3 id=\"Labelled\"><a href=\"#Labelled\" class=\"headerlink\" title=\"Labelled\"></a>Labelled</h3><ol>\n<li>Text Processing: RNTN, Recurrent Net</li>\n<li>Image Recognition: DBN, Convolutional Net</li>\n<li>Object Recognition: RNTN, Convolutional Net</li>\n<li>Speech Recognition: Recurrent Net</li>\n</ol>\n<h3 id=\"General\"><a href=\"#General\" class=\"headerlink\" title=\"General\"></a>General</h3><ol>\n<li>Classification: MLP/RELU, Deep Belief Net</li>\n<li>Time Series Analysis: Recurrent Net</li>\n</ol>\n<h2 id=\"Deep-Net-Platform\"><a href=\"#Deep-Net-Platform\" class=\"headerlink\" title=\"Deep Net Platform\"></a>Deep Net Platform</h2><p>Deep Net Capability<br>Data Munging<br>UI/Model Management<br>Infrastructure</p>\n<h3 id=\"Pros-amp-Cons\"><a href=\"#Pros-amp-Cons\" class=\"headerlink\" title=\"Pros &amp; Cons\"></a>Pros &amp; Cons</h3><ul>\n<li>Pros: Hyper-parameter configuration through UI, no need to learn to code</li>\n<li>Cons: Constrained by platform functionality</li>\n</ul>\n<h3 id=\"Platforms\"><a href=\"#Platforms\" class=\"headerlink\" title=\"Platforms\"></a>Platforms</h3><ol>\n<li><a href=\"http://www.h2o.ai\" target=\"_blank\" rel=\"external\">H2O.ai</a></li>\n<li><a href=\"https://turi.com\" target=\"_blank\" rel=\"external\">Dato GraphLab Create</a></li>\n</ol>\n<h2 id=\"Deep-Learning-Libraries\"><a href=\"#Deep-Learning-Libraries\" class=\"headerlink\" title=\"Deep Learning Libraries\"></a>Deep Learning Libraries</h2><h3 id=\"Pros-amp-Cons-1\"><a href=\"#Pros-amp-Cons-1\" class=\"headerlink\" title=\"Pros &amp; Cons\"></a>Pros &amp; Cons</h3><ul>\n<li>Pros: Increased flexibility and options</li>\n<li>Cons: Need to know code</li>\n</ul>\n<h3 id=\"Libraries\"><a href=\"#Libraries\" class=\"headerlink\" title=\"Libraries\"></a>Libraries</h3><ol>\n<li>Theano<ul>\n<li>Python Library</li>\n<li>Libraries: Blocks, Lasagne/Keras, Passage</li>\n</ul>\n</li>\n<li>Deeplearning4j<ul>\n<li>Features: Canova</li>\n<li>Iterative Map-Reduce</li>\n</ul>\n</li>\n<li>Torch<ul>\n<li>LuaJIT Library</li>\n<li>Hyper-parameter Config</li>\n<li>Extensions: CuTorch, NN, Cephes, DP, NNGraph</li>\n</ul>\n</li>\n<li>Caffe<ul>\n<li>C++ Library, Matlab/Python Interface</li>\n<li>Features: Hyper-parameter Config, Model Zoo</li>\n<li>Performance: Vectorization through blobs</li>\n</ul>\n</li>\n<li>TensorFlow<ul>\n<li>Computational Graph</li>\n<li>Variables, Sub-expressions, Differentiation</li>\n<li>Data Parallelism, Model Parallelism</li>\n<li>OpenCL</li>\n<li>TensorBoard</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Configure-a-Deep-Net\"><a href=\"#Configure-a-Deep-Net\" class=\"headerlink\" title=\"Configure a Deep Net\"></a>Configure a Deep Net</h2><ol>\n<li>Layers<ul>\n<li>Input Layer</li>\n<li>Convolution / Pooling</li>\n<li>Matrix operations</li>\n<li>Output Layer</li>\n</ul>\n</li>\n<li>Neurons<ul>\n<li>Growing</li>\n<li>Pruning</li>\n</ul>\n</li>\n<li>Activations: Sigmoid, Tanh, ReLU</li>\n<li>Regularization</li>\n<li>Gating</li>\n<li>Learning Rate: Adagrad, RMSprop, Adadelta</li>\n<li>Initialization</li>\n<li>Training Time: raise the number of training epochs</li>\n</ol>\n<h2 id=\"How-good-is-your-fit\"><a href=\"#How-good-is-your-fit\" class=\"headerlink\" title=\"How good is your fit ?\"></a>How good is your fit ?</h2><ol>\n<li>Underfitting</li>\n<li>Overfitting<ul>\n<li>3 Way Data Split</li>\n<li>Regularization</li>\n<li>Max Norm Constraints</li>\n<li>Dropout </li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Metrics\"><a href=\"#Metrics\" class=\"headerlink\" title=\"Metrics\"></a>Metrics</h2><p>F1 score</p>\n<h3 id=\"Confusion-Matrix\"><a href=\"#Confusion-Matrix\" class=\"headerlink\" title=\"Confusion Matrix\"></a>Confusion Matrix</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">Predicted True</th>\n<th style=\"text-align:center\">Predicted False</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Actual True</td>\n<td style=\"text-align:center\">TP</td>\n<td style=\"text-align:center\">FN</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Actual False</td>\n<td style=\"text-align:center\">FP</td>\n<td style=\"text-align:center\">TN</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Recall\"><a href=\"#Recall\" class=\"headerlink\" title=\"Recall\"></a>Recall</h3><p>TP / (TP + FN)</p>\n<h3 id=\"Precision\"><a href=\"#Precision\" class=\"headerlink\" title=\"Precision\"></a>Precision</h3><p>TP / (TP + FP)</p>\n<h2 id=\"Performance\"><a href=\"#Performance\" class=\"headerlink\" title=\"Performance\"></a>Performance</h2><h3 id=\"Hardware-level\"><a href=\"#Hardware-level\" class=\"headerlink\" title=\"Hardware level\"></a>Hardware level</h3><p>Parallel processing</p>\n<ul>\n<li>Shared memory: GPU, FPGA, ASIC</li>\n<li>Distributed computing: data parallelism, model parallelism, pipeline parallelism</li>\n</ul>\n<h3 id=\"Software-level\"><a href=\"#Software-level\" class=\"headerlink\" title=\"Software level\"></a>Software level</h3><p>Parallel programming</p>\n<ul>\n<li>Model</li>\n<li>Algorithm</li>\n<li>Implementation</li>\n</ul>\n<h2 id=\"NLP\"><a href=\"#NLP\" class=\"headerlink\" title=\"NLP\"></a>NLP</h2><p>Lemmatization<br>Named Entity Recognition<br>Part of Speech Tagging<br>Syntactic Parsing<br>Fact Extraction<br>Sentiment Analysis<br>Machine Translation</p>\n<h3 id=\"Models-to-solve-the-problem-of-One-Hot-Vector\"><a href=\"#Models-to-solve-the-problem-of-One-Hot-Vector\" class=\"headerlink\" title=\"Models to solve the problem of One-Hot Vector\"></a>Models to solve the problem of One-Hot Vector</h3><ol>\n<li>Continuous Bag of Words</li>\n<li>Skip grams</li>\n</ol>\n<h3 id=\"Tools-for-converting-words-to-vectors\"><a href=\"#Tools-for-converting-words-to-vectors\" class=\"headerlink\" title=\"Tools for converting words to vectors\"></a>Tools for converting words to vectors</h3><ol>\n<li>word2vec</li>\n<li>GloVe</li>\n</ol>\n<h2 id=\"Applications\"><a href=\"#Applications\" class=\"headerlink\" title=\"Applications\"></a>Applications</h2><ol>\n<li>Fashion Matching with Indico<ul>\n<li>Transfer Learning</li>\n<li>Custom Collection API</li>\n</ul>\n</li>\n<li>Neural Storyteller with Somatic<ul>\n<li>skip-thought model</li>\n<li>MSCOCO Dataset, Book Corpus</li>\n</ul>\n</li>\n<li>Inceptionism with Somatic<ul>\n<li>Generation</li>\n<li>Convolutional Nets</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Reinforcement-Learning\"><a href=\"#Reinforcement-Learning\" class=\"headerlink\" title=\"Reinforcement Learning\"></a>Reinforcement Learning</h2><p>Explore a tradeoff between exploration and exploitation and choose a path to maximum the expected reward</p>\n<ul>\n<li>High score</li>\n<li>Follow rules: + points</li>\n<li>Break rules: - points</li>\n</ul>\n<ol>\n<li>Deep Atari<ul>\n<li>Regression</li>\n<li>No pooling</li>\n</ul>\n</li>\n<li>Deep Q Net (DQN)</li>\n</ol>\n","categories":["Deep Learning"],"tags":["Deep Learning"]},{"title":"Torch Demo","url":"http://yoursite.com/2017/03/18/Torch-Demo/","content":"<p>We have <strong><em>5 steps</em></strong> to do in training a torch neural network.</p>\n<blockquote><p><em>(1) Load and normalize data; </em><br><em>(2) Define Neural Network; </em><br><em>(3) Define Loss function; </em><br><em>(4) Train network on training data; </em><br><em>(5) Test network on test data. </em></p>\n<footer><strong>Tutorial</strong><cite><a href=\"https://github.com/soumith/cvpr2015/blob/master/Deep%20Learning%20with%20Torch.ipynb\" target=\"_blank\" rel=\"external\">cvpr2015/Deep Learning with Torch.ipynb</a></cite></footer></blockquote>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">'paths'</span></div><div class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">'nn'</span></div><div class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">'torch'</span></div><div class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">'cunn'</span></div><div class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">'cutorch'</span></div></pre></td></tr></table></figure>\n<h3 id=\"Load-and-normalize-data\"><a href=\"#Load-and-normalize-data\" class=\"headerlink\" title=\"Load and normalize data\"></a>Load and normalize data</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">not</span> paths.filep(<span class=\"string\">\"cifar10torchsmall.zip\"</span>)) <span class=\"keyword\">then</span></div><div class=\"line\">    os.execute(<span class=\"string\">'wget -c https://s3.amazonaws.com/torch7/data/cifar10torchsmall.zip'</span>)</div><div class=\"line\">    os.execute(<span class=\"string\">'unzip cifar10torchsmall.zip'</span>)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">trainset = torch.<span class=\"built_in\">load</span>(<span class=\"string\">'cifar10-train.t7'</span>)</div><div class=\"line\">testset = torch.<span class=\"built_in\">load</span>(<span class=\"string\">'cifar10-test.t7'</span>)</div><div class=\"line\">classes = &#123;<span class=\"string\">'airplane'</span>, <span class=\"string\">'automobile'</span>, <span class=\"string\">'bird'</span>, <span class=\"string\">'cat'</span>,</div><div class=\"line\">           <span class=\"string\">'deer'</span>, <span class=\"string\">'dog'</span>, <span class=\"string\">'frog'</span>, <span class=\"string\">'horse'</span>, <span class=\"string\">'ship'</span>, <span class=\"string\">'truck'</span>&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">setmetatable</span>(trainset,</div><div class=\"line\">    &#123;<span class=\"built_in\">__index</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(t, i)</span></span></div><div class=\"line\">                   <span class=\"keyword\">return</span> &#123;t.data[i], t.label[i]&#125;</div><div class=\"line\">               <span class=\"keyword\">end</span>&#125;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trainset:size</span><span class=\"params\">()</span></span></div><div class=\"line\">    <span class=\"keyword\">return</span> self.data:size(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">trainset.data = trainset.data:double()</div><div class=\"line\">testset.data = testset.data:double()</div><div class=\"line\"></div><div class=\"line\">mean = &#123;&#125;</div><div class=\"line\">stdv  = &#123;&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1</span>,<span class=\"number\">3</span> <span class=\"keyword\">do</span></div><div class=\"line\">    mean[i] = trainset.data[&#123; &#123;&#125;, &#123;i&#125;, &#123;&#125;, &#123;&#125;  &#125;]:mean()</div><div class=\"line\">    <span class=\"comment\">--print('Channel ' .. i .. ', Mean: ' .. mean[i])</span></div><div class=\"line\">    trainset.data[&#123; &#123;&#125;, &#123;i&#125;, &#123;&#125;, &#123;&#125;  &#125;]:add(-mean[i])   </div><div class=\"line\">    stdv[i] = trainset.data[&#123; &#123;&#125;, &#123;i&#125;, &#123;&#125;, &#123;&#125;  &#125;]:std()</div><div class=\"line\">    <span class=\"comment\">--print('Channel ' .. i .. ', Standard Deviation: ' .. stdv[i])</span></div><div class=\"line\">    trainset.data[&#123; &#123;&#125;, &#123;i&#125;, &#123;&#125;, &#123;&#125;  &#125;]:div(stdv[i])</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1</span>,<span class=\"number\">3</span> <span class=\"keyword\">do</span></div><div class=\"line\">     testset.data[&#123; &#123;&#125;, &#123;i&#125;, &#123;&#125;, &#123;&#125; &#125;]:add(-mean[i])</div><div class=\"line\">     testset.data[&#123; &#123;&#125;, &#123;i&#125;, &#123;&#125;, &#123;&#125; &#125;]:div(stdv[i])</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<h3 id=\"Define-neural-network\"><a href=\"#Define-neural-network\" class=\"headerlink\" title=\"Define neural network\"></a>Define neural network</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">net = nn.Sequential()</div><div class=\"line\">net:add(nn.SpatialConvolution(<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>)) <span class=\"comment\">-- 3 input image channels, 6 output channels, 5x5 convolution kernel</span></div><div class=\"line\">net:add(nn.ReLU())                         <span class=\"comment\">-- non-linearity</span></div><div class=\"line\">net:add(nn.SpatialMaxPooling(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>))     <span class=\"comment\">-- A max-pooling operation that looks at 2x2 windows and finds the max.</span></div><div class=\"line\">net:add(nn.SpatialConvolution(<span class=\"number\">6</span>, <span class=\"number\">16</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>))</div><div class=\"line\">net:add(nn.ReLU())                         <span class=\"comment\">-- non-linearity</span></div><div class=\"line\">net:add(nn.SpatialMaxPooling(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>))</div><div class=\"line\">net:add(nn.View(<span class=\"number\">16</span>*<span class=\"number\">5</span>*<span class=\"number\">5</span>))                   <span class=\"comment\">-- reshapes from a 3D tensor of 16x5x5 into 1D tensor of 16*5*5</span></div><div class=\"line\">net:add(nn.Linear(<span class=\"number\">16</span>*<span class=\"number\">5</span>*<span class=\"number\">5</span>, <span class=\"number\">120</span>))            <span class=\"comment\">-- fully connected layer (matrix multiplication between input and weights)</span></div><div class=\"line\">net:add(nn.ReLU())                         <span class=\"comment\">-- non-linearity</span></div><div class=\"line\">net:add(nn.Linear(<span class=\"number\">120</span>, <span class=\"number\">84</span>))</div><div class=\"line\">net:add(nn.ReLU())                         <span class=\"comment\">-- non-linearity</span></div><div class=\"line\">net:add(nn.Linear(<span class=\"number\">84</span>, <span class=\"number\">10</span>))                 <span class=\"comment\">-- 10 is the number of outputs of the network (in this case, 10 digits)</span></div><div class=\"line\">net:add(nn.LogSoftMax())                   <span class=\"comment\">-- converts the output to a log-probability. Useful for classification problems</span></div></pre></td></tr></table></figure>\n<h3 id=\"Define-the-Loss-function\"><a href=\"#Define-the-Loss-function\" class=\"headerlink\" title=\"Define the Loss function\"></a>Define the Loss function</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">criterion = nn.ClassNLLCriterion()</div></pre></td></tr></table></figure>\n<h3 id=\"Train-the-neural-network\"><a href=\"#Train-the-neural-network\" class=\"headerlink\" title=\"Train the neural network\"></a>Train the neural network</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">trainer = nn.StochasticGradient(net, criterion)</div><div class=\"line\">trainer.learningRate = <span class=\"number\">0.001</span></div><div class=\"line\">trainer.maxIteration = <span class=\"number\">5</span></div><div class=\"line\">trainer:train(trainset)</div></pre></td></tr></table></figure>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">-- train on GPU</span></div><div class=\"line\">net = net:cuda()</div><div class=\"line\">criterion = criterion:cuda()</div><div class=\"line\">trainset.data = trainset.data:cuda()</div><div class=\"line\">trainset.label = trainset.label:cuda()</div><div class=\"line\">testset.data = testset.data:cuda()</div><div class=\"line\">testset.label = testset.label:cuda()</div></pre></td></tr></table></figure>\n<h3 id=\"Test-the-network-print-accuracy\"><a href=\"#Test-the-network-print-accuracy\" class=\"headerlink\" title=\"Test the network, print accuracy\"></a>Test the network, print accuracy</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">correct = <span class=\"number\">0</span></div><div class=\"line\">class_performance = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1</span>,<span class=\"number\">10000</span> <span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"keyword\">local</span> groundtruth = testset.label[i]</div><div class=\"line\">    <span class=\"keyword\">local</span> prediction = net:forward(testset.data[i])</div><div class=\"line\">    <span class=\"keyword\">local</span> confidences, indices = torch.sort(prediction, <span class=\"literal\">true</span>)  <span class=\"comment\">-- true means sort in descending order</span></div><div class=\"line\">    <span class=\"keyword\">if</span> groundtruth == indices[<span class=\"number\">1</span>] <span class=\"keyword\">then</span></div><div class=\"line\">        correct = correct + <span class=\"number\">1</span></div><div class=\"line\">        class_performance[groundtruth] = class_performance[groundtruth] + <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span>(correct, <span class=\"number\">100</span>*correct/<span class=\"number\">10000</span> .. <span class=\"string\">\" % \"</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1</span>,#classes <span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"built_in\">print</span>(classes[i], <span class=\"number\">100</span>*class_performance[i]/<span class=\"number\">1000</span> .. <span class=\"string\">' %'</span>)</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<h2 id=\"Result\"><a href=\"#Result\" class=\"headerlink\" title=\"Result\"></a>Result</h2><p>It’ll take around 30 minutes to get the result on CPU. However, it’ll cost less than 10 minutes on GPU.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">th filename.lua</div></pre></td></tr></table></figure>\n<h3 id=\"On-CPU\"><a href=\"#On-CPU\" class=\"headerlink\" title=\"On CPU\"></a>On CPU</h3><p><img src=\"http://p1.bqimg.com/4851/2292e852a2790f62.png\" alt=\"cpu\"></p>\n<h3 id=\"On-GPU\"><a href=\"#On-GPU\" class=\"headerlink\" title=\"On GPU\"></a>On GPU</h3><p><img src=\"http://p1.bqimg.com/4851/d63d92b0f0d14405.png\" alt=\"gpu\"></p>\n","categories":["Deep Learning","Torch"],"tags":["Deep Learning","Torch"]},{"title":"Hello World","url":"http://yoursite.com/2017/03/17/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","categories":[],"tags":[]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"<p>I’m a postgraduate student in the School of Software Engineering at Tongji University.<br>I’m mainly interested in deep learning, especially applied to computer vision.</p>\n<p><a href=\"/files/MaTianyao_CV.pdf\">Download my resume!</a></p>\n","categories":[],"tags":[]},{"title":"categories","url":"http://yoursite.com/categories/index.html","content":"","categories":[],"tags":[]},{"title":"tags","url":"http://yoursite.com/tags/index.html","content":"","categories":[],"tags":[]}]